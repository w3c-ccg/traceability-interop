{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b2d83d33-d326-4f28-845f-4df9cc224171",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4c97666a-b427-444d-9592-4bfe9da5fa50",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9042798b-8b77-4f2b-8316-549adcad244c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cb4e5a39-ab27-4943-abd0-2f24c48b2b36"
                }
              }
            ]
          },
          {
            "id": "d77193f5-f962-493b-b538-978ade164d1e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b61c4294-13e2-4872-8ff2-78d3f1f83341",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4a5f4f8a-5c37-41d4-bdee-53ec121c7e39"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d9743911-9dff-4bd4-9a44-68eba644ffdb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2269b017-9d16-4f83-bef0-48452b6d7953",
            "name": "Positive Testing",
            "item": [
              {
                "id": "41263a4a-091f-492e-aa75-1b06c42f04f7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac228c13-2fcc-454f-b748-d77a97282481",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "22567f1a-cb4f-4aab-b789-7db851fd31ba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dfe23ce3-a1d9-4a34-8700-97d2c0dcb640",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "616c3fcf-39ba-46a8-b00a-2433a48176eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e93665f4-706a-4a61-8f65-59fe204de764",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b47db67-bee7-4e9c-bd00-6db1be1ecf0a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d181d13-9cc2-4a7a-a1ee-2bf525d22194",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c7a98e17-a1d9-4b83-a7f8-b9d14a9f35da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b6946c7-eeec-4696-832f-7ef1ed21a5c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "382c447c-dfbf-452a-9e33-bc4aec17ed94"
            }
          }
        ]
      },
      {
        "id": "028530c5-7e0c-459e-8ebb-9969034779e0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "027fd188-0373-4991-b9a1-9d5a3fe19044",
            "name": "Negative Testing",
            "item": [
              {
                "id": "120edae4-dd25-4bbb-8059-938578cc092d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5413ad02-2cd6-4b38-9ff0-7fdbca13ca8b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b57f6e-73b0-4d2b-a3b1-914cca49a323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "621d4e24-da6b-42d0-a35c-6baadd941ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b47eae8-f6d4-4042-a3b7-007cfa620245",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7eb155f-fe71-4919-8f5b-a2160a177936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "240378ab-f529-4bc5-bd0f-58c6bf43ae87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ceb6ff1-02ed-4b90-b818-c5f31249757a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389adc22-7fef-435f-b1f1-1c5f81878a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bce07773-ba68-41c9-bfad-12e465183df0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9fae828-6870-4d2d-9a4f-403e078790bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04d982e0-4f40-4891-8541-5d0c7b82b789",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8649e570-d09c-42d1-a615-91fe59914d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0de77535-3f63-41f8-8fa1-c4dd13dd0779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068f42d3-e432-4944-bb94-26814e83bd1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec830f5-208f-4703-a741-00894641066e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7f0f4124-86ca-4dbf-859c-539defa611fd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c1543899-acf9-46f7-bb3d-d522a9721b9a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3b0656c-153e-45cf-9042-be6d4ebe4785",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "87b4eedb-fb8e-4488-9bb9-cca4776a5ffd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0ac01b1-70bd-40ec-a378-d04cf4cfc828",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3a3c49c4-d3aa-4c00-bd08-8251b24b8386"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "483317c5-2125-49e7-9400-b4c02c8fde37",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c114f91-df06-4a9b-9aad-22e2a91c95a9"
            }
          }
        ]
      },
      {
        "id": "6af086dc-5ca2-43d9-a2f0-98bf74937fac",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f9ec3d6d-f6f4-4ad2-b83d-63020e6dcb68",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c8128ae-9e67-4476-8116-63b131b53c08",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "84decbca-a958-4e13-af3e-cb3a543690de",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bde75b3-b879-41ea-b167-02c25281c168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dff7c7-18e1-45ce-88e6-6587e9164ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386ce8e9-27ce-4e32-b019-575c15fc0a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b60ebe27-f1fa-4aac-ae18-af39701acab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9388ce22-c5f7-4775-996d-5adff6763c53",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8d76e4-c09c-4a5d-8abb-278333684ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b730c62-7c6b-434c-b2e2-71e92d0425e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd54edf-330e-47d7-b496-869941cff421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eefc4b29-f477-4e02-b299-b9e78f192561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce23bb57-988d-46ca-a8b7-666e41c7affd",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a652689-6a2e-47b3-8eae-10bb98e855be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb1aaf1-2479-43ba-93a3-74d28e995885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52d6b8a-c576-4e59-9263-5d85dded2088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3679a2b6-3828-4c0e-9147-45fe8afb0f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58765c72-45b7-4da4-8849-5dd827d0c2ec",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e91045-32c0-450b-9db3-3b077cb06749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d04842f-2457-4ee9-ae14-a338e924c17a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea34d05-7604-4f1f-a0cf-b26ad320f44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a63034ed-d40f-4b09-8aab-ce90069ab19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932fc66d-1340-4ce3-a518-f58eebbe8a2a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a71b518-0446-4c33-afaf-c932e65762ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8a18dd-91e4-4e4f-8e93-b6d551ad8914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44dedd67-ceef-45c1-87ef-25c2ba1ba98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc358783-5c34-4850-91be-3330d927ee60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4e69e9-55db-4915-b14a-249dba5d7e5d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06427f24-f9a2-454b-b6c4-31d4b0437c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ba9d48-e232-4a50-bfd5-2d4fc83d1019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a4bb87-a36e-4cf0-b666-e5580adcff27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3de508f-3f74-4060-ac3c-e251d1aab109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3488d43-10da-4262-9caf-ff821fd4227e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db985a3-a412-450b-a115-03b778ac0e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "366a48b9-698f-4910-9b59-3fab49e10c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2c5a1a-fa66-4191-9bf4-c3d15f3b0ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9791daf-935a-46e2-a328-678168c42cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2aeadeb-f342-496e-90f6-6459aea18e6e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664e1a9e-fc31-42e0-a34f-ef341e5fca82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254fb482-80a8-4d53-b32e-418e7e099ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4678f5a-3460-4e9e-960b-058c49a7f336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0aba4ec8-c461-4b9b-922c-f86e391c7755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e306b991-9445-4917-b72c-cc7fa3f722dd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e913f20-6049-474a-a021-899b7d222efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8aaa29-89bc-4d28-96f8-af694c3c3543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91026a6-83db-4a04-bd77-e73569442c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a47b2069-09b5-4a6a-a1ca-b9cddedcc30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1572c7d8-256b-493f-899f-08138f6a00cf",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0712c24f-b5dc-4b68-bf60-2c6332017403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36160681-a926-4c09-bbac-25792fc07b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7dc42e-9061-4a02-b485-35986080430e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d95d7e7-deda-48a0-906b-62cff858fa8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139969b0-3c37-447f-bc77-140011e9c8c5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5529ea34-c716-4c57-b0b3-2215f28003af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb48880e-f650-4eb3-ad1e-fe0890961c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78de214f-1ef0-4005-90aa-1b63cbe152ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12f6e246-e7ac-45ce-adab-e691157c6e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cc117d-c3ea-49f5-a2a8-39103950ad6e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afda426-720f-4e91-b329-2082e04c7b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2c9be0-68e5-43ea-ac4e-bc852b313a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acac495d-a6c6-4e0d-b1d4-292410317b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4fa1039-ff66-44c3-8057-8796d007a4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c39484-0af1-4a1f-ad67-12eafa38d8bc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17792c0a-5fb5-4e4b-88e1-78be317ebd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3542403b-b14d-4fe4-a569-ccdc1724fed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9318213-4745-4b90-8c0f-dcf2e6fa7c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b894663b-5d6a-471a-b5a1-d0e98ef18fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23e30dc-070b-49b8-afc4-c8ad2417ab58",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2813cb23-d02f-4dfb-9a1e-c9b54aa6f732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c62e7bc-b976-4624-9764-f553b12cf7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de254278-37ba-4f62-8055-49a12b5f5da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c391c1a2-49cd-4054-91e2-1d750bf2c65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba192f8-0d68-4819-a26d-bd740eace90b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb5f144-4afb-4af5-8588-7617c5be1d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce37966-460c-4a7e-8485-5ebe1a311085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e716e856-53cb-4fa7-b715-869733e39f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97ca4d19-ce24-4623-822f-8c7ca6e164bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca0b502-f394-4588-9ae4-08f32e5b571c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a793140-ed39-4f23-adc6-6ab4d93220d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c80f7c2-8b44-4420-8b14-c313d77b8bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e915e3e-ef68-45a6-80ce-070f7e821d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cccd460f-a158-4437-a216-62f2704a66b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e5dd2a-113a-4390-bd3d-10bceb5425c0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5579fe-d675-41e9-90d9-95f32b466026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e92749e0-e881-402b-a42d-f1e77264652f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2ceffd-fb70-41f7-962f-5e18e2d12039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "186d3245-ea08-4db2-b53b-7c9c4a36613b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4b14dd-d184-44cc-810a-93a518e11ec4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596af678-77f3-4971-ba3e-218c776206cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d749aa7-943a-4d99-9380-3c3c1ac4745e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58c2e7f-bc33-4b60-9c33-e12daba8c813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "13217934-a2ac-4ef1-a543-48b8f883e383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6f61ae-6093-497b-996f-b233af8f1a10",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7468cd61-a27a-472e-83ff-851b5eb49096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ddc908-89ae-4857-b817-4e9ed8e0eb4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c308f2dc-ff67-47e9-9dfe-e3b605216e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91bb27a8-6edb-4a10-9692-8ece7d88f12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c4aecf-dc4f-4ebe-9194-c8cc276aab7d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2135f318-b10a-4722-a78b-c5a463ec43d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24963842-650b-4d90-8b94-63e517449c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfc23d0-295f-44e9-96fb-767307044a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "970df805-1c47-45e1-8e43-1b49c0cf707f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5223e3f2-5f5e-4eef-8db2-0e3d81a98317",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81482afa-7b6f-4c8d-a09b-22feaeb97e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74ca562-8e1a-485a-bffe-bfd4f034b071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937f4e33-63e8-435d-86dd-c881db32afe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca8f793-a122-4e26-a69a-537b3bb17221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a482bdd-d4d1-4a9e-9027-89c6759ec370",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07235d9c-8e11-4491-9c4a-057bbf6bae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51a6570-a9ee-4444-b763-403751e58d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c7c4db-10eb-44e2-80fc-d1aeeef31e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1984e18-8cd4-4c61-b63f-9ac302853ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a5be83-3226-453a-803e-f392e2ed5894",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611d7ace-1b75-4607-bc36-9b4530bc8851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bb9b32-650a-4e42-a1ca-6daa4bd23181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f337773b-610f-4bd0-8f14-be1b78855a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "405694d6-8d35-4adb-b10a-5e8e25084285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd2ff7c-19b0-4921-a552-d5a15495c778",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c0ab78-f9be-4761-976f-46d18718f219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc5d87bd-67de-44e7-a9dc-5f89c71ddf5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9cb3859-9b4d-4082-8379-2076e9fd52ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "20b94f52-d50a-4583-9ab0-480d257f9390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4288c1e-7a3d-4718-9466-40b1548439b5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1983496-f3d0-4a1f-bbd5-7b8e97c9a5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5dc1fd9-36e3-4d82-8128-4013f0204923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a125ed62-505e-4b89-b629-590966e01706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee55084-0b2f-4096-b03b-7f18ccbc6923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60920113-660c-4607-bdde-36b186070240",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5de536c-7279-4eef-86d1-e4c1d374b384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473f51e7-3078-4914-bfec-29b5d95ed267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e9c173-0eff-4e8c-8942-db93e8de7462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b20573da-11ff-41ec-813e-daf7ba62a0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27db3cfc-7937-4e0e-ac9b-a879a1af9d09",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ece0ea-7b6d-45a0-b5b4-2b00d56f8f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2518dfe5-96c0-48f4-87ea-c9342032c0cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a148b10-38f1-4547-8e1e-2e80905447e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a59ab48c-2177-4e54-b369-c61c447e46fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2bfbf0-0c9e-43a4-b5a3-51fa90b9e36a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b7a902-9009-4f14-8ebe-2c4a925877f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8376662-2f01-46f2-bfe1-765f5064ee42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1beab5ce-e16a-4099-a903-9ebeaf32a728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e85b209c-e5d4-46a8-813e-be89a0bbb56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae743a8-e5ac-4b7a-9d7e-b049ca139be1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad64d263-a6bf-4f8d-be79-747f396208d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2388bb2-5045-4955-a27d-732a556c8503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ddcb24-6553-488a-ae12-27cfd4070267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9903c083-22dc-4518-8f79-c118310e6812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97379be7-5bcb-43fa-b53b-afd5db6b532a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b831e2-9eea-47a9-af94-bdc00d04eeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "565fe224-336d-45d7-91ef-f1db5d4c0655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afab5598-d4f8-4409-a470-c5f66ea72ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "138bf24c-aced-4cff-b071-46da1a977a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e5f27d-d2f4-4d63-9c61-1e4102adeabe",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b6c7ec-94e8-4361-8b72-0a2b4b00750c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d87d25-0766-4845-9b30-92cad0a2c59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a9cc4b-9456-4de5-aa33-5897f784ae0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f43c6ecb-e28d-4cf2-b29a-53cb7776af6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee01367d-f517-44fb-b6b3-cc8e8d0fe518",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45d87dc-3f3e-4689-a379-61582b102e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09d371e-8b5e-46b0-ba8a-5a8e73686371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28fb9d8-9fda-4951-b354-ce285e4fbc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e52660-8d63-4f8e-8093-4c14f74996aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc348e33-b0a7-473e-9be6-9c75e10e3241",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0889cde-3b19-4592-9bc9-011a0a8a79dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e31c3e-4bd9-4188-9b44-7ba6847c52c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1262dcf-d7d1-4a74-8cb7-c0991cb4d831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d5b236-1143-427a-8ec9-0d968b6aa340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b026ce93-609f-446d-88ae-4f0ab2c585d9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c8bb54-b7ad-4a6b-88ae-94e38a14f073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc945bd-69a6-4091-8aca-b43cb9ddd596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e15236-c1ba-4414-83a0-1dcb6ef00fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2afffdcf-a4a9-4ddf-8c80-e343e7930159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287f3ccf-e57e-4bc4-a926-a6b6b36d0c26",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f751f82-8ad3-40ce-b601-2a07d7f0988f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e299f9-ac0d-45e0-8d7f-a0e42f02513a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b962b59e-6a94-4eb1-a063-994fa5c2c497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "31a19f52-cb70-48e4-81c6-8aa9cb73f31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb69e3a-6a3c-4aa4-9970-dd59ef5682e7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbe5029-326b-4167-9dc1-5c273c10974f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1be97911-2703-4dea-b7eb-de86f59690c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0239ec80-040e-4b9e-bd76-a3e6b62a5e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5762581a-116a-4354-8d8f-748851c40f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5745578c-db47-4e4a-9094-628780a374d0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfdb07c-f823-48ce-a37d-b95c2a48f0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8b66d5-144b-49c5-a196-ed2ab5fad708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a6f1e8-9c78-4e1d-b7f3-18dc86dbd339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d05d99bd-787d-4b8c-afaa-19a647cc5c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa69b84-effb-43d5-9c8d-cb44df240fbf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6cea22-9d90-4c9b-83ca-5df2f6f93eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4b3753-9217-4610-9490-a9d8e609162f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f575aac0-f789-413f-a4b4-a77f384e34c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c12cf4ee-72d9-46e7-9583-319a04d0fc52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0246ec09-4b8a-4602-8c35-e169d33da746",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0b2f2f-7ed7-40be-953d-b4bb0cbd3a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acffce88-a839-45d1-a7c2-8d928891828e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbadace-984a-439b-9635-b091a94adb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f9e707-e6ea-45fd-a27d-380ede6e2a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0f55d7-daaf-4305-b40e-e0fcb9bc95c1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeea35c1-5a50-4b4f-abef-89c9fbba5bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baab3808-5a40-4bda-9e22-4dfe20ded8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcf00ff-a61e-41bf-91b2-910d3e250d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ddc6999-47d2-4c8f-8707-d26775075f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0e9c1a-8dc2-4896-a505-372d99f4a986",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4e5a8a-cc9a-4d28-ac46-f03f8f8b207e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96af8ba-c63a-4106-942d-e7dc2a1c0d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0cb7de-1313-49d1-8d1d-068933822b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ced49952-4ca2-429b-9c28-14c2189cad74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b467b0b-71e2-4264-a064-2dfe712cf235",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dce2d9-69e7-4553-9b95-ffc4ed19e6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f3f5c6-fadb-49ee-8e41-f41eb9dda3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c339808e-3be7-4822-91b6-5c904e5b509d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "aa6a7023-a12c-4c4c-8bac-076452e34837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9601b1d3-d884-41de-87a3-85f2d431ee65",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c3bf76-de3a-4bf0-a5c2-29cf4be7f289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a612c630-410e-41d2-bcb9-5bfa7a556bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eeebf31-c3b2-429f-a1e5-19221cf5fe73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f36882-8c67-4af2-aa2d-489f3f18062e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0c7ec5-9c7d-475f-b59f-22ff041980b8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbedcc82-9994-474d-b3a6-ea1bba626979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15cba525-d75c-4fb4-8e5e-b11eb856db40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e51ab2e-22ad-4e60-9537-d0c637e9e7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbaf29ad-6755-4419-a7c9-85b23c840121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733c02c7-6e6a-43bb-aa26-97dfb669bde7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d73f70f-08e8-491a-83a5-f4ee63133494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f012fac-10f0-4ecb-854a-f748c8677b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25063181-4989-454f-a460-b46d9c461403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "599d0050-c477-4b36-9c32-1b0bb2cc1a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5851ae1a-ff4d-48db-a61f-79d12616595e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed481fd6-6260-4e50-a39b-1b4fb6067f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d78305a-05ba-4147-8f99-220406349f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4f1041-eeff-4f07-a611-da9541e4a8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e677f985-a34c-4efd-885e-3255e8e71b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264d09fe-0feb-4ea7-a22a-cb2a0edf26b1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd75d92-bac2-45d1-9554-51daaa22dd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423b466f-2b8d-45a5-9c8e-a44d1392f388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385e711a-428d-4657-a161-a9677feb7a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3440cb-0e14-4798-b951-e9a300771604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4aa9d2-40c3-4e60-9687-2ef68bacd096",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa55d9ba-c07b-48bb-961a-3012931a6413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a76fa2b-1626-4547-b53c-1ddc86597cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8335d280-107d-495a-b91c-cc65af1e44a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06031b0c-910a-4852-bfad-a968ed1b6e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449904ad-f3d5-49a1-b892-22dc1339c643",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69ceb6b-f562-45f4-95d9-6e4891ecf658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a5703f-a0f4-4d67-8d0c-3d42c468fe72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8144f3df-87df-4e82-806d-a5f007c4e05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f36683-a248-4f62-8842-87ba6254c949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f8be99-15e5-4276-94f2-0fe972110ff0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b53001-e64e-4c24-a84b-34a7cbec886f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0439f6-297d-42ca-b836-cc7ffebd6b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5fcdc6-8d42-4f40-a197-6bfb127f3476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dabd20b7-9f5f-4abe-a92e-076c78ab493a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee93921-650b-4c39-a1ef-4203d39bba52",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67276b2a-c05a-40ad-8f44-dcb6d1125d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12165568-16b6-40fb-a58a-f1c42bbf41d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079d578f-e6ce-4674-af85-29292260fc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "926eefb4-9d88-4480-b365-a2433e2faa5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672b1735-0ce6-4cbc-9bff-7bee4700c267",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62391deb-c5c4-49a1-ac79-e4e4a84968f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab113191-6db7-4d48-a70e-d057127f6b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece2ee2c-2663-4f37-8f91-502fe0c85aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "521e7b9a-d499-4ef2-8524-ad6d11240a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c093ea58-3bb7-4e89-b890-c0c20b8e0851",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66aab2f7-1a06-438a-914c-5dad3acdbe8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292a2977-2322-4202-954f-78b19b31846f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7744a4-c362-4c7f-b37c-9e66c22f2960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a7ab1da-0978-4707-9e16-0d083233664d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fe1665-cc82-4776-a276-2fac152553e1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd82e31f-802c-4287-91a3-193c9b3d1841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60321348-b546-4db4-a44e-a30394559450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fedbbe6a-7aed-45c3-b3dd-66653df27525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fade959-71ce-4e97-b127-1a52582938a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2015bfc-5572-49a3-ae56-5cf04bdfaeb2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863149e0-04ce-4a1b-8609-ba8c93e0235f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08bb6d59-0fdc-46ef-8c92-12603b1f4091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d21fb2-7116-4f2f-bd5d-bb42a31d86c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83cd3b28-d955-435a-94e4-6d97de7ecc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92f2449-64c2-4fbe-ac6e-52eec7f46ae8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33434bbf-278a-41b0-af3a-9bd79eede436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f412dbf-1efc-423d-8b7a-7003d0751013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6bbf4c-e36b-4338-8ef0-46d24e84468c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a80367-1ad0-439b-ba57-335f38bca915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b6a106-0579-4729-8844-bbbb4c83d1b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cab4682-bb9a-41ec-82eb-cd9f41b35c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55eb3e77-79e6-48b0-a278-15afeb0b5be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977e82af-4bde-4f7d-abf9-e9d519ee2d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "db684d76-5f94-475e-8f03-4e47cf9e9699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6737d6f6-2be2-4924-891a-01b3eee1970b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70567bce-0bb3-48a7-9a72-5b05223c57e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a54b1f-f13b-4f48-9cf4-f3d2c7b72e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858cbef1-9701-4f43-a153-466ea4083f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "609967f5-593b-4f79-b63c-39b5adfce235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4982a307-6903-4857-8cb7-3c0be67b36bc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c704766c-93b9-4633-bcb5-a52f3255b074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6360e807-5299-4d5c-8fa0-f3e644f1e719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894dd7a4-fba5-45ee-b92e-d568d8ce53b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a774f770-d5fb-49d8-bbc6-952b31c8d44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f20b12-c2af-4d5e-9bbf-5498044a7cf3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e092eb8-8e2e-41c7-bfab-04b568a6de6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd141a17-a533-4a8c-9cbf-d577eb530a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c4dbd2-c7fa-4905-a50e-e98eb21ed8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "653919e1-743b-4fbc-98e9-968a94264e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3e5acb-8585-4936-a0ff-f06e782e287e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0098d53c-e854-4af6-8141-f14085c958fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93cd552-e97d-4781-adb0-99dcf5f8d906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300df54d-8b9c-47d0-8def-c309db45c646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6eb2405b-67ef-4621-be10-dea7ea0ee321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9e9c37-0aac-4907-9983-6e1a041fde7d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab4fe40-fc7e-4f73-aea0-a1b7e28b049d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee67c2ee-28e4-4d07-a592-9a24059081cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526b4cf1-38fe-4c37-ae86-7cc6749b42de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b610e00-095d-4e45-a2cf-088a2dc4c97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3ae5b7-e7c1-4d26-ae75-e837a718ac49",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb422f1c-2f06-48fc-a908-d4da5637cb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0dddec-208f-4205-86e9-f4f1d44196cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9224eed-adf8-4fbd-b5e7-ef82fc74dc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7081a14b-5b0e-41a2-b427-caf15e522538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afc3b69-512b-4fbd-8360-6a66be811386",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddc8cf3-0a70-40f5-b567-15919d53eaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed095fd-c15b-48c1-a5f5-419e839ffee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9a9acc-2bec-47bc-aea6-b8a45b17cb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0543de80-2dd7-4ac5-bbed-a48e455a52b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62df540c-7f0a-4789-977f-07dab105f92a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21a02a0-c0ed-49bf-8959-ccb02f363ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71c6d41-790d-407d-9aa1-6e90c2a34506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6871ea-1608-4a9e-9852-5058ac2b80df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a68a934-0035-4ed2-b6dd-64d1277eb4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79174815-a9db-4819-953c-bb1aa16f6dec",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b280c9-3bd7-4f2c-9be3-f3cb6f816bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c3ba73-0e8f-47d8-b26a-0c9159132a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c3c97f-8d1d-4f1f-a976-7c1e83e22bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1635c983-0a6d-4e61-9b52-58e7bd4f34d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2ade4a-a2bf-4b32-bfbc-ad2a8b13759a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d01391a-19fe-4eae-9214-7646bccab9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca9ef48-bb45-421d-9ba5-cedb425c9aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64331b9-7e53-4c2d-ad8f-806ccd43e6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c96f643-b322-4d3c-86ca-b6b869b1c743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2858551-348a-478f-a2e7-a9279e1666b8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4251537f-86e1-443f-bdf6-ece60544375b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0567b892-ef9d-4d7d-ab17-6eed37574f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e138ddd-ead1-4ac8-b2ea-d5512d942578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "42e7305e-6aa1-4614-843a-9bf05544a387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbddec7f-0cb6-4bab-9061-e54917a5a5ed",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673eb433-7487-4e0c-83f2-16ab47fadc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "087eb9d1-6a79-4941-943b-9796de22b8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efface14-980f-445d-9eed-bdec8ce3e7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eff9cfb-0337-4f4b-92a0-d8976fcdf380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20bcb84-2401-49af-9954-57f187baad06",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d51e6b8-1c4b-444d-be15-1a1eb2434080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a365a4ab-49f2-4693-8d30-18ed9bd40e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f613bd63-e593-41b5-9f22-662e095a7f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc69026-2155-4033-95a7-8f725732a938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6821dcd3-6cd9-4a76-9d2a-f10938922fdf",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5f67a8-1f9f-4ea6-8198-43af8e3e0bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01a8e08-848b-438c-a40d-521d5c18afd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac06117-1bcf-49e9-aa18-230883069686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5678d1b6-df32-4063-abc3-9cda1f5dd008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61de7dc-133b-427f-b422-4aaa0aa894f9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c55a26-625c-498d-be76-f8c8820287da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017450d3-1f72-450d-9171-de4167de42e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b58e817-b278-41fe-ad11-4f31dc379c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9278d2-73be-4067-9974-a4961c487073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ce2e3d-c7a1-4e0b-86f0-bd05150bd907",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3b62d0-c287-43cd-ae99-b94650e38bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb6236e-f722-4529-89c7-eb35efd7cb86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445ce53a-41bd-4e77-bd8d-3f2feb6988ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "936e2945-ac2c-4e68-994e-d704f1fb1aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20c5922-809a-40ea-9a9e-b3c8cc2ca4ca",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5daf6054-20d5-4175-bbb3-9c23e91e9fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34848aaa-b812-4828-8c52-a5c7f3bbfc7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a26a61-cec2-474f-a727-a8063359623d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2520199e-6416-4ba4-8228-163830c96e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506b34af-925e-4405-b3c2-63198092649b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e010b42-5b55-44e3-aadd-cdadab814b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19312bc9-00c5-430e-ab91-e84136360754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303cf419-18d4-4393-9d11-514a00e35e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "863575ed-70f8-4e2f-b436-9fa6857d1fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca888b67-0a05-45f7-a149-b72599994e7b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de3f2ec-7d6e-4f31-af00-bf702d5c25bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09faa70-3c05-40b0-90c5-7585b98b009a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4cc286-8988-4909-b90e-4acbeec14b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51643a69-32d4-4b57-8fe8-8afe8074a45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92206a03-2ded-4a70-b8bb-890669cd0505",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec25700-1439-4760-9de9-c3a7366ac546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67dbf659-6d7a-40d9-baf6-d7a879712dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fed707-b968-41af-817a-c1b7bbcdf199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7678ec2-8576-411d-81e8-38886434a452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a177c43-1652-4ec8-9659-33bbe6d67179",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a083c59-be9c-4575-9c78-627a043e01c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb33c35-2876-4ee1-9519-abda97d48209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed892a2d-620e-4b39-bf3d-397b22e0a1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb4fca5-5783-486f-9116-39d7e9016cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448883d5-6806-4ee5-9409-ab13f957ff6f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55821072-0ecc-4c23-ad8b-52dd51e4b101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe131a4-a7fc-499d-b186-9404182a0444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae19cbc-d229-4042-8848-dee6acdb5748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f98b9bb0-6297-4a95-a392-84109a0c1b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c247e3-134a-4775-807b-178ed41b7aaf",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc454b0-e2bd-4414-b7fd-5bfcabb1e28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bf9d45-f3e2-460a-99ba-73977d817a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66cbd71e-7ec6-41e7-868b-542e50304768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "233856f0-192e-43f7-9a48-c9a576200f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da495b9-ea4b-4e56-b5e4-17796cad6cb8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c3a67a-ba0b-425d-bca5-16ee83c532f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c9b4e9-0fe2-47ce-85f4-b82787535d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2c0629-b4a3-48a2-ac53-8354d23f90fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd73c3ee-6172-4642-85e1-0d0b2e30190d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d64c2f-2f82-43b9-9393-756735770360",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d04f2a1-a9ee-4965-993b-94a21c6bad2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ec3deb-95ba-42f7-b731-405087be5543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c2a18e-3103-438d-8a56-03c66d6864a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5aa121-aee7-4ecb-ae57-bd90df6bde27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c52f08-94a2-48f0-8af9-19a79623b7af",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbff172-7bd5-41a6-ab53-36c1861e4e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a2a37c-1d37-4195-965d-6fca5733681f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1dc2cb2-5198-4c19-9d11-140910f89658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fdaf407-e865-4961-8343-301842f86380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2b8c5e-cd85-48a0-a66d-c16d5dae853b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8fb0ef2-7526-4825-8bf7-80bba88d5011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0319bb4-0be8-4309-a47d-dc9b5c743289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed59bca0-c891-4dab-bfde-7e2f94a79afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf3cf95-fdb8-4e9a-a387-143aec5fc280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7083084b-e4bf-43bf-a9d3-30c92aa5d1de",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb762d6-bd0a-43f0-bb61-12c1e45055d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be68027d-6218-467a-94c1-1971178a56e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efab3c00-06da-43ac-ad20-65cf0e59b48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90cecd54-a287-4cdc-8ef3-276185b1051c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4af776-20b9-4e23-ae35-2babd40ecdcd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f1e886-2d07-4da2-a47f-c0b2f2d3fab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdafcbad-39a5-48cc-8b30-beaa40a8d646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670c0cb7-66cc-46a8-842b-610bec5af3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07040d2f-9747-4f65-88b5-dae64874354a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e610e77-121c-4888-8245-8eab6fa0c868",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318a4b9b-fafc-4e9c-8959-716c8d261860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f699bf-19d2-4429-9bee-607f27b793c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436103b6-b88c-4abc-831e-b1459416484f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "40ead930-a67b-4b2c-9455-b335e80dffa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c10c6e-b6fe-462b-87d0-c336f042e202",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd97b9c-1d03-40a2-91f8-253907fe0a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be206eb-54d1-402a-88c7-249628d2c9b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892a6463-59cc-4198-ae0d-f0452ceab1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "db58eb3b-d412-49d5-9402-70b8e87fcd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe910b1-5be9-42cc-8542-491c4d0c91fd",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9a1a23-f898-4a73-8c78-8e08f797e2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be597f89-959b-4323-91c7-82e2142a9a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c4aab7-1185-4c19-8401-7a6826a7b42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8068f0-3b3a-43d2-94ac-357d099b8fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4717e0c1-fb07-47cb-ab5f-98a7f9a72449",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9ff54c-d7ba-4825-89cd-e43269e43b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6d38a8-d5b3-4400-86c4-6d5bf7993df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bb5708-2e3e-4bfc-9579-45b05190bcff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9290eef-fc7a-41a9-a0a0-3d1725b5046a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794d02f2-5cd4-4571-ac9a-ccc62d498273",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d00950-fda8-424f-8f01-af7d04637748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d9a9bc-0069-412f-b6a9-618eb9b64576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d9ba5d-0998-4041-9281-f90190d0ef1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2673b0ec-5246-405c-89a7-7ffc96ef046c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500f64c8-f818-4683-8d81-91476047fa8f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5733ea-12d9-4816-af62-f5ea53e324e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "23752edd-2ec3-4c0c-8189-796ff6c6ce64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d7d186-edc6-4531-8dff-7535b612a8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3ac88a-954d-4953-9c20-b6eb5966c119"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7990d0e0-f2d9-425d-8043-97eaf9123cca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8233fe4-117e-46c4-bd39-4612cfed0bc9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d91c074-462f-4c3d-af30-813772ac2d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a54f682-491e-4dfd-877e-46802950c741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb0f336-d905-4d12-ab2e-dca8660ec74c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c3186e1-55ad-45cf-9d72-f304c474214a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f0e78e1-1a86-47db-bf9d-4cebf1878c39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "857c016f-5004-42c6-92e6-a6595aad32a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b58d870-45b6-4ff9-9e56-1ab8a288fbbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6fa8132-f9dc-41fd-aa28-0e48af823307"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08f74a0a-8792-4c0c-b598-6c6b4af9584d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ffb923c-cfc6-45e5-ad47-b05539b42180"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3fe1eb1c-d358-44c5-ba9e-8cad375d6311",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "258f4a8d-ea2d-48bc-8310-05dc1af76ab6"
                }
              }
            ]
          },
          {
            "id": "bf8fb6cb-7bd3-4da2-bacf-93d7692fc50c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7c000066-c0d5-4f1b-a457-5cd4a389bd25",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "4f08987d-de30-4ea6-bced-85a6ff8700eb",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d21bff-311a-4c2f-b57b-02ddf47e5dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "92c70e29-d62f-4778-9146-95ffe446091b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8046ec6-6c14-4a74-afb5-2bdf39f940d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ccfb1d8-70a1-4efc-96b1-fcd7f94b9991"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "abeb79e6-fe49-4c9c-9b3c-54b21860e4da",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a533f68-355a-41d7-bce2-128d35135f65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e6986fe4-7097-46c8-bbba-ebb303892cde"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00b5301a-3a6c-4064-b60a-4e7649f711b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4096a738-bfff-4380-a464-f610c6361132"
                    }
                  }
                ]
              },
              {
                "id": "87ebfeda-5d9b-4035-b3a9-99b3839665f5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36b188c9-4afd-4101-aa52-c101e5644d30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74195a52-bd52-453f-82ca-7a86bed331d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b48025e0-f68f-46d2-972b-013a7042ec75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "890f5cc6-d499-4d2a-b4ae-3f4038a3ae51"
                    }
                  }
                ]
              },
              {
                "id": "18796113-26e4-466f-afbd-7551d9c7b956",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "483ae6a4-5790-483e-a72f-4308299fbde0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3435b3ce-364d-4ac5-b81b-8df0a92ac149"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d38839b-991c-4670-a244-8849dff37e04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa36c9a8-37ba-43ef-90ca-83e69ac4b502"
                    }
                  }
                ]
              },
              {
                "id": "605f7488-3777-4888-b243-f84d8afe15fb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30208cb3-a1ee-4df7-a9df-7bf5f32d75c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df5026dd-fc5e-4feb-80d5-f64de373914a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef26cf63-7632-4306-950f-bc524fb418c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "318098ff-8878-453d-beed-499df13b1b53"
                    }
                  }
                ]
              },
              {
                "id": "27f62f24-ca01-468f-8b57-c95e4d58107d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15511366-0077-4f80-8b65-14b961d37a5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b021cf73-01bc-4835-9a45-e28d8b270eb9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "357100c6-8cc3-4169-ade5-8f575d5cc302",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0dc1e967-78a0-49ff-b03e-d662962a56c8"
                    }
                  }
                ]
              },
              {
                "id": "8d909607-ca84-47be-89cb-e6077295adbe",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ace63841-c289-4f33-a550-b30bd1b446e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "900f20ee-0c93-4f58-ac02-90c2d121c107"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5030cdcb-7f84-47f4-a788-ca7398217b43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "be70e439-2b46-4d60-8198-0d13237ba148"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "404a5360-658f-4a4b-a077-74005aa7e2d4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c183394-f291-4325-a82a-ca04c170902c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b29ac708-3c4e-4281-8ecc-f55ca82b2d7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b69b055e-2fec-42b7-b4f8-0cdf1bf7e874"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0d56793-18d1-4574-9021-75c089ddcf42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7b047980-4310-478b-bd24-f24ad6c0b341"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5384eb29-1f1e-485d-ba25-144e7476a1b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c026549-2415-44e3-93eb-a4d67e7f9fee"
            }
          }
        ]
      },
      {
        "id": "111dc5ce-8f0c-4b4b-a7cc-e3ef9f81ddb5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f68b073e-ff31-48a8-b46b-05ed373d87fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47f946c2-118a-42db-bbf3-2383501b3d23",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "23bfa6f0-bfa7-4b77-9fdc-6ca844e95f67",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c560f68d-a99e-41d3-b090-4c6db4df084e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d06283-657d-49c0-b266-ee57535840f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32078327-5567-4ce0-834f-bf37fa22542e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cadc0862-3466-49b7-ab9a-789e4a9d572e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fab81b2-7675-4390-9921-f44940da6354",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "460e69c4-8f4c-485e-a993-dd548ce64ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d58d8943-9bfd-43df-b41f-7e25666c1eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a25abe-fe27-4549-85d4-b5ed47c78f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea3309a-c9a6-4802-bfb8-cfd81e7a450c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0470cc6-e2d1-4dfc-9158-dc6d84791567",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05aa79e-4bba-4b68-8ea0-742da09b79d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c39994-c3b2-4750-b950-235896c9ba8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d8f220-1677-440f-a811-45d23a00ce2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0e40aa-b9c0-4939-afcb-c4c0c00257c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d4851b-8e6f-4ea4-9a19-25c93726ca25",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0757373d-0553-469a-b880-94b34edd5020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e11e008-ccc0-43cc-9cbf-08b999643850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c5f380-c3f2-4fbe-b00e-f1b387604253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16116471-ef10-421a-b18e-e58f5820be2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9e2f6b-f323-4f98-afd8-e886b6ff7f39",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a139d16c-4207-4bef-a6cb-f087800bc15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6bd0cdc-4e42-42ed-ab1b-15a37e1a4630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c082f503-1e9a-4e91-b94c-09056b5117e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f57fb0fb-3903-45bc-929d-3b3f4a21bc55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9ddb38-7562-473c-a8a8-d611a3b4b5cc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5890af95-4a3f-4913-9216-9f539706abcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e28bda-42e7-499c-834b-f92c08c279a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d291b70-0688-4f63-a3bb-83514fd5e76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e65a50c3-9910-4f53-9890-112e13d01d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839af56f-263b-4685-aded-e014e054d9e8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266e24dd-ec98-4381-9231-32c3571aef2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e01dfb-2296-4d8d-ae93-feae9cebbd1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a106ee7b-03e5-440b-a915-9f9fa48dafe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "797a7970-f3c1-4b60-8b6e-554c2b579b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f62b296-7ca5-43d3-b5ae-2ccceaf29c94",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545a49de-3d14-4980-8c65-53a32ab908c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2c27b2-6fe7-4068-8ace-dddb90762777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1652bf7-4636-4c8e-9c95-6a25e48dcbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4cf352-e383-4c38-883d-5802e62306f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9b1f77-0591-4619-9828-2bc51b1a507d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e393e8bf-2e7e-460d-8ccf-fd554fa2f53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb67a1e7-85c3-49c9-b9c4-349acb93213d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11300566-fc30-4829-aad6-a3da65e74c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1eea86-37da-417a-93af-8e5654103f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86289a2-3e87-4cd6-9123-837c08cffa43",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5aff481-38de-4c82-a6fa-9bcfadf69363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5477cfe9-d0c1-4943-bb16-787aa8b8a617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496d8e3f-bc04-436d-847e-0cd26354ce55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "985c6e0c-b0d8-41b5-88ef-5e9ad4071b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc2e00f-bb4b-4abc-be68-2e4e0cb5bbf3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ad1bd8-e943-45fa-81b9-6a0afe9fbfde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad9991a-a580-411b-97c8-013b73416a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccc5a1e-f4eb-4d3d-9c1c-ef8a954a8cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa40613-4f61-4a8f-b7cf-044d1312c76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603825bc-200f-4cfe-9f8b-babf1332b651",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "553e471c-0a60-4e4f-9031-4d9e8f04d7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa8a4ae-3025-4e28-a7ec-ecb152f8d2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d20963-2b03-4a8a-83f3-e4683ef900cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f75eec4-a488-4be9-ac47-ca1b73cab9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f6b3b7-3e46-46ae-a546-eb886aac5eba",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588eb629-e1ef-4350-83ea-fde4a70befe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c0ff30-a79e-44ca-bbae-c0dc22fb21f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9256cda-6f4f-49dd-833e-3f8edb803122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "18fc6796-8cba-40d1-af9c-43ae52e49698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67bec370-6e5c-4c60-b42c-c51ee29489be",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1727302d-4357-4d72-b1b7-1d8d1461706a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b070ab60-912a-4b52-99ac-e959f34312d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdb5c77-fd31-426d-a2cb-4588cd7769c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8043ae4-44c7-4cc5-a10f-5685793a3c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36669872-4646-4dd6-926b-62213c076b84",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b68a2a0-00e8-4934-8c07-4144c09bb605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf60eea-7a2c-4b5a-9adf-ddacfafa8297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f07f47-dd36-4b86-b2fa-e5d0504d9aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "01c14540-bf2f-4d9b-b1a0-3e0a2b55dc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6588e78f-b5ae-44fd-b7c8-ac0d84251c80",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98680c50-3b3c-4564-89e4-882039cada77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "308f0894-4f09-405a-abc8-52eef86752ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ae1f87-999b-4c82-b731-b6674b53b6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "09a1ce34-3593-4dfe-9ee8-0f79fcce8d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377163fc-1fad-425a-b9f4-74c53526f737",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65e4407-2662-4386-bc2d-85ff25b6a38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9deb00a6-e3c9-4434-8b8e-5be35c709f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92817581-7078-4d33-96bf-321c8211f508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "296a4fe1-31b8-4d86-9326-65e51399eec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8219c405-f2c6-4289-b453-a6ec6b9a731f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cf3dd6-a579-4576-a0ad-44403ef9a25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9eef4f2-c4c4-4629-a386-becc31fa3117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5879406-5444-4d9b-af37-c536204a34da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d03283ef-2501-4f4d-9dfe-418a0a3e2ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e609ba60-cfdb-43d1-a211-6ec4e8d20c44",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c794c6e-7061-41a8-92ac-6a6ceb565aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10909fc-bf98-4c41-85cd-058a9a1c8c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db45621e-3c60-4870-b55f-39e778f3f9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "455b6a8d-cea6-4a60-917f-63bf94343c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ba7f25-8996-4354-aee6-e95138ddf307",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91893783-9e67-48af-8da1-a69447ce5285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2cf1835-5b91-4276-9193-830a166b7428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43678290-80b6-40d1-a6fb-bf4c52189613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5725369d-ebda-4125-81f2-2b0795541e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fe3b0b-adbc-4c0c-94f9-ba4056a41708",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c391641f-1b6f-4a6c-927b-2d473847dd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623faa9c-7c90-4382-98b7-1ee3dc2b7342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f308fb6-926f-4ff5-b16b-c4237535ef54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2da1c266-0187-4feb-89f5-2d41212e765a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe267ae-5c27-4691-a179-9d48d50da25c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d9957e-b09b-4370-8c4d-ea771d3392db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9339b071-20eb-4b02-91de-4c3514486afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761eb3c1-18f2-47d9-a0b4-e3cf0534008b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0681546-81b5-4a62-a52d-fe04486a754a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1960f6a-9ece-471e-a674-06acf1cead23",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e55c5e-1e69-45ea-98f7-1804044849a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65150785-6375-4780-92fb-70d06c5e1b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50274266-3195-458e-922c-bc9f9e4a4ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c818daae-0ac0-4b01-8621-137deb73ac06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767a5c65-05fa-4c9f-9cfb-5ef9f2ac7982",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf0a17c-4146-41cb-a5ca-bcc67102453c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a7237e-fbca-4654-9e0e-ade79edb51a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92dd453-bdee-4093-810a-8dfe2c9165b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06695c57-2bbd-40ec-a00f-8fea1ac439eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a495c42-af91-4c7e-9234-bc1ba69e55f0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5831c1e-85e5-4132-b9c6-bc86a8a7b1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96c8654-0ca5-45be-a1bb-233c2b874bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9356455-2b4a-497d-8cb7-13ef95d4c2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cff5a3d-387d-45e1-bfa5-615000531b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dea588-6b20-413a-b743-8bbb710b5d9e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797abcc6-934a-4a23-a921-ad1d8d052090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953d064e-748c-499a-a826-7cf1203d83b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64fb6a5-e594-481a-b1be-8b225e3f3b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a35d656-49f9-4694-8deb-a306a09955e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6373ec-aa25-4f64-8e8a-422e5435fef3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f897ed4-1488-49ed-9da2-f7edd26d31b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b769ac-8cb9-4a7e-b9ca-3f5f4d4cc99c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b721ed2c-821f-4706-92a5-4096436ee8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "154ee580-6b8b-4547-a916-eb470bc76227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e85298-11db-46a8-acaa-8389d4360a21",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c120b3-ded0-4626-9f24-3952a2afc5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63446bfd-5c48-47c8-b4cc-4b2655870228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5103854-6eb7-457c-b1ad-cf5f082a0b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef495924-213c-4e9e-9a34-d900b3d34bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51bfb1ff-0c84-4eee-82e2-7b475ffab632",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ba4031-534c-4e90-97ec-b6256259e9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323cacb2-3099-4c7e-80c0-ed9d2513dde6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d41619-e16a-42b5-ba7c-47c19509e7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "822bb6a4-922f-4083-a25b-6e8bc00be1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd04d34-e1a4-4c93-bed7-49fc3d9a8e52",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad873483-05e9-42d1-bb7c-f31b13fae7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f2b307-74fa-49ff-a8ba-789125577bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dad4d8-ec42-4b19-bd34-01b8e98142cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1117e09-5e10-46ac-8f6b-9135255b5630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7c091b-94a1-4579-8c78-2843a9075032",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5609ffc-a165-4acc-a227-d2ca033137fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75552da-89a2-411a-8436-6926bba58db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d099b0-61f1-4302-a4b4-3a47d389f607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ceb40d-d4eb-4477-87e2-25892923a815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acb0015-d9a8-49be-a0eb-6e40f8f59f7d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e43e8b-ccbc-489c-9b7d-100c487d206c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244b6fc2-7be5-49f8-98ee-6827e3ce28f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4034e5d0-3593-48fe-8e37-a581f98dcc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff1331b-3302-43ed-98c0-4e2979977dfc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5349542a-6b6f-4c22-82b9-4eba878eb90e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bfa14662-1f7d-466a-9d75-896a3ed5b10d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92126c6e-8d2d-411c-a842-60c4b014d2a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "13c9b077-b6dc-43b7-b179-64b74180a2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e40f52-e0cb-4ace-afe1-1c0b8a1822d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f05c989-6426-4bf1-963c-d52993bfda04"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ce607cf-1cc5-44d5-afca-d56dfc66a9fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53191992-0d52-4bfd-aa11-c11f8abe15f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fd3809b-04bd-48a9-ad58-8eb880c7a38d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f939afe-d018-41c8-86e5-51328c6491a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c0101b5-b3e8-496a-a14a-b7f88262686b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "536900dd-dd59-4598-b5a5-4ec7657177aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "846d253d-ba74-4b58-afbc-eb0fc1b60a06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "336a3308-46ed-46f7-8582-82a941b04d26"
            }
          }
        ]
      },
      {
        "id": "02d8fdc3-53b6-4ee8-b8be-617c4c220e3d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "d6f1344a-6096-4c96-9ff8-224b0cedbffa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f55e0eb-3e45-4e98-bfc2-c6d5548a5491",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7f0244cd-227b-4e3b-a6ec-8a8efac3a602",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055e65e1-305f-4f0a-b824-5eb37ec74363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be9a90d8-2dd5-4d27-8eff-005de63290d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744a8712-17df-4a52-aed5-24db28467488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c98a59-0003-4626-b101-5fd7a6edb136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50284698-48f7-4304-9ddf-74e94232d1ed",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76678a7f-c3f4-4636-be31-7f6479df6d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a88e57-06c9-48bd-92e6-7a1a4fcd380d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4f606d-ca74-45b0-b522-52821e47e4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2aaedb-6815-4314-a865-9f2b5e3788c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de94784e-b2d8-455d-a65c-a3de9144b658",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "785bcdd4-bcbb-4c06-8a18-319a67e1c756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f723f3b6-02c2-4e43-b64a-e0787e61092b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174278a9-951c-4c5e-8ce5-8654f550e7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f71e3f57-5ee5-4c20-a71d-70aa07917b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8c133a-870d-4114-acf9-3ebe4509b8b4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc715189-f20c-4fba-a703-48f7eaa99d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b18576-74c8-46c8-a373-95a9bcc6cb05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6e613c-e4c8-4b45-b90c-3541b7b0dc3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39a1c9d3-ce88-45b2-8729-4d5c4c1866d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3316ad0-2c78-4cf9-9de6-aaa08d883c0d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421e79b1-4b46-4596-88f6-6441f0956d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6e690d-4ad6-4093-a8c6-c6aad1bb8749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ad0d54-b547-467a-a9c3-4eabbd9337e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab7d694e-1b35-493e-9048-905b49bd94a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc78aae6-2978-4b9a-8c07-a9d9b51302b5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71cc2b2-8e32-4ba1-8551-e0b772a073c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e43a807-1f59-4d7e-a570-2ddb838f4fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08b2a78-6bf2-42fa-90e3-b61e8e0d411b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bed472fe-b913-4a30-bba6-ddd814a79b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91f7978-064c-4d1c-b68d-0e9c40f4d91f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c69d52-6170-4af5-ba3c-fb76a2c93ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffc1d0f-ecde-412a-8bdd-30867a736220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f445e9c-94f1-416d-8079-dabbbd8c70b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b37f2682-bb93-4de7-8385-4869e432dd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72767091-164e-4a7d-a95e-ace897f790ca",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f506965-e01e-4ed3-a06b-1ada600ae1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58560958-5160-4b3d-830a-7174f1827766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20624376-a0bb-4f02-baa8-d35e93a998d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e1bd0e-b654-4251-9819-a4fe03dff9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8379e1d5-c830-4350-bfe6-2757e1b79c8f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f92f676-1a5b-4f8c-b786-71fd723ab665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abed490f-d3ac-4d56-b328-9233477033f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3199d519-d08e-4851-9c16-4bedfd2c76b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca971335-fa85-4bee-ace1-32de010c4dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4909105-9714-41a9-88f3-dc74eba8cb87",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2720849e-e124-4cf8-bf40-2427adf82a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87bb6861-4c9e-4f89-9d62-1f84dfb745a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4947ed80-efe9-493c-8a0f-39badd57ec8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "978fe691-7bdf-4605-ad9d-47c107f149e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7531fd-f7a7-4548-b438-f6ed437db9b2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b084e9-16b6-4d57-81a9-7dee7c3d885f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b37716-b7af-4b5a-a617-31f353a3c4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c1b91a-f06d-4ac5-9382-fea5265a9968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1327efcd-c133-4801-997d-a52d277a2380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c02f922-ec71-4340-9f44-87b608f73118",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bae338-de09-4b84-9f6b-7fd7d23c0d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1f7eb5-a16b-406b-bd24-f766cf40881c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e242c91-32a7-4773-a657-5b1239006c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "effc2c48-c8ea-4d3b-ad4e-84992afee66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7901fd8e-8b23-4ea5-8f42-d4750ea74b88",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82ddb31-6f37-4ccc-a892-846a16edddaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc82f3b-73a8-4833-b6fe-f457d2f4d23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ba1d49-6084-4c2c-8129-290bf8b62a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b85e2648-98d9-4bcd-a559-6ee98bce9191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8ff407-cb95-47c0-af00-f12e4123ebb9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9febd784-6d07-43c9-8398-c49bd318ba3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db87c74-6c78-4b25-a3af-ae61c5f201be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f25c85-b11a-4996-8ee2-2faabb65bd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2bdf7ba-173a-41e4-85c2-590a30f37ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e508e5e2-0f1d-4f47-a1d9-1b9adedbdf72",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78beb315-59a1-4619-baa0-1fafddf9a1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5177e32-2ae4-4ad0-a86d-983e7d1af3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3f5134-f1d0-49a9-af97-aadcffd30156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa725b80-0971-4c97-a007-13da4ec15287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b677b3-59f2-4d59-9afb-e98d76a45da1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0d9cd6-acf8-4f01-abff-50fa52d779ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9578542-9676-4cf1-9d1a-b3cdeae87a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498541bf-b1ba-4d4d-979a-c6fdac5696f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9285e25c-a1b6-49d7-9569-90d6320bd426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d2f012-eba9-4c31-884f-9f6c8fb6a809",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e86e532-783c-4ac6-bd07-83cd1ff455e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3008b62f-0031-4846-b795-a57ee80bb18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa0b017-e193-44db-b061-cea3ad6242cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbcbeb3c-abc6-432a-98eb-fab8a9dca5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc91f00c-cdf8-4563-a59d-3b5af73e6ba7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb90f701-47a5-4270-8544-d23b1ba45b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb1215f-3399-4814-b54b-7bdcd9cddda0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bedb897-4282-4532-8f9b-bc7f7698c9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bac89778-a7ab-4ffd-9f65-7bcf91f4e197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5a5d54-f625-48ab-8e2d-c90d195a33a5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63cb6e5-ad6d-4b4b-94ac-00711f87d8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83df21b8-4944-4087-8fde-a0cfce9b0e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4077d4fa-76e6-45f8-b60c-e9ebbd05a118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5864cbf2-925c-4c5a-b8a7-252e26142fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb554ee-52da-4902-8ca4-f41e1a06afad",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df68983-17f4-4686-8985-db267e2d4c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889c29a0-685d-462d-92b7-3e39b3136365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e41ff9-6dbf-430a-ab12-ad9444843427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfebf256-be8e-4962-bccd-7ca9d24c4e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b45a55-75c0-4ef3-8ef6-5ff1c796c6a8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6280446-f668-4006-bd29-e1924e4bc757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8bff177-ff3c-4a28-9b50-e52bbd58c725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5857474-ac03-4490-b8c7-84073b6902a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4431fd-2ad9-4a11-be77-83faaffdab90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad7f1ec-fa79-424f-9b56-d08ae7d1dfa9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6475e2-f218-4ce3-b6bd-2a922f6278e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ae302d-cd05-49af-89ac-dc055a53d3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b5d53c-4cb3-4fbc-ac80-e6cafde82841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84f072da-3288-4e5c-ba88-f3cc27fbc22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81dacc50-a848-4c3f-9cf2-36121fcdc098",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff66e43d-0793-460d-9052-804d662bbe47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84436a9f-4d42-4ac6-b976-f473fc5c90e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac4e3e9-5d7a-45a7-a340-8b1fe52951f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eada4fb7-fb5e-4b8d-84f7-86cf8eff40dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db5a008-514b-423e-a082-3f3f309b989f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4682331-e71a-4ac2-a58c-8fa08e17dfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9df0b5-fcce-4c6e-9618-40cf079523df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5229b1f-3e13-4804-85db-aff2ad8c9e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17bb3a23-9887-445d-a9ac-96e2311e2d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96994f1e-80e3-4ba1-bacb-35bf2f13f725",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c28d83a-ce79-4177-92b9-1d07d7dcecb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1908c4-604f-4ec9-b25d-71d05b5958b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0c382e-16ac-41a5-878c-6ae2adc96e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66c8314a-8210-49c5-a748-7105aabe0325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a537573-8ba0-4af2-90b3-5fe04105c62c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494b3433-3776-436d-b025-f7d5c70f2fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7146c66e-7dad-4e97-929a-5ceace3d748a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4d915d-26c0-4e19-99ec-52a15ca3c752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "207412fc-8575-4e21-b3cb-f06b13b5c7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34af357c-7a22-427c-8185-c6ae7a3da1db",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b018cf14-3672-4dba-a7d3-7767e1bdafb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728b4bbe-dace-4f88-a01f-3980374566b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3ca35a-a3d1-4585-b7f5-fdbdcb597dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de1281ea-8681-4e2a-997f-c8389044f515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67d0446-e5a9-4e5c-abfe-5e1eaec3b9c3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475b439b-be52-44ab-aac0-e9ee776e7da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6eff810-5aaa-489d-9b3c-477caece1b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0784e83a-ca51-4408-a493-d572ca951f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a35d967f-d202-4e39-a3ec-cf7f93a9b67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25759aa5-ea20-4916-af3d-fe23cdd63720",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b340c0a-4aee-49ec-b9be-344f570b099c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1e562c-799b-487b-9333-a0f0d07ef02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f6aac2-0a42-4795-96aa-69582f286ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "213a9640-dee2-49a6-97a2-24dfbc7d5d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09db10c1-26ae-4943-8dc0-c80741f2e48d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a1eb24-dadf-4af1-904b-2cff58ed73a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3f99e6-4270-4108-9b9e-8b4cdfeae4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6bd6d8c-74df-4e5f-9066-2de3363a9f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "692acd06-3559-4906-b6dc-69980370a54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad83b7d8-c04c-48fd-a075-267ac3817f1c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e4c690-70e4-4c94-99c0-2ecfe5acfd40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dfb2a0f-2889-4d0f-a271-2cbc91f35321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045fab4b-1e44-4f52-9019-d89e3e9c0a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36617f67-5998-4a04-a3c3-b321a4449b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545cc7a5-4161-4ea6-8060-b91b555aef39",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212d511e-d88c-4ebf-acb0-d92edc2158cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a54093-396a-42ce-a9fa-b271219e3115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf7f0ca-def8-4a7f-a724-8f964be2063f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d420d3-d940-45b2-8c45-cf350df4c211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0ef3a6-cc8e-4599-ac94-ccbbd2eaf193",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cd0cc9-59b0-4652-9247-ea7e36791e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31cbbfc7-e9b0-460a-9fc6-7ce6dec405e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236e07bd-9fc1-4498-bd3d-18f29e7a2205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7442ef8a-e8e9-471c-a312-c51a44e9eee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1049cd-e524-4468-98bc-8f0962c5ad92",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f964d3f3-1883-48a2-8956-8400b496c11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a3bbc3-e85f-4be0-9322-2c1f0363755e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59f13f7-a1f1-4ca1-a8d1-a3691af2621e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "052aae6f-8cbf-43e7-8b59-2e5bd97560f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa83e9f-d1f9-4f69-9e92-600e7aa0f1e3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10be8ef8-8d90-4a9a-9586-a6f13e587d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b694505a-a3fa-4603-a134-78152595d835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7b98d7-59cd-437d-9a62-a747cbd3b18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "133b9700-d1af-4ed4-a793-aab40d3fd860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be352b58-d6e6-409f-9aee-393429839615",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cc8b57-baa8-4c6e-96cf-d2c83487eaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e2bcab7-ddf4-4a92-a9f2-32cc837827c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1302d887-edda-4d88-accf-ecd77d6ec12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c99f6c7e-41f1-4830-a9f7-d9ae2a00965c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b34db43-7466-45bb-b92d-ae48c1c48102",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c60471-27b7-40ef-9cad-b79f11307687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8001aeb0-feb4-470f-84e3-b5162ca88176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52a6911-5e17-49fc-90ed-c352d9d3eccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75816c18-f1c9-4907-89b8-ef246b972bb7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fc2ff478-60d7-4e73-aa1b-29c85b1e2a99",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7fa1d45f-a7ff-404e-8a9f-f00c1ae66b8d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c580d66-dba3-4591-a2b3-7688c89ae078",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cebe9273-e405-41aa-9d7f-1848164029b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72f2e67-4762-48c5-bc7c-c7957fecda94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d33837e5-9d72-4d98-a8f3-3cb6ac688d4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d4c0f36-0455-43cc-8c5c-67bb4d699376",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f95b9fbd-0e77-4231-acd2-6811c8111309"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "329d4615-df01-4535-984d-f83c6170aa42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e2e4ee6-0a7e-49c9-add1-5160a0f8051d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e537a80-eda5-407a-a965-63eb94fa7de6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "84f76d7a-2488-498d-bd53-bafea93dea62"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec7e0f6b-c917-4a1f-9e38-d0099a43e9c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e6a87be-a66d-4307-9879-f67cee62b021"
            }
          }
        ]
      },
      {
        "id": "86e29dd4-6366-4379-aff1-4795faf06f8e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b8f826ad-a77f-48c9-b6d1-8f1bbaec9481",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1c287d9-8037-409e-9a1e-004428e58cd1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b61826af-9274-4086-8353-dcf6758468b7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d77b97f-50eb-4f0f-b9ab-b7f5bf4475a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94a9bd4-6b92-42bb-beaa-7408f2e98c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895803e1-ae9f-4d58-aa15-3e7fc0f2d18c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca9f561-060d-441f-945c-de102fa69e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd49d9c5-c761-4a50-8e7f-3c1efdbdbb65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1855efda-f5da-49a8-b28a-eba37b2a00a4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5392686-8061-4ee8-a687-59d38a0c20aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83eb9947-d992-48aa-a632-560379687fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec2b3dd-98e9-4115-8daa-dc09cc9a1001",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcd834c-0ead-4923-9ef9-8117b136f808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6956ef78-68e5-4813-aa8d-2a0e69108a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43bee53-0acd-4e88-ad7d-97affacc2adc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3903233a-6cc1-4f49-9e8d-08701228340a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d49760-578f-406e-8627-46c8d103895f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac42842-e2c1-4f4f-9bbd-e28b933b8445",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93baa1d7-9570-4801-8e1c-28b011f8f6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d699a129-ff4e-4ee4-bcad-7f26b2cbe424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990141b6-5c77-4c63-a932-672c5a974d67",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e104b8-f9a8-41b8-9b76-cd751632412c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82583c8-09ab-4757-9933-17527210ad06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13893e0e-befb-41d1-adc8-051782fc3271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f37b732-1afe-4595-ace7-caa33279872c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6fbf6d-c4ad-476b-882e-016065acb1f3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0092e38a-4d34-4055-a573-684fd76c0956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cacd693-7033-4eb5-8153-0e99641f7ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "156812c3-6f9d-466b-b6a9-a3b216148a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11647a45-9630-492e-914e-2d14136944ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769dbb4e-5eb8-4bd0-a270-2726e5af4efe",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a63e83a-58d5-4b6d-ac53-25c537e79000",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36f18d67-4a9d-4d4d-9022-5c98da24df47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15897224-97a4-4832-b529-f58520faf340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e97f569-320f-47f9-8794-9545757d4cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5eb00c8-56d3-4d02-9060-fdb201cdb806",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f164f509-93a8-4624-bbc4-f3518d137c3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed914f5c-a682-4387-a67b-14d68977142b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "154b4779-2dca-4beb-ad0e-7bad8dacc732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea8614d-588c-4a86-a80b-9fa7f3ffe3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bfbbb8-e78c-4321-ada2-8c0ced6cfb67",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e229b27-9645-4bed-8008-5176f3c472d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2879223-ed9b-4045-8899-a3a6bb69029c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2619501-2646-4ff4-9e89-512b773d0374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ba35e9-b6ae-424c-a75d-3fdd49132f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed98412e-4a09-46f6-8a84-01efc0436616",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f9f3df-9849-400e-a0ee-1f89de890e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aee5f49-3393-47da-a53d-576e3dda7cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09412191-5c7f-4072-ad46-298f3cd753f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32738048-0c56-41cb-831e-285c752c5980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92db17b6-98c1-435c-a08f-afe465826965",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693bb6b6-bcfd-4597-bc2b-2b9208f8ab0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08d95b61-78be-4795-a526-757b04665125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e802432-bcea-4c3f-a255-34afef1e580b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288cd94b-0e35-4584-95d5-4478ded2977f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f64609-f731-4190-812c-ca485bc2b848",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23928de-139e-474a-9d47-4749e0cbaec8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af76f33d-c970-4450-ab5d-1f39a880f3b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b53ab3d-7e55-4f6a-93f3-fe7af9b8121a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1129c63-76f8-4f97-bf23-c2032f696073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed03b14-2405-43e2-bcc4-14ceacabeb3b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cff381-ef69-4b1e-8d8e-15d4ddaf806f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc808ff9-e775-4982-b07e-c81d1aafe746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df616ea6-f6d2-46ce-9bd3-8f8149bd6cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b169311-3f74-41aa-83ac-f39fbd15e71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b42bc2-9ba5-4608-8a06-190beb8faef0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fd6727-459b-4316-87c2-5d4fdd3fbca0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed84666b-8cf8-4875-8138-0360c84a80d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c8a84a-1b85-49da-8115-440775c47053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa46785c-7dd4-4f7b-9d09-46bbef177ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6426e926-ac88-4c77-8ac5-e1f1827c81d9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ce862e-eb69-4c9a-bc7b-69d3531c9633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff8eb9d-32f2-4176-b168-0eb82edc62fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4072c54c-efc1-41f9-856e-9f9ede3bdb3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e5b0d07-5cb8-46e6-9c76-5e14156c21e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93de47f1-a0b5-4be4-9b55-2b0f92190cac",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5aa05c-7dd8-423a-bcec-e877ebed2f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42d8284-fdb4-4263-971b-4aba9bb06c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25b7106-cd00-4cbe-bf41-87655e044281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7d842c-7231-4aef-a1f5-95e336a6090e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa485ce1-4415-48f1-85fe-e0f4fa587c98",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178905dd-8b1a-42d2-9475-c1ae17adc236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee0808f-0739-487b-afdc-5089ea990c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26c2440-3b42-4063-9a34-d5b55432bbee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446d86e0-472e-4960-a35c-6d0c642025f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdb54a8-98f8-48b0-bc87-aac76559edca",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ce131c-e644-4651-b3b3-55f2a4ca17f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88279de0-4e4d-4dd9-ae7b-f179a68c2185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb6e3ec-8af4-45b5-9fb9-0f440e183190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b30bb3-3200-4d76-bf08-9e9853f3f030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5c644d-3299-45d9-92b8-46bb18adb1cc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df34069-ee7b-4ff4-baca-0b35fab1c407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f32af4-3b31-42af-9b97-ede45a419886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "728e9415-f5ea-4f93-8ed7-d42d78688773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1482a1c-ed9a-488d-993a-f847bc591992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5302ac6-ddbc-4a7d-b90d-5c69f5bc598c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246890ec-4c39-4045-bd35-5df1a1e05175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2da5648-5e9c-47d4-a176-3c90a541e6d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7b3235-8f0a-455c-b54e-cb0746306dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb6fc3a-f003-40ab-872f-6822cd73d3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef759503-7d5c-4bc1-a02e-6df7aab2f7ac",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c399ef0-2c52-4610-a4c6-180c1a4155ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8188c23-b68e-4e46-a00a-f88c6f52fa5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52486c0c-8879-4ab7-a3b2-2234f9c58913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d00619-298a-495d-b757-0113868c608d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e703a8c7-c1f2-41c4-af03-8eb50cb5c5e9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f661c699-d5da-47a5-99f3-c6da75a7d61c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47fc8f55-6e60-425e-9ae5-2af8a11b3731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7a8be1-00fb-4386-a638-bda3d65ed355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af2ffa0-9a17-4502-b754-6cbfa3f119ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5f2d74-e2d0-4f37-89cf-977421ed19fd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40c6dc9-975f-46c5-b410-3e3fd853aca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b2f312b-fbc6-411c-bfdc-3bc8414e091a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfff0642-a484-459a-8129-a1f40e761886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc807b8-ba2d-4090-ae58-7b7818799cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ad5199-683f-4329-801e-d7c5d68a8d1a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf39cb7c-6290-47ec-9046-65276942b9f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7fe4bfc-57b8-4cb5-8eb8-defe096228f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8d689b-9788-4f0d-864b-f87b8ec290fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a90bd9-168f-4a5a-ab74-557efbaee6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1536a4-bd48-40a1-adbd-33e23352241a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783428da-4f7e-4637-b342-23b4e2879a98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "260ff654-2262-42f9-9770-94545fa58ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86292a19-d9d0-4e03-b9d7-f18de077a115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f177a8bf-b7a7-4cd4-813b-e271fa249b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f39a491-e3a5-41b7-9997-a8104fde9cf2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae821ff8-5765-4ee9-960f-68f66b78b5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7dd273b-4aec-47ca-8aaf-f34b00bf20e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370c4952-8e35-4f6e-9c99-b6fb0f8b5d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225bf376-b10b-4bab-aa05-0f1f2576db31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac4817f-9ce1-4973-9f5f-409f5fd55de8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f1ee30-8f0c-4f52-8b24-995fe2010236",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc7d4538-ff2b-4358-9077-85ffe9aa4542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae27a84f-f4ed-4afc-944f-4505d0b6e43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdefc322-dc7b-4f90-a1ac-f4ef2446f46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2525b582-85df-44b4-b14e-1fef56cc7385",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf721a4-a0f2-405d-a84b-c0e9c59a4e3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91cc5c59-33a0-4061-941a-d5dae069e5d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55ca27d-5899-4c93-b84e-760ef7504592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d791b6-b522-4f12-b66d-aba7c2b3dcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48770861-34e0-47d2-b37e-fc94ae3d96db",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79f4c15-60db-4070-825b-ef8baaa39a43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3acb449-b98a-4a86-b67d-368e06b073d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3db38e9-d7d1-4d10-8f25-8b61e03cd309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72315841-c2a6-455b-a970-83277853cc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c467fce5-819c-49e7-9cf7-b4c08835150a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777ba3a7-f86d-4f35-984b-4f2af4ea4b9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e57f751-1be0-4976-9fd3-43a168dda1b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddf5c5f-09d2-4227-ae53-63c0b12ec7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa20e8a-afa7-451b-a0da-8b5717b697eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7414cbc7-1ffa-4563-bbb5-d01905abd395",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748920d6-bfdc-436d-aca7-d36b41763e76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d98e7736-fc39-413b-a8ce-eee8daf5742e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acce20c0-85b4-4362-87b4-8d0c511f995b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9efb613a-0539-4b09-a246-73a18db20716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5faf0e-1f69-4c1c-9746-4b241545c81c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf32a5a-b7db-442a-839d-8a07aa4ee526",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a328c679-90f9-4a22-b264-c3a745d231bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b774c78-2ad5-4c22-810c-758390a9b8e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ba5eae-b49b-4468-8fd3-3558c8846d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05898238-152f-4129-98ec-ef9265c0bf0e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed1929b-0b53-40e1-8095-6e460fe39697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf392db4-4e09-4b98-b83f-ab05f3e0989a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "649fd6a7-bb2e-4a9f-a56d-9c79e497f15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9108b5-8adb-492d-8723-c286409c8e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4db775e-0159-4979-acec-cc231c9cc0e4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d794090f-078c-45f0-a5a9-56281e9b6a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c072f6c9-fc7a-4c69-8f60-97ec15410376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc92ecc0-82e8-4d81-82dc-a64c55be512f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb72d30b-81fe-4369-87cc-967c80e50e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde4a10e-d279-4cf2-baa3-7700d221c138",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f518b82-92e1-4093-bd57-6637f8973ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffaf98aa-607d-49af-9b50-6a30851e8846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9679510-6afa-46fd-b331-1fd293a3144e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42354d49-2526-4466-9ada-5bbf8e84fc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1a8145-25dd-40fa-8534-09c87b628913",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc8008b-7af4-44ff-8a2f-aa7b601134e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceb5463f-44b8-4dc3-b8de-8e3e0b79a89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "473f936c-ec90-4d47-9204-e4e487cbb913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b228247b-1075-4796-93b0-5eb0d642c502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f276a0-a761-4097-8985-98ab5df28f21",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870d28c5-758d-4ed7-97e0-54cf9af44930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204d1a7b-6aec-4057-b0bf-ef43fbb08b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bfc952-b1bd-4ed2-8f9c-143a3e3db002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc50551-a18f-4569-8f43-15805167722c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34250c9-3f04-4f81-ad78-ce1c3ff595aa",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a35f016-44ea-45a2-ad8b-61f9ddd11726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2617ce-aa2a-4c4b-91f1-3a854e82151a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae05a7a-e0bb-4f05-9b00-7195f6e333f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c788a9c-b6f6-4eee-ad1d-25ecc073a150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7cf80a-7e2a-4d6f-9764-1a2e1ec981d2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346ca0dc-ed65-494b-ade7-05593bf55008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eff3ec8-6f9c-40d6-b62a-dd10af508af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48d818a-5950-4ca2-b9ab-e51a38705782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42ecbf3f-1ad8-448a-aeb1-047e1670d081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7757af5-caec-434c-b79d-4848483d23e8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244e40db-97c0-4ea7-bf79-6bef495210a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419633f9-692b-4504-932a-3eab2e33f398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66493042-c7bc-431d-9117-9e5486c1c3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e09dae-9575-4339-8bb2-1e5f857eb5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92d69ec-d0e5-4eee-a746-a9e55036b277",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efab7782-2430-450e-a417-5e86ccabf0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ab0ce7-0a5e-46aa-a285-d47a0f86511f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2a3ba3-ce24-4273-9765-e4117ebd8335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c4c3490-f395-4b43-a23d-2c69ccd51892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69150522-ae1c-4512-8445-0cea11ea7a37",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8f975d-8268-4e11-af19-eb799ead18ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7087ab7e-4e12-48be-ba2e-c189019daab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "753963cd-1c84-4975-8bff-4cf3a577db72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00853216-10d4-47a0-ab31-840e4a6fd358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ecdd646-940a-4b47-a2a0-bb092fb7ec2d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e312c7a9-93af-4047-b1e6-7336e4766a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d56b73-99bf-436c-86fc-4121e0288ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888dfca2-2978-4b98-bdaf-66b0d87c1643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1142ed-7a4a-4f30-a7fa-adcc5613eb7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df388c02-9a27-4a4b-a9da-44226ed72969",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8801d349-aa59-4f55-b318-7e3257e42598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3625b1f1-e5f6-4256-8acc-718c3de96a93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cddc63a-7b21-4197-a08b-2cb0d86d8893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac9cc50-1184-4184-b5c2-afeb3182dcaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b19c59-ad48-4f98-abdd-af4918015b28",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb9821f-8681-462c-b304-f537c66018b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0027119-d6b3-4a64-ae6d-8f22e36bd68b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9b62d2-2198-44c0-8526-b20b47833202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99d2435-b515-467c-a714-b9db6fc043b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10cb8a46-d218-4ef5-b190-8982dda61941",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec15822d-59ec-417a-85dc-99edd158b8dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc8dea8-d7a7-406f-89bb-aa61e9ac0388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935adbda-6373-4e27-8918-dacd48d423d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913489b9-3a5f-4132-94e0-b9f36e14d9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2271ac-94ec-4ad3-b392-34bea7808e3e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae7af3b-dc01-4582-94e3-805c1fd97748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d80b9ee-fcda-4e46-b58d-5179b7d33177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c885e97-d38c-4cb5-9c1d-cc4390fac7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b167b13-ce5e-4f03-afe6-6e34333eb2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3674d2b-6518-4fb8-9bc2-84565c27d406",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bfac74-54a6-4be4-9efd-069ed8cf0fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6278d8d4-93ba-4a04-af87-5a8e39d5cab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6d175d-264d-4638-8857-b2d4111e3a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee259cb-28b7-4dcf-aa16-8db0e83ce048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e725e53d-125b-47b2-bf43-eeab00055fa4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f5fa83-8bec-4534-9081-777e17611a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcdec9e5-0875-482a-979a-135b47e1ee8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11b7563-7321-4e40-88fe-1dabcd10585b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e92603-577b-482d-86da-9d41ea36ea4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24aa355e-8547-4944-9dd2-3d7bf62e91b1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85fc281-9c06-4f85-b89e-ce07225a5c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c1c95d-b0e3-4bda-a40b-1bae0b66cec0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1caad2-53e3-4655-850d-0b2c488f2f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b377bf4-085c-433a-b37b-042cd8477942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74cdadc-ebf1-46d9-aab7-baf6081b31fc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237199d0-15fb-4d55-b9d3-f4b812a2e3e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061b90a7-5676-4c12-b24a-b123588c3d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9cbb9b-8445-4622-a10a-93abbe395434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a0b737-71f2-4c04-b011-9896ef4bb993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936b4c2f-8bc1-43b3-8da0-acdd2cbd81ce",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f87cfe-d67b-48b3-8cb7-12c0c8bb386b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef40a3e-cdde-4b01-b9c1-b0e847dd8dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c7d4f8-43ab-4437-8d64-33acad99565e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebf4318-9eb1-452f-9e25-1457d2f98941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf65f52-1ef0-4617-850c-5b0de6ca4e9d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67c41cd-cb34-4cb4-92d3-78159386cc17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aee2825-31ac-4b96-947b-045b3587f903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2a7b17-0ce9-44ab-90b8-f08c6f7ee77f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dce6bc0-e3af-452c-84a7-42da23b0d609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14524ea8-11ba-45fb-95df-afa71d7976a5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999ab7d0-e65f-4e99-b885-50181ac62d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5602d7e5-eec0-489b-8273-5c2158977033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881d0aca-ba49-41e5-910a-a116d53eace7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bad7e3f-34e2-4451-ba36-1035e8acbdb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d9706d-da45-487e-9a73-04c1499dc69e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70979ea-8995-4faf-abda-d477afe56519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b81b45-fbae-468b-8521-fa2ad9be97d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3d4aa6-1791-451c-8614-20569652eed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29b962f-7e3e-4cfa-86d7-58b382954d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b262c9e-6442-4321-9751-9447dfe6d750",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e119da-16cb-4947-8fa8-646670338090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545f56f7-2dd8-4d50-9210-471f5c11b9ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec746a6-2e45-41dc-8fac-c10378873e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc44309d-4aee-456f-a081-42abc8b852a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c6d0c2-3de2-4518-8655-83d898d9581a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f323ec-0702-41f2-a3e8-4cd4c361104d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17cda73b-bb46-4ffb-94e1-dc91f246625e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd68390-2fb3-4abe-90bf-e0b434dc5528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e07aad2-3f38-4e33-80e6-087eaf2017af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e299171-941a-4b17-9874-5774f2780a9c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d081825f-c412-41cb-8815-4a9451981e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7614ff41-1bb2-47a1-af50-bd84afba7cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d285371e-ae6a-461e-819c-d4f2b2e9913c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab31921-6edd-4250-9d0b-281e70d79b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e495535c-b2cd-4f66-a454-8bfb71de00bd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a748b1-2105-4f65-85f6-8480395d91fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187f9c88-d14d-41c5-b44b-22f0c01e2beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a097ac0-7f26-4ec2-a565-7a5090bb90cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e275c216-676e-41a3-8461-cdda1b123db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cdd910-9758-4578-ae72-77e233aab797",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1fa75a-f70c-4580-a430-67790d52ad71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f1f48e-3af3-462d-8bf9-c2cb8d459834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd6ffdc-4b7b-4188-ae6e-5f21e88888c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de25d00-4b21-4a9b-80a8-261c617e9bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f032ec-d12f-4405-9c5b-0a52cd6211b1",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c854e4b1-4630-4b02-89b2-ff04b06e2899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fa5dfe-dd65-4aaf-af55-274b2d9e6e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c0ddf6-9bdf-487c-918e-1bce579397bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48190d46-0f24-4049-8763-9f0707fadc24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c702bf12-68ee-49d2-ad09-5cd1f5084f11",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2706bacd-45ec-4d0d-974a-e87b04d0780a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "461e29a5-e021-474a-bb67-ff97383dceb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bda532-ee5a-4aef-9a7f-405cab83b9b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd005a0-f10e-4207-b91a-166a60c75798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62907982-b252-4e16-b177-d791953d2f39",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671da227-0425-443b-98a1-dad0e0c383c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35003c39-1879-48a6-af83-abe529e4b9ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b953b78-ab54-4a47-92c5-2de6205a7952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57111508-9e74-443a-9ce0-f31ded9ce8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003f171b-7081-498c-8f05-eda6b4d386cb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daac1ff6-3de8-4e2c-ba1a-075621ae2414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be3461a5-31fa-469e-b61c-54e308d199d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae6ea37-2335-43fa-855b-5cf87bbf89f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "601f24d1-0157-402c-929a-285b59463b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484c794f-3f52-4ae4-96ec-7677d4e272da",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f9fe82-9671-46c2-8155-ac6dfd9a48fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e237a44-a017-40e8-9d50-1e6e83916477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298de554-2a79-45cc-8338-06efdc5193ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7592675-84f1-4dae-939c-fd290591853a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3484329c-79df-4d05-8145-aee0b08174ff",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37693857-55b5-491c-bdbd-d79b01a04d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "068e1f72-25fe-48e7-b4cc-41ff4cab305b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84bb85e-2cbd-4a6b-a684-3021476dec84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f96a4c-b1b7-4a08-bc64-32c6a2cd8a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38ca6a6-f401-423e-84fa-e493b7ef222f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cce789-3e01-4387-aa1e-4f3bcae8d2b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df4723b9-2b4f-4c72-b5f9-19df68836247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4936b9-c984-4295-bedd-6886902481a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0e9cc1-295f-4370-b089-fd6a273c1efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7f1741-4dd6-4da8-9c32-16178a510a55",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758baf47-49b2-489e-8b11-f14afae12840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0605f9e3-4be9-4771-9053-864f6d405428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "792eeade-3356-4b1a-bc79-205ecbc4bcfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aca4b10-2dfa-4182-8637-dc1a25ba7177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d312cd5-f579-4e7e-8226-5c3ca6e59a8f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f7a042-4c5e-4330-8e3a-7d9268a38e12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "421d1808-4071-4c43-aa78-08523216f650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aece8d61-55fa-4fc0-9b4b-8ab91d7deee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "645e1b77-1cbd-4575-840a-632e9ac41a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cfe8e5-5dfd-4d5b-97a6-c1db8d12c020",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e33c91-79b9-4e7d-8905-ebc1bcd9493f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7514b461-cd1f-45ff-9f07-54c4f665f74e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb417ad-9fdb-4040-a8b4-1b40fc8a8a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c17df76-ec49-4610-b7b6-72c732bb161c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230645a6-a91f-4405-933b-a2523e147767",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9612554-e90b-4719-8848-53dd1606df79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5cf5263-c103-41ce-bbb4-5c974b9b6cdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa54a11a-6d70-4c84-8109-f3bb66b009dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6aea488-353e-4aaf-b0f4-b7b3b982157f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18fda4f-3d74-42eb-a7bd-c39da281cf79",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47362445-c500-4257-a6b8-ac83d441abcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c795446c-fa88-4478-8d92-3c41b948e815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1daca933-21ef-4139-9029-bc39fac8954b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d2ceeb-f923-4153-af61-6dff2bb2382f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b97472-f719-4a0f-8d14-4b630d235228",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b7cfa7-d0c1-411f-b008-2ddf7a9d60d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bfdcae2-5c47-4b0c-bb32-c97e036474d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bd15fd-f194-4f2d-b20e-5bd09624695d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128b2727-a760-47ad-8a99-5f582a347080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8634ed-4136-442d-982d-27a5df602a41",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c188ef59-6eef-4a3c-be48-bc809b7b6b4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "521908af-d0e8-4248-80b0-4b42dca826b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb0a408-240e-46d8-8dea-de4f6695c4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f72d8ee-ca3c-4045-a666-f7ba4d639f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5cb830-ea12-4aa9-b452-8f953c70077c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e35731-8d06-4096-ba0b-8905297e4e77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a756011-f14e-43aa-af69-0fbaa8daf7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bc000d-083d-40a8-a6cc-319a13771f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f041d95-bef2-4b91-977f-648cb5cbc165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bd1014-9f2c-4121-b946-dafc9462fb22",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fee08cd-69b4-403f-b33c-9382669bc1c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "633d0ea3-5a02-454c-b578-ac4e1edf7ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75bf7eb-9111-4e2a-a0b6-817743237c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fbb37dd-3d71-40be-805d-948840622dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206e266d-2dbf-4f98-86b9-2be7f47f50ec",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad762de-3efa-4413-b9af-c428a3d2146e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "651073f6-968e-4b77-9892-3a2ace4f6746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd2b4cf-3273-44f4-95b4-baa2528a8117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6babf86a-b5e7-4b66-9e97-c9d866bbd359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad7216d-311f-446a-88d8-d3a7f07eb01d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257c287a-dfe4-4bfb-9fbb-f5087a2609bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "721044ce-66e5-49be-be9f-de7905a1d4ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be5139b-50f5-4774-9d84-0f79c4c01460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35a16cae-7173-490f-ac10-cec437e0529e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31f0ca2-d98e-47fa-b5b4-0c38a9c0ef5d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d23b157-5758-4e81-8e35-bc6e9e9d89b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "824d258a-ae4e-42cf-a3a4-4d5fd71d085e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da58b14c-2231-45da-a886-47f33f96514f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e88da3-775f-4762-9c8a-0ed582a7d305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fe0cbf-9a62-461c-bfeb-e4ad85be55a8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290fba1a-42dc-486d-bcab-68080e55dab7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5bddcc3-dc80-46a1-a7dc-91b6153701b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f025b71-99d0-424c-8341-da941a8d2dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a784a4ef-0518-4d25-9fd7-23e2217f1f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a6b1e3-fe47-42bb-9d29-d276b8a23a15",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0914918a-e950-444e-96ec-0f1f88a21c06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a4e4981-5ba5-49ba-8960-be2665e4bfdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5755bf4f-3a85-499e-b971-f83bc2e56345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d047924-569f-40f7-a9e8-b15d2d23c3e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed81f394-57af-477b-bc4f-2516b9018fef",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d661a5-48a2-4384-a471-a71a1b84252c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52f45457-7019-4463-903e-885ad4c51eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b77759-5ae1-44b8-8586-a6addb2962b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b473a82c-61ee-4bc0-ae56-9594d85c22f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d808f661-9bec-41cf-8eab-8270abf25dba",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b95c193-3839-440f-a5da-4fad2f6bc198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da603028-1429-468f-99fe-d412ee850044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aebca68-0c3e-4028-b1a2-d89d12549367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d481c4b-eb2e-436d-b033-87dbb37af12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb95ee91-19b0-4df9-a11c-07bab1da173a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9ed1f6-7ac5-4dff-9d67-52a26071fa99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90abd6ab-b0d4-4352-8ca9-2aaf2b6b8f9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3277174f-fc6e-430d-b7a9-38bd53030f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958740cd-4d83-4a26-a502-397160c0ec2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ff36d3-3e7c-4ed6-96a2-8b4884a3ad60",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1dff15f-6693-4974-ae9f-5516d05acf4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccf22bb2-c4fc-438b-9748-277b796ecc7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c69146-4679-42c9-b82a-048d4856730c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "235b0a2d-f851-4359-a03a-89d213451c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bf79a7-1000-40a8-b797-a7645559e78d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0596fb4-58da-417f-9d86-78b3806f185c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b5b24ac-e23d-4ae7-af93-6a198b84ead7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ece625a-9151-4d01-95d2-3c27c6ee68b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d3dc75-638a-4139-ab51-fd5b1a6d8384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74644b22-9a22-47a2-9a2c-0d86af225d98",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91e64fb-f679-4254-a0cd-df9e14039f21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67dcb8eb-8888-4a2e-bb92-6799505c96a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08784357-cb48-4fc8-8885-07623e754b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d00e34c-ed98-40a7-b22c-7374397d720b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2e144c-103d-4498-9e68-8ae45e1847f2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d12540-8a74-41ea-95a7-9e6c58cac962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d387e29-6032-470e-a48b-d1fdbe080632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8342cf68-574e-41a4-90a3-590101cf3c0e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0783b9-1cbb-4c37-90a4-1e1211190342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97a7b46-cad2-4620-b34d-ec0438a86bad",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aeba2f3-aaef-42ad-9aaa-56446ed64bd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaaed8e4-f967-499d-8ac4-80d88b153146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed93de74-d608-4905-ba96-127760f34cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a4b44e-c41b-4543-bbbe-be54ac72f418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dcf122a-71f4-4df6-8d87-76aff13c2c61",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81d6f02-d869-497d-aee3-b59f0ff33ae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f63f2136-0fc6-4695-bc35-4bd80dbb5f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0863db-5858-4191-8489-038cd71cb712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36f37a1-d26a-4c3f-895d-7d2c3577b88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d37c77c-6755-45d2-ab9b-ed10dd28d530",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd40f65b-1fe6-4cd4-8fba-5e2e211df4f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "930dc377-b82f-4ceb-b7ca-94d5f398abf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a2156c-abf8-466e-9ff5-9cf65f97c404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a269a4-4071-419a-8d7c-ea155e27e376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0771bae1-935f-4307-b281-c81b2659e68d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1737a5c-9bf8-46b2-87d3-facc7da0274a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01b41b43-0444-40fe-9f08-aa3d6da4d9aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1aa8bfa-9fb5-4632-a4a7-2ade2c36107f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c27cc5-2784-4958-820e-93078ca7c9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59443383-ad95-4528-a19c-e5fdea952f9e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e870e0-ca83-4cab-bb6e-c762c6d1f885",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72cb7b57-515c-44c3-a918-12065258fedb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf39682-3b13-4b27-88ad-5eafbf22b846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41729eb7-d2e3-45d0-ab01-6ffdc23529e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a7ae9e-caff-4b64-b141-032abe4de1bf",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39c3f95-42e8-4473-8eb1-87483fda156c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ec99a0e-9ffd-4701-8bde-cb15ce5bdc56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fe3345-6ca2-4ef1-97fb-52749d428583",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98decacd-aef3-4e8a-9305-fe0628eb9d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7856ca4b-80e2-4273-a709-4edc71146014",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539e6fc8-95c6-4879-bdf1-983299509b2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb6e53b5-cc44-43d1-8975-56d19eb37889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fcb73a-a90b-41af-aab3-c6d0fda2976e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a83907-4c6b-4dee-8778-8bfd67464e83"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91eb1ff3-499a-4c5a-8f50-cea1c4d25591",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c14d7acf-f67c-4470-969e-1455346f4aa3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "88c3608b-6911-40a6-b7c8-2eb5efc0e952",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d8303f1-dfee-4d59-9913-946acb3bc37d"
                    }
                  }
                ]
              },
              {
                "id": "03fb0875-fc87-4883-be7a-343c2411147a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa6407d4-ceda-4ed0-8909-a3cee38426f1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779e1781-04be-4d7e-9cc3-ce5f33df24b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "974adb00-b8c5-41dc-8aaa-763fc83c6184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5803d1-390a-4ece-912b-bf6f6570a989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98125f36-78cf-4c1f-8496-1db98496c33e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b6d56ec-b727-46c7-956c-f6ee83f1c36e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4bfcea0-8ee0-4697-b1a7-19c7b6150741"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ec4852d-3b83-40cc-898f-6df47c0ac741",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e292ba95-f620-4db1-91c0-df854597b19a"
                    }
                  }
                ]
              },
              {
                "id": "3c933ea6-fc9f-44dd-b9ab-feb49ddf24e0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "00b55aab-43c0-4354-9310-38947e0bb018",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0510d479-0c7f-41d6-95f9-165e7c3cb157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7f518543-f351-41b8-bcb4-817d21d57262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22489da-e454-4882-85d1-67eb5e8b799c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3313fe47-386b-4ab3-b219-54e30f48f880"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f39f02ca-3265-4b04-915e-44a7ab5b1054",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a389bb1b-58ec-496d-af99-79768381f744",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8d42481-4db6-470b-883c-72656a57f381",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "90a1633a-1b81-40e8-bf72-61d2aa83cb34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "645d1d9c-ea80-4b9b-b503-bf424084aab7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4030732-ef72-46b6-a5ec-edd4d69cc7b1"
                    }
                  }
                ]
              },
              {
                "id": "4cd50e87-71b6-43d9-b14d-783edaf1853b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a55236a-5a83-4616-a26e-1b5ec59d1926",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a52a86cb-9d8e-493e-b780-cf53c67805a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5af9fdc0-2abf-494c-8afd-70fca8ad4484",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4b2b6b2-b014-445d-be55-903a1f5fbabc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a702a163-cb6e-464f-a3f2-8031f4f65b1e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c6c6df48-b7ee-4fb4-ae09-a48d82b12fab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd05fbcf-6e6b-4504-a07d-b9ddfa610ada",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26e256f2-c491-47c7-85bb-a4ecf521cdcd"
            }
          }
        ]
      },
      {
        "id": "32fe5196-fff3-450a-bc38-4e416963a60c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7f0bceaf-3e8b-4b0b-a487-37cb8796de71",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5229586-3e1f-4c1c-b9f1-043ce76db59e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9390e6e0-686d-4297-afa4-0cfc7790059b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8f9344-39a8-406e-a9bf-aee9097e677c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ffee6cc5-89f3-484c-9496-c71092c96874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010fe613-68e5-47c9-892d-a0b75a398386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "707fc5f3-9ba5-4b48-ba29-9b1307057203"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1c53cdf-7a2c-4a61-9002-401b5329aae5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "917efd74-7202-4bb9-ae4f-9315364dd0be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3f3032a-8472-4dc8-979d-158a2e4b352e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b657cad5-59fb-4d89-8b71-bcc9ad2f5cd0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6250e12a-2b01-4b97-b847-4785c0a71996",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ea33e182-5a6b-4df5-afa6-729a7404fee6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b464c55d-dd89-427b-adeb-2a40d478d651",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9859c463-5344-458b-99f1-db42defa0f94"
            }
          }
        ]
      },
      {
        "id": "a822e5ff-c799-483d-8eaf-11b3d6d877ec",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "eecc29c1-4f88-4729-bba6-d19b4fbf1814",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf468c76-55d5-4935-93f9-abd0f47f73a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdf487f4-945d-4b7e-ab84-b3520fc612b6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56ce075-4380-4779-bb3d-f9a5e648332c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77148a63-9e8e-4396-9a1e-81e3e68bec9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8391055a-a6d6-4b1e-bfe5-df736e5af274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe9be7d4-42ff-404c-8b78-7ec3dbf60fb1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e306d5f-b7f1-44da-95b8-798bab97ad37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc1d6bee-2c39-4df1-a8b3-ae8f46566f1d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cec82f4-1f6d-459c-b70c-529c6b2192b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88fc77cf-7d27-4991-98d0-a0e91ce2af17"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c68b52b-cba2-42f1-940e-3fbfc2eb34b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "873ea8e7-fd38-4fe0-bdc8-6c987a289773"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a875c058-14ea-4af8-8cbb-21083b9e3400",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "296e23b5-c6e5-4fe6-bb70-a72abbfaf204"
            }
          }
        ]
      },
      {
        "id": "fc65a979-9946-4149-aeb8-252a518bbacb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d2135d25-8c92-4499-a257-cd2d4755caa7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ec46894-846b-4e58-94ed-2bf90d3d17d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c44e754-e661-4202-8cf9-802f0f480550",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d8de53-20f8-40f3-ae6e-33b906f1c40c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5e4060c-96cc-4aaa-b8e7-2b8a0f04ff7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e79316-5ee1-4a9d-a43f-5ad9aeae33ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b4b55f7-ff7e-4da3-91a1-61dfabe64caf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18baed5c-e7d2-4ee4-971a-5219bc24a0ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95608ced-afbe-49b4-9938-b714a664bbfb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfaabb1c-42f2-4d21-bf8d-b50dbf463e9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "513d96b9-8a60-47ef-83a4-f593f0bf5d29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4caba74-39bc-4bd7-9750-225f07293426",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "783b8d72-4156-45f3-b585-e7425cdcf885"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "686062f2-3c5d-4e19-a564-f92493a847b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "251e9f87-eee9-4faa-ae7d-4f07632166a5"
            }
          }
        ]
      },
      {
        "id": "f1ee55c7-760a-44e6-9fc1-089da7c2559e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf3b940d-ff9b-4803-8c12-fcd8a696bd92",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb3dc4b1-5c42-4238-a9a9-e128a3f81205",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e4089e7a-515a-4fc5-a049-9185b42a6399",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad07e39f-6f7d-4f21-a112-e6cee6dc5364",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b8e51ac-aef0-48e4-8290-ac24d22e5166",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 122.08070175438588,
      "responseMin": 5,
      "responseMax": 1019,
      "responseSd": 94.41894591063785,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711067640103,
      "completed": 1711067684459
    },
    "executions": [
      {
        "id": "4c97666a-b427-444d-9592-4bfe9da5fa50",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8f6c431f-5003-42eb-be04-982d03a5d6e6",
          "httpRequestId": "044c873e-fcf7-40b9-ba24-d3a2fe7287cf"
        },
        "item": {
          "id": "4c97666a-b427-444d-9592-4bfe9da5fa50",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6cc1a1c7-c204-44ee-830a-64f505e5671e",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "d77193f5-f962-493b-b538-978ade164d1e",
        "cursor": {
          "ref": "d382ab05-915e-475c-b32d-98e34f0ad390",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0434cb3e-7d8f-47ca-8742-6374013fbec0"
        },
        "item": {
          "id": "d77193f5-f962-493b-b538-978ade164d1e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cd675b74-9ffb-4758-8d89-f661ed46e479",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "41263a4a-091f-492e-aa75-1b06c42f04f7",
        "cursor": {
          "ref": "9a4024e2-28e7-48fc-9fec-c60497cf6c02",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "98c2ac25-d7d2-4bd0-9dfe-ad3ca19b676e"
        },
        "item": {
          "id": "41263a4a-091f-492e-aa75-1b06c42f04f7",
          "name": "did_json"
        },
        "response": {
          "id": "e110c625-e728-464b-a8ae-4298ad6c73f1",
          "status": "OK",
          "code": 200,
          "responseTime": 383,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5413ad02-2cd6-4b38-9ff0-7fdbca13ca8b",
        "cursor": {
          "ref": "d3b715b4-f753-44cd-a7c8-eb2c992a5295",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f680dfd2-9fff-4b38-89b2-5f52d3ae9544"
        },
        "item": {
          "id": "5413ad02-2cd6-4b38-9ff0-7fdbca13ca8b",
          "name": "did:invalid"
        },
        "response": {
          "id": "75e3bcf7-1069-468e-a30e-a1fabcca1aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5413ad02-2cd6-4b38-9ff0-7fdbca13ca8b",
        "cursor": {
          "ref": "d3b715b4-f753-44cd-a7c8-eb2c992a5295",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f680dfd2-9fff-4b38-89b2-5f52d3ae9544"
        },
        "item": {
          "id": "5413ad02-2cd6-4b38-9ff0-7fdbca13ca8b",
          "name": "did:invalid"
        },
        "response": {
          "id": "75e3bcf7-1069-468e-a30e-a1fabcca1aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b47eae8-f6d4-4042-a3b7-007cfa620245",
        "cursor": {
          "ref": "a3e6db29-0285-4238-86bc-45c010daaeef",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d23dccc2-fca8-4460-a387-bb82c60d65a8"
        },
        "item": {
          "id": "0b47eae8-f6d4-4042-a3b7-007cfa620245",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "59093a65-42f0-423c-9dc3-04521eb3863d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 204,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ceb6ff1-02ed-4b90-b818-c5f31249757a",
        "cursor": {
          "ref": "814ccea8-595c-43bc-822c-7b892a133612",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "140b53b4-2345-48b6-a273-41f82bc3243a"
        },
        "item": {
          "id": "6ceb6ff1-02ed-4b90-b818-c5f31249757a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2a35bdbc-5ccf-4ba9-914b-066968d236ee",
          "status": "Not Found",
          "code": 404,
          "responseTime": 103,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d982e0-4f40-4891-8541-5d0c7b82b789",
        "cursor": {
          "ref": "49a9d547-1e1b-4630-a0ef-543321fcd038",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "862d4669-e59f-4e92-9ab0-4e37a3c6e3de"
        },
        "item": {
          "id": "04d982e0-4f40-4891-8541-5d0c7b82b789",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e5a99b05-6856-484d-bd3e-05518570f5a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1543899-acf9-46f7-bb3d-d522a9721b9a",
        "cursor": {
          "ref": "b73bd500-8864-4264-9a10-7f06d837ba9d",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0d331f1f-616f-4e4d-a5f4-38cac9e8243d"
        },
        "item": {
          "id": "c1543899-acf9-46f7-bb3d-d522a9721b9a",
          "name": "identifiers"
        },
        "response": {
          "id": "8cb3b051-20ba-415e-94a4-6b360e4390f2",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84decbca-a958-4e13-af3e-cb3a543690de",
        "cursor": {
          "ref": "6eb07056-2392-474c-a347-9c488a098014",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7389d847-1154-4a49-b32f-bb63efab1bd0"
        },
        "item": {
          "id": "84decbca-a958-4e13-af3e-cb3a543690de",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d0c3eb01-f0e9-45e5-92ac-1ee62c3ae4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9388ce22-c5f7-4775-996d-5adff6763c53",
        "cursor": {
          "ref": "b53186e6-7c92-4d5a-87ac-12a953a9ae4a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "60da675b-c2ca-4bfe-9353-9a63492e9cb8"
        },
        "item": {
          "id": "9388ce22-c5f7-4775-996d-5adff6763c53",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "48909b6b-864c-4206-9861-97a9134bc8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce23bb57-988d-46ca-a8b7-666e41c7affd",
        "cursor": {
          "ref": "4fd6e8ad-1ef2-4800-ba31-565b267b1156",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "97587fb8-dd84-4bfc-a154-0f2c00b8b067"
        },
        "item": {
          "id": "ce23bb57-988d-46ca-a8b7-666e41c7affd",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8d6d90b3-c122-419e-bab1-62d339091aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58765c72-45b7-4da4-8849-5dd827d0c2ec",
        "cursor": {
          "ref": "d4c04a15-637d-470b-96b3-52888dda1b6d",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b558739d-0772-4712-8e65-6725eb644aed"
        },
        "item": {
          "id": "58765c72-45b7-4da4-8849-5dd827d0c2ec",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "70b094f3-096c-458c-a5ee-65c695433478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932fc66d-1340-4ce3-a518-f58eebbe8a2a",
        "cursor": {
          "ref": "81cd512c-1364-4599-8a7c-2aba608fa725",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8bee773d-7884-429b-98b4-2e987d367ffd"
        },
        "item": {
          "id": "932fc66d-1340-4ce3-a518-f58eebbe8a2a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "780c093c-5dca-47e0-b54a-8d0657bad5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4e69e9-55db-4915-b14a-249dba5d7e5d",
        "cursor": {
          "ref": "02345d1b-bfbf-4dd5-bf02-8e1232314a32",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "17777ed1-5ea8-4552-8367-d3a4396f2e9f"
        },
        "item": {
          "id": "7a4e69e9-55db-4915-b14a-249dba5d7e5d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0ece9014-d60f-4966-9d42-13227b322580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3488d43-10da-4262-9caf-ff821fd4227e",
        "cursor": {
          "ref": "e71a9165-168f-43f4-9d26-19ef3e6a6e4d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5ebd5fcd-9061-4ecf-9bc7-d563c2d52dd7"
        },
        "item": {
          "id": "d3488d43-10da-4262-9caf-ff821fd4227e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "61842eb6-24e9-4d94-91d5-31de3e089d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2aeadeb-f342-496e-90f6-6459aea18e6e",
        "cursor": {
          "ref": "cb500292-822f-4e4c-baa1-1848a947d533",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4d2a95b7-f3f3-4a4c-99af-925c91ac66a0"
        },
        "item": {
          "id": "f2aeadeb-f342-496e-90f6-6459aea18e6e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5145532b-6864-4581-b157-76f63a8ee25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e306b991-9445-4917-b72c-cc7fa3f722dd",
        "cursor": {
          "ref": "6dc37b87-e07c-4c9f-af0c-9461f4d7993c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8eb45f6e-cf34-4b13-8b9f-53590d8dca10"
        },
        "item": {
          "id": "e306b991-9445-4917-b72c-cc7fa3f722dd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e3412d5e-bc9a-44f4-bb3e-4327925447d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1572c7d8-256b-493f-899f-08138f6a00cf",
        "cursor": {
          "ref": "ad71efea-f33e-49ce-8992-4cad77ddc429",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3cd1e1b4-be6d-464e-be7d-23ca35a421a0"
        },
        "item": {
          "id": "1572c7d8-256b-493f-899f-08138f6a00cf",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e8e62e9c-5314-4198-842b-31003bb0cdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139969b0-3c37-447f-bc77-140011e9c8c5",
        "cursor": {
          "ref": "c17cb2fe-4694-4521-ae16-3c29013daf28",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2095d6e8-250d-4b34-8192-b2bed668c349"
        },
        "item": {
          "id": "139969b0-3c37-447f-bc77-140011e9c8c5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d8ab0804-d606-4733-bed5-7b21d18cf465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6cc117d-c3ea-49f5-a2a8-39103950ad6e",
        "cursor": {
          "ref": "00b704c6-9c46-44c9-b718-60968c5bedc7",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ca3523d4-6a0a-4ff3-893e-bfa0e381a3b7"
        },
        "item": {
          "id": "d6cc117d-c3ea-49f5-a2a8-39103950ad6e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "90ea86f1-dcdb-4886-b5f3-a810f7aeefcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c39484-0af1-4a1f-ad67-12eafa38d8bc",
        "cursor": {
          "ref": "fa8dba36-4f2b-4c40-83f7-1a4a4f182c22",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "13657ab7-a9e7-45b6-804b-7a25c1f3d006"
        },
        "item": {
          "id": "16c39484-0af1-4a1f-ad67-12eafa38d8bc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "55dff994-4236-4814-afe1-60d9f7bd8080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23e30dc-070b-49b8-afc4-c8ad2417ab58",
        "cursor": {
          "ref": "db30411b-0cf5-49bb-ae3a-0e70c86bde80",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "65eb2f63-45f0-43b2-ba1e-d89412c86256"
        },
        "item": {
          "id": "e23e30dc-070b-49b8-afc4-c8ad2417ab58",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d8de09fa-208e-4e71-a215-69ea53dbb208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba192f8-0d68-4819-a26d-bd740eace90b",
        "cursor": {
          "ref": "f58ab300-925a-4af8-9e91-d15d6e23d5ab",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9385ed6e-e47f-4a95-81f1-84f7223ef63f"
        },
        "item": {
          "id": "9ba192f8-0d68-4819-a26d-bd740eace90b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3d1a64ca-a3f6-4739-b21e-4c9202188383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca0b502-f394-4588-9ae4-08f32e5b571c",
        "cursor": {
          "ref": "5cea8b4e-a95b-472c-bd67-cb50e41ccfc6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "24d18316-1318-4ebb-92c9-150b81cd5f20"
        },
        "item": {
          "id": "3ca0b502-f394-4588-9ae4-08f32e5b571c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3f6e4b12-e9dc-467a-80b0-3360fedfa0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e5dd2a-113a-4390-bd3d-10bceb5425c0",
        "cursor": {
          "ref": "3a63e6ed-bf9c-468c-b526-57c43f68d05c",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "db1b4360-b451-41e6-8d0f-79784bcc546b"
        },
        "item": {
          "id": "71e5dd2a-113a-4390-bd3d-10bceb5425c0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b99c9e24-3b75-432d-b778-58b2f80b09bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4b14dd-d184-44cc-810a-93a518e11ec4",
        "cursor": {
          "ref": "944def9b-7773-4ac3-a2cc-87aecfbb4c8f",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "aa99da73-d3a6-44e6-b727-8640cc24bae6"
        },
        "item": {
          "id": "2d4b14dd-d184-44cc-810a-93a518e11ec4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c8104a02-1d2e-4138-a274-d0577a153b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6f61ae-6093-497b-996f-b233af8f1a10",
        "cursor": {
          "ref": "ee22e4bd-9d32-45af-aeb3-375be9901b0c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "92ac59ce-cbdb-465c-b4dc-172b277504a7"
        },
        "item": {
          "id": "df6f61ae-6093-497b-996f-b233af8f1a10",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cf0af200-50c1-4e57-b928-1fd68ec6e429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c4aecf-dc4f-4ebe-9194-c8cc276aab7d",
        "cursor": {
          "ref": "d1772342-1eb0-4a8b-8fa2-95d414704e9b",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "32159ccb-efd4-4fa8-9e85-fa91112cbd56"
        },
        "item": {
          "id": "b5c4aecf-dc4f-4ebe-9194-c8cc276aab7d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dc9a989e-f319-4d09-81e2-662b420a9121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5223e3f2-5f5e-4eef-8db2-0e3d81a98317",
        "cursor": {
          "ref": "99fc455b-3b77-4599-9e6a-1c28321b991b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "172bd793-ac4c-4db8-8acd-909006682d48"
        },
        "item": {
          "id": "5223e3f2-5f5e-4eef-8db2-0e3d81a98317",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "477520e0-fb4f-49d9-b4e0-6a16fb92b89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a482bdd-d4d1-4a9e-9027-89c6759ec370",
        "cursor": {
          "ref": "6f889c9b-f017-4711-bc91-ad91cf8dd9f0",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "28594208-77fb-4726-b699-9c61b6479f7c"
        },
        "item": {
          "id": "4a482bdd-d4d1-4a9e-9027-89c6759ec370",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "43a211a0-141a-49e3-a9bb-f0f464de51ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a5be83-3226-453a-803e-f392e2ed5894",
        "cursor": {
          "ref": "1c83eb99-7938-46ec-9eb6-79befd4eb887",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "95941c04-e744-4e3f-907c-7d13e838e4ea"
        },
        "item": {
          "id": "70a5be83-3226-453a-803e-f392e2ed5894",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "300baae0-a0ec-4aba-9c1b-1240b4f53df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd2ff7c-19b0-4921-a552-d5a15495c778",
        "cursor": {
          "ref": "105ce2b0-9efa-471f-9434-fb05084137b7",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b0fcb865-35aa-4c4c-a16d-e73621322ad7"
        },
        "item": {
          "id": "bdd2ff7c-19b0-4921-a552-d5a15495c778",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "775b1b92-61f7-470b-95f4-381730815742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4288c1e-7a3d-4718-9466-40b1548439b5",
        "cursor": {
          "ref": "82a1eb6a-8f9c-4876-89f6-9c3ebd008bca",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dd645d21-a762-4c39-9033-45325e87f2f1"
        },
        "item": {
          "id": "c4288c1e-7a3d-4718-9466-40b1548439b5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "50c3527f-924d-4582-9a70-aa4fb8898e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60920113-660c-4607-bdde-36b186070240",
        "cursor": {
          "ref": "72bb7461-dbeb-4555-8d66-c8e811955ccd",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "04c21bcb-5e10-4d7f-925c-c73ce5f78335"
        },
        "item": {
          "id": "60920113-660c-4607-bdde-36b186070240",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d5d3e7d4-e80c-4bb2-ba84-c1abd5bdf459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27db3cfc-7937-4e0e-ac9b-a879a1af9d09",
        "cursor": {
          "ref": "9c59bd9c-6530-489a-99a3-f1e72f339194",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "57055357-dcbc-48aa-b4d0-4ce46faeb844"
        },
        "item": {
          "id": "27db3cfc-7937-4e0e-ac9b-a879a1af9d09",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "92784fb7-22cc-415f-bdae-d02432178f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2bfbf0-0c9e-43a4-b5a3-51fa90b9e36a",
        "cursor": {
          "ref": "5877e9af-8b69-4890-aa54-8a14cdd6adb6",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1f928ced-ffd8-4aa6-92a4-095ec3019542"
        },
        "item": {
          "id": "bb2bfbf0-0c9e-43a4-b5a3-51fa90b9e36a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c4341fe8-6ce1-41ca-a98e-709f579dc8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae743a8-e5ac-4b7a-9d7e-b049ca139be1",
        "cursor": {
          "ref": "0e9d9ad8-0e42-46f9-9f75-2b81ba350ee6",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bb49a84f-4672-415c-ae90-1d4b9e3b8664"
        },
        "item": {
          "id": "5ae743a8-e5ac-4b7a-9d7e-b049ca139be1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d2c254c1-a199-43a9-be16-6c4e567f8738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97379be7-5bcb-43fa-b53b-afd5db6b532a",
        "cursor": {
          "ref": "b127ffb2-26df-45d1-a8a0-1d04a02d5f05",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "de74caac-6ad9-49af-9817-1bc049605af5"
        },
        "item": {
          "id": "97379be7-5bcb-43fa-b53b-afd5db6b532a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4950d5f9-6ca1-4cb6-b30f-234c927f5375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e5f27d-d2f4-4d63-9c61-1e4102adeabe",
        "cursor": {
          "ref": "5a5a8342-6c9a-449d-bd28-3c2d20126b9d",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7a19b489-5df0-47ea-aaa5-2c5ddfe62751"
        },
        "item": {
          "id": "26e5f27d-d2f4-4d63-9c61-1e4102adeabe",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5cbb35d9-4bdf-4362-922b-09d6cf2d002f",
          "status": "Created",
          "code": 201,
          "responseTime": 1019,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ee01367d-f517-44fb-b6b3-cc8e8d0fe518",
        "cursor": {
          "ref": "aa49012b-9904-421b-a987-ca69483be23b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "be60c78c-28ff-46c3-808d-0864dc8b1be1"
        },
        "item": {
          "id": "ee01367d-f517-44fb-b6b3-cc8e8d0fe518",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "54558401-5a12-4525-bdaa-298253fae2f6",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cc348e33-b0a7-473e-9be6-9c75e10e3241",
        "cursor": {
          "ref": "eae9d2be-762b-4199-8c7b-d80b135d384f",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d5f399a0-5762-454f-8cc6-94712f4f533e"
        },
        "item": {
          "id": "cc348e33-b0a7-473e-9be6-9c75e10e3241",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1d79489e-5f52-4c5f-bb54-260b6c22b601",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b026ce93-609f-446d-88ae-4f0ab2c585d9",
        "cursor": {
          "ref": "3dded503-9355-4c33-8cb3-d7bcdc44d316",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c5d0e0b7-b184-4114-acf1-b40ace00f859"
        },
        "item": {
          "id": "b026ce93-609f-446d-88ae-4f0ab2c585d9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f2accca3-3d9a-43db-9e9f-00a3a740b04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287f3ccf-e57e-4bc4-a926-a6b6b36d0c26",
        "cursor": {
          "ref": "5ffcc35f-ef78-4586-9673-c6dc4804cce5",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6cd6ad9f-4737-4ea3-9ef2-1b433a920690"
        },
        "item": {
          "id": "287f3ccf-e57e-4bc4-a926-a6b6b36d0c26",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "99d58f57-5568-4307-8857-01f3dec2143a",
          "status": "Created",
          "code": 201,
          "responseTime": 374,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "aeb69e3a-6a3c-4aa4-9970-dd59ef5682e7",
        "cursor": {
          "ref": "e09c26ff-02d3-49dc-bae7-8e00900c6391",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "61bc227b-ea37-4eb2-824f-f791396cfd4a"
        },
        "item": {
          "id": "aeb69e3a-6a3c-4aa4-9970-dd59ef5682e7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "60d59bb4-43f7-4e43-bf01-4fd0c53a88d1",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5745578c-db47-4e4a-9094-628780a374d0",
        "cursor": {
          "ref": "596aadad-8e1b-47eb-a539-6f6048222338",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a0c9f8ea-4178-4f1e-ae85-ffb666171c75"
        },
        "item": {
          "id": "5745578c-db47-4e4a-9094-628780a374d0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b7394175-faa1-4f4d-b7e5-ca7fdc87b874",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2aa69b84-effb-43d5-9c8d-cb44df240fbf",
        "cursor": {
          "ref": "b38aa547-a6ad-475b-8026-3f996b277b92",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7cddb6ab-79fb-41bf-b7e3-91153c440b9f"
        },
        "item": {
          "id": "2aa69b84-effb-43d5-9c8d-cb44df240fbf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "732220af-139f-4796-ba07-9adc4d473bcf",
          "status": "Created",
          "code": 201,
          "responseTime": 494,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0246ec09-4b8a-4602-8c35-e169d33da746",
        "cursor": {
          "ref": "b665e90f-1b3f-4719-8dcf-91c31961824d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6f629a2e-f2b6-4a4f-ac0f-656f282e36da"
        },
        "item": {
          "id": "0246ec09-4b8a-4602-8c35-e169d33da746",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "32361a7d-052d-4efc-91f4-1587e7813bdf",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5a0f55d7-daaf-4305-b40e-e0fcb9bc95c1",
        "cursor": {
          "ref": "41e30e50-e26b-430d-bd87-e0c497416da8",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "582b7459-a30c-4550-a824-ffdbd35f2908"
        },
        "item": {
          "id": "5a0f55d7-daaf-4305-b40e-e0fcb9bc95c1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "748a0c44-8079-478f-9a01-c14e1cde439c",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2e0e9c1a-8dc2-4896-a505-372d99f4a986",
        "cursor": {
          "ref": "97d751a8-be3e-433d-ae4b-d8021138b1d4",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f4d726ac-c3cb-47d6-ac87-cb1fff7845dc"
        },
        "item": {
          "id": "2e0e9c1a-8dc2-4896-a505-372d99f4a986",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7d4d071b-0749-4c26-84c0-b8f876ea2f1c",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1b467b0b-71e2-4264-a064-2dfe712cf235",
        "cursor": {
          "ref": "08240f18-0519-4aba-b6fb-f79b684f856b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a2981f1f-d288-4b41-a876-7ffb742f4ec3"
        },
        "item": {
          "id": "1b467b0b-71e2-4264-a064-2dfe712cf235",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0f934a65-fdf0-4e43-9bfa-b61c4e5efc7a",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9601b1d3-d884-41de-87a3-85f2d431ee65",
        "cursor": {
          "ref": "4220f223-bc90-45f7-a3f9-83ad71ec5393",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "278000a5-65b9-444d-a03d-c2fbb7df7fdb"
        },
        "item": {
          "id": "9601b1d3-d884-41de-87a3-85f2d431ee65",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b1045ae9-c719-4775-b53e-9934b7a16ceb",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4d0c7ec5-9c7d-475f-b59f-22ff041980b8",
        "cursor": {
          "ref": "ed061d99-e716-486e-af0e-117347239876",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5550d6c0-5c5e-4804-badb-7377685cbdce"
        },
        "item": {
          "id": "4d0c7ec5-9c7d-475f-b59f-22ff041980b8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "231a7b2a-65e0-404e-babf-2cdc97c53054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733c02c7-6e6a-43bb-aa26-97dfb669bde7",
        "cursor": {
          "ref": "98f77451-5188-4622-8286-33e374e58205",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "aacdb452-765d-4fb4-951c-3e7c093042ef"
        },
        "item": {
          "id": "733c02c7-6e6a-43bb-aa26-97dfb669bde7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "adf146cf-0d1b-4850-9d67-d98341499ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5851ae1a-ff4d-48db-a61f-79d12616595e",
        "cursor": {
          "ref": "d468bdd9-cfd8-48be-96d2-3a88c011f032",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5cc82021-f97d-43a6-9e59-d5de051f6050"
        },
        "item": {
          "id": "5851ae1a-ff4d-48db-a61f-79d12616595e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6ea28fd2-66d3-4d0f-a58b-50793570dfac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264d09fe-0feb-4ea7-a22a-cb2a0edf26b1",
        "cursor": {
          "ref": "107eeca7-ed96-48c3-a41c-9034bf048ac9",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9df69e7c-37fc-4626-a234-ba03e9ab2979"
        },
        "item": {
          "id": "264d09fe-0feb-4ea7-a22a-cb2a0edf26b1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bb2f1dec-3e81-4c0c-8ec4-f3fd4f493f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4aa9d2-40c3-4e60-9687-2ef68bacd096",
        "cursor": {
          "ref": "d432f6a4-1ef8-4cc0-b5d6-1839b70a91d6",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "38daf637-fc93-479c-925d-c9fde4715c7a"
        },
        "item": {
          "id": "fd4aa9d2-40c3-4e60-9687-2ef68bacd096",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b29ea7ea-3ed4-45eb-bb26-7b00ef2a217a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449904ad-f3d5-49a1-b892-22dc1339c643",
        "cursor": {
          "ref": "930d1cf3-895d-4698-8910-d0a38ed1575c",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "51aa8f86-9f40-497d-8c5d-b07bdf46950f"
        },
        "item": {
          "id": "449904ad-f3d5-49a1-b892-22dc1339c643",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5667ddad-de82-4169-b85b-a37cf42e94a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f8be99-15e5-4276-94f2-0fe972110ff0",
        "cursor": {
          "ref": "d85d92f1-f252-4052-a567-a3da73fd2839",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b25a070a-4b15-42be-a94a-2dfefc84f141"
        },
        "item": {
          "id": "08f8be99-15e5-4276-94f2-0fe972110ff0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6d96705e-3ecf-492c-adfc-841f7ec278a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee93921-650b-4c39-a1ef-4203d39bba52",
        "cursor": {
          "ref": "6b122f51-855d-4460-8fe9-0d6d83fc8e0d",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "38431fe2-ff83-4ed3-9395-6f77219a8496"
        },
        "item": {
          "id": "fee93921-650b-4c39-a1ef-4203d39bba52",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "be412a82-13a9-447c-96aa-9ba3c1fcdca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672b1735-0ce6-4cbc-9bff-7bee4700c267",
        "cursor": {
          "ref": "4f23f4d4-2c7b-4a82-b672-e82d8d5586a8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7d82f31d-1c01-4167-bbdb-4824e5fff918"
        },
        "item": {
          "id": "672b1735-0ce6-4cbc-9bff-7bee4700c267",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "585ae028-9dd5-4f3b-9147-739ec0b0ee3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c093ea58-3bb7-4e89-b890-c0c20b8e0851",
        "cursor": {
          "ref": "af837b60-e753-4979-abd4-da8684984fe5",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3636e5ba-8f02-4fd2-9dd4-4c036d3344eb"
        },
        "item": {
          "id": "c093ea58-3bb7-4e89-b890-c0c20b8e0851",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "45655177-b031-411a-b274-391dbf1afe5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fe1665-cc82-4776-a276-2fac152553e1",
        "cursor": {
          "ref": "4cc1a790-4c5d-4d38-92a3-b9c68f6612d0",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fab526bb-b320-4d69-91a2-f21c7affb673"
        },
        "item": {
          "id": "73fe1665-cc82-4776-a276-2fac152553e1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "65504172-320f-4529-a274-fd5c41f3c5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2015bfc-5572-49a3-ae56-5cf04bdfaeb2",
        "cursor": {
          "ref": "35bf17ff-076c-43ad-9d4a-34d3650cc739",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "187f8295-e6c5-497e-b91e-afa3f54ca49f"
        },
        "item": {
          "id": "e2015bfc-5572-49a3-ae56-5cf04bdfaeb2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "92201ecd-0f5e-4532-9751-2b0c2e82fe2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92f2449-64c2-4fbe-ac6e-52eec7f46ae8",
        "cursor": {
          "ref": "86381834-cd0c-4266-a603-ace3af50d37d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0141abf5-61a9-4453-a53f-268a767bfcbc"
        },
        "item": {
          "id": "e92f2449-64c2-4fbe-ac6e-52eec7f46ae8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9e1df4a9-b3c5-4e0c-810d-ce31f1ba3e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b6a106-0579-4729-8844-bbbb4c83d1b3",
        "cursor": {
          "ref": "d5b1e482-52c4-41f4-ab77-5822246b1d83",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "250ac882-ed20-4116-8d28-246871ce519f"
        },
        "item": {
          "id": "b1b6a106-0579-4729-8844-bbbb4c83d1b3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6b13d23e-837d-4874-80d8-4d0ad41984ae",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6737d6f6-2be2-4924-891a-01b3eee1970b",
        "cursor": {
          "ref": "a67159e0-a0f9-48b6-b407-83027b860611",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b2488bd4-5461-4941-9bdf-3c285213ccc7"
        },
        "item": {
          "id": "6737d6f6-2be2-4924-891a-01b3eee1970b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3dfe9345-3929-4e6b-80f6-f7b2c33e2040",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4982a307-6903-4857-8cb7-3c0be67b36bc",
        "cursor": {
          "ref": "84af124f-e7c7-40cf-b3f7-f261159ba8c1",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b2f1086f-0c87-4ce0-98c6-5efae042ebbd"
        },
        "item": {
          "id": "4982a307-6903-4857-8cb7-3c0be67b36bc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "86ccd0d4-d171-4b21-a84f-5dc04c842482",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "70f20b12-c2af-4d5e-9bbf-5498044a7cf3",
        "cursor": {
          "ref": "9f7ff1d3-ac12-4802-9966-842a412d60e7",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "32af811f-bfcd-4ed2-b226-e5c572f6f228"
        },
        "item": {
          "id": "70f20b12-c2af-4d5e-9bbf-5498044a7cf3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b2fdb7a0-625d-44dd-b2c4-252c3ab1cd92",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8c3e5acb-8585-4936-a0ff-f06e782e287e",
        "cursor": {
          "ref": "987538ed-8d35-4d96-bd32-e325754bf3cd",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "de0d862e-1bb9-4e5d-a0b6-5a786fdd1f97"
        },
        "item": {
          "id": "8c3e5acb-8585-4936-a0ff-f06e782e287e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fddaa5dd-c371-4041-b174-e851e2798942",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "3e9e9c37-0aac-4907-9983-6e1a041fde7d",
        "cursor": {
          "ref": "c28beb59-ba27-40b1-8d12-d186878840fb",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1c774c45-0c6a-409f-b5ff-7aef90d2f65f"
        },
        "item": {
          "id": "3e9e9c37-0aac-4907-9983-6e1a041fde7d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "83b39ef6-0e5d-4c7d-9795-4d06a226913c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3ae5b7-e7c1-4d26-ae75-e837a718ac49",
        "cursor": {
          "ref": "a2ae365b-d736-463c-906c-dbe621c394d5",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "dab87a60-3737-4aec-ba72-1e1f81744e70"
        },
        "item": {
          "id": "0d3ae5b7-e7c1-4d26-ae75-e837a718ac49",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "99cbf771-8d32-41a4-bf95-469fd1fd982c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afc3b69-512b-4fbd-8360-6a66be811386",
        "cursor": {
          "ref": "573f1cd1-156a-4cc8-9011-9a16cde5f3b4",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cc485e7b-1916-4ed4-95a2-76687edf280d"
        },
        "item": {
          "id": "2afc3b69-512b-4fbd-8360-6a66be811386",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "64323f9b-faf4-465e-a726-1c0512e14429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62df540c-7f0a-4789-977f-07dab105f92a",
        "cursor": {
          "ref": "34539386-9804-47fd-b914-28749c543e7d",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "abe260e5-0075-4454-84dc-607bdb125d92"
        },
        "item": {
          "id": "62df540c-7f0a-4789-977f-07dab105f92a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3f48a842-8ee9-4ec0-ad4d-559caae556ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79174815-a9db-4819-953c-bb1aa16f6dec",
        "cursor": {
          "ref": "7c0b43bd-af54-41d6-8fa9-116286a4841d",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8acfaddb-cb00-4900-b877-1f47c0292f85"
        },
        "item": {
          "id": "79174815-a9db-4819-953c-bb1aa16f6dec",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "487770d2-1eda-48b8-af28-a883d8d122e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2ade4a-a2bf-4b32-bfbc-ad2a8b13759a",
        "cursor": {
          "ref": "3ed5a993-8186-4220-bf0d-078d0737922c",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "13279fc3-2766-417e-bc57-81158171dad8"
        },
        "item": {
          "id": "cb2ade4a-a2bf-4b32-bfbc-ad2a8b13759a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "17f69b5e-9191-47c2-a88a-3e90b673294f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2858551-348a-478f-a2e7-a9279e1666b8",
        "cursor": {
          "ref": "a16f3a2e-d532-4975-9040-c9aa4f87f283",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "da08df65-f9d7-434b-8fd0-b311f08c6995"
        },
        "item": {
          "id": "a2858551-348a-478f-a2e7-a9279e1666b8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "58ea3195-36ad-49a2-8c93-2916ff4fd6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbddec7f-0cb6-4bab-9061-e54917a5a5ed",
        "cursor": {
          "ref": "e2dfdc79-d1ca-4fd2-afd9-8ec37cfacf6a",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "aadd780d-0b94-423a-a43b-f8a6c747a5d5"
        },
        "item": {
          "id": "dbddec7f-0cb6-4bab-9061-e54917a5a5ed",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0a4ba52e-92f3-4ccf-974f-49cc9dd59141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20bcb84-2401-49af-9954-57f187baad06",
        "cursor": {
          "ref": "3c583c4e-fcea-468a-8d9c-a3fe9170b428",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0626ce51-584a-42fe-afb5-ef1b975564ba"
        },
        "item": {
          "id": "f20bcb84-2401-49af-9954-57f187baad06",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "03e28ef4-9196-4234-a738-b4a9d55fe896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6821dcd3-6cd9-4a76-9d2a-f10938922fdf",
        "cursor": {
          "ref": "15872911-6db7-43a0-87f6-5f1c31376e2a",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "70559dfc-8ff3-4017-95be-786d82686449"
        },
        "item": {
          "id": "6821dcd3-6cd9-4a76-9d2a-f10938922fdf",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "dcb8f664-9b73-4b3d-985f-a753dc79f10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61de7dc-133b-427f-b422-4aaa0aa894f9",
        "cursor": {
          "ref": "a296aec7-eaad-4206-aedd-08f6a118b0a0",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7a24641b-d0ff-4a9f-ab5c-f109f5da6151"
        },
        "item": {
          "id": "b61de7dc-133b-427f-b422-4aaa0aa894f9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4f2ec1d5-cf23-4c94-b7d0-4ac2c387025d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ce2e3d-c7a1-4e0b-86f0-bd05150bd907",
        "cursor": {
          "ref": "51d5da1d-c87d-430b-a9cf-59ad887305d5",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "73e9659f-808e-4c31-9d3c-abf742275c83"
        },
        "item": {
          "id": "28ce2e3d-c7a1-4e0b-86f0-bd05150bd907",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1688481b-fd86-4fcb-9eed-2b3083af55a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20c5922-809a-40ea-9a9e-b3c8cc2ca4ca",
        "cursor": {
          "ref": "f7b64269-39fc-4910-8905-3ed27ee3691a",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e57e4d7f-a0f6-4841-998a-103df76990fc"
        },
        "item": {
          "id": "e20c5922-809a-40ea-9a9e-b3c8cc2ca4ca",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1dc0147b-83bf-4b79-8a45-b816a388d733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506b34af-925e-4405-b3c2-63198092649b",
        "cursor": {
          "ref": "80a1402f-745d-495d-8483-dc54ba693e74",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c78a8d05-e097-49c6-ac60-e6b6a60d6648"
        },
        "item": {
          "id": "506b34af-925e-4405-b3c2-63198092649b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "10f2ca6f-034a-4058-82f7-c1c9dddef6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca888b67-0a05-45f7-a149-b72599994e7b",
        "cursor": {
          "ref": "b940fb21-ff7a-4068-b55f-4bae79513612",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "852a1227-0223-4f0d-90f1-aeb9b3d411db"
        },
        "item": {
          "id": "ca888b67-0a05-45f7-a149-b72599994e7b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4de5397c-ddd6-48b7-a4c1-a800bb02639c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92206a03-2ded-4a70-b8bb-890669cd0505",
        "cursor": {
          "ref": "595572d4-01f8-4b76-a86d-37b771203842",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0502b4df-c75a-47a8-8b19-3a98d9fbd14f"
        },
        "item": {
          "id": "92206a03-2ded-4a70-b8bb-890669cd0505",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6648e828-0600-4d61-80d6-0b87a25e474c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a177c43-1652-4ec8-9659-33bbe6d67179",
        "cursor": {
          "ref": "9660d8c8-bc16-48b1-a480-4f17afc91796",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "13abdb13-e879-491f-af27-a78acba66427"
        },
        "item": {
          "id": "8a177c43-1652-4ec8-9659-33bbe6d67179",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4611c6fd-3eae-42ef-b6ca-3e627726d912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448883d5-6806-4ee5-9409-ab13f957ff6f",
        "cursor": {
          "ref": "72ec14cd-f7a7-412c-83a7-dad40f1f72f6",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8099a53b-dd65-41af-af46-aaa1cdb50438"
        },
        "item": {
          "id": "448883d5-6806-4ee5-9409-ab13f957ff6f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c6283f84-8e00-4af1-9382-7b1f0478649d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c247e3-134a-4775-807b-178ed41b7aaf",
        "cursor": {
          "ref": "88d01ef6-09f8-4407-a275-39a334551d39",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "31a487c0-d1a5-4849-84f2-43b45ab35bb1"
        },
        "item": {
          "id": "73c247e3-134a-4775-807b-178ed41b7aaf",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "159a2a8b-fd5d-4aa1-894a-e4ca44358805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da495b9-ea4b-4e56-b5e4-17796cad6cb8",
        "cursor": {
          "ref": "243d91f7-1b70-4d0d-a802-82a76dd05c55",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "046b4a68-67c5-4cc0-a3f4-00d41195374b"
        },
        "item": {
          "id": "3da495b9-ea4b-4e56-b5e4-17796cad6cb8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "69158a35-f695-4009-b5e8-8817943f5be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d64c2f-2f82-43b9-9393-756735770360",
        "cursor": {
          "ref": "757680e3-f3fb-4757-b8ea-c901dabf77f6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "20799a8b-b98c-4de4-bc07-1e299dd33f6f"
        },
        "item": {
          "id": "89d64c2f-2f82-43b9-9393-756735770360",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bba51154-9748-4349-a097-71c3a47a7b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c52f08-94a2-48f0-8af9-19a79623b7af",
        "cursor": {
          "ref": "d3f471cd-4de9-4e4b-9fba-84701f4beb89",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6b83b96d-5865-42e1-8f9d-da8cad1e532b"
        },
        "item": {
          "id": "12c52f08-94a2-48f0-8af9-19a79623b7af",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "499d1b8c-8cee-4ebc-9fdb-66e14aa4210c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2b8c5e-cd85-48a0-a66d-c16d5dae853b",
        "cursor": {
          "ref": "758a67da-e0e4-4a07-99ff-518391a9351b",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "92a44509-bfc1-4f2f-90d6-da456f04e9cb"
        },
        "item": {
          "id": "2e2b8c5e-cd85-48a0-a66d-c16d5dae853b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d1c3e395-2255-46d9-8d26-b2a2634d1264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7083084b-e4bf-43bf-a9d3-30c92aa5d1de",
        "cursor": {
          "ref": "2716acb5-3d9a-4375-b86d-19eb5a0277bf",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8d4e01d2-7f07-474d-9a4e-fe1de05f0aab"
        },
        "item": {
          "id": "7083084b-e4bf-43bf-a9d3-30c92aa5d1de",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0202ea66-58bf-4098-be20-71dfdf0a4657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4af776-20b9-4e23-ae35-2babd40ecdcd",
        "cursor": {
          "ref": "1e738283-084e-4648-8a87-a301c1e14b90",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f0cf0e09-ad54-464c-8dce-c1e319e659cd"
        },
        "item": {
          "id": "6b4af776-20b9-4e23-ae35-2babd40ecdcd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "97e3c797-e903-4c76-a09f-9b7100e1328f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e610e77-121c-4888-8245-8eab6fa0c868",
        "cursor": {
          "ref": "95473b7e-6316-4d12-8b3f-e9530e16f4af",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d5f34c5c-b858-451e-ac49-a3ccf24f2cab"
        },
        "item": {
          "id": "2e610e77-121c-4888-8245-8eab6fa0c868",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a5eefeea-1eb8-40c4-a44e-dae4cf65504c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c10c6e-b6fe-462b-87d0-c336f042e202",
        "cursor": {
          "ref": "6197aba8-a302-4725-a690-dda62a2aa95e",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dfd9353f-61a5-48c2-baaa-dfdb00a56f37"
        },
        "item": {
          "id": "08c10c6e-b6fe-462b-87d0-c336f042e202",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a75bea9b-ff0f-4ab7-8e64-a92782da8529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe910b1-5be9-42cc-8542-491c4d0c91fd",
        "cursor": {
          "ref": "97022a43-7505-426c-adf6-9156fffe5f87",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "181cb3f8-3bdd-4ddb-afad-214593f98afd"
        },
        "item": {
          "id": "dbe910b1-5be9-42cc-8542-491c4d0c91fd",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6c288715-dd61-416b-888f-675dd9794625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4717e0c1-fb07-47cb-ab5f-98a7f9a72449",
        "cursor": {
          "ref": "6d2eb1c9-469b-493b-8825-37ad8609a4b6",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "694a7220-b387-4879-9275-b3fcdbf75273"
        },
        "item": {
          "id": "4717e0c1-fb07-47cb-ab5f-98a7f9a72449",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "99a9cf0e-73d7-47f0-a6e4-42822153557e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794d02f2-5cd4-4571-ac9a-ccc62d498273",
        "cursor": {
          "ref": "9f151bba-76c9-4f87-81fc-1f8c52b28887",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "496d09d9-2dad-4d82-854e-e519c5b2394a"
        },
        "item": {
          "id": "794d02f2-5cd4-4571-ac9a-ccc62d498273",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c14004e1-7f8c-4c1b-93ff-9c8d554e2d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500f64c8-f818-4683-8d81-91476047fa8f",
        "cursor": {
          "ref": "f0859010-1627-4532-9027-11b278c9a432",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5df69c8c-e8ed-4c65-a9a5-f2fedb549542"
        },
        "item": {
          "id": "500f64c8-f818-4683-8d81-91476047fa8f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bf84bf3f-3f73-4618-b5eb-c9633c05b5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8233fe4-117e-46c4-bd39-4612cfed0bc9",
        "cursor": {
          "ref": "13ebc405-64e8-4c52-9b8b-675757bdabf6",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4403dd29-7a3d-4432-978c-906b3f7fa805"
        },
        "item": {
          "id": "b8233fe4-117e-46c4-bd39-4612cfed0bc9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3fa02189-103d-4c8d-82a2-bba483376535",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f08987d-de30-4ea6-bced-85a6ff8700eb",
        "cursor": {
          "ref": "d2d2a7bd-f302-4816-aad4-36891aba8fe0",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "81dc1e8a-13f6-499f-babd-ca43313383bd"
        },
        "item": {
          "id": "4f08987d-de30-4ea6-bced-85a6ff8700eb",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8e9cca67-d447-497b-aeee-88af646fef35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "abeb79e6-fe49-4c9c-9b3c-54b21860e4da",
        "cursor": {
          "ref": "ef6d2fb7-c849-4687-8b69-9e47cf7b117c",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "82fed84a-1b3d-42d7-8cdc-27b291bbb072"
        },
        "item": {
          "id": "abeb79e6-fe49-4c9c-9b3c-54b21860e4da",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b719498b-1ec5-4533-a657-aee98781234e",
          "status": "Created",
          "code": 201,
          "responseTime": 373,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ebfeda-5d9b-4035-b3a9-99b3839665f5",
        "cursor": {
          "ref": "98f9c4d8-e345-443a-8ff7-712792a20963",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c7a49f3d-9040-4bcc-96a7-0cc1d487b498"
        },
        "item": {
          "id": "87ebfeda-5d9b-4035-b3a9-99b3839665f5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4596307e-0730-4e01-aa7c-f8fac11546ea",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "18796113-26e4-466f-afbd-7551d9c7b956",
        "cursor": {
          "ref": "05948afb-0dc6-4049-92c9-6437e5117af2",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "abe19a7a-89fe-48db-8afc-2937e0192d78"
        },
        "item": {
          "id": "18796113-26e4-466f-afbd-7551d9c7b956",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "25b3c73e-9388-4759-bd3a-bb564de86fcb",
          "status": "Created",
          "code": 201,
          "responseTime": 434,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "605f7488-3777-4888-b243-f84d8afe15fb",
        "cursor": {
          "ref": "fe1765e9-c05a-4966-8da1-ea47ffdc4e39",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "aebd2335-c04f-4158-b1b5-addec0d572d7"
        },
        "item": {
          "id": "605f7488-3777-4888-b243-f84d8afe15fb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1993b524-d568-44d4-80ad-c405d4a2eabc",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f62f24-ca01-468f-8b57-c95e4d58107d",
        "cursor": {
          "ref": "cdd925c8-c9c8-4654-8da3-df9594cf7fbc",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2e77fc02-d83d-479f-ac43-8520a65be55a"
        },
        "item": {
          "id": "27f62f24-ca01-468f-8b57-c95e4d58107d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "082b1ffe-e645-4269-8943-2ac5bc230015",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-22T00:34:20.909Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-22T00:34:20.909Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8d909607-ca84-47be-89cb-e6077295adbe",
        "cursor": {
          "ref": "4cfeccd4-26a2-40a9-a0a7-b3acffffea3d",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b188b21d-fa68-42e1-b4ce-ebc8208bbf0f"
        },
        "item": {
          "id": "8d909607-ca84-47be-89cb-e6077295adbe",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "449766e0-1181-4bbb-b3c2-1ea335077d21",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23bfa6f0-bfa7-4b77-9fdc-6ca844e95f67",
        "cursor": {
          "ref": "0ed3c530-43f5-4c6b-b7ba-bf89ccc2d80b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "895f9100-a6d1-4a49-b078-5f607bcc6f81"
        },
        "item": {
          "id": "23bfa6f0-bfa7-4b77-9fdc-6ca844e95f67",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cf846593-f177-4dfe-a0a4-72379bfb0872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fab81b2-7675-4390-9921-f44940da6354",
        "cursor": {
          "ref": "aa373cda-70d8-4dec-8487-cb0b9a842521",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fae094f4-81e0-4fb2-a3fb-62ef03137e6e"
        },
        "item": {
          "id": "2fab81b2-7675-4390-9921-f44940da6354",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8237397a-6b08-43e4-8c90-f738ea632d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0470cc6-e2d1-4dfc-9158-dc6d84791567",
        "cursor": {
          "ref": "831fe878-e30b-486b-a00c-3085a1be093b",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "58108db0-2826-4b92-afff-32eccdded975"
        },
        "item": {
          "id": "f0470cc6-e2d1-4dfc-9158-dc6d84791567",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c6025a6c-8140-4b40-b239-3279b59d0ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d4851b-8e6f-4ea4-9a19-25c93726ca25",
        "cursor": {
          "ref": "295f3717-9c90-4ed9-8f0b-6d74a58f7749",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "146c973f-5c3f-4f3f-8d36-9754054e87e6"
        },
        "item": {
          "id": "e8d4851b-8e6f-4ea4-9a19-25c93726ca25",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "89a1ceb9-9d02-40df-a790-351d43110a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9e2f6b-f323-4f98-afd8-e886b6ff7f39",
        "cursor": {
          "ref": "1cbf795d-bca8-453a-888c-8e40e12cc007",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4bf3c85f-0abe-4a13-80a1-fe7a1a4dea7b"
        },
        "item": {
          "id": "3e9e2f6b-f323-4f98-afd8-e886b6ff7f39",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a24dffc9-1fc6-42cf-bd00-b6de0135b508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9ddb38-7562-473c-a8a8-d611a3b4b5cc",
        "cursor": {
          "ref": "e4a453ea-8ff2-4758-ac26-c5137fecd483",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3501ab47-4a56-4119-b2c3-01287d627a69"
        },
        "item": {
          "id": "5f9ddb38-7562-473c-a8a8-d611a3b4b5cc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9ddf5497-2e01-48a5-a8d9-2cdbc4706589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839af56f-263b-4685-aded-e014e054d9e8",
        "cursor": {
          "ref": "c47c7141-428f-431b-9886-3c312a7470a3",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "075b41a7-1896-4887-b9ac-a035ff699c0d"
        },
        "item": {
          "id": "839af56f-263b-4685-aded-e014e054d9e8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "df65b9a3-2d00-42db-a4e7-1694cb7a97c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f62b296-7ca5-43d3-b5ae-2ccceaf29c94",
        "cursor": {
          "ref": "e2b5977c-c6d8-42cf-bb6a-b670484bf6f5",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3bee2643-10a4-483f-9abb-c83bf7ee39c9"
        },
        "item": {
          "id": "2f62b296-7ca5-43d3-b5ae-2ccceaf29c94",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9d36e45a-89ee-4410-8063-011466c670c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9b1f77-0591-4619-9828-2bc51b1a507d",
        "cursor": {
          "ref": "65c1ec5d-9a94-4816-ade2-45e3fc23fd80",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7fc0a575-1d28-433b-9e37-52753d0c8d77"
        },
        "item": {
          "id": "ee9b1f77-0591-4619-9828-2bc51b1a507d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a269bf9a-0b2e-4010-94d4-2d872b971657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86289a2-3e87-4cd6-9123-837c08cffa43",
        "cursor": {
          "ref": "e091d959-1ec7-46fb-830b-bdfaf483c4b1",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "cb43856c-76ee-45cd-9ded-50064fabc1dd"
        },
        "item": {
          "id": "c86289a2-3e87-4cd6-9123-837c08cffa43",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9db88cca-e5a5-496a-9a30-501a3d053e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc2e00f-bb4b-4abc-be68-2e4e0cb5bbf3",
        "cursor": {
          "ref": "0e945d67-2166-4518-8435-d3cc25c886e3",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "490f3305-d424-47a0-bb8e-d6f0cf6bcb48"
        },
        "item": {
          "id": "ebc2e00f-bb4b-4abc-be68-2e4e0cb5bbf3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "36f0d42e-7823-4c3c-83dd-4c2f90b277ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603825bc-200f-4cfe-9f8b-babf1332b651",
        "cursor": {
          "ref": "b34465df-a116-433d-b069-a553354204e9",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "75ae3f4d-02a9-4feb-bad4-ee892e241691"
        },
        "item": {
          "id": "603825bc-200f-4cfe-9f8b-babf1332b651",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "398c1481-eeb3-466f-81a5-5514da54865e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f6b3b7-3e46-46ae-a546-eb886aac5eba",
        "cursor": {
          "ref": "8ebd8f39-69cf-4f32-9db1-f1bf54f52a07",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fe322002-0cdd-43f8-b4f1-74133919c38c"
        },
        "item": {
          "id": "26f6b3b7-3e46-46ae-a546-eb886aac5eba",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "600f5ae1-e17e-44bb-b78b-924be7fb1723",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "67bec370-6e5c-4c60-b42c-c51ee29489be",
        "cursor": {
          "ref": "de93018d-7fbb-42e0-8cfe-ee7c186e9c2c",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0a3ec521-60e8-47c9-9de8-74b5e2c8488e"
        },
        "item": {
          "id": "67bec370-6e5c-4c60-b42c-c51ee29489be",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f882ed10-8c18-452f-bfc7-480a7532be9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 145,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "36669872-4646-4dd6-926b-62213c076b84",
        "cursor": {
          "ref": "0ec89188-0f89-4660-a44b-ca8bb410ad73",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d430dcdf-ac03-49c2-927f-bfb02f3626cd"
        },
        "item": {
          "id": "36669872-4646-4dd6-926b-62213c076b84",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6c01c214-8e89-4599-a22f-e80ab499cbfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6588e78f-b5ae-44fd-b7c8-ac0d84251c80",
        "cursor": {
          "ref": "10ae5015-4ade-4f54-805d-5f9030ede0d0",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "501b350b-aaf3-4480-a224-baa708070701"
        },
        "item": {
          "id": "6588e78f-b5ae-44fd-b7c8-ac0d84251c80",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9620ba5d-3602-4953-bb14-ed4b7c700c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377163fc-1fad-425a-b9f4-74c53526f737",
        "cursor": {
          "ref": "6b3ac35a-1de4-43b9-80b0-863d6bd24aa1",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "92adccb7-ba46-48cd-8237-4185584afee9"
        },
        "item": {
          "id": "377163fc-1fad-425a-b9f4-74c53526f737",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9c6b98ee-4e5a-4466-ae4e-d9d97e2a89bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8219c405-f2c6-4289-b453-a6ec6b9a731f",
        "cursor": {
          "ref": "ea2d48af-ce82-459e-af03-d7932b325c9e",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9992acbb-24ec-4ecd-93b3-4ff0f3f1a41e"
        },
        "item": {
          "id": "8219c405-f2c6-4289-b453-a6ec6b9a731f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "75924e6c-6e9c-4efc-8b8b-eea262b09c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e609ba60-cfdb-43d1-a211-6ec4e8d20c44",
        "cursor": {
          "ref": "2415636f-c65c-4e40-9eaf-8c38a9be0c76",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6a53cffb-f580-476f-956a-63f23694c343"
        },
        "item": {
          "id": "e609ba60-cfdb-43d1-a211-6ec4e8d20c44",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b2b61dc7-32d5-447d-ad2c-0095c832dde9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ba7f25-8996-4354-aee6-e95138ddf307",
        "cursor": {
          "ref": "c443075e-0b3f-42db-b448-0e0db21f3cc1",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "554a431f-dac8-4337-95c8-2b42fd376a8a"
        },
        "item": {
          "id": "d7ba7f25-8996-4354-aee6-e95138ddf307",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "82650aff-dc91-42c7-84dd-dede9706f908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fe3b0b-adbc-4c0c-94f9-ba4056a41708",
        "cursor": {
          "ref": "1a0e57c7-7758-4513-a2bb-cdd33fb4ac8a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "dfe03ea9-d763-482e-9cb3-75258146c771"
        },
        "item": {
          "id": "60fe3b0b-adbc-4c0c-94f9-ba4056a41708",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e7995a38-cf1e-4e3d-be53-ea26d8f8eccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe267ae-5c27-4691-a179-9d48d50da25c",
        "cursor": {
          "ref": "7c4c8026-8ede-4529-955c-e9253fcfafd6",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ab92c8d8-7370-4096-bf32-16ec7842bcc5"
        },
        "item": {
          "id": "0fe267ae-5c27-4691-a179-9d48d50da25c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1c680f59-60e3-4c5d-96d9-116202d7102b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1960f6a-9ece-471e-a674-06acf1cead23",
        "cursor": {
          "ref": "71c64841-38cb-4f43-b55a-5c57864d50fe",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9524d2bc-1aa9-481b-a6c3-624bf255e675"
        },
        "item": {
          "id": "d1960f6a-9ece-471e-a674-06acf1cead23",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fe95f0b1-aafa-4251-a2bd-f347ed51a0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767a5c65-05fa-4c9f-9cfb-5ef9f2ac7982",
        "cursor": {
          "ref": "3dd54e43-146d-4d89-9406-12549247fa9f",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "365e4d5f-1e16-4e5b-8181-32112be664a1"
        },
        "item": {
          "id": "767a5c65-05fa-4c9f-9cfb-5ef9f2ac7982",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dfd9877b-bd0b-4dff-8c90-f1ac7af862de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a495c42-af91-4c7e-9234-bc1ba69e55f0",
        "cursor": {
          "ref": "fae99452-c0ad-42f3-9600-4cdff62e049c",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "655d3bac-02fb-4d4d-8801-cd22c78fca24"
        },
        "item": {
          "id": "1a495c42-af91-4c7e-9234-bc1ba69e55f0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "24642d93-7fb8-4717-8ae1-9f6e8fb2329d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0dea588-6b20-413a-b743-8bbb710b5d9e",
        "cursor": {
          "ref": "eece287c-f138-4998-8164-ce72a0975986",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b05362ea-d68d-4a66-aa34-fe901d2de407"
        },
        "item": {
          "id": "f0dea588-6b20-413a-b743-8bbb710b5d9e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "896392cc-88dd-458f-a2f6-fcf697e91a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6373ec-aa25-4f64-8e8a-422e5435fef3",
        "cursor": {
          "ref": "fda87792-f4b0-4238-b5a0-8e120d1f8ede",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ed171882-65fe-4472-aa99-a5b079f653a9"
        },
        "item": {
          "id": "cc6373ec-aa25-4f64-8e8a-422e5435fef3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ff3abab7-ad97-445b-97de-095ca7f9bb05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e85298-11db-46a8-acaa-8389d4360a21",
        "cursor": {
          "ref": "34d370f7-040d-4376-bcb3-3d46f42faec4",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b8783903-0c3e-416e-9687-3adb20b0a9e1"
        },
        "item": {
          "id": "d9e85298-11db-46a8-acaa-8389d4360a21",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7c089e1f-6d4c-435c-b9cc-4d1e8b4c6731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bfb1ff-0c84-4eee-82e2-7b475ffab632",
        "cursor": {
          "ref": "067a8f56-92f7-402f-a87e-4edb68f6a1e7",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c1ae01c7-be5e-4255-9fbd-c2a86884eea8"
        },
        "item": {
          "id": "51bfb1ff-0c84-4eee-82e2-7b475ffab632",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9ea13b58-2afd-4f2a-8618-56601cd38b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd04d34-e1a4-4c93-bed7-49fc3d9a8e52",
        "cursor": {
          "ref": "466bbb1b-8e72-4b37-9fd7-11cea1adffcb",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a243a0c9-c582-4e2d-914b-821963898613"
        },
        "item": {
          "id": "bdd04d34-e1a4-4c93-bed7-49fc3d9a8e52",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "67b4161f-94ab-4524-981f-49dbf66f7757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7c091b-94a1-4579-8c78-2843a9075032",
        "cursor": {
          "ref": "3d8f31bc-52b7-4b6e-ab44-00f6fae93fc6",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bd8aea93-c39f-41f0-8920-39418bcdaf16"
        },
        "item": {
          "id": "4e7c091b-94a1-4579-8c78-2843a9075032",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d6ea0451-395d-4409-ba2e-2c5128202650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acb0015-d9a8-49be-a0eb-6e40f8f59f7d",
        "cursor": {
          "ref": "20a4db0c-b870-41d1-8f64-f1060f5ff82f",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "82e7380f-77c7-479d-ac8d-366da98d2e61"
        },
        "item": {
          "id": "3acb0015-d9a8-49be-a0eb-6e40f8f59f7d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "92d06b72-d41b-4ff7-9d8e-d9d465ca1e10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 219,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bfa14662-1f7d-466a-9d75-896a3ed5b10d",
        "cursor": {
          "ref": "ab159c27-e405-47a8-97b1-9bbb93b610a2",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "19503ad9-b48a-4479-aaa8-d0337ed9acd8"
        },
        "item": {
          "id": "bfa14662-1f7d-466a-9d75-896a3ed5b10d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b88c60ff-8747-4ef6-b4b2-25c72efe7faa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0244cd-227b-4e3b-a6ec-8a8efac3a602",
        "cursor": {
          "ref": "d1ef0eaf-3f06-4414-b3e1-bd84081ef0ed",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "accd097b-7e53-43a0-8039-9687f502e3d3"
        },
        "item": {
          "id": "7f0244cd-227b-4e3b-a6ec-8a8efac3a602",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "078c73fd-e8e2-42ed-aeb9-c65f2b904a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50284698-48f7-4304-9ddf-74e94232d1ed",
        "cursor": {
          "ref": "3c98766c-ea27-4021-880d-3d2c39f6d632",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "99631277-1e1d-4f76-a579-4560790b366e"
        },
        "item": {
          "id": "50284698-48f7-4304-9ddf-74e94232d1ed",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5d92fff7-b88e-4dde-b43f-7082f64cf6a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de94784e-b2d8-455d-a65c-a3de9144b658",
        "cursor": {
          "ref": "07ce7c76-ccdc-4b90-85a9-52554705d90e",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "332cc9bb-f2d4-44f1-8d2c-d0b0104199f8"
        },
        "item": {
          "id": "de94784e-b2d8-455d-a65c-a3de9144b658",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3587cf99-eaed-4df8-9b86-1e64f4c2e809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8c133a-870d-4114-acf9-3ebe4509b8b4",
        "cursor": {
          "ref": "d0ba0bcd-7149-4d41-bc4a-e2b2cf12f962",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2654d25b-c378-49a6-a5c0-8553c6ea3442"
        },
        "item": {
          "id": "6f8c133a-870d-4114-acf9-3ebe4509b8b4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5426378a-e47f-434d-9f1d-c11e42bc7fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3316ad0-2c78-4cf9-9de6-aaa08d883c0d",
        "cursor": {
          "ref": "90d3d7d6-e655-4393-8d75-794ddab76f14",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7dc43be8-ba6a-4d8d-a6cf-503063954b8f"
        },
        "item": {
          "id": "e3316ad0-2c78-4cf9-9de6-aaa08d883c0d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2d40d278-897e-40e5-ac81-f9a3179df960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc78aae6-2978-4b9a-8c07-a9d9b51302b5",
        "cursor": {
          "ref": "011b0bc3-f327-4315-b986-96c08d695906",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bf10ec56-7244-4e97-a28c-0cdb991e47cd"
        },
        "item": {
          "id": "bc78aae6-2978-4b9a-8c07-a9d9b51302b5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3da4f4d6-e6ea-4a04-9365-21b43d57f27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91f7978-064c-4d1c-b68d-0e9c40f4d91f",
        "cursor": {
          "ref": "ab1ce78a-431c-4dc1-9e0a-4e83d7ddcaf0",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "017144ea-df5a-4c5f-a50f-19c23362cd24"
        },
        "item": {
          "id": "d91f7978-064c-4d1c-b68d-0e9c40f4d91f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7ef9519e-beff-4df4-a5e5-f13f0678be1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72767091-164e-4a7d-a95e-ace897f790ca",
        "cursor": {
          "ref": "aa8a1562-04c4-44e6-ab7e-1442f14760eb",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "aaa312fc-fa00-4227-ba7d-1d09196a818f"
        },
        "item": {
          "id": "72767091-164e-4a7d-a95e-ace897f790ca",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2b5db084-72fb-4a4c-8994-25fb130b88da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8379e1d5-c830-4350-bfe6-2757e1b79c8f",
        "cursor": {
          "ref": "a544048c-45de-435d-87be-a7c234fc9261",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "74af52f9-c3e0-4865-ac03-a547aa327aac"
        },
        "item": {
          "id": "8379e1d5-c830-4350-bfe6-2757e1b79c8f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f50056f5-a0da-4b07-adeb-2bf52b5baede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4909105-9714-41a9-88f3-dc74eba8cb87",
        "cursor": {
          "ref": "28da4cc3-f34e-44f8-af0b-6e3ea8179378",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "376a40f3-8f0f-4c50-93f7-50852cd6af5f"
        },
        "item": {
          "id": "f4909105-9714-41a9-88f3-dc74eba8cb87",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "319adc08-061f-421d-94fc-7cecb32ca7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7531fd-f7a7-4548-b438-f6ed437db9b2",
        "cursor": {
          "ref": "7f2fb507-cd35-40a2-a780-65633a4fa1dd",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b75684a8-3f6c-4760-9079-5d4cbb398520"
        },
        "item": {
          "id": "bf7531fd-f7a7-4548-b438-f6ed437db9b2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e8888c8d-ce64-48c1-99a5-1814dbbf1daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c02f922-ec71-4340-9f44-87b608f73118",
        "cursor": {
          "ref": "85aea412-62ea-44d1-9253-f7f2af34b838",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3850a357-8a35-4824-a91e-abf2a36d7709"
        },
        "item": {
          "id": "7c02f922-ec71-4340-9f44-87b608f73118",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3eb64631-a5de-4011-bd2b-d5b968b5f1d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7901fd8e-8b23-4ea5-8f42-d4750ea74b88",
        "cursor": {
          "ref": "a772ff5f-7beb-4e41-b726-340728292b8b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3a01aa89-6056-43af-bbe4-2fdb153b4ddf"
        },
        "item": {
          "id": "7901fd8e-8b23-4ea5-8f42-d4750ea74b88",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2bb0010c-f843-4b02-b2c0-84db20260233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8ff407-cb95-47c0-af00-f12e4123ebb9",
        "cursor": {
          "ref": "a6e2e875-e41d-4a09-b68d-45b616176fdc",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4e3f166b-2f34-4e6f-b12a-e2f42f8fba36"
        },
        "item": {
          "id": "8b8ff407-cb95-47c0-af00-f12e4123ebb9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4806e31d-4d88-4ae9-be66-e9b763eaf592",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 162,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e508e5e2-0f1d-4f47-a1d9-1b9adedbdf72",
        "cursor": {
          "ref": "aa051e1e-6ef4-4696-822e-0d5605deceb0",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ba6387b3-72f0-46d0-b877-683464137c87"
        },
        "item": {
          "id": "e508e5e2-0f1d-4f47-a1d9-1b9adedbdf72",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "19aed9eb-d1b9-4ed0-b824-760efdb444b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b677b3-59f2-4d59-9afb-e98d76a45da1",
        "cursor": {
          "ref": "9b35d2fa-ebeb-4813-a463-56f143d8bcf1",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8f71ff86-62c1-4962-8080-63c79a7ed332"
        },
        "item": {
          "id": "91b677b3-59f2-4d59-9afb-e98d76a45da1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "635bf98d-344a-4056-844e-85dd89e0b3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d2f012-eba9-4c31-884f-9f6c8fb6a809",
        "cursor": {
          "ref": "85635741-23a5-4b04-be60-912e1e85516b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fa4af46c-a644-4820-81d1-7802c87fdfd2"
        },
        "item": {
          "id": "99d2f012-eba9-4c31-884f-9f6c8fb6a809",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5751e92b-a73a-46f0-90b4-bacfd63bf8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc91f00c-cdf8-4563-a59d-3b5af73e6ba7",
        "cursor": {
          "ref": "7a14be09-4678-425a-8549-91c9147debcf",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1df8db5e-8567-4108-99ff-39e8d7c8a8c6"
        },
        "item": {
          "id": "cc91f00c-cdf8-4563-a59d-3b5af73e6ba7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "024f7f18-c563-4f16-b197-4e2e8fd846c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5a5d54-f625-48ab-8e2d-c90d195a33a5",
        "cursor": {
          "ref": "b8fec48e-2a86-4b71-b4bc-c1c843aa4b35",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c0b7b157-849b-49e8-b61a-0217971db2eb"
        },
        "item": {
          "id": "5d5a5d54-f625-48ab-8e2d-c90d195a33a5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "13551ff7-8e08-40a3-88d0-904094c00937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb554ee-52da-4902-8ca4-f41e1a06afad",
        "cursor": {
          "ref": "de157ea2-3c3f-417f-82e9-4b30d4e714e2",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e463c269-1658-48ea-a7f2-6e88a8b8090b"
        },
        "item": {
          "id": "4eb554ee-52da-4902-8ca4-f41e1a06afad",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e032c848-df7c-483f-b30a-9e14d37b5cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b45a55-75c0-4ef3-8ef6-5ff1c796c6a8",
        "cursor": {
          "ref": "440b8cc7-8809-465d-82db-0cb27e7ab540",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ec970de2-e1c2-4654-b242-402fcc7bf461"
        },
        "item": {
          "id": "24b45a55-75c0-4ef3-8ef6-5ff1c796c6a8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f2288d1a-7b32-4249-814d-c9b8236acf21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad7f1ec-fa79-424f-9b56-d08ae7d1dfa9",
        "cursor": {
          "ref": "3ae71ecb-1aad-407d-94ea-84d265b18e29",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "19604f01-61b0-4361-a1e1-85cf2319d746"
        },
        "item": {
          "id": "2ad7f1ec-fa79-424f-9b56-d08ae7d1dfa9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9b6ce758-a7db-417e-a3dc-24c82d7d9530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81dacc50-a848-4c3f-9cf2-36121fcdc098",
        "cursor": {
          "ref": "a3e45f65-bbab-410a-8c86-7b1010392f43",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "89e10318-edc2-457c-a32d-637fa69dc06a"
        },
        "item": {
          "id": "81dacc50-a848-4c3f-9cf2-36121fcdc098",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1aabc487-edb0-4daf-b76b-dde5b7476649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db5a008-514b-423e-a082-3f3f309b989f",
        "cursor": {
          "ref": "e104c09f-98d4-4c4f-80d4-07ddc28d0e2d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6b0f4d4e-49f7-44e7-accd-ab8ed9dee75c"
        },
        "item": {
          "id": "0db5a008-514b-423e-a082-3f3f309b989f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1181bbb1-475f-4ffe-ad5b-3da304376e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96994f1e-80e3-4ba1-bacb-35bf2f13f725",
        "cursor": {
          "ref": "02dd64ff-964c-4a53-9b1a-8ff5e0dff401",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "819368ba-6461-4cd9-8527-bd917dac7527"
        },
        "item": {
          "id": "96994f1e-80e3-4ba1-bacb-35bf2f13f725",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ede9855d-103b-4578-827d-791f1680ee1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a537573-8ba0-4af2-90b3-5fe04105c62c",
        "cursor": {
          "ref": "48ff0a3b-124b-4e35-9f6b-7796a0859974",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e9a31077-d4e6-494d-a228-15436f38d1ca"
        },
        "item": {
          "id": "1a537573-8ba0-4af2-90b3-5fe04105c62c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "33f12a5e-bb43-4565-9d1c-ece7bd8a090c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34af357c-7a22-427c-8185-c6ae7a3da1db",
        "cursor": {
          "ref": "a3d732fb-bdd9-499a-b4b3-09d93d98c432",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7de7e59d-ddff-4cb9-aa02-98db87801611"
        },
        "item": {
          "id": "34af357c-7a22-427c-8185-c6ae7a3da1db",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f667f0bb-f4f5-4454-9e9d-62c6bb9536be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67d0446-e5a9-4e5c-abfe-5e1eaec3b9c3",
        "cursor": {
          "ref": "5a6dafdc-d959-4085-ab32-2636d6a5762b",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "93c18ebf-6ffd-49e9-b17c-255c4477c1d4"
        },
        "item": {
          "id": "c67d0446-e5a9-4e5c-abfe-5e1eaec3b9c3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ecf17b65-c15c-475f-92c2-0caeef2c589c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25759aa5-ea20-4916-af3d-fe23cdd63720",
        "cursor": {
          "ref": "0e59fd57-51a9-496d-9759-ea3b73df599b",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a5d4fffe-a267-4774-a539-df67ed1b6ee5"
        },
        "item": {
          "id": "25759aa5-ea20-4916-af3d-fe23cdd63720",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8832a286-4e0b-4efa-848d-d18d7f466901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09db10c1-26ae-4943-8dc0-c80741f2e48d",
        "cursor": {
          "ref": "21cf3689-1f20-4f14-92d6-538c4f25b9fb",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "40a68f75-790a-4891-a289-d51666e7b806"
        },
        "item": {
          "id": "09db10c1-26ae-4943-8dc0-c80741f2e48d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ff6ed79d-81b1-4749-82d0-29bbbb41c99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad83b7d8-c04c-48fd-a075-267ac3817f1c",
        "cursor": {
          "ref": "2cf53dab-9f60-47b3-a4eb-a67742a3f8df",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2b40e593-948d-4b4e-8203-bac8bc975560"
        },
        "item": {
          "id": "ad83b7d8-c04c-48fd-a075-267ac3817f1c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "57a58de5-80bb-4119-b699-a2e5bab0d183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545cc7a5-4161-4ea6-8060-b91b555aef39",
        "cursor": {
          "ref": "db0bbdae-9180-4aff-806d-a2b9682ef416",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1a8b0986-a929-46a0-8dd4-09ffe3d66ca6"
        },
        "item": {
          "id": "545cc7a5-4161-4ea6-8060-b91b555aef39",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a2c1b4fc-4086-487b-8289-8ac167883db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0ef3a6-cc8e-4599-ac94-ccbbd2eaf193",
        "cursor": {
          "ref": "72e59d0b-e1a2-42b5-8ea0-3faeada18b94",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "06170a1d-c37f-438a-8c85-2ee44c264714"
        },
        "item": {
          "id": "4f0ef3a6-cc8e-4599-ac94-ccbbd2eaf193",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ea179a19-f6fe-4961-b335-d535c0744dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1049cd-e524-4468-98bc-8f0962c5ad92",
        "cursor": {
          "ref": "a98a5ce2-6222-490e-a993-904fb11cb708",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "88c2c33b-7b18-4bcf-9a8d-6a4158752a6b"
        },
        "item": {
          "id": "7b1049cd-e524-4468-98bc-8f0962c5ad92",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "226cffb9-f88e-40cb-a681-c78a386b56f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa83e9f-d1f9-4f69-9e92-600e7aa0f1e3",
        "cursor": {
          "ref": "ef2cbaa3-e1fe-4618-a156-be38c8110866",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "37cdda63-b44f-4600-bd93-a5d2ed88e46e"
        },
        "item": {
          "id": "7aa83e9f-d1f9-4f69-9e92-600e7aa0f1e3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "04242f33-a371-4bd7-8615-24d68f18b62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be352b58-d6e6-409f-9aee-393429839615",
        "cursor": {
          "ref": "31aaaa41-aa7b-425f-b52d-cd13bd498c9b",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8ab56239-96c2-4e97-b1d8-04911278d84b"
        },
        "item": {
          "id": "be352b58-d6e6-409f-9aee-393429839615",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "60d207ca-3979-4788-8f8f-7fce4a3875f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b34db43-7466-45bb-b92d-ae48c1c48102",
        "cursor": {
          "ref": "29ca68f4-b50c-4669-8ee5-fca3a741d79f",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "64bb2ec4-a64d-4f6c-8d0c-942cfe6a5a0f"
        },
        "item": {
          "id": "3b34db43-7466-45bb-b92d-ae48c1c48102",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "538a4cb4-7b70-423f-9f38-dea24fbb7ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa1d45f-a7ff-404e-8a9f-f00c1ae66b8d",
        "cursor": {
          "ref": "19d2f7d8-9340-4fdf-bd2a-36d3531139f4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ccc37a08-f409-4675-97d7-cd754fd0eb50"
        },
        "item": {
          "id": "7fa1d45f-a7ff-404e-8a9f-f00c1ae66b8d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "04e34bd1-c3c0-4d65-a6f7-c36049f435b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61826af-9274-4086-8353-dcf6758468b7",
        "cursor": {
          "ref": "8e44cea5-387f-4602-8f6b-39f5f646209a",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "78d24db8-b68d-4465-bbff-8886a0ed95f2"
        },
        "item": {
          "id": "b61826af-9274-4086-8353-dcf6758468b7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0ab19383-db1e-4cbd-a2be-ddb6ff9f0913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895803e1-ae9f-4d58-aa15-3e7fc0f2d18c",
        "cursor": {
          "ref": "2569529e-de93-4fb7-a138-cf4f0191ae96",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "75090a71-542d-4beb-9841-ef9b78ca8c3f"
        },
        "item": {
          "id": "895803e1-ae9f-4d58-aa15-3e7fc0f2d18c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b47176f1-0fca-4523-9c91-45e0910eac8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1855efda-f5da-49a8-b28a-eba37b2a00a4",
        "cursor": {
          "ref": "f2876365-fb54-4387-abe3-43e9d9656ceb",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "54a1973c-31ff-4baf-b7a4-f489f0e0aabd"
        },
        "item": {
          "id": "1855efda-f5da-49a8-b28a-eba37b2a00a4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6afbde97-615a-4b07-b380-d1b45c322fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec2b3dd-98e9-4115-8daa-dc09cc9a1001",
        "cursor": {
          "ref": "c4d31ac5-8491-4b08-b2f4-7f3114017077",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2638adbf-6567-4241-8cd0-463fa111075c"
        },
        "item": {
          "id": "aec2b3dd-98e9-4115-8daa-dc09cc9a1001",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5b2ea663-cc03-430a-a3f8-376de54db505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43bee53-0acd-4e88-ad7d-97affacc2adc",
        "cursor": {
          "ref": "fe849448-56a7-4677-b8e4-b65d2c1a1b6b",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8234bfe6-de2f-4de1-aa03-015d87aa5b9c"
        },
        "item": {
          "id": "e43bee53-0acd-4e88-ad7d-97affacc2adc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "74dacdab-b974-44a6-bd69-1bcb034a7505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac42842-e2c1-4f4f-9bbd-e28b933b8445",
        "cursor": {
          "ref": "09ca8286-5eaa-4fca-9822-292f773091f4",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f50062d3-54f6-402e-9c53-634fe202d9b5"
        },
        "item": {
          "id": "6ac42842-e2c1-4f4f-9bbd-e28b933b8445",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3ce2e7d9-5e8e-4dfb-ab9e-78f7de4d8ed5",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "990141b6-5c77-4c63-a932-672c5a974d67",
        "cursor": {
          "ref": "f36f2af9-db87-4ac1-aeff-b954ac512e46",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5c9d6ca7-efd8-4058-a998-70a1cd194d71"
        },
        "item": {
          "id": "990141b6-5c77-4c63-a932-672c5a974d67",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "04af891c-cc13-4839-a46c-bacede9b314c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6fbf6d-c4ad-476b-882e-016065acb1f3",
        "cursor": {
          "ref": "73ffdd3e-272e-490b-9edb-1c2f8c0fbd4f",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c6ebadfe-8711-4db9-8aaa-2e6c9aed7203"
        },
        "item": {
          "id": "9d6fbf6d-c4ad-476b-882e-016065acb1f3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f6943258-ba62-457b-954a-eb8dd556e4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769dbb4e-5eb8-4bd0-a270-2726e5af4efe",
        "cursor": {
          "ref": "40215a96-9e2b-438f-bd28-988c7c3bf513",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "65a756b5-bc5b-4b8c-98e0-7de7dc548075"
        },
        "item": {
          "id": "769dbb4e-5eb8-4bd0-a270-2726e5af4efe",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ce6aa493-af52-4765-b347-fb4350db7118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5eb00c8-56d3-4d02-9060-fdb201cdb806",
        "cursor": {
          "ref": "9a3b149d-a9d2-4912-ae90-33b6208bc19a",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ea5f9674-724b-465c-b8c0-cc5754fc242f"
        },
        "item": {
          "id": "e5eb00c8-56d3-4d02-9060-fdb201cdb806",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "89b923b8-8a10-4116-ad4a-5c7a87da2675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bfbbb8-e78c-4321-ada2-8c0ced6cfb67",
        "cursor": {
          "ref": "e5c5a820-a8ac-423b-a651-f3764a6c503b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a577f79b-2f78-40ff-88b3-4ebc0c96fc2a"
        },
        "item": {
          "id": "e6bfbbb8-e78c-4321-ada2-8c0ced6cfb67",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2a83ff28-ba68-4056-8050-c7caf9409c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed98412e-4a09-46f6-8a84-01efc0436616",
        "cursor": {
          "ref": "9884db1e-2c81-4281-afd9-e84cb4d8aecd",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "649e3e07-7d71-4b72-81ad-219210f77caf"
        },
        "item": {
          "id": "ed98412e-4a09-46f6-8a84-01efc0436616",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "637f0c78-5a24-4260-88f8-3bc464fb48cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92db17b6-98c1-435c-a08f-afe465826965",
        "cursor": {
          "ref": "14cf13ec-6625-483f-a662-93df956dc686",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "eec14fe4-90ac-403c-b5ea-46871b4aa103"
        },
        "item": {
          "id": "92db17b6-98c1-435c-a08f-afe465826965",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b9b4bd73-356a-401e-848f-0e7186be9abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f64609-f731-4190-812c-ca485bc2b848",
        "cursor": {
          "ref": "5980e2f1-7ea7-4ffc-8d51-c1ffbc963576",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bf839a02-805e-4596-b7ac-1cfa949ef87a"
        },
        "item": {
          "id": "66f64609-f731-4190-812c-ca485bc2b848",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fe71d01a-ee22-431f-9919-e92bc4b1291a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed03b14-2405-43e2-bcc4-14ceacabeb3b",
        "cursor": {
          "ref": "0cab7306-8f56-4598-b8f7-0e38b9ace203",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2cc43959-baca-4c07-a1ab-12d6c7c9cb63"
        },
        "item": {
          "id": "3ed03b14-2405-43e2-bcc4-14ceacabeb3b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0363385e-85ec-4c32-995c-947583ad9868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b42bc2-9ba5-4608-8a06-190beb8faef0",
        "cursor": {
          "ref": "367ebcec-8da5-4496-ade7-05db2713058b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "778c8040-f00e-42b6-b9eb-42ab19e7df2d"
        },
        "item": {
          "id": "a8b42bc2-9ba5-4608-8a06-190beb8faef0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0f5bd333-2dd4-40e9-82bf-3e6c0e9a5572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6426e926-ac88-4c77-8ac5-e1f1827c81d9",
        "cursor": {
          "ref": "7b2bcf54-d55b-4c5e-8cc7-39981f2e7c04",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3b1e71f0-a911-484e-b715-cc11984c8ce4"
        },
        "item": {
          "id": "6426e926-ac88-4c77-8ac5-e1f1827c81d9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ed34a71c-fc7d-4b05-9c1a-1d530c72df2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93de47f1-a0b5-4be4-9b55-2b0f92190cac",
        "cursor": {
          "ref": "359ff9c6-9df5-4975-ab79-99af8462ffda",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6cdbe8fb-252a-44ae-a7d7-39a9a7408e7f"
        },
        "item": {
          "id": "93de47f1-a0b5-4be4-9b55-2b0f92190cac",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b4b1c034-d827-489e-925c-7953e18de061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa485ce1-4415-48f1-85fe-e0f4fa587c98",
        "cursor": {
          "ref": "8ee619a1-0905-4d41-9e0b-b5fb69c027cc",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c6172f6c-341d-45eb-a2f5-a9763663bcd0"
        },
        "item": {
          "id": "aa485ce1-4415-48f1-85fe-e0f4fa587c98",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6596b3ac-d865-41e3-bfca-835ab194c923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdb54a8-98f8-48b0-bc87-aac76559edca",
        "cursor": {
          "ref": "6e79b74b-f2e4-427d-8e62-447f1b0e1c2e",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3aeb16c5-45fa-4673-a41b-c987abdaaecd"
        },
        "item": {
          "id": "cfdb54a8-98f8-48b0-bc87-aac76559edca",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "039cc39a-7719-4003-b5f3-70b174f780e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5c644d-3299-45d9-92b8-46bb18adb1cc",
        "cursor": {
          "ref": "586b0286-fa2f-44e7-aea4-6ef0c6d409f8",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a82ece48-8121-4bc2-8b4d-4f264678016d"
        },
        "item": {
          "id": "6b5c644d-3299-45d9-92b8-46bb18adb1cc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d069dbac-38fe-437f-abe8-e6b1cec398a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5302ac6-ddbc-4a7d-b90d-5c69f5bc598c",
        "cursor": {
          "ref": "93e4c35a-8fc0-4732-90d1-00450bc08b22",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "35e6a237-1d2f-4356-93aa-7c807ba1dfcf"
        },
        "item": {
          "id": "c5302ac6-ddbc-4a7d-b90d-5c69f5bc598c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ca0bfd13-b871-4a1c-aa28-072aebf1acb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef759503-7d5c-4bc1-a02e-6df7aab2f7ac",
        "cursor": {
          "ref": "20e54f0c-1bb4-42c9-88bc-e2a5e45a9d80",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4886df8e-24dd-4b71-bffd-f6ed9270bf17"
        },
        "item": {
          "id": "ef759503-7d5c-4bc1-a02e-6df7aab2f7ac",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "09888bf4-c097-4d2a-a569-52d45b01c73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e703a8c7-c1f2-41c4-af03-8eb50cb5c5e9",
        "cursor": {
          "ref": "0d97f418-761e-46a1-b4bf-06ee735a986f",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8b0d79d7-0229-4e85-bea0-5976e3cb2e3e"
        },
        "item": {
          "id": "e703a8c7-c1f2-41c4-af03-8eb50cb5c5e9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b1e5eea5-3898-40da-bb31-99cde8f80f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5f2d74-e2d0-4f37-89cf-977421ed19fd",
        "cursor": {
          "ref": "420aa5bc-b523-4822-93d2-c8dbce072eff",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "590eecd9-feec-432a-9e88-237f851cd233"
        },
        "item": {
          "id": "6f5f2d74-e2d0-4f37-89cf-977421ed19fd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1b572d52-7d68-4c8c-9e05-7d9b0a5b86e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ad5199-683f-4329-801e-d7c5d68a8d1a",
        "cursor": {
          "ref": "87e6144c-074c-4e10-a028-0564185a5734",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "55d0cb62-ffe5-4c46-82e9-6ec4928a4743"
        },
        "item": {
          "id": "e3ad5199-683f-4329-801e-d7c5d68a8d1a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e5620149-755d-4ec9-a16c-64a85312c73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1536a4-bd48-40a1-adbd-33e23352241a",
        "cursor": {
          "ref": "3ab26064-e6ea-45e4-be37-9ac89ef8a0f7",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "050c81e4-d304-4123-94ac-fbe78f020f11"
        },
        "item": {
          "id": "bb1536a4-bd48-40a1-adbd-33e23352241a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "087af55c-dd8c-44a1-93c8-597df17ebf7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f39a491-e3a5-41b7-9997-a8104fde9cf2",
        "cursor": {
          "ref": "e89a991f-0341-4eba-a9d7-af02c72bef36",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c92cdd97-be69-4e63-a0b5-d8c3b6db0078"
        },
        "item": {
          "id": "2f39a491-e3a5-41b7-9997-a8104fde9cf2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1abd30bc-2226-4019-b52a-7981af3102c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac4817f-9ce1-4973-9f5f-409f5fd55de8",
        "cursor": {
          "ref": "fb194f16-4937-464b-b3bb-cfa06f6978b8",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c06c8a58-d437-4149-bc02-3cd1db1ebc07"
        },
        "item": {
          "id": "bac4817f-9ce1-4973-9f5f-409f5fd55de8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "57d9a34d-6694-487b-8bce-baca75b554db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2525b582-85df-44b4-b14e-1fef56cc7385",
        "cursor": {
          "ref": "8157a3b8-cd46-4700-ae05-c804531cd1ae",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ca22d092-a00d-44ee-8384-45f73535ffe4"
        },
        "item": {
          "id": "2525b582-85df-44b4-b14e-1fef56cc7385",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "af1a6111-9cbb-4a22-b29b-5e756c853862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48770861-34e0-47d2-b37e-fc94ae3d96db",
        "cursor": {
          "ref": "83b2203d-b9da-4d09-b95d-d7ebff302f8f",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "837a6fe0-502a-41a5-ab8b-eafaf7101a2f"
        },
        "item": {
          "id": "48770861-34e0-47d2-b37e-fc94ae3d96db",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b8c966e6-7591-4f40-979c-4e65afaa4b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c467fce5-819c-49e7-9cf7-b4c08835150a",
        "cursor": {
          "ref": "b07e4053-628d-444d-9ca4-e739d2ce8772",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a463b167-9556-4e70-8ec6-84ceaa399944"
        },
        "item": {
          "id": "c467fce5-819c-49e7-9cf7-b4c08835150a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e98651d5-f56d-4baa-b3e9-b19549d76e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7414cbc7-1ffa-4563-bbb5-d01905abd395",
        "cursor": {
          "ref": "a2fe1651-9baf-4952-9604-88c4d33a2893",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "cceb2a59-ccf8-4d84-80cc-b3fd8218e5e9"
        },
        "item": {
          "id": "7414cbc7-1ffa-4563-bbb5-d01905abd395",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "82e7bbf7-0606-4d85-9de2-79515b279e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5faf0e-1f69-4c1c-9746-4b241545c81c",
        "cursor": {
          "ref": "ea307708-4c47-4dda-8449-f0574f649e23",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6c595bf9-7b04-4812-b540-e02a00ac4a2e"
        },
        "item": {
          "id": "2a5faf0e-1f69-4c1c-9746-4b241545c81c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ba5db1a5-7644-45a2-ab26-25d87a91f3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05898238-152f-4129-98ec-ef9265c0bf0e",
        "cursor": {
          "ref": "d5d94127-87d1-4272-8ab7-2a80d2a20135",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bbdd7292-6189-45af-9915-1682b7a9e486"
        },
        "item": {
          "id": "05898238-152f-4129-98ec-ef9265c0bf0e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "156f5b60-0e63-42cb-93c6-f55e16a9d156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4db775e-0159-4979-acec-cc231c9cc0e4",
        "cursor": {
          "ref": "f94c82bb-51bf-46af-ae07-69ecbbb9408c",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9adfaa22-ee89-4aa4-aa2a-41cbe52e4f2c"
        },
        "item": {
          "id": "b4db775e-0159-4979-acec-cc231c9cc0e4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "13fb8865-1da3-4b16-a119-af3dd493cb8e",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "bde4a10e-d279-4cf2-baa3-7700d221c138",
        "cursor": {
          "ref": "08c7acf8-b53d-4ec8-8636-495f24fa79d0",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f64fb01e-ad1c-4183-9914-04a0eb91a4fa"
        },
        "item": {
          "id": "bde4a10e-d279-4cf2-baa3-7700d221c138",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "59309056-492a-4515-9d49-477715e7c9f4",
          "status": "OK",
          "code": 200,
          "responseTime": 184,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0f1a8145-25dd-40fa-8534-09c87b628913",
        "cursor": {
          "ref": "f529beba-d0c3-4a4a-9310-14d7f5614e49",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6a5cd3bf-7317-4bdc-8567-316d412e5bf6"
        },
        "item": {
          "id": "0f1a8145-25dd-40fa-8534-09c87b628913",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d24fb6cb-62ae-40e2-8a87-7fa2073e7869",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e5f276a0-a761-4097-8985-98ab5df28f21",
        "cursor": {
          "ref": "d33562a6-c7c4-40de-b7f8-b484e6f9c6dc",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1c4a88fd-64ef-4d75-8982-17f388364dc2"
        },
        "item": {
          "id": "e5f276a0-a761-4097-8985-98ab5df28f21",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dff32d76-bbf3-4a6d-9826-1580af520f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34250c9-3f04-4f81-ad78-ce1c3ff595aa",
        "cursor": {
          "ref": "15cc5cb9-3e59-4548-858a-28c380b4eafe",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0cec9c75-7ab6-458d-9a28-4dbfa99a8885"
        },
        "item": {
          "id": "d34250c9-3f04-4f81-ad78-ce1c3ff595aa",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ad9ce237-2b2c-4df2-95f1-3b1ac26d14f5",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "5d7cf80a-7e2a-4d6f-9764-1a2e1ec981d2",
        "cursor": {
          "ref": "f8eb3719-f5be-4515-9fe5-e0b92ae931c1",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e825410a-28e0-4169-8e09-3e32c1397d5f"
        },
        "item": {
          "id": "5d7cf80a-7e2a-4d6f-9764-1a2e1ec981d2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0313645c-30d5-4720-b273-8827517d3ac5",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a7757af5-caec-434c-b79d-4848483d23e8",
        "cursor": {
          "ref": "6592a4a6-c160-4d05-a7f4-f09a28abbace",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "51a5fb7d-214b-4362-b8e6-7ad139573cb1"
        },
        "item": {
          "id": "a7757af5-caec-434c-b79d-4848483d23e8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a2fd0ef7-97a7-4d90-a094-f4542db9c1fa",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f92d69ec-d0e5-4eee-a746-a9e55036b277",
        "cursor": {
          "ref": "5719367c-2145-4f5c-9229-550a3f8f1f86",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e4fddcc4-1b92-43a5-97ca-333cdd3f2263"
        },
        "item": {
          "id": "f92d69ec-d0e5-4eee-a746-a9e55036b277",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f0cc67f7-de99-4db0-b7bb-1a55ec25b401",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "69150522-ae1c-4512-8445-0cea11ea7a37",
        "cursor": {
          "ref": "8723bbf4-faaa-4a7e-8d62-260d3c9d7cbf",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e5efe6a1-b802-4021-a56e-11bea0a53f2f"
        },
        "item": {
          "id": "69150522-ae1c-4512-8445-0cea11ea7a37",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "60b5457e-0906-410e-9361-18b45cb00e57",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1ecdd646-940a-4b47-a2a0-bb092fb7ec2d",
        "cursor": {
          "ref": "d1867a98-5a12-4819-833b-e066bc4c98ff",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "aba2fe43-4d4a-4871-90b6-4b387ff785c2"
        },
        "item": {
          "id": "1ecdd646-940a-4b47-a2a0-bb092fb7ec2d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5c271516-d6aa-4479-8bf8-006d9da11603",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "df388c02-9a27-4a4b-a9da-44226ed72969",
        "cursor": {
          "ref": "370a400d-4f4b-4835-b0f9-8fadb48f0542",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2431c06f-01c9-43fd-aa21-2e99083b14e4"
        },
        "item": {
          "id": "df388c02-9a27-4a4b-a9da-44226ed72969",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "283f8663-dd17-4abb-b00f-a8b7072aaf44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b19c59-ad48-4f98-abdd-af4918015b28",
        "cursor": {
          "ref": "20237b2e-846a-4665-b6db-f77fda64bef8",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "27f6a124-f8de-4b44-95a3-df2f88b98011"
        },
        "item": {
          "id": "06b19c59-ad48-4f98-abdd-af4918015b28",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1e10aafb-2cfd-4b40-ad03-c40b1bf5cd3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10cb8a46-d218-4ef5-b190-8982dda61941",
        "cursor": {
          "ref": "0fb10213-c98d-4e6b-80f0-d4800f13e1d9",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5f61d388-30a2-435d-b8ad-47bf6ea33b83"
        },
        "item": {
          "id": "10cb8a46-d218-4ef5-b190-8982dda61941",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c4531249-64e9-4247-b0bb-a7845049a279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2271ac-94ec-4ad3-b392-34bea7808e3e",
        "cursor": {
          "ref": "f8a50efa-c631-4bd8-a3ad-00a4faba9792",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "274acbab-a3f4-4d4b-8d1c-c6b60ec1d016"
        },
        "item": {
          "id": "8b2271ac-94ec-4ad3-b392-34bea7808e3e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f5285765-0792-41d6-affc-b3cf74f8e996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3674d2b-6518-4fb8-9bc2-84565c27d406",
        "cursor": {
          "ref": "ca852292-d786-4fbb-8519-f8ac24df1a9e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4f66b47c-b5a6-4d4e-a81e-3fa664e080c5"
        },
        "item": {
          "id": "f3674d2b-6518-4fb8-9bc2-84565c27d406",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "88d74f68-c4d9-45c1-b7ff-125db7b9dbdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e725e53d-125b-47b2-bf43-eeab00055fa4",
        "cursor": {
          "ref": "20945c2e-7a3c-44e9-8e5a-aad7ae6a2afc",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5f24f03c-b309-4410-897c-ad32c272900a"
        },
        "item": {
          "id": "e725e53d-125b-47b2-bf43-eeab00055fa4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "59854c11-f446-4917-bedd-597227dc9a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24aa355e-8547-4944-9dd2-3d7bf62e91b1",
        "cursor": {
          "ref": "6c6e8fa3-2433-4045-8373-1f9e4647d4cd",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0e452985-4c62-408f-b203-ea3c5f7f2595"
        },
        "item": {
          "id": "24aa355e-8547-4944-9dd2-3d7bf62e91b1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cb023649-c2c9-474d-8495-4402729bcfc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74cdadc-ebf1-46d9-aab7-baf6081b31fc",
        "cursor": {
          "ref": "1f6bfd68-2113-4966-abd0-348cc384fe44",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c6bd56da-b1b1-45ab-97aa-22335f9238fc"
        },
        "item": {
          "id": "a74cdadc-ebf1-46d9-aab7-baf6081b31fc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e60c86cb-0496-4575-b2f4-7cae9e0550d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936b4c2f-8bc1-43b3-8da0-acdd2cbd81ce",
        "cursor": {
          "ref": "25b1314d-b906-4a7c-821e-c34d421cfe5f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7016ddfc-8465-4794-8039-6930f48bd139"
        },
        "item": {
          "id": "936b4c2f-8bc1-43b3-8da0-acdd2cbd81ce",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "716ed40f-000d-421b-a210-ba82619056e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf65f52-1ef0-4617-850c-5b0de6ca4e9d",
        "cursor": {
          "ref": "8c4b6d74-61c2-4e77-83ce-c014c8ef7f4a",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d5105405-5cdf-492c-b916-ea8e5e1b1d6c"
        },
        "item": {
          "id": "ccf65f52-1ef0-4617-850c-5b0de6ca4e9d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "bdc14fba-0abb-4c25-b64b-d8ac39261317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14524ea8-11ba-45fb-95df-afa71d7976a5",
        "cursor": {
          "ref": "4349a3f8-6326-4e2d-a4f4-b61dfe9fde6a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7edc2667-a9a3-4791-9a03-4cdc89991b1e"
        },
        "item": {
          "id": "14524ea8-11ba-45fb-95df-afa71d7976a5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ff88bb9f-a9ab-4eef-b312-748e8a144877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d9706d-da45-487e-9a73-04c1499dc69e",
        "cursor": {
          "ref": "8b229064-6c4a-4912-a773-c6ee15269e35",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1cf6794b-2548-443c-8108-886a48536b50"
        },
        "item": {
          "id": "92d9706d-da45-487e-9a73-04c1499dc69e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "831d839d-4300-4f61-ba96-92f9e070c4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b262c9e-6442-4321-9751-9447dfe6d750",
        "cursor": {
          "ref": "607a31d5-1039-45df-a9e7-c1d620f18f88",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2faecf83-04fe-43b5-9d77-4d384ee1ccd5"
        },
        "item": {
          "id": "7b262c9e-6442-4321-9751-9447dfe6d750",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6aa5aa89-f0d7-4d92-ba21-70cf282dc586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c6d0c2-3de2-4518-8655-83d898d9581a",
        "cursor": {
          "ref": "769a9e3a-6bbe-47e0-a1f3-c8d957e565a5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0c671fa5-0035-48ca-9039-c439bbb75d66"
        },
        "item": {
          "id": "68c6d0c2-3de2-4518-8655-83d898d9581a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "45e04aab-bf52-4484-8716-466a5242052f",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "4e299171-941a-4b17-9874-5774f2780a9c",
        "cursor": {
          "ref": "13045cac-adc5-4891-b867-4ccfe4ffd11f",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "50d405f1-8a1e-43bd-852b-eda7cb242e7c"
        },
        "item": {
          "id": "4e299171-941a-4b17-9874-5774f2780a9c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "77aa18fb-50da-4a22-8c62-855b80c03f8c",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e495535c-b2cd-4f66-a454-8bfb71de00bd",
        "cursor": {
          "ref": "aa26e859-314c-4b9b-a484-f2f6bc84665b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b8c1b4bc-3125-4c88-9f9d-733755c20b0b"
        },
        "item": {
          "id": "e495535c-b2cd-4f66-a454-8bfb71de00bd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4a39e2b4-2661-448d-af56-df8cf90f84a4",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "34cdd910-9758-4578-ae72-77e233aab797",
        "cursor": {
          "ref": "d1b37883-5c60-4b68-9f64-049b6b7c1556",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3d65c896-7043-42a3-9039-04719fe42ca3"
        },
        "item": {
          "id": "34cdd910-9758-4578-ae72-77e233aab797",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b80c35b2-aa6b-4c7f-8b1c-cf0a6fb00134",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "92f032ec-d12f-4405-9c5b-0a52cd6211b1",
        "cursor": {
          "ref": "80a38704-0363-43ee-8c29-6b4c03ce762f",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5f4cbd34-1600-44ce-87ac-04864c50f332"
        },
        "item": {
          "id": "92f032ec-d12f-4405-9c5b-0a52cd6211b1",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "12653bfe-0b2f-42a0-99b5-b89ceeda0590",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c702bf12-68ee-49d2-ad09-5cd1f5084f11",
        "cursor": {
          "ref": "701071f9-9f6b-481c-8803-72e845fb642d",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f445ad1f-2d0c-403c-8c97-019123cd2998"
        },
        "item": {
          "id": "c702bf12-68ee-49d2-ad09-5cd1f5084f11",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c59f8c40-c67f-480c-85f3-47a81abb6cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62907982-b252-4e16-b177-d791953d2f39",
        "cursor": {
          "ref": "dd17bd4a-574f-483d-bb91-1614a28c46f6",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3f1a72b1-7eb7-4d17-815e-5a2b9d1d806c"
        },
        "item": {
          "id": "62907982-b252-4e16-b177-d791953d2f39",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b996382c-da7a-4abe-b647-a2e4cf857369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003f171b-7081-498c-8f05-eda6b4d386cb",
        "cursor": {
          "ref": "cb55dcb2-1ad0-4864-ad16-c0e551e6ca9a",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "42802c43-1208-4c52-a2cf-526373514bcf"
        },
        "item": {
          "id": "003f171b-7081-498c-8f05-eda6b4d386cb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "de1e41bf-b0bf-4551-ab3b-daaaa217bb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484c794f-3f52-4ae4-96ec-7677d4e272da",
        "cursor": {
          "ref": "2cc0bb31-4e68-49b8-952c-118066689064",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d99365fc-d191-4876-9578-913c2c52aa89"
        },
        "item": {
          "id": "484c794f-3f52-4ae4-96ec-7677d4e272da",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3f5fb75c-cb63-4559-8825-8749a2d7076f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3484329c-79df-4d05-8145-aee0b08174ff",
        "cursor": {
          "ref": "d3d94044-63fe-4cd1-80ae-0cd5849a868b",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dac09288-80aa-4057-9aef-c821726cea96"
        },
        "item": {
          "id": "3484329c-79df-4d05-8145-aee0b08174ff",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8fb8e70a-b23a-4a2a-ad14-b4ae57eee54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38ca6a6-f401-423e-84fa-e493b7ef222f",
        "cursor": {
          "ref": "db5db093-d5ff-4f14-954d-c3059cdb1246",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8e1b76c9-f4b7-43f8-8916-18d520f18022"
        },
        "item": {
          "id": "e38ca6a6-f401-423e-84fa-e493b7ef222f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f3dac5a0-a3dc-4727-bec1-507e0d465dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7f1741-4dd6-4da8-9c32-16178a510a55",
        "cursor": {
          "ref": "4c074c6f-f63f-45f2-b81c-2b3901f60497",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a2a641d7-32a5-49ff-bb78-8fb894bafc2a"
        },
        "item": {
          "id": "7b7f1741-4dd6-4da8-9c32-16178a510a55",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8b7577b3-60d8-4671-a280-04850290d364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d312cd5-f579-4e7e-8226-5c3ca6e59a8f",
        "cursor": {
          "ref": "5551197a-ed10-4b3e-8c09-a53aaa20a19b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "dfac41fa-985a-4500-a794-d0ae0be8dd09"
        },
        "item": {
          "id": "8d312cd5-f579-4e7e-8226-5c3ca6e59a8f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "469e7e50-2e79-4269-9d30-a13e03b9ce46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cfe8e5-5dfd-4d5b-97a6-c1db8d12c020",
        "cursor": {
          "ref": "e20f904a-98e0-490f-99fc-374665b4eace",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1e128db3-755e-41c0-a353-76e316c4eae4"
        },
        "item": {
          "id": "67cfe8e5-5dfd-4d5b-97a6-c1db8d12c020",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d184d329-617f-4180-bc41-f91a6a58f4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230645a6-a91f-4405-933b-a2523e147767",
        "cursor": {
          "ref": "0b3a3007-e140-4367-96ce-5cbe6caded4d",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "cde51d1d-3852-4802-882d-035d76929b7e"
        },
        "item": {
          "id": "230645a6-a91f-4405-933b-a2523e147767",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b22ceecd-f6fa-4763-93fa-0826fb1b8abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18fda4f-3d74-42eb-a7bd-c39da281cf79",
        "cursor": {
          "ref": "cdb9f132-c4d9-4794-8498-8d16d1611b36",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5072be9e-5d1a-4e75-94fe-2225397e1d45"
        },
        "item": {
          "id": "a18fda4f-3d74-42eb-a7bd-c39da281cf79",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ab0dcdf7-c1c9-49d7-9147-324cc9248876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b97472-f719-4a0f-8d14-4b630d235228",
        "cursor": {
          "ref": "d7349aeb-c604-4a54-a1c6-e3c513a65ff0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "ae32c735-a76f-4135-887e-b980977cd69f"
        },
        "item": {
          "id": "c4b97472-f719-4a0f-8d14-4b630d235228",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5385b8a0-e353-47c2-a664-ab247444f2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8634ed-4136-442d-982d-27a5df602a41",
        "cursor": {
          "ref": "cc7bef7f-c58b-4a42-bd80-a956cce01e29",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "7b97d332-639b-4d1f-a059-70a59681597a"
        },
        "item": {
          "id": "0e8634ed-4136-442d-982d-27a5df602a41",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "54f28513-a23e-40c8-9e58-256535c5486d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5cb830-ea12-4aa9-b452-8f953c70077c",
        "cursor": {
          "ref": "bff68bf4-41b4-4455-8c40-400a966c6415",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5ab6e96d-bc2a-4e7f-b79a-569ab0d22b94"
        },
        "item": {
          "id": "5a5cb830-ea12-4aa9-b452-8f953c70077c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "985a9705-41be-4d22-9d14-9eea110c2847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bd1014-9f2c-4121-b946-dafc9462fb22",
        "cursor": {
          "ref": "114edf59-d738-48a5-8652-adc6f2aec7ba",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ed973ca8-23e2-4d61-b34f-38c8f34f765b"
        },
        "item": {
          "id": "b5bd1014-9f2c-4121-b946-dafc9462fb22",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9337763e-f649-4e81-b219-734499b7f8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206e266d-2dbf-4f98-86b9-2be7f47f50ec",
        "cursor": {
          "ref": "d564c9cf-37de-4583-adf1-c9eec1cc39ce",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "bc1affca-d007-4611-8730-b219af90e9a2"
        },
        "item": {
          "id": "206e266d-2dbf-4f98-86b9-2be7f47f50ec",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0cdc28c4-e376-4cd1-bcf6-efa1d430cbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad7216d-311f-446a-88d8-d3a7f07eb01d",
        "cursor": {
          "ref": "27d9a023-4bad-49d4-9641-e262b69db2dc",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "49b300d1-9243-45e6-90c8-bf79892ca800"
        },
        "item": {
          "id": "cad7216d-311f-446a-88d8-d3a7f07eb01d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a96c48fa-4569-4df1-bef8-3525e24a6df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31f0ca2-d98e-47fa-b5b4-0c38a9c0ef5d",
        "cursor": {
          "ref": "20853a18-95ef-4e7c-9409-0ee511ac58c0",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b9964359-bf34-45f8-aedb-ec1da29ef101"
        },
        "item": {
          "id": "a31f0ca2-d98e-47fa-b5b4-0c38a9c0ef5d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "87e68dea-168c-4877-887f-16ac5cb7a8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fe0cbf-9a62-461c-bfeb-e4ad85be55a8",
        "cursor": {
          "ref": "e7c4e5fc-3e66-45e5-a7ac-07fd3829fd29",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "72b1b13b-54d9-47ed-9e28-0dcc7f2283a5"
        },
        "item": {
          "id": "02fe0cbf-9a62-461c-bfeb-e4ad85be55a8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "00a39f70-0b9b-4525-bfb2-c8b327ec37a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a6b1e3-fe47-42bb-9d29-d276b8a23a15",
        "cursor": {
          "ref": "ac3dd99e-6d78-4684-8cbe-ac9172ade0c3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0df79d93-0cee-4578-92cb-d525d557c1fb"
        },
        "item": {
          "id": "87a6b1e3-fe47-42bb-9d29-d276b8a23a15",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d7fdc959-814a-4ddf-9ac8-7bbbfb0a5f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed81f394-57af-477b-bc4f-2516b9018fef",
        "cursor": {
          "ref": "25bdc37b-1dde-446d-a81e-a4ee22181a7c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "61dfc20c-4c0b-489d-af6e-74965deb5a7f"
        },
        "item": {
          "id": "ed81f394-57af-477b-bc4f-2516b9018fef",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2d103f87-8b4c-46b5-9c6b-b6218f05cd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d808f661-9bec-41cf-8eab-8270abf25dba",
        "cursor": {
          "ref": "4f2c8aea-339f-4a6e-9f76-27a6e8449ce9",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "01ae2f75-a5de-42c0-9563-4e6918b38ad2"
        },
        "item": {
          "id": "d808f661-9bec-41cf-8eab-8270abf25dba",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "654b9bbc-cda8-436c-bed2-6d774ff73568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb95ee91-19b0-4df9-a11c-07bab1da173a",
        "cursor": {
          "ref": "2640ba23-2a84-4140-ad47-d1d0333712b9",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3185eac7-3a70-47ba-b961-87ad9bc65b9a"
        },
        "item": {
          "id": "eb95ee91-19b0-4df9-a11c-07bab1da173a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "63b2b7cb-7316-433d-9e26-ec286efcba2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ff36d3-3e7c-4ed6-96a2-8b4884a3ad60",
        "cursor": {
          "ref": "41c4f0dc-7e81-4a7f-ba36-52892ddc099e",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4a720967-eebc-43cc-89e1-fd4ddd30c612"
        },
        "item": {
          "id": "92ff36d3-3e7c-4ed6-96a2-8b4884a3ad60",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d5652847-a93a-4e94-aba5-9dab0ddde43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4bf79a7-1000-40a8-b797-a7645559e78d",
        "cursor": {
          "ref": "34eab6cd-6aa3-4e0f-8923-91cbf60d26db",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1ce9402e-d858-49ca-9f05-90d9ff125c8f"
        },
        "item": {
          "id": "f4bf79a7-1000-40a8-b797-a7645559e78d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6e8c7c9b-4269-4b8b-84cf-a952a9835c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74644b22-9a22-47a2-9a2c-0d86af225d98",
        "cursor": {
          "ref": "92df01a0-cccd-4f67-9247-e970abb52048",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "dddb0005-46f2-4791-92a6-8d7193d7ab5e"
        },
        "item": {
          "id": "74644b22-9a22-47a2-9a2c-0d86af225d98",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a917330e-7b58-4555-a5ee-6de1731b6bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2e144c-103d-4498-9e68-8ae45e1847f2",
        "cursor": {
          "ref": "9f2e3049-f4eb-41ec-985b-12433c7e1fa7",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6c845cf5-1562-4501-aa46-b28a0012308f"
        },
        "item": {
          "id": "6b2e144c-103d-4498-9e68-8ae45e1847f2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1d40ead3-5108-4579-9a20-9dba486958a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97a7b46-cad2-4620-b34d-ec0438a86bad",
        "cursor": {
          "ref": "8accf9c1-de60-4186-a056-383d2df5987e",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "67dc3bd8-1024-4ede-a7fb-bb9ba7ad7ae8"
        },
        "item": {
          "id": "a97a7b46-cad2-4620-b34d-ec0438a86bad",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "202d6ca4-853c-4a5f-90b2-7180c6efd43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dcf122a-71f4-4df6-8d87-76aff13c2c61",
        "cursor": {
          "ref": "a4b06a7e-e649-4668-ad89-002486eb6dc8",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "aba21364-42a9-49cd-9553-5bdbcfdb9695"
        },
        "item": {
          "id": "1dcf122a-71f4-4df6-8d87-76aff13c2c61",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ebdfe09b-f227-4e99-aaf1-187fc02060d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d37c77c-6755-45d2-ab9b-ed10dd28d530",
        "cursor": {
          "ref": "c04362ad-3f65-4ed1-ad24-066009704192",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "909ed1d5-6966-4e3a-9ce0-f00a0ae68762"
        },
        "item": {
          "id": "3d37c77c-6755-45d2-ab9b-ed10dd28d530",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f0e89d12-43d6-4167-85d4-c63db921d964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0771bae1-935f-4307-b281-c81b2659e68d",
        "cursor": {
          "ref": "802082e5-24ad-4f65-a31f-a4dfccd55555",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "5039431c-8543-4a85-a85c-e46e3de5bfef"
        },
        "item": {
          "id": "0771bae1-935f-4307-b281-c81b2659e68d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b51da3b2-7696-49e9-9792-68978562cd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59443383-ad95-4528-a19c-e5fdea952f9e",
        "cursor": {
          "ref": "bb988dd1-91b1-431b-89df-2257e3341590",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "af6c4bbe-a407-4031-a984-1de4c19103cf"
        },
        "item": {
          "id": "59443383-ad95-4528-a19c-e5fdea952f9e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ce85f7e0-60c2-412a-8aca-941727ebe73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a7ae9e-caff-4b64-b141-032abe4de1bf",
        "cursor": {
          "ref": "3ecea284-fee4-4f4b-9951-492c821ae340",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "4bc9c007-f24c-43e8-b85d-b1926d0fc880"
        },
        "item": {
          "id": "99a7ae9e-caff-4b64-b141-032abe4de1bf",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1f8252ba-5eeb-43be-a7e2-3a493e0210b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7856ca4b-80e2-4273-a709-4edc71146014",
        "cursor": {
          "ref": "fb31aba1-5ceb-46b5-8358-290bc29ba6b6",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6ca65243-adaa-43d9-bc1e-91cf978c8c73"
        },
        "item": {
          "id": "7856ca4b-80e2-4273-a709-4edc71146014",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "21513ade-8b28-47b0-b1ab-3b15ff6e4d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6407d4-ceda-4ed0-8909-a3cee38426f1",
        "cursor": {
          "ref": "7d7b84a5-e347-48bc-b7a0-6fceb1e9af4e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c8c55011-1af8-43de-8781-d133c4b0e035"
        },
        "item": {
          "id": "fa6407d4-ceda-4ed0-8909-a3cee38426f1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c53fcd59-8a78-4b08-b93d-0680130c2226",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b55aab-43c0-4354-9310-38947e0bb018",
        "cursor": {
          "ref": "05f8436f-0d3c-4b8f-a257-847385acf2f5",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1279564a-ef7b-4bd2-9fc3-919912e80c18"
        },
        "item": {
          "id": "00b55aab-43c0-4354-9310-38947e0bb018",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "faec32da-0e64-44ff-b1c4-1977de5ee0e5",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a389bb1b-58ec-496d-af99-79768381f744",
        "cursor": {
          "ref": "89a5134b-3408-4e14-99c8-bed99354bb3d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "8949b4c7-0713-4af7-911b-0636efc678ca"
        },
        "item": {
          "id": "a389bb1b-58ec-496d-af99-79768381f744",
          "name": "credentials_verify"
        },
        "response": {
          "id": "07f1a993-bf51-4bbb-a34e-42bacb2155ee",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd50e87-71b6-43d9-b14d-783edaf1853b",
        "cursor": {
          "ref": "7b26fbfe-9579-414f-8c42-84126cb680d1",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "532930ed-4f6c-4178-9523-196bc7e61fb2"
        },
        "item": {
          "id": "4cd50e87-71b6-43d9-b14d-783edaf1853b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "73ad58b2-b50a-4ac1-865d-4a008310cd86",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9390e6e0-686d-4297-afa4-0cfc7790059b",
        "cursor": {
          "ref": "72118174-84f7-43e9-bc22-bbc029140ff7",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "08694586-f881-459f-bed3-f67cfbcb1b87"
        },
        "item": {
          "id": "9390e6e0-686d-4297-afa4-0cfc7790059b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ea347fc9-d381-4b54-9f98-906f094de339",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9390e6e0-686d-4297-afa4-0cfc7790059b",
        "cursor": {
          "ref": "72118174-84f7-43e9-bc22-bbc029140ff7",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "08694586-f881-459f-bed3-f67cfbcb1b87"
        },
        "item": {
          "id": "9390e6e0-686d-4297-afa4-0cfc7790059b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ea347fc9-d381-4b54-9f98-906f094de339",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf487f4-945d-4b7e-ab84-b3520fc612b6",
        "cursor": {
          "ref": "deb88561-1216-498c-941a-bf7a78cb108c",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "02a1158d-75fa-4940-b2ae-b427a3d4ae1a"
        },
        "item": {
          "id": "bdf487f4-945d-4b7e-ab84-b3520fc612b6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "acd0b289-2988-4dba-ade2-a6dd399051ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c44e754-e661-4202-8cf9-802f0f480550",
        "cursor": {
          "ref": "1d27f008-6952-4e1f-864e-7a552c62cde3",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "2cbc3399-a4b9-4c94-a930-e64ab1f5bcd6"
        },
        "item": {
          "id": "9c44e754-e661-4202-8cf9-802f0f480550",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "72d35455-2d3f-422b-8fa1-018754e3416b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}