{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fca3f315-0af1-4a05-816a-230f408dfd03",
        "name": "Clear Cache",
        "item": [
          {
            "id": "30e497c4-de15-43c0-9243-e868dd43943c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "271e4dae-a206-469b-aecc-87929f600dfc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e4947ab4-4af7-4282-bbd9-145b0280c7bb"
                }
              }
            ]
          },
          {
            "id": "8fea2a0b-efbc-4555-8d54-c83d6d48a7a1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2981159a-0cd2-412a-8086-280457d52bd7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1f02dd32-136d-49ba-8d6c-e081c57c7c46"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "08943f43-1d90-4cf0-bd74-6498934762d6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b58acfb4-c24d-4f91-b257-fe2fd440005d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c7a077d1-fd6c-4208-9658-4705c9a20485",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5f12600-56ae-42c5-b07d-10ae658ff15d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eced96a4-bbbc-417b-a013-98c563b26cc3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14e64d0e-767e-4346-a3bc-47e29d014197",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e11b493-f5a8-412a-b526-b8b65706c36d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b62876f4-c069-4554-b075-a7c24a6fb322",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be07aee0-fd78-4fa4-85cf-205cb50c7a58"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5842a725-8a81-42d7-86be-95771c6e2121",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f63bc65d-9f0d-4d57-9a6d-ab436103be22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0941ae6a-1d4d-4b68-866b-276bf37cc87d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04d5c42f-64e2-4744-b924-739c6feb8662"
            }
          }
        ]
      },
      {
        "id": "c4c3fbc1-9e3d-4a89-8028-b846135249e7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f5949903-b455-4fd4-b09b-9d0fb2ca4637",
            "name": "Negative Testing",
            "item": [
              {
                "id": "16952443-becd-4dc5-ae2d-6d2c674a095f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d9172728-e66f-49d3-96e0-92beab27b1ab",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad385ce-63d0-47ac-a412-8eed300adb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2b86ae8-be74-4340-b093-664703cd96ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbd9f38-78e0-4a03-b82f-b97e003f4226",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a8a6fa-0d52-416a-9c59-9a3ac5688501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b9d0232-5588-4080-9eab-0ba677dbf1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e85fe32-3f54-4248-8916-f4e1e7aee9d3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ec0b5d-1af4-4dd8-b841-e9f02c7c43f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cd9de7b-293a-479a-8abd-6b027069f7f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bf6cf725-8230-4480-b81d-6b6d226323b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "466c7aa6-3f0c-4711-9575-7a132a720786",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d347cf-8d7f-43b6-b15e-2dc8505d883a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b2aa480-239d-4966-9840-b859981b0a40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c752529a-9501-4684-9b12-d1359a434872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d113c23-4e33-47c1-84eb-cbbe658d3113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c240a22b-ba0f-43b3-8813-5161b9a12e59",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c9c9a7-e8c2-40fe-87cc-f6542d2602f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e1e1b3d-d3d2-4420-bab5-2749fc35f6be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a0b992-2f66-406b-afb2-bc6f5dcd3cae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ddc058d1-d3e4-4911-97c0-02f5e06eed8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3bf8a990-1f3c-4f7e-8347-a47c15489f07",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fa68193d-49ef-4f49-8eb9-1422995d28c4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33562973-6672-4633-add0-944de80bb842",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cbd315b4-dc75-4568-be4b-805938c0f793"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f347aa5f-be27-4e5d-89ec-9fa1c59168fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "aeb8dfa5-460f-449c-9d82-2d982829c47e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07c48060-973e-4096-b514-8ffca316c97c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d93d7a81-0fb3-4f7d-b629-cd370e63596a"
            }
          }
        ]
      },
      {
        "id": "d50739d0-c19d-4c92-a878-7650ddb267b1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ac1a5d02-de69-494c-ac78-c8512e3854ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85032721-2f5f-4659-9a8f-e2d00d546677",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "18cf3e61-da23-4d9d-b1d2-05fe68419772",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb4782e-f3dc-4154-94e2-9bef4d9f3998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff08b521-4a52-41be-b758-e2a489252c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8762c94-8248-4903-bca5-1e9290fb8a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00771d4a-7e7d-4917-8e9c-2ba8ef047796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f0b5a8-2a72-4047-a7ab-1426a59fd968",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64a3066-9142-4746-b28c-a3241d08543d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6115b89c-677a-4b63-8524-12026ac857b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d8604d-5f85-4506-b8df-5b71f1806a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8760fb50-4894-4bf6-b0fe-0e6f4775274e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c51ce50-0806-49ae-9c0e-3f0d51c13658",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a9fa3a-b507-4c32-a591-65a4e8354949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b976512b-6f73-4288-aaac-e13a2cb1c5c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35168666-aad9-43cc-acdf-15812a4f7501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9f24032-e33e-4925-8df6-528e908cb20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7101e8-da33-46a7-b1a3-e26bcb05f526",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db9685d-7120-4e70-a934-81fa1e67a5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78913838-96ad-4aa7-8b2b-78ba7e0565a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a30203-4bad-41f1-a828-e3dbacee00c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bbf835e-ea7e-4171-829d-2558ec82c9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491ddce3-2098-4186-8574-e36d35a16eeb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35d1322-ad54-4fa6-88ab-6c5527d1ebc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4fcff16-6fa1-459a-8480-4c8abe8e01b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc98e55-851d-44ef-9764-26c73131e53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b790fb5-7c78-40f6-b568-146d57c85275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4ca9d3-ad09-451f-b96a-d49044f2e957",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb195c4e-6aac-4917-8087-a49898d03e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e963b9-5826-4552-98f8-be76b45c0f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c730d55-cdd2-45c0-8df2-74c5bdda624d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5b13ee7-4cfe-40f8-a789-8f3545cfaeea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3f7dfd-8fd6-4436-90ad-69efb46752aa",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b4aa55-a069-460e-8d77-58971afeebd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37a1fab-8ce3-4dcc-8e2f-caf0816c29b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79de147-2d16-4326-8ab2-17e9a4636d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0babf5d-e868-423b-9f3d-44e3c33a8555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f3fa7c-c1a9-4ae3-8284-b53e688ad34a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e53e3f9-7cb8-43bb-82dd-9d3b68a5897e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c977a0-da45-4be4-b97f-7ca035ae8bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d879b4d-a735-4ecf-85ec-482ae11268b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0e5c3cc-642b-45a4-ab4e-aad24e912363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ea1bc5-33ee-488a-8556-9b37c03cfc4d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c684e83-e2e1-4d90-8975-8e35baa2e7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c14e318-3599-4150-9222-3cdb6080e21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caffd3f2-d6ca-491b-8cf5-e4a719d65ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37f961f4-e4f2-47f5-8dbc-9847a8cf1534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82828305-4eb7-43e7-9310-ebdefa914d6e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "066e5290-f0e0-49cd-92c0-d6caf51f661e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9c9d82-417a-4266-ac2f-ca46d7edf5e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f94e405-feed-45d7-ac43-3787e951b0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "685bfa6e-ba17-45db-b234-0cce259f4266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0e60cb-e26d-4839-8e1a-b7dc5d686c2c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6daef44-4e56-43dc-9baf-37b50566c716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce1aadd-e76d-4f6d-9ca8-d22ead45f54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be5bf97-3ea0-4b9b-adb3-0e1503c02cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46637002-cab0-4f64-83eb-859ef02e9e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c696d295-bf91-45bb-9a35-9169a5054a00",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5a7da4-f536-402d-95b1-3b04ce8f8524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36fe0bd-4171-43d2-9c27-a4f58a9fff02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96565cd-600e-4e7a-b240-68c6d9986618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0885be8b-018b-4b37-9544-ac13554a82f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eeeaeb9-a7a0-4adf-89d8-4607f236a4da",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dffdaf2-5f6b-4a9b-9d6b-fa9765ddf416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1ff91b-0839-47de-9f88-b93f17b2ea9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96573e1-2274-441b-a8b1-55eb744e15d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b108c976-0f7e-4f02-99f1-720314472011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b692c9c-1e12-4202-8518-59d0ffbd8065",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08993b8b-1880-4eb2-b246-3d547fdc647b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a5b28b-7d12-490a-b683-3a2424f21f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf03bd7-8be6-4caf-925e-4f6b4c4dc683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "340922d0-a008-4f59-a9e4-4d88a0bccc65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed6cf4d-e59a-482e-ab7c-f24156e7aa66",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61912f65-c87d-4bf1-89ae-729a2da6e744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9304678a-1733-4448-841d-2eb780459c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f62acc-c491-4836-851d-83e70b5046a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccfb9047-b99e-476c-b7a4-f1acb15cfa90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca7a543-3f95-4872-b338-e1afbcf80042",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dcba6b-f7d9-440d-a4e8-750a7875da1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dccc772-b43e-4c07-913e-4d03bd2a454b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1b61ff-3cb8-42ea-adc2-e06f67aaf70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37ab6a04-12ec-4418-b002-30215fc98226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7806fc9-71fb-4b71-87fc-95ca89f5319b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b398932-9e91-417d-934b-149953d5db8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96f8fc3-3301-447b-8798-db53f8537431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c404e7-efce-40da-b53a-8c0a1ad911a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8f7076c-49b0-4373-839d-71c68f265528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9293dd5-0b08-447c-9476-cd9df1d7d005",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38eeb2cf-86fb-4554-a426-b5811f5dd3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c7bcc9c-3359-4668-98b4-75c6becc294a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9afc59d9-d392-4342-819c-82219ddec8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "546b35f3-4c68-402b-8a7f-ac748b1749c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6881b080-f428-497f-addf-fa8b72cf29ec",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739fc3c0-eda7-4816-8aab-ebae7d485705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66d7730-ce85-4183-8237-d6c42591208c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb56493-c4ec-4399-b04a-cb936124ba41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d770a4d-d0bd-46db-adec-98aeb91136f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4ef33b-5d6c-4a0e-9c0a-4205f58b1307",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6f4e17-8d81-4754-8016-4140891d7d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68b33a4-98db-4901-98d3-b49351566d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd71b2a-0c8f-4e28-920e-4bb59639c111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f26aeec7-e796-4c0e-930b-22b0a3f881e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c58809-547e-4e74-8b15-cb0e7924d067",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763ca305-5d04-4135-b846-6837d2c744e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f41159-8bc5-4775-9651-f1ad712067e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a974d8ae-75d1-46c9-a1ad-854d346301b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a46165-e792-4ad4-a9b8-ed6b411ef083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cda5594-0d72-4bcd-a985-3b8c352e82d9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe4b9db-257e-4e28-bb8e-42fe6e9ce12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516aa0cd-f9b8-420d-b12f-90b663dae97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d5c788-b78f-4a71-b48a-8faeb8798867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "343955c8-c87c-47a7-b5de-8d84cb3ff66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9a55f7-571e-4f77-8ea0-4f8281d29b3e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d34dcfe-326d-42d6-a200-74f154ff07d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb73f50-2773-43d7-9a0a-6d60c10de3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65401d7f-ba2f-452b-94d4-35d5937a24c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf60a38d-a4cb-4174-9a7d-a2d7b0b37406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9d7c0f-c30f-4863-9007-96660827ec2f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6423142-c497-4ca3-a358-bcbc82d6c9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c632abc1-207b-4d0c-905e-283e820ee78b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279a81fe-7f62-450a-a2f1-6c183c441a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35b4a061-282d-4e0b-a92f-d5195ef8e008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e126e9-f120-428e-be60-31eb40a405e3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab0a4e1-1b90-4acc-944e-3144de928c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5aa8664-c9b1-4842-b5ee-9c2c8ef7cb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b9f1e1-e588-4a7e-bc39-923411b5777a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "add6e3c6-d9c2-4486-a4d2-143c93034143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5753ef42-897a-4e29-8b58-f7114687d67c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d4f947-6e0f-4cf1-9fd9-ccf2fad4990b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421c2c74-3692-4075-9c3b-1b229fc3fe90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986a5f68-5550-4742-88ff-e53897fbd475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b13c72b2-2fa6-49ee-9fb9-9777fadb3283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca11058-fed0-47f5-bbb6-3a2660980531",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029f1343-ba6e-48ef-8077-a0c07f6c6844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11d9af1-cc41-4930-8753-b72c5888cbaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ad4543-e3a5-438b-bebf-a5370c7eb2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a15d86b-3e7e-4d4f-b5e0-100c7201bf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3793dcc7-fb84-4253-a6af-76304645b77b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95407470-2614-4461-a4ab-0d337574bbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06cc1878-cb2c-4bf2-8c35-43acb039f277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46f54f1-9ce8-4548-8738-fa50a088e70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb7de68-f9f3-46b1-84fc-db67b56a8421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e293f751-6cfd-48e2-b151-4113c568e99b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61feaf88-c77b-447c-9781-eafd01dd6afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1ef409-9b08-4793-a441-66b95cf422ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900329d8-21d4-454c-a478-0f993ee35ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ebc1ca5-fbb9-46c3-8787-e8d06d266c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfb28f4-5439-49ab-9c34-bcd1943285f3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f5ca13-9310-4c6d-9d54-984d250260c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d76c99c-b5c0-40db-87ec-e457ba223be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c6ae0c-3397-4c6f-8e8e-a5b467b96428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fde508-db4e-4782-8fc0-a36184191ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fd279f-e6df-4abc-8a16-2bea6fc7a30d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bca7d5-4ee7-41e0-9c02-aaff12ec6105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9530b707-a449-45eb-a85e-0853e9e70b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c36fb3-39b1-4e06-b6bb-02f2812405ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1136366a-158b-4a81-97fe-55d27d573091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95edf47a-87f3-4f22-90c0-ac76e8737727",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19ab3cc-bc14-4712-9edd-4a096fe91f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65573724-5b02-4c93-8d0c-f391257e595c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f0f4a5-29b4-4098-b494-0a5e45f2df2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "00506cef-bf36-48d6-aca7-3597c20b51d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac78103-9ae9-42f4-a875-919297f2d088",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa25112-35de-4b9e-a2d5-4694f4ef1bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720f732b-3d91-4862-9615-f43f7ab8846c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65e7fd1-2192-4637-93c8-cea3aaef6df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9da7a5b6-20d8-4a1f-b2a9-b3fb6a831fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f6f72e-7562-4ea1-a3df-8866500d6e83",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e40142-86b8-475a-a1d6-2576e46b3760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b32d064-b150-45e0-8c8b-1349ebe4723d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549602c3-33a2-4d27-b549-466505d3440a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3347c810-c923-44c0-99a2-a6f02cc96d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab553736-c3b9-400a-8835-dd309303be8a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a66318-a030-4b08-9780-8d9b2994ae7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a503571e-b742-497b-8821-95cc56baa387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b983a8-7779-4dfa-919c-55dc4bf3fc15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d2c506f-6000-4d81-ba50-834af1c3b406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec41ce06-3eb7-43db-8f1e-7b55b08c9778",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28dfd00f-5307-4983-aa5b-47a04ee43d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a7a790-f4d8-4542-ad09-584e40fbdcfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a11df8a-782b-4a88-8b6b-212e45fc99a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac11d664-ef79-47be-9865-dbf928a62b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce29d3c6-e109-4dce-ac04-17f5435e769a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7388ee66-5591-4aa6-80f9-2e57f885a172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff4faea-7bbc-4d94-b1ea-3cf2e9623bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9047e21a-07bf-44b4-9504-5e4240d3df48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1cab70db-f46d-42b0-95c7-70622645dad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36eb839-7723-4879-a6d3-452b8c962e65",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5daa864-6fbe-42a9-a24f-a31a549963be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca4eada8-255d-4a38-bb51-d1106f54684a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30062fab-5b15-443e-ba96-5293e16ce0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d0c37da-df6b-4d4e-b5e6-bc5b93db3e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63d1d71-68f3-40bc-a5d4-1f3eb2b3b89f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4a9861-a4a7-4531-a936-f03f26f7f447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca90ee3-df06-4d1a-854b-4d47acee118f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b27499f4-79e2-43b2-90b2-83fe0d12f8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b3cab5-031b-46c4-b72d-48ee9d8124c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d996f1a-05cc-467d-bd44-9229df7b7972",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ab00ae-8d37-4b2c-8f67-e69a88a59d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f306bf4d-5db3-4a0d-9bfe-71caa5be0730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d317b365-5494-409a-97ee-7a3e9057aa0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec394acf-631b-483c-92d5-e426dab067ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3e8361-03e2-4736-abad-86cda2472afa",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56ba987-9e1d-4127-95f8-34dced2bf530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac07d7fc-34d9-4bcf-9e40-15cb31945145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93e77e4-b1dd-46bc-8523-dffef3025300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6b26fa-cdf4-4508-a111-8395b2a91ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff431b3-2711-4a29-bbf5-757354986eee",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f362d0-cca6-4933-91c6-9294f52d0626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a58800-4760-4c22-b4e1-dea948c54922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8570dd48-a480-4b5f-aa3a-d9dd7ec277aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "252682fc-7646-4206-9d9b-1e311db83f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba588ed3-1b03-4138-a5c3-bf8050b9bc8b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0d1e36-20d3-4202-81d2-a2243d7d4211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4c255c-563b-4701-a9ea-910a1cd4e47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b912da6-0b9d-4a70-ae3d-301e23884485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "567ab330-2273-4c93-b01d-571814549db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7519d7-4273-40e1-9a6b-7ae3c2be8e42",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c51c38-7124-421c-91ed-4a2007081771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5a8c5c0-d5d3-4f68-a696-cbab756f3bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d59cc6-a504-49e1-9cb9-71cefb90f872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "19986605-9163-433a-82c9-d7bd9f78d94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6081110-d904-43d8-8bda-7caf6802e5c0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4b482b-58d1-43f3-aad3-14966fcaf06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a7e7fc3-35c0-4623-8a86-9787288dd1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0277586f-d234-492b-98ed-e2bee355dfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1654e615-7fff-44de-8bd4-499627b9e04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f8adb9-8181-4349-ba24-70aaa4313bb4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c423371-6d5d-46d3-8012-6084450b2d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d545e514-cc09-45cd-aa07-36cbccf40119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbd60a8-363d-4952-b150-c65a4189eed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcdfa751-984f-4620-810b-79c54e9c69aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2be25a5-3028-4abc-a67b-bebec8e1cd8d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70926a66-5c6a-4115-95bf-285c5da6875f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c902de01-c42c-46eb-a5cf-60b297eea464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed529ffb-1c18-4bc6-bccd-80c10363670b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2dfef80-d079-42ca-987c-7d2d216b5640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775f5fe6-b0e0-413f-a7d2-6f8c0cbb6ae5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3763dd5-9f77-45c4-a065-47546755e5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa6c943-0982-45b9-b64e-bbf2157d4764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e1c5d8-2c9e-432d-be22-3c5bd2d64096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "370105f0-b66c-484a-9888-d0f922e54d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87782bae-336f-4f53-b506-d5f64672d806",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b537e4-b8bd-4385-94eb-b0ae8aafde76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2953f1e-e23a-4429-b74b-4b7cbe357caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0410adf4-e3b3-4976-917c-b7950a23440f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64dbf6d7-1ff9-41f6-bf57-cfba0555c44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f64566-83ce-4f10-8677-f62a9a12792c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa52eb4-0556-42c7-9160-eac4a46dce43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c3bfba-3292-4cb2-8108-7c2a25e0fe6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88430ff9-00a4-4e47-9bb0-ba82d4556798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4bfd48b-c878-4d16-b772-41cb105e3cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452b003f-7959-490b-afdf-acbc28edae00",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daad545c-c414-4257-820d-e1929c54e5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f9c4f8-70e6-4c58-b109-868751e900a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39b8970-85c6-4ed2-b81c-28122e0b971a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e03f2f0-547e-4341-8723-c4354eb366c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca849b9-7012-41c1-80a9-42b07f7be1a6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67689ec1-ec9d-4084-a818-413a5e47a912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca7fb5a-d976-4bd4-90be-f9cc2c86c53e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c7d1d4-2557-426c-b623-876f5fcf7089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "076c66eb-be42-4585-abe5-8c722eea23ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5377e5fe-ff44-4388-8c63-aa3d7ef47c3c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc209b60-8f06-4e79-b511-d9f071c4aa8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5de8ed7-481c-4a96-bcad-117af2e97763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6efd39-ae00-4010-a8c2-3c59f2bc6e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2472601d-604d-480a-b91c-52e9ebaa5384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff7fa71-6d93-433a-b303-2aabee0074be",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6512e775-f0c9-476c-9e2c-7c78717621b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "835f867c-61d6-433d-8b82-5dbcbaf3075d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54b388d-8e93-4835-9da0-d2eb856f67bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "956221a1-ce9e-4f8a-ac3f-d61c6d823954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d000d33-eace-4b8f-b458-f15861111330",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87418d4-ca57-40c9-9748-6d5cbd81a597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f3432c-4a81-466e-a088-a1bc3d87334c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a187fd-1512-4c29-ac0b-43b2f346dae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30c4e5bb-f4b5-4db2-b3a0-8bc3dedda409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39f0d7c-12af-4463-aa98-9fefa20a11cf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf458a6-530c-4745-8810-1ff5e70ad0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdcbcb8-579a-4e24-ab49-b4284d179f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3345dbd4-2ed4-498c-b228-82657a1f203d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cff12d6e-4525-4b00-9224-d0d7f1104cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d97c2c-45c0-4f4d-b48c-b96a96c32d4b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef644910-52d2-4186-a5be-dcc0901b95c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6442e3a0-ddaf-4434-b85e-7ff468e36aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bca386a-c1b5-45c0-8272-eba1e2cba09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45a740b9-de19-4b7a-8540-33daf6a8d746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06480108-0e77-48b2-a88e-4396c1fde599",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2061df-ba17-47e9-8967-944f550d6530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e7d468-ba88-42d0-97a6-0b8a4ca2a22d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967c0eab-643f-4e91-9f75-c78a73d4ed73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "922234dd-9d11-4fc0-9c7f-e5f30006eb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42278ac4-b07a-4f01-9cca-f86bf46968f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1521d4e1-5d96-4036-931b-b18f3fcf881f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7c7297-2dd9-407e-a2ef-37afb5aa3206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56185d7-c3b3-4638-a146-096592a23933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5512f5a8-46ae-4b51-9c44-fdc181e91950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed0ca65-f554-428a-a033-8377c25b2003",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e963b8-972c-45ca-887b-ed2e903c7bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4e87d9-5080-4f11-a36b-0bcf1f7457fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309e073d-cf01-44d3-a586-52013704187d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5267bbfa-f092-47cf-8c30-eebc8153d63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076b2d62-91cb-43aa-907f-434e39a7c126",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a69480-b7b1-4dfc-b66a-f5b5cb39319c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605a2aa2-ce19-4774-8f24-1ab83fafeaef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338a4272-56e4-43e8-8695-bd6da1b887af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b8b9a2c-3ecc-4b10-8da5-ab67a4e7c991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c9e081-1ca9-4f0e-9d25-5a06d332f6a2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef16335-d197-4846-8768-04a0b0bc38dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cab73a-7364-405d-b0f2-317bfd3b1707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce58ef6a-811b-41bc-b963-d159a475d8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "50711864-32e9-4129-8dd3-6d5ae82c2bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e5e9ad-67f5-4cd9-948d-22b7c82fc22b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9520deb5-5bb1-478a-9719-c27000d523f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52eaf554-6c67-4cb4-a4de-b73e95e9932b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e7a522-cfd2-44c3-81c5-8dd9c407c7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f49fe93-7814-47d1-9a30-18be31bb56e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a053a56-5668-4ae6-b3b0-c4c215f13346",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb7770e-00df-491b-888e-b12dc19cd8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9adf92-8b7d-423a-8183-724418a7dd5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f67c4e-0c3c-4c50-8fb4-29dfccc59333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4536435-6f20-4901-a3b3-ab5543b35d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d691cf-07bc-404d-94cb-1f9a7e571b25",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb05658c-4da7-4131-8834-e6e35fa98a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163c6e82-aae2-4743-b329-826284d34286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64fd3a3-0f22-4928-8a81-0bbad550ac62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e7e46f-9d76-4e9a-9d6a-01871311056e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18519017-2f17-4b25-b313-a8c9eaaa46b1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69321911-62a2-4704-998e-4b546b7e491f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ea641a-01c8-4795-8c4f-e29e5dbe5c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5fd328-d51d-486a-b242-7d6768560439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86130970-7204-46ec-ac41-422e32f33e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deced3e1-e5b3-4b8c-b534-c3b30b17201d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c7725f-d975-4f20-b50b-bcb79c787bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ef6a84-3b74-4cf2-bf2e-3a41f9c47e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992d83e2-af5f-4315-9db5-f61ac9793657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a0a1f05-22d0-47dd-82ab-1d46d02c964b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7ac1ab-e1d2-4d33-abf0-1a8fca5ab8f1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb18a614-3a62-4770-8e42-07cd680d5633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7f01e4-1443-4881-a29d-f9f44e6d0a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99bc9e7-ef98-4354-aac2-6543cee2ed6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "944d264d-f559-4160-a5d5-878e467192fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a526fa-bd0d-45fd-9cef-adbae005abec",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd1e538-224b-436b-a012-f0a087f95db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045999b0-1766-4ae0-b22a-884f92859f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a92f03-2b49-47c7-bfa1-f18cef13c1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96054e8b-cd52-4b4b-8b9f-f48e7c6b292c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb2141c-e78d-462b-8557-090f07f66723",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe961fd-d37e-493e-acf9-56398e53b439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b405f0d-6397-4307-81f9-25546f493bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1616412e-ac8b-4986-bfff-8aee18421a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "934c4127-0195-4341-8fdb-e92782511590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fcf8536-9b0f-4501-86cb-4f8692f7916e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7879b4d0-c29b-4f8e-9580-e9a18ac7023b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb057fe7-4aa1-4071-a388-7876c2c3ed10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679a78af-b93f-4726-8dbc-1aaeb7c80a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa15f03a-859f-4553-8cad-812203a9079b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d62c2da-6cdf-4f7b-8618-7c0ae01dc3c4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a105c385-b43b-4075-b9c5-50ef4600033d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e232eb7-6cea-4848-bc97-4806aca60425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f133d963-5c92-4cee-bced-3a6a3e1c603b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad258f87-581d-479a-a75e-9bc8e9ec5f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601c4062-419e-4dc5-afdb-4c26fab58baa",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde9d5a9-9638-4852-b7c2-0e03dd2151be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0b86e8-581c-4e5c-983a-9a626b61ceb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7344710-a938-4afa-b2e6-c438fcbd8f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ac299f-8ab5-485c-9998-d5291149353f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b415361b-55cb-46f1-b3ee-af89a239d6b6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36bf8e2-fe56-402c-ad1a-6132f397e7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85889d56-7487-4544-b2c9-c42d652ac147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21380847-0a56-4e52-9a12-ed1dbb9a0dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23c3248f-c310-4043-b7d6-58400c7b946c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b9ac78-802d-4f03-be6f-65f1d2a4754d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca95c4d9-6e2a-4fd1-9a30-947fbe754b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e4c87c7-ad44-4734-80c4-1152d27d9f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84e6690-4e7c-468f-b0eb-dfcc6de7f21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc2ae036-e58b-4da2-be97-6c82f978ccf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf374ad-ea29-4762-aa92-885ea53eb4d0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9516dd44-0bef-4683-853c-b1442bb9ea00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94c051e-e330-49ec-8d97-cf51ac2cc192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa7634d-274e-422b-b41a-048c1d8f670f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e131abfe-4423-4400-931a-43c086fdf38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c36bc64-65e5-4b6b-a249-5d19c9ab89e7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd617ed-68c7-4903-ba7b-fc0ee1071fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4446e589-ce53-4e19-b50c-e574415eb7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4defe644-a604-4d30-b8a9-1b9745799408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b06c583-9eba-4a34-a1ef-283f4e4bc023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddad352-cc80-41bc-9aa3-974e47985bdb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e2d44c-8105-4a8d-9888-bc83da7e79f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c483e40a-ddef-4144-bc99-a2cbf03d7e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0f4492-2c4c-4817-b52c-2dcd6c0e410e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8aa826-ea30-436b-bdb1-c07c50f1baa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e69b08f-a5be-4774-9652-1834b41520bc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368f41e4-54f0-4fbd-8087-eb5e4d2b77a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c7f14a-f073-4282-bad7-ad6e446be392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6a7bb5-730f-4063-8830-495e230a046d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80babde2-b534-4aa3-b5d9-1fd14f47c98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c7a835-a0ae-461b-afa8-079c2e9d5424",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbc00fd-91fa-4dab-8d1b-044cb7b827df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f18a618-a2e6-406b-8571-b6f8f8acb3d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0611ad4-04f8-4c8c-9d8d-e0ad44a11a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b826434-d102-43be-bfb6-726627dc4c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b876dd2-d9d9-4417-a2ae-ae8c7a01cb80",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61335bfe-7402-4aaa-9065-aa382b691068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd98c5f-7a42-4928-9210-cfd729f34a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734e2248-45ba-4899-88e9-136d14faaf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4efd9371-0b94-4544-8694-95860bebcdb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fdc680-0a68-41ee-86f3-184a7ab185c4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3eca6a3-9977-4997-8f69-f879242ca858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7630f57-c47e-4796-b50f-cc4618e65077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06eb261-4e41-4fdf-9ecf-e907de49d6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0965d80b-513f-47af-badc-6a8ee4c2d7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195c2351-cf44-4826-872b-f306e7ffa755",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4aef5d-c6ee-425a-8240-e3c1c11d4d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc911f3c-9b61-4887-ac7e-21f5783effa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4864a486-9b53-4fe6-be5e-e2e15b25bebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "14cb18d1-18d2-49fa-a803-25b5703f328b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbdcee4-4103-4edc-9ffd-b500a7aae91d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea802bcb-9541-4fd0-9602-1233ce7384b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8973cce-3831-427e-9c05-7106648f7f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ad55a8-87f8-449e-ba11-ae15231840d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb89cdd-8041-4897-9e1f-d049b8561b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98e9763-de2e-4a2f-89a8-942ecb831183",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf304b4-0bba-499b-bcc5-90710cc9efdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8004195-2773-436e-a53b-d89c78f9c9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae20efc9-7ddb-47f5-9f67-a388a1ba816f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "deb57f50-1185-4d83-bdb8-dadf3634744f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c6c425-9e44-4b10-9c54-3805f12d7cbf",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea957a28-c3f2-41d5-8257-cb7de1e29d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d342735-94d8-489b-8753-3d83c217f850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194be005-637a-4eb6-9cec-6cab3434140a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e61ab7-d12a-4a8c-b15e-1f8f074c52fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1043f894-1da1-4524-b33d-3cb14c080006",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c411744-62f7-4ccf-a956-be3190b8d9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad30924-e948-45ee-b4ee-3dc8bc1bb2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2b54cd-7d3f-4708-b6da-3acc8f4d40f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd02d31c-ce5c-4974-b85c-822480490c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e31fd1-4c98-4206-b448-529dc1ad7ecf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1e4aef-8df9-424f-8daf-0655c20242ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedfcb5f-5c32-462c-ac61-6ef5c128fc48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6badb00e-a8e5-49e4-bb43-a6fe5034cf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9caccc3-f3ac-4cbb-818c-1ec5b6b25750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a470dd57-b55f-4940-8a09-39568b908996",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc25726-914c-417f-a28b-6ae1cb100632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a45529-e4df-4620-869c-9a54879407ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45c32ba-dd8e-494e-b698-80239930a60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "38975f09-b39b-4086-aae5-c6a2cb87c024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e611b33f-9ed1-4f19-81b7-42d8a90bc5dd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5890db8b-5381-4241-8636-f7616256e64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfdd5180-99d1-41ce-9cfa-ac8a539433fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c98351-76fc-4b45-a16c-97802589bd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "90a447e3-8f72-4125-985c-8dc32e574037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7c1613-6eea-4a51-adb2-5990f3ccfdf0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48ad6d3-e027-4dc4-b782-07efff648e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9835e1d6-ed7d-48e5-9a46-ab6a70a5e993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dab193f-dc39-4401-933e-2d77d29a2a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1d764e-6766-445a-9e03-8b643ab063a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aeee972-c4a6-4be1-9871-3893dbdfac65",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66223706-d55c-429f-8f5f-4b2e3f8ef0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4c23da-fb1e-4922-ab1c-305dcfebcf9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaadb1f-1b5a-493a-a4d2-a4d8a1f9ce90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f8d80e8-6794-45ff-9f7b-ab9be624fded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e705cc2f-1cff-42fe-b807-363ca1b0090e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b453854-e3f5-40fc-ab6a-e9c33eec1ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b620018b-d28a-479d-b8cc-b84e6cd8d581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9580a8a-8a9c-4567-9921-8b05bd708d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d99a706d-8bf0-4bbc-a0f1-9a8b96232198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94105a72-74d2-46c0-afd4-386d0f81a72a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea86c2bd-0a63-4893-a72a-a5ac004c4412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "29e0bacc-ffe8-4a88-af3b-4f7914847c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a59119-202f-41bb-be7a-cbedbb0fa96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "151a7e5c-30bd-406e-8ea5-0a1553d98c0e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2ed7dc8a-0e6c-49f3-9c41-c35ee53419b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca8c47c2-4c7b-4d0f-bd78-4a5417c1991d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05218ed3-ed24-4944-9072-4f3771e0f12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cbbb2d1-c92e-491d-ba1c-1188144749a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3ac29d-4c52-4b65-a8a9-577277e62205",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "75027dab-27f4-4d82-a6bd-283256049155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10ec2cf-b9bc-475d-b679-35d328d8ee75",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9f5aff-0652-467c-adff-fb1dc6b15256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5702096-7ab8-4675-9688-ee77ab4197f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63128926-7b39-40b4-b209-9273369667a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "75e47f8c-97f2-4cc1-b26b-d8037fbc3d6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84136224-3450-4a6c-89e8-93ce63ac8620",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e212ff0e-c224-4f75-8881-83b817618c3d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ab3aea6-d1d1-4635-addd-4bfd3a77e2bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c1686c0-0781-4c78-bfb6-f1b75be48585"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b24ecc6c-67da-4f3f-9244-32dc3eaed1be",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "773b4051-58b9-451e-bec0-320dee315991"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4ac97bb7-074c-4346-bf3a-ed07741185a7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "121c9228-e2a2-49d2-917a-48ffad1bda9c"
                }
              }
            ]
          },
          {
            "id": "b342b670-4597-4f63-838c-f9cdc57afc87",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bacdd59b-5536-49d5-9460-9cd0d0af6ca1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5a71ae9-e155-4ca7-bc0e-338b493888ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e524b05d-02c4-4dba-93d9-3ee7fdfed5e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bd43a35-53df-4516-96fc-2c38ee3542e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b397adc2-98e1-46c7-aa98-3e6dd49f97c5"
                    }
                  }
                ]
              },
              {
                "id": "c5c766f8-a1c8-4273-a1e5-227cd75a2bc0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10bac152-7f3a-4c89-a322-058824f63d9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ccb01821-cb7a-4e4f-b326-cfcb36dbd483"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73b9a47f-14cc-4f35-bc41-fbfaa8ea8d9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5eaba59d-41ad-4af5-b8bd-939b0efde04c"
                    }
                  }
                ]
              },
              {
                "id": "6fae848c-d0fa-453b-9542-54d10a3e1c74",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7ad5442-0f3d-48ea-a868-fff2863c6302",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7b6fcb83-a326-468e-9d36-ebd42eb08ef2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "192e1035-f751-4231-9e12-bce02287dc62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e616b82c-3706-4566-a33c-636da8796199"
                    }
                  }
                ]
              },
              {
                "id": "65d20c74-2da6-4fbc-aff1-184bfebbf8ec",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84ec0aa3-6398-4fa4-8cbf-63640010be40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6fb9dd0-90aa-4d55-89a3-3d42d9d62d01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a8fa830-710a-4054-a792-29c44233a3ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "96755d51-d6d1-4c86-89b6-97186563ce4d"
                    }
                  }
                ]
              },
              {
                "id": "6aede13a-ca40-411e-a104-8b32c076cec1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee668678-f2bc-49ba-9ed5-0c237d3d0f1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "825d3544-5b9e-4252-9a83-9a4391d452e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd2b2fde-d1dc-48cf-90da-aea88e6828d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "846eecbf-6585-4fd8-bebf-c8fba896c6db"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e799bb9f-b973-4422-bb7d-4152bf976810",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cbaeef73-ad9d-490b-b9ab-29d1044214e5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ecdf1994-1404-4434-96ae-c18b53ed931b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "317d3f6e-f8d4-42b2-9121-125715a7afe3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c19f114-9815-4115-832c-44f513385b56",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "24dd4975-1fce-4f19-a75d-248e98371712"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b17a5e11-e3af-4a4c-9050-2811cec9514a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56d048d4-56d9-499b-b5ae-204dd966a831"
            }
          }
        ]
      },
      {
        "id": "906bdd2b-8e76-48df-b3ab-6a3adac66406",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "01db30a5-990f-4d48-850f-9ac569f798a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b070a3b-e5b2-4f05-97d6-d5bd865fd954",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e7232cbc-b0da-4263-89a0-fbffcc42e696",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affd836a-b330-4467-9b31-6e2ff6daecc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4bb689-0288-404a-afae-ec0683bf85a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60bb767-cbe6-4d33-b301-9a6825c4987e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c111ee8-46cb-403f-87a4-f47f372a1052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f181a22-c3d4-414f-ae09-303215423bdf",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdbb196-d6ff-49bf-b615-5be18ebff491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2407dce5-cb9a-436b-b604-08518cf85c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77fdd04-2bbd-4275-8733-9f6c130da67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f15bd89-06de-4e7d-a0c4-d07ea7a3040f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef907d5-0bed-4817-bec8-9cb63017191e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06cfa50-a310-49a4-b297-05bd0a16e3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a001cf33-7369-413c-a603-acc650c8f29d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c771ea70-3276-4d27-81f0-c08c9952c9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "956ab0f6-347e-4d03-bb19-e60571f252e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cac048b-cb94-4150-94b1-067aa89b1c01",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f809cd-5963-46c0-ae3b-d3213e5c9e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1beadc-acbe-44d1-b98b-dada624dab1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e4ef75-5512-4111-94a0-0d40fa362aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c851a11c-fc82-4991-a419-891d552f9390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46cecdd0-22c1-41e8-9f0c-0f581a293c72",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3cf710-5bfa-43d5-86e4-da5c3869ca04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32123e13-df0e-4315-a53e-eb3f448d8aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e50f41-7f27-4ea2-9a2b-325654232ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ed9fd7-b2f7-4831-a153-b5ac5885057f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f41b77-2c17-456e-92dd-99f2f844bbfd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1d086b-0e22-4a8d-a318-d0ade46a251f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23df3e8-5bef-47b7-a3fe-2b1b3c78a507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c3f5ec-bc7a-4939-addd-9fff5286f2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "968affeb-7acd-41cc-bbe5-0d534e5f4dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f0a7c7-d966-4d74-8bdc-b9dccc467691",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3d26b0-3f02-4e6c-9dfd-aec5fba1d9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fed8b5-e691-4284-b3c3-97759e15c8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1a91b3-450e-4b27-a8a8-1bd8e9bbb2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "34546993-cdc0-4aa5-a843-a99a70313c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee21dbd-f515-4743-beca-ebbda2cd8192",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eccf9af-7d9b-4297-8a0c-23314def48f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f9cce2-6a24-42cb-a223-54476ae2125a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d6e336-804f-4c0e-956a-d8bc43cdac09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "caa81d04-3918-450b-a9e2-5fa491bf7fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca5a97e-0009-4a82-aba6-2efc7840467e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2ecd64-ec09-4550-a715-197414ece5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9281789-41fe-4c1e-8112-012f9132c501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39208004-b0bf-44e2-981e-dd76b46b96ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1dd15be-e780-402a-b97d-a4c63ccb5e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091b7f8a-d41b-49d6-b61e-1c2e76a228af",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e63b1f-0268-4a27-8f7a-083b29ea65dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc8bd1d-6823-4af7-b0cd-336951797429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d655a00d-14da-4f6f-bc10-e6efbeaaacdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd17797a-fa39-4d65-9e8d-019d4339f09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a8c100-b009-49b3-974f-61cc5c592c14",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3593529b-c04a-490a-ad50-02cb9be850d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854cbe7e-fed2-4802-9de2-a73c77bae174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82dd8c0-0da4-4881-b33c-b9e4df2896b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "05dbcbfd-b3b9-4987-bb9f-fc30a1b1afbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ea19c6-febf-4ff0-96d7-cc47e36cf54c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3552130a-44f3-45de-bb9e-a9d1f40ac5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df2ae9e-668e-4d01-b574-786fba30a693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97cf200-a7c3-4904-a2a5-35793642bc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "042146f6-e294-446b-88b7-a78d4c7da5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d86f2dc-e135-482a-b4bd-4642085495e0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689622bf-970a-4e83-b102-ca910136b06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3e5442-ec5e-437e-97aa-b35f4bbe5c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67164b4b-dad1-4642-9423-2a3690273fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b79ff83f-cc86-47cf-92d9-3a86bdbe3b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e5ff41-1631-4e0b-86c0-2694a9d11dd2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "586560c4-c1e0-44ca-9a5e-f107e8a18727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df5370c-7d6b-4a34-a28a-a5bd36947baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7fc0dde-7a53-41f9-be3f-7de761778203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d24aba9b-aa60-4077-959b-40389ebfe2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878b87de-5f37-4917-8b76-67c2b1c70bae",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3a5822-f6ed-4712-b228-58958af9354b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d2b3fc-479e-4fd9-bcb1-e1cc32e0f203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf31196e-9ba6-4c5a-ad31-cbb91a80a884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b307ecab-8561-44e3-872d-2a0df464621f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbe803f-8815-4cfd-b05d-12e551b69c38",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c08b8e-9961-415a-bf30-8afc106b0f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbd9819-8206-45b6-8e11-5d9078e7bec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3c81bf-21ff-4640-8da0-d793ee9f36ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "73bf3439-decd-47ea-b3bf-0b9e540034c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69486ef-9bb0-47dc-b53c-7f96df8040ba",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e552242a-5613-41f2-b014-cc6e7fe7cb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b01b45e4-408f-4c99-8483-2e2df58f977d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7569e195-4a36-41aa-9c35-9fc9582177f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0f1b6b-13b9-4067-b167-931e9d8b3896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e24f6d9-361c-416e-b8df-f35a1dbd50ea",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff34e05d-a2dd-44da-ae50-9c1bd0e022e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad58e0f8-b765-4de2-8c68-2c8c671b0ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6547c4c-73f5-4afa-9a5c-34c35af76533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac4f203-257d-4b81-b1a0-853b5b74dc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddca10e-29b5-45a7-b465-fc4edabd43e5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79a6e16-940a-4f0f-abfd-cfeea023dd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75af2bab-029c-43e6-89d8-8000e5d0a81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527d7994-99a5-456d-bb56-fdc84906d811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "643394bf-da29-4c25-bde7-bdccc0585ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa184a4c-21b4-4a73-a412-265b2358076d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211024d6-1f16-4cfb-90ac-65e3287c2214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86664427-21b8-4a41-9788-e062d107f718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765613e5-3ddd-48ea-b89f-1248062b6261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4c67b1-d753-4f3f-a8ed-ff85d0f2771c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d63a7f1-e879-4752-b439-467958ef9dae",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cec32e-3a9b-4782-9878-f9a927a68cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55cce9d-6dc0-4acd-b18a-aa8c6ee6277d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1db96d-9295-4004-99c5-766ef4d904e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12c7b5a4-d292-4022-8e36-e573ea71ff7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564df69a-8dac-4a24-919c-2e35f8d9d0c6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2801ac1-a4d5-43fb-b74c-db05e17d72f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b490c2-27c7-4505-9d55-4ce766b5d5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe3ea27-ef50-4169-9ea1-c8dd105fc973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bad5621-f0f3-4229-89cf-3452f52d7844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c7df90-2a1e-4cb1-ba9d-be2e2de4eda0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424fb1a5-16ae-47d2-82b4-97661ab84d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf3b616-c8de-4341-99c7-c7dd8ab0acd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7af0677-a026-4b52-85b8-4083f5e01272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98a949b7-dedf-4869-bc14-5b1c77222008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6d669f-f75d-4dbf-99ae-e08c96c04d3a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2ccaec-e4d0-42b6-9cf1-ff8ea86a2a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0239871d-e63b-4459-8474-a75a2fe5e3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b802c1-ad62-4fc2-a520-8e2e386cbee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "355a0720-f566-4089-83a8-94d80c921ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f31eeb-94c5-4219-a78b-85d434a9aabc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e0c2da-c61e-4be3-a806-b69a53b0384b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1ddb14-60a7-4689-a141-bcaa333f092c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403c4a62-f3bb-4a58-8afc-95dcf8134c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57dd9508-4ca8-4443-9771-69fa507838d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb325744-b238-4b0b-9bfe-f35334fcced9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06210d4d-6ee6-41d2-983a-776a6d8f190c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e09d39-b8dd-4672-a574-4e0165e435b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667c3d8a-8ef4-410d-ac46-95af7af6eaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16b471a4-4859-4838-9a48-13ca4a46d816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e79053a-a948-4649-bc34-0a79ead06eff",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60adec3d-6a74-4d85-84e6-ce98655464c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f099214-ce75-4a4c-9bdc-bf3529f06ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cfc403-caf3-47c6-a86b-dc74d71993ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24cf9b7a-8c3d-4b21-8c9a-25eead8e2a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2586326-be4f-4f59-8dbb-ebcea7c449f0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e154c27f-579b-4c82-b0cc-1aceb4815555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef44d01-a7a5-4bc6-9da6-98580eae8486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967cd6d8-566a-4ca5-af62-9d88e3f03970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29330721-b2e0-464d-a016-a23e888915ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9965e2-8472-4927-a1bc-b18cfb4d09ee",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e561b0f-617c-421a-8951-51aeccc06f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2599d703-561a-4046-a25e-67130ad4cd98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b6fa72-3881-4aef-b14d-01cc11775d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24fb8743-b21f-46b8-ba0d-ce438de56884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90fa08b-7e75-4fa5-9928-b192925abe50",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b11b678-5e3f-45d1-83b9-b3bc4cc1a13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e014a8c-858e-4d00-bf03-6ab3f7385c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134f9612-178d-4e40-a9d6-9efa8cfa49a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cdd30cf-5327-442c-8472-ebd7999a6fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f64eb70-43d4-4b3e-ac02-dd9ee5329946",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1e418e-fff6-449f-b16e-999a7e3a06be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f41217-ae00-465b-bed1-c215dc6f6f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413dbc1b-71de-4b27-8d12-774e508c97ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b1826c-e7c0-475f-86d0-25049646a440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52222058-b460-4640-bab3-759dbf33cec3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34369aa0-ace5-499a-a37c-9c6c4356e6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e229c9c-e6e9-4caf-a3d1-2fc625581ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f7e239-626e-44aa-ac16-667f8dfd228b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af76f0bb-0b1e-496b-8d78-78f38140aa4e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "875cb8ef-4c43-4691-939f-0991eafce68f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f91e380d-b027-4909-9449-b4bcde1f54b9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91a7a7e-4fb5-43d6-96d8-e8847607b967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e917a163-b519-4485-957b-f8d3afc65e8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1aaf62-8bd3-4e8d-9de0-9235d43b4cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31250dc8-e71a-4235-a7ed-16da5bcf9037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29fefb7-9ddb-46de-8b1f-c5dca0a288db",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74be9fc-a209-41a0-9b6c-49c930f4c0c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e0447651-c3e1-4808-bf7d-df999fa8f76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae33823-c947-44fe-9b1c-ff601ec1307c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "993b2aa5-0868-4db4-a7db-a4218a14bf84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e4ff3ba-240d-4584-b57b-d2aecacf3942",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6432e7b-125f-483a-8451-af6737e8a711"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97d02a62-fbed-486b-bb4d-b78a37c0abb4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8105a63-fb3a-48c9-ab9f-250947ced1d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "475d4881-7a1e-4e1f-b49c-6bd59544e30a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4d0e3bda-60ee-4a8d-a3e0-fa7c803c0dd0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0a368ae-4431-4b71-ab1f-d5bd11b11987",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ddc4e9a-08f5-4e37-ab1e-f530c7b81ab3"
            }
          }
        ]
      },
      {
        "id": "b08e73bb-357c-4013-8c39-0827a2bd0dee",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e7cdccc1-3b44-489d-90ed-fe9337a8acc5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4043dd18-e43d-47ad-bce8-1e1f9c4c8150",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dfb66cd7-8e50-49fa-a92d-7567b6e61e97",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122bc7a9-9d6f-415a-a7d2-da621263b616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0659dbc9-89a7-4eec-ba90-6ca34d911df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fec57e0-821b-4895-b803-c46bda0ef6db",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8acfc45-cf5b-4dcf-bed4-5dd9d2b93654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbe66ef-3aec-4bb5-98d4-174d4f4c1354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4516e5-0f2c-4e5a-bc6b-2867c14c3a7f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a16c2c-3cdf-42dc-964e-1038faae6458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9af3c1f-62c8-4f49-9477-89b76690b9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afdfc31-85e8-4da0-88f3-6299f56aed00",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef36856-f5ee-4302-8cb9-669c24736fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b66bb301-58c6-4725-ae9d-e4789c7bbef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf09fc8-39d9-4ba1-89c9-d475c1f56501",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64aad264-b3c4-4ed3-b85c-9e799c8e89f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38b0d38-7711-4f57-b732-3ed69b7ea316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988ee1c4-8d5b-4f75-ae26-0e77bb271bf6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f3f69a-bb53-4155-b5d6-44d12af88585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac50f6b3-5739-47d7-90c4-4af2fbd8a461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6327e5-699e-40bd-9e10-dbb41126fc34",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f7f16c-6654-411b-b355-96bfb73a8d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7565d72e-c4e7-40d6-b372-f64311148a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7beb9a45-7e3a-4f52-8832-a375f6c6a1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba2b852-7d21-4310-834e-ff0b33a28b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8d579c-3955-4b75-a571-dfd85c8d4acb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9e4960-d9c2-4b33-aa62-fa7eb3ef7c75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21a5fa3a-9fb3-42e8-bfde-2eee877a2c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da26c38-02e7-491b-b665-4660b4d604bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d76ff0e2-4279-4bbd-bb78-c2d45faade32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b04baf-1d8b-4079-9ed4-cec3baebb06d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65cd2be-59a7-41fc-af97-37cd761ee3f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ac79352-8a5e-409a-af32-98183b99afff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db083e11-c6e7-462b-9887-026245e46586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a27ddef-6ded-4069-ac19-8df7b582cce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa88afe-f7c1-4c2b-b225-629321e3cfbb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95788405-bc0c-4a7a-8aa9-a818f72fc536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e56d600-9248-486d-9c8b-caabbe4abf88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b32916a-5d23-4ff6-ac55-b5e7dd0dcaed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d33534-c433-43a5-a94d-cde28219786e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51b9ff1-7b8c-46cd-943b-f0f81b5b608b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3dbb0c-9e81-4abc-9dc6-db42bdc7a9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c0de09a-8e18-44f1-9d55-c2c499500415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdcf64a-351a-4b6c-8b91-e617380604d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ca5a94-180c-4492-96c6-a8a0cb655fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d870b7-75ee-40b6-aaa6-6cbab59903d9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f52413-3c0b-4f1f-b6ed-ca50236a5a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905c11b2-4a2c-40f1-8078-886adf873c84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc0d2ba-c12a-48ba-b34e-777d8240fe23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a2f245-d058-4cc1-a288-3da730e87847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0db03b3-2a28-4d4a-95c1-e8bf9524af34",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861e6cee-b7a7-444d-8566-18f48cf53cb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8717ab2-192e-463a-8b0d-53dcabf1cbe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "170df2b6-bae3-4c85-be34-dde1caf2fbfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f610a13-f31e-489d-8486-ec41a29b6b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564c34b1-90d6-44bc-b797-dddaa8dc9955",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125293fb-66c9-40ec-8ed8-333ace9e9d02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d923449c-d5f0-4e13-85c6-8f04084a950d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2251b2-658b-434f-b0e5-62b96975f1be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081650dc-641b-4f10-9833-2010fb55e4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9529e74-90bc-4552-a708-b77d1aa8e831",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b742e157-5022-4cc7-9e2f-6ac4e47ad70d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34ff6647-b1da-4891-b938-678d9b00206c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "131aceb0-159a-47b2-82ac-86e13ac7f5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fab162c-ecec-40ee-90f8-a1ad2755fe94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137837a8-3ac2-4513-9c80-e826ba4153dc",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a48a8e-d598-4d45-a1ee-451ea4e84979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3403900-3a13-4b80-a700-0e648b01fa63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a9cd86-ae1a-4f28-89f7-5186af670913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a97bdc0-f70d-4c5e-bd07-bd0d160e7bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdb51d5-0631-46de-a170-9c04ead02378",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9961f6-bed0-48fa-baba-4d212091f599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b6ba00-be19-42ea-ad8f-86e929686126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0cb02c-4299-4d86-bf3e-362d23fc9692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400b7776-c96a-4519-8c26-b678adcfc11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87edfe99-4a7d-4adb-a697-556a90af0eab",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b80ff78-83fc-486b-a752-ad1f8a0f6514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c17afec-8dc2-4d6f-ad9c-849e8f598556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1397037a-09cb-4f8e-ae48-657daae4a3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65270690-cb5b-43d1-aa38-e0c878de74b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b9d4b2-05de-4af7-986e-3a8df7bcfca9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265d1766-fd7e-49e9-b739-a9f6389c5cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1225d5ce-ade5-493f-86d5-a2b27aae1c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c110e6db-b675-45c7-a872-556d2169dbfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f97a99-6763-49e5-8900-4cbfe7756fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38c33e1-e429-4156-bf8c-8e197f019b2f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0f4ae8-9ba5-41b0-a0b1-e2eb4242dfd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f118bd6-0d6f-424c-b803-8f8e6398c2f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5248d88-6cd5-4d50-8a87-0474c6eb0194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368e0cc7-7e16-452e-91ea-35da486b317a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3069725-2b10-4e88-baf6-4c5cfdfc2e45",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bfecc2-964f-4abe-8681-0036e3e4d37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66dea6e9-251e-43d0-b62f-190e7cb41b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "626cbf3b-46ea-402e-9840-321da00ba6af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0201e029-8e37-4d17-a4ab-123ca0bd7a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352dac80-1dec-4bda-8128-9ea271049726",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec00f1b3-3e50-4241-a78e-2aaf3f16644c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc20e3a-17e6-4a2d-8035-f03417053281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8383047-a0fb-4fb4-802c-6723282e04eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97b34a8-4b61-4506-bfe2-dc49b78d872e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fb5879-0208-40d9-9d98-3e28a0d0d657",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0275dcaa-a9ae-4033-8b0a-ba713a93258e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb2a73d-5890-4975-ad4f-a7c95578590e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbc81c1-27c5-403a-8f48-7c9002e268e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b194d3d4-6fd1-40df-b48b-90a83a79d6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f176353b-7930-47c4-8c5c-b7588e3d7a40",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7934e97-1769-4e17-9d97-c229d3f99f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e4925f-bb05-4729-b5ae-48e89173eec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c59a14-a90e-4016-a2bb-03d5069c77bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38acdbf9-f127-4f37-963b-befe8b773499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f506714-b124-41c6-9169-d61bef361ae0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f757373-34f1-4c4e-8a74-a7f60b2da49b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c77b630-80c2-4745-88b9-9ce230446936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb10587-3161-4071-8258-40377bc86b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7c75d1-8fa2-4543-a38c-821e10d19050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f20d4c-c806-4653-a9dc-8427cc8b6976",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34053f0-c8ee-4007-9b02-6a0fc2377b6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e23602f4-c0b8-446f-b5e5-03b3e9816719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6771bb05-6337-4bbf-a483-e1ba1bf264b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af49d87d-49b9-430a-bd35-c533583bd86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08a8c15-b166-4d0d-8e0f-7b08b4e639f1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd6bee7-2417-4785-9b3e-d4e03eb5edf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a3d97d7-6399-4393-8755-cc85c63c7011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4615028-77f3-4145-9ebe-63cafe15aedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027ac89a-f9e4-4ec7-8664-fbde89efbd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cfb08b-8c3d-4d51-b17b-aff50655cdad",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67870684-4a7d-44e3-b4ae-d69fd1e5db1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8535f6f4-2045-4d58-9b7d-8fdd0a4b0320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ce79b6-c8dd-49dd-ba71-8ed1a7396cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e39df6-c776-4809-b4a0-02cd1a7a2099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af1da0f-c4f1-4887-b312-493803c9a572",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87a983c-3e76-4612-b2d7-143ac06ecd4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44297b6-7db9-485a-a005-4d4cf0822493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6085528b-c06d-4c1f-aed7-a72b1c2bc339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab504824-0705-4b71-a725-81c956127980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a8733f-b67f-4a74-b330-ed2097300122",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71b8d3d-2a4e-4b93-8966-e1cfb958debf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e53e46e9-51fa-48be-a49a-a43d246cd09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b25899-ca04-4710-b3d2-c2ce729221d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f2303b0-3800-4302-9e68-700948609ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb0d1de-1ea5-4f78-a851-38daf209678c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ab9b46-6c5d-4bd7-9ec7-ac0438acc785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "842e2a08-0427-46fd-9a94-257dcbbe3b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c603fa2a-dd3e-40b8-99da-4435d59b0978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4458405-044e-4d6d-bf59-60540b8874cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11002687-aa23-4a6e-9694-560d2e6c5c77",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e547d7cb-9139-4005-9348-06ff463fbc22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e45a320a-a1b4-4a54-992d-4d9f09730f8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dfe4d7-100e-4dc0-992e-f4f352775855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfeec299-1e4b-42fb-a368-c6f3d0fee6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046fe2df-8331-4381-9d03-9d90b54db1b9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b2bc89a-5d0f-4221-8fed-0fe226fc5461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adfdb8ed-a559-403d-87db-37ce0fc5bd7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b005b9-f301-4b8b-92ff-e5edd41fcb22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276c4ba5-3bf4-41c4-b106-83b41e6c3206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754ba958-ccfb-471b-a0bd-50aab00cf1e6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66922ca-cc5f-467f-aa06-f3de01c59d3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "732dff97-7786-4daa-98ac-c07d9894386b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "094fe680-18c7-4e3f-b4a5-579b602a5335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4969fa40-e1e7-4b48-b874-d57cc2eca902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7964684-8368-4db0-83d9-84f4a204517e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13f15ba-0db1-4994-8992-c543ac6d57b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cf59249-5ba2-486f-b3ac-8187b07a1a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d608cb9a-170f-4ceb-89e0-3cfcd844312f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986b270a-02ed-4808-8716-0400dafa7bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e06e99b-002c-47cf-aa82-656f70e186a5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a42dfa-d9b7-4fe5-9f29-2f4d09582384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a07399b-8edb-4177-a4ca-99df3ad81bf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270992bf-b5ef-4197-ab94-f51f29eaa504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9677a9fd-cf0b-4502-bb11-7b3e9aa68dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf93bca-9273-45a6-95f4-efcd82cb8fad",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb2b775-5917-4434-baef-a60de16732a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b043c5bc-e91c-427a-aed7-ca8f79305a0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e182c3f6-eebb-4fac-bc0d-8be07535470c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c116d092-fee8-4838-98e4-a4d48168bb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a12519-5ed3-4498-850f-dbf84456a449",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70cfb08d-80ef-4fc9-be11-f4f2448fc5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cde01f3-0f08-4574-a546-0b45936eb0a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c29f014-122d-419a-973e-6875bf05748e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e6c7a83-31d7-4500-844e-7e11b45fa8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f9d8d7-c9b3-4aff-bede-830290d4ef89",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bec7b4-1e5b-4f97-beb8-0cc9df093a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23c4a81-ef52-4a05-a8ff-d735348670dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38499626-45db-4267-a643-57cdaee5dccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1d4a0d-a481-4a32-87a6-24be4b0dddcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05be7f2c-0998-419b-843b-700c44741c25",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7829dc-2d1c-4044-a6db-b24eb0099a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db0bcf3-f619-460e-9a27-c1f3a7856f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63dd9a7-430d-4b0f-86ce-4f9b990756e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0474f66d-d778-4504-bca0-3dda84cd64d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6620e4-84d2-4cc0-8149-d15dec597241",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d41367-6a0a-4ec0-86b7-35104f53dbcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d87f21-05f7-4f33-ad12-0fbaab842cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88212c1c-9454-42d8-8633-882d6e4171db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b8800ef-e9a7-4490-a190-567195107655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e545fb2b-820b-4072-a8e0-b1f709f47138",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbed19e-a508-4403-8045-9a1299344164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c445e28a-413c-4a3c-bc85-446eedd5a8cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0facd372-9bf1-4d27-a4f9-b502e31e008a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e128a87-a902-4b4b-962a-14a2f944dee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2e5dd3-5b64-406e-934f-1a95f9aa94dd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5305f11c-75d9-4b0a-b1dc-e250817a40bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df2e4be-7f2c-421f-a60d-50050bda00cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e34770e-2df1-45ee-aae8-f20b453f51b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f72358a-fbc8-43e2-8ed4-f060813a8d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9302c05-4a25-4073-8144-eadc1c3d741e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39e2577-31df-4b10-b157-846a17cb54c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c9038d-310b-41e1-af74-03791843cb82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d353301d-59e3-49b5-b87a-84e4442189a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b472ec-2d51-42e3-a127-27e7ac715615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d091ba-f426-4c8b-9e9f-af65e903d6cb",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0267498a-c91b-4b81-bd38-492a19ee689b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae12cf71-64da-45d7-9de4-7e5d1e238753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5d9d6e-d2a5-44bc-b742-efe1001513e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e446cd-702d-46a2-8324-2fbf8e5a39f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4424dd4b-d008-4b32-8bc9-8ec559dd80fd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab13a53c-bcbf-40f7-ac0d-2f11fde14493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87be6ebb-5cf7-4f23-bc3e-c57e0285fc7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5238a413-2789-4db5-83b5-ccc935506e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44af36f-b49e-451a-8751-42573eb9c38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d4a778-4721-475b-b6d1-884c4d48b3fd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e8d903-5b93-45e9-a846-e118e4938da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b72fe55-e2f6-4f9b-b2a2-7e5035cc0877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c72bdb-7ad4-4b3f-8be2-fcc8994d3cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fdf34a9-1432-4470-9748-df3bc7f8fc57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2832e370-115c-472e-92b3-604662cc8b25",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4021a5e0-dce4-48d1-b806-bcbda3713b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9af213-9699-498f-bbc5-b12183636938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b3db43-6b3e-4a07-8fe0-2a67962c4707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba90b726-33c0-45b6-aa48-fb97f2be117a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda1ee54-0cfd-4f21-9b77-683e356fb547",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10207f65-bacc-4f50-98b5-1d5ba870cc7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1854052f-5916-4d4c-980f-a8d25eb8eed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "105955ae-87d9-438e-8494-008b963bc7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c434dd40-b8d9-43ca-acfb-59dc9951dd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6584abf9-426c-4d55-9103-75c17d65c868",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1087bfe8-ef4d-47a1-9808-3b8eb5073e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8fddf29-eedf-464d-a441-692473e4142d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31e3fd0-50c2-4545-9849-dd4cffaba4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc68ab38-cf05-43fd-a29a-8e9856fd0587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce8137b-cf79-4b10-ac30-6e030f3c7d4c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9eccefc-a0ac-4bce-98ee-23dd842cd728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdeebb41-52d0-4f69-9af2-e875553d4757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a098c4-69b1-4c2d-a0b8-5517197352a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c432b23b-1186-4e64-b66e-42e0393efeae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c948f2c4-e4bc-476d-bcd4-28e0055b76c9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464a9dc0-b6dd-4dc7-a8db-e4b1cee0ad0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d55328-be05-48b1-a9f4-73d410e75d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90b82ec-8941-48bb-a4e5-ca629e815f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07fee28-2961-4cea-b554-6a395e377833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0cdfd7-422b-496b-bde5-c123cb0dee53",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90ed345-0454-4a05-a3b3-78c4b2997171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9d2b0c-d361-4284-9cc2-7e3918ebb5b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7beb9f77-c3f3-43aa-95c8-bbd83938b647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa9ccaf-521a-4103-8785-4945cd10f9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42db35c7-103e-47c8-ad6c-7b3ffeb896ff",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b017e2-5f0d-4345-ab6b-ab84dedd5619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b428257c-47ab-450b-ac1c-946f7c9b4939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "903bf956-2ae9-4c8a-a9cb-9759efbd9bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c9bd16-c113-4cca-9412-bc1f65b70496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ace94f6-e7eb-4e67-a466-82cea3123dd4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8252127-3c82-4da1-91ed-9c024b39a576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933d1118-0025-4d10-8132-0351020ace92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce71734-fc92-4fe7-92ab-384147dabfee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbac155-80df-4158-a224-b9b2756c9b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430232bc-5da0-44de-8170-5e225ae1092c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76444f27-62c5-442a-ad39-562b8a04b750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28bee68a-8a0d-4600-9726-a21a6ce0295b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb38046-cdef-4072-a769-1ba66956b1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d54d1f6-bad0-4b20-8b64-539813ef3230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7bdbb7-a1e7-4747-8dc5-ca6ca31a920f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d14f84-156b-49df-a1a3-64cf66a69b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0240b7c2-0723-42e5-b182-e05b201cf21c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74be415b-e58a-48b1-bfeb-9a0f998a97ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3c60cc-db08-402f-9244-864022cc0e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea8faea-edb1-4db5-9764-d8918db1aea5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e447e99-af42-4b04-862c-3772232712c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ff7145-1472-422d-b05b-caca99546187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1b1199-a449-4afa-95a4-fef5e5e7092e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb94e82-742f-40f4-9409-5985d91077ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ce15a0-b77e-4166-a510-c887e894e411",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830540d8-ea40-40c7-9901-b458fba975fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553ce986-b845-4b25-b4b8-f93dc321f859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db867ac-19a3-40a3-ab88-40c5e463ff9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e5a1090-576e-487a-80f1-864ad4378847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872d8b0a-2a37-4fcd-bbd6-d22603a25b73",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee8e41a-30d8-4dc6-9565-d7225c579ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0694ea1f-6a6f-44c6-957a-106f9b131c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5940a70e-934a-4891-b23e-be90032caceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267b43d1-95b3-4012-a935-ae5c7bc3453d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8048344a-3123-49a4-a0a5-8f218c50dd78",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf349e4-17fb-4d0c-996a-d444d7c992dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb333237-21b6-48d5-87a7-3ce2a6b09d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b717d74a-1b83-4067-89e4-615f11525eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99cb01a-f37d-4881-8895-061f191c911a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69eac770-4eb5-4cb2-9149-a7f7fb7010e7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903cf83b-8c1c-4548-aed1-e4c68fd1ced5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54d3e43-9752-4017-9654-c622242e1864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1382347-6af4-4153-83a5-1d67949a0fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9452b08-6f3b-4214-9962-dc8a78e653f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e48edee-b283-4efa-a0a1-c505541c80f3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf229b51-5f1d-4e55-9d04-7a8e948b62cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c4d88e-f0a1-428e-82f1-bff70647880a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d419c5-f6aa-4917-908d-f363a521400a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceac8b73-78fe-40e5-8ff1-70cc0be62fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcd4399-63f5-4d8a-92cf-f998d409d8b7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3962128-8a7a-4bbf-b145-4df40dd8112d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf8f43ee-1de3-438d-975b-28398859d952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21dc7d8-8150-413b-ada8-4b6667f5f135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a69fd93-548b-48a4-95a0-0cf399c8550b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46df1e3d-7005-49b1-b2ae-5f3458434ae4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181bd901-e334-4575-9021-847e5c2d2bd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e44ecd1-08b1-49b8-ab98-8542a696c420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e3375a-720f-47a1-b0ac-bc759f4419c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbab24e-abcf-4aa4-9496-f5698ac5d70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c8865b-7f16-4747-980c-28bcb44643ed",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54f2ec1-bc60-4561-9dbb-05ddf76e088d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "292e0266-2c7b-4f8e-a6e9-42db740ffe30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c808a4-0300-40f1-9f71-99a3cdd2461d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e70115c-26f9-490a-a445-ee1b7c1bb070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29beec96-d89a-4c08-a83e-7b903329a1e8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c19c29-a661-4b4e-98f9-a84e97d2d2c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03e07d2f-2df6-4b79-a00e-3012dea5d553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bebd9ad-6262-45b0-8349-c60b800e4ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df75c3a-5c72-4c1f-b1e8-90bd5b9a122f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a617f8b3-bd2d-417d-a918-4f217cbb5500",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51881e86-c2f7-46f0-a989-88bcac700cef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83053d78-c70a-42f9-a602-353af48e7e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb73012-f22f-4799-80bb-6720de6e7c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb601ae5-4147-4e75-ad6f-30aaf590eae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424ee4e9-3cfc-4ec4-ba83-3ce130c72332",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f324caa8-8129-40df-8d4a-5cf61844e770",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40a888af-4b45-45d4-a723-7c7c3c1d3bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8713c0-f9df-410e-be13-a74b0cb3c02a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de93eaf-3a5b-4161-b8c2-32ae32293fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f6821a-30a0-43a0-a54e-3f6b50a37f11",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2792f80-6b29-4134-98b4-9309ac11ae0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78843d67-97e6-4816-86ad-b0ec54557de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702e16f5-c274-41d1-a78b-16e2be5984fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44630eee-561b-4e48-b314-42c995429770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7af3d0-3905-433c-ad74-c93ea41d20f4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b89f72c-1027-4fc3-ba57-cd28a61c1e9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d316811-9e4e-4359-b136-878e039c43d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab457e9-2de3-4d88-bda3-62c795dd4d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b4ae43-19c3-43d5-8208-1ea5922675c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4aa95c-8148-4501-8c4b-74bfc881b8fc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94c2fae-da4c-4e68-a15e-71e3f6c299b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a67c614d-b5a1-4603-a1a3-315e9069f221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2888b88-69c5-4570-8885-5dc8b84d590c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df218dba-39b5-436e-a6d9-cbfa65148f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4458510c-f6f3-4ace-a538-23bf17e15bb0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0715fb09-0cfb-424e-8bab-4368d8977583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67dee99b-44c0-4ed5-ab19-346d61b3cc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b645a137-5ccd-48cb-b281-8afe6283ca98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a828dd05-1f1d-4858-bfdc-0e73bb5119b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed17d8a-8696-4a3e-a5cb-5349312c4f19",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada1c1fd-b690-4b20-9fec-3afb7b1e16ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "205d56e1-489f-49a8-bec6-b7d54e24ae71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a17923-26fa-4a97-8237-cf2289ae9891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c7f312-37cc-4812-b0f6-a4ee69f2aeb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d13c5e-55f7-438b-8dd1-6f9dd5cc05c4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79ab6b6-5d65-4104-885d-73bb3609c354",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27279e60-f4b2-4141-8115-af42183542d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d32438a-1adf-4fa6-af32-b2decb028756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d7180f-14c1-41db-9a4f-49b95bcc961c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25def997-b145-4d8c-ba27-ec8d440b38cc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c99a5e1-82b0-4e74-b7a4-bbf2f93ad24f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be2be7c4-dcb0-477f-a294-02653190752f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c38566e-d86d-4dc2-aeac-ebc00ea7768d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00fba51-fe7c-4e29-9e40-e32d275afc07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7cae58-b9ab-4749-9013-c5e82cbdf784",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0137a0fd-010a-43b5-a46b-573f72e80377",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61c221b7-35a1-42fd-84ae-77036d48abda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e496ac-8324-475e-910e-2c290f0f5333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52395063-d9e2-46bd-8c00-4a18ca710173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79312cb6-3f39-4770-aed9-71c0ca1ffaca",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341ae264-cc6f-46a4-af15-004050a0d570",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ceb65b3-5298-4250-93b1-3c1f0706fb3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "833901b1-231a-467d-b9c4-a5eec7270021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6efc07-22e4-4b5b-8a58-5ddef58ebbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81c91b1-0288-4f4f-ac33-5f3507ae703b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40b2ea8-ba39-4ad5-a599-4464ab292f08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b4be6de-aaad-42a3-b149-add0f2842b6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9368749d-9047-46f2-a647-dedac3a0c0b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c83e899-3381-4a8c-96c2-8e81b6e3cbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe567b5-4db6-4c35-8434-e5c8813affb3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c1be00-d1b7-458b-8579-05274e1f1a86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd34c536-acfe-4573-b4a1-9dacb82af7c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659a6be2-fc5c-4b20-b11f-5797be59f7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87580ede-53e8-45a0-985f-8bc7ba0db1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec176aac-c1c1-44f4-8fc5-7a404c2d769b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd4af17-c5fe-4117-a1ed-6762348fc724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bc01109-a9f1-4d5e-a2db-5a30983e5eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a471f35-e1ee-488a-a343-58ef4fde0df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d69376-a7b4-4924-a311-32ab29f1314d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3438377-b751-4b74-a094-ff35e95b3f7a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae9b63b-9aa2-4589-8777-ae4e80d749e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "271df05d-f9f0-4c72-8608-a81a23a3ec8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0584f6-7a1d-46f8-9aee-41d15548090c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b0bac3-c6b9-4f88-a71e-26cb135171eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7858344b-1f6d-4385-ab27-993356b5becc",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386ead26-f1a8-4522-bf7a-d7d32dfeab9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99472812-56bb-43c1-8f06-a11296427d05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68dc9e54-1d8b-4853-9a45-30d7972c5bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfcad9d3-06f3-48ad-b140-1b97eb47ca0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca59ab5-4a32-4b18-a16f-5289edfa57da",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63616ec8-8240-478e-8403-22733bef162a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "373ec54a-140b-4a79-9264-ce7d1b4192da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4636876-a031-47b1-a4c7-be5e4bceeac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484c94cb-37fd-4551-a46a-80561b29534a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ec08e0-4ff2-4852-b339-62153f8b442c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f05439c-cdf6-4319-bf08-a5b6bd82b17b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc5b75fa-44e6-4fe0-b2c6-38c92f61981e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a102d89-21e0-483b-a641-6b76da5f5d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa19c6ce-5bb5-4137-9805-f536faa461e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07235fc-ba07-447e-afd5-e67b53815495",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d4aac3-83ba-4ec6-86e5-686dc1aa842e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73dfdcb2-9cba-4cfe-9b95-2b051f96f937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "212ae8a1-cc10-4859-be2d-9195d4d63fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8579b3d-0ae3-4042-b7b3-699288fc8778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06c9131-fa46-4714-9cec-c40a62a1fcc2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f302afcb-4eb5-4874-ab3d-9a4faa697255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eb6eef7-3fed-48b0-97b3-1cc67d733426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cca923d-ec94-4b7e-9460-251934c3a3f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9f4765-e28b-4712-9168-f45b5a3d6248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f47472-78a5-4bc7-9881-d0a96430192c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367ca996-465a-48ab-8db2-88cddb4f587c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fb89083-8feb-4532-aa6a-c04f9113a845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20da4c7-62be-4c90-ab31-1d8d5a54f5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffe4e8d-be04-4093-839a-6fd6e79bd4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547afcc7-b8dc-4b4b-b945-2667d8ceb2d9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe09647-13bb-4d59-ac24-4ad14d73daf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a308a728-f4e5-481b-b36e-7af985b381ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c081d2a3-151e-43ee-9c34-cb027085d028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b105cd15-fe65-44f4-9724-4d1f28cc959a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab732446-46b9-48ef-a062-98cbaa0fb761",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2748fbc-90d3-4dbf-bf02-8be55cb63588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dda26f98-144e-4d9c-a082-7a1c7201bcd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10539e8-348a-43d0-8d89-18ad13b2ef75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1676b329-d084-4817-96f4-6dbc04a68c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c5e25d-9cd8-4eab-a893-da27143ab38b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c14d92-3ea2-4bd9-a973-9c4c9b4ab4a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe0ec1f-1ee2-4d78-95e0-1b75b9363f0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49fb5ec-6c48-43e0-909a-c2f820586f54",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486ccae8-6415-4c66-a750-694df8342718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3783d9-1107-4711-86b8-9fb86124da39",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2157668-75bd-48d8-8bc6-c9c391e8b014",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa1ecb3d-780c-40eb-a1d1-30659cb81dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1667a5-57ac-4cdf-8b6a-5088f0d11ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecb39cc-f411-4a2a-a2c5-8bed093d2ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80188b2-caf6-4fd9-b376-e4a4cc6956b9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980cebd6-bca5-4753-b9d4-5052f91296f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8583519a-4dfe-49ac-9ea9-ad41bc8eb19c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "375a479c-ae2c-4ea5-a990-8b1e5856a703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3162e7d-6806-440b-8693-69cafe166728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5ec3e5-66f6-4bb5-8321-52de85475afb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c543d8f-3dcc-4584-92c2-8998aff49944",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f99fd81a-56ba-4f08-88c4-3f022a7d21ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81ad36c-d2cc-44ea-808b-f14c974e138b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02209b48-0458-47f2-95ed-7d2305db563f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca5efe4-ecba-474b-a871-53152cf3bed7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0834bd14-ba5c-4653-8cd7-6742203d0d8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ede24ac0-7338-4121-8862-c94eef3eb888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d851d85-30e3-4e6b-a0ec-d81dd9e7da75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4b00a1-16d2-45bf-852f-d4f60a696dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf193e73-f9ef-4cd2-821d-8272b7508044",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdd876c-8a8d-4e26-915a-dc52cafb884f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d54ff09-d82b-409e-99ae-62be2169ecae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2728fd3a-149b-46b6-b15b-5f60b653547a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300121b2-a505-47df-8a04-44bde024b577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea4520e-5219-4090-a51b-bdc409cbf076",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849a1635-fc43-429d-8783-a78ac56d33ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20dcc1ef-41fa-494d-a3de-0c5fa26106a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644a7eee-e043-4955-b0cc-4fd5a6a07760",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364556e4-3510-4a9e-b835-b6e96c224e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc3fc22-c061-4a0f-9618-312ac031c535",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9f6e0e-fe99-4e7e-82a6-f9c9815e56a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f6b35c4-fcbb-4c32-a0c4-1ba6cf31220b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27889e33-8dcb-4913-ae79-6d5e74f1d9cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b9ee58-72c7-4e18-9f25-b3f29c45888d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "655340a0-5627-4e05-9c68-2e4613f35913",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f17dabd-c3ac-4921-8e11-33942cd165a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a36c48d4-7af2-4489-96e0-ae74ae860028",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13cb439b-0605-48fe-81bc-759f3355b3b4"
                    }
                  }
                ]
              },
              {
                "id": "994015aa-0a0c-44e9-9456-4475d19b5b6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ff8e629-6d53-47b0-ac91-28533cd83e6e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b3423c-0f7c-492f-aa72-4645be5bb2c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "293d69f8-0448-4af6-907c-0fa0d83c3c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0e1696-bcda-42eb-bb8f-a906b88fd91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bed598b-4259-4dc7-ad59-8710e86c9fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22389bc-e9b4-4311-bdf3-76cdf5a99dee",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b348a6-c814-4533-bb72-fa0271509bda",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "224b4abc-d51c-4b94-9ae5-1935e0753703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56277996-538b-4d66-b383-0057c7455c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91e4946e-e198-46cf-b191-00c94a874181"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a532f8eb-bde8-476a-8a88-b292e7d00a30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2179cd3-e2ef-40c7-8fa4-004dd004c83f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "496b9bab-575e-47a7-bd0f-0007bc6b1a8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8063d410-2a6a-43e5-b830-ac0d6c25a43a"
                    }
                  }
                ]
              },
              {
                "id": "22bd5d2c-2e29-4928-9354-464fd6cddb25",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "53a4850c-4bb9-4cc6-a317-f676bccc30c8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39b29ff-7be0-4706-9899-cd7505bd7e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "929a6629-2719-46dd-9fda-5f42abfad765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64eceb33-1584-4267-8826-f66dca42ee9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927d949f-2f83-4933-addb-17011d39125e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "823ff794-b23f-4015-82ec-0eedbab2f680",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a1c5414-599b-4811-9877-d2799959c405",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbb928a2-dea9-4c00-952f-9842a1a4e36a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "77f48258-a188-4334-8915-0ca174af6211"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "486538a3-f7b1-4237-9b06-69dedf52b7ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0271343e-a368-431d-8c0a-a2fd62c863b5"
                    }
                  }
                ]
              },
              {
                "id": "cdebbee4-7f13-4119-998a-e26acf0bebbb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97e63427-58af-4212-a65f-cb1d48dfe22a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c1f063f3-179f-43ab-b225-ce7a6b263585"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f867c73-138e-44ec-9255-733ba865b0a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78c323be-c3a5-4c73-af2e-cba5eb4da220"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d47f86c2-b296-4816-9199-f3be8cf60278",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fc7258c2-b2ed-4b30-a2a4-a762560df668"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "819c1de6-b55e-4110-b41b-11b58c71dc1b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0437255-bb88-42cc-9e39-cb24f40fdf00"
            }
          }
        ]
      },
      {
        "id": "6c2d80bd-1505-40bd-9401-45a7c22faee2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "534b14ec-f3fb-45e0-bc5a-1aeec910d855",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67b19066-6b08-48d6-9c9e-01befa70ce80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee0a75ff-ae87-46c7-b222-73a7b911bf79",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e9c834-52aa-4d06-b988-0d93ca80aae4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4dd0a822-8151-40c7-a668-e37fe03c3eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b92a028-62fe-4184-ae05-83336e13d032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7261a45-ce73-4b89-8b1f-4ae946208c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66390916-009b-4ef0-a03a-4438b0fc60fb",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69088f87-cebf-40a5-bff6-38c5d2a21ef9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aae91f69-40d0-4e50-afb4-e4b658eb4780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a75ecab-37fe-4352-9ca5-bf17b9389faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe14225b-fb22-4af2-a8ff-27a2b9264fff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0d80ea2-8364-4930-9156-9262cd5d3047",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6f6003c-16ef-49e3-82c7-a78245e05246"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e56d745-d68c-4ce9-9965-1a69ddcd9860",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c51bc0e6-796b-4ada-98b9-a5fea6ac753f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc88d25e-92c3-4183-9072-bddae227c172",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d0999cb5-862d-4275-81cc-042352515f9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac45ee5b-3ed1-406e-a779-74364c4abeaa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "638ea098-d9f7-467e-88fe-68e2f6ebbd84"
            }
          }
        ]
      },
      {
        "id": "40719ab5-c0b3-425f-876e-7d2d68fd8111",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d60993a2-8ef0-4156-85cd-d9e4098dcd86",
            "name": "Negative Testing",
            "item": [
              {
                "id": "515b9557-fd84-470e-8b7b-f1ebc565ec80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95df5bdf-e01a-48af-b3c5-85c98935124b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6b3e99-e327-48ad-afc3-f4683f68829e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3d7531fc-8288-46b0-89f7-b34ec37fb395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f6393b-22e4-44a4-b86d-ed2cdd911073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb1e5017-0d7b-48bc-8cee-7d4856942cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce830545-471a-47f7-ad56-55f805e9d408",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b84aaf-e20a-43d4-8cd7-03d5144472bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6cd04491-0dea-4c6a-846c-b611d47440b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6fb23a-814f-4842-ad4b-5b23f8abd433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7df1203-b135-45bc-b3c7-ef3db579a3d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9948979-adb1-415d-a543-8c412ae18736",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b09a4d8a-cce8-4774-b64d-2f6cf535403a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cab12a22-9561-417a-a4fa-184c3b990c0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7da2753c-e9d3-48ad-981d-4bca1f832b26"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75423bfd-a297-463f-996c-203ecab468fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f3920f99-ecc4-4195-8210-902f5a91f994"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "578c0e14-369d-40a2-ae74-ea00e2664f69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4895a5c6-0223-4169-bfaa-2839ace985c4"
            }
          }
        ]
      },
      {
        "id": "b559f6bf-48a2-4b02-b41f-87f7986acd8c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "441161f5-28d7-40c9-8957-c943793b8aec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ad60b9d-08e8-472b-b945-6f7ed410bc51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b00e79f-083d-4bc0-8d5a-afb858afa3bc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f0a983-fbd6-4960-9670-7f52c6b3a1d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9011fa8b-c2dc-4628-9a48-72ce2a017b9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66199f8d-f952-41bc-95b4-0d880dcd6c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea426240-93dd-40fd-8637-670eb91933e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbece891-b332-4fbb-860b-f1ada934ff12",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ccc8aa5-5413-49e4-b7e9-a9c1a5f40b16",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b23ea63e-90d0-45a0-8e1c-918349673cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9dce95a-407b-4642-aea1-acab2125d635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39856e12-069e-4125-b552-8ec2eeb17ac7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a2f5538-4e1b-4eff-9d88-5acd19a8fb90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68371266-3338-4829-a11a-5d7ecc43d8f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be70c0e2-7077-4eae-9f96-d9f8cc1a8c97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f0100f0-e0af-417f-9032-fe73a975ec1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f45a50f3-e1f8-48ca-bbd4-11964ebe0b89",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2abd88a0-8a29-4f4e-87ff-6e601ff6d86c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d8defc1-dee7-483e-b6ab-e9920d5d4fbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "faeb4698-5727-44bc-9320-ad9c9d735ffc"
            }
          }
        ]
      },
      {
        "id": "849e1816-e6ed-474d-9648-0cb30c8069af",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "910baf28-07f6-42dc-ac1c-a668f34af680",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b357421d-78bf-492b-b2b9-2e0f253ab933",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b88ce1ff-093b-4eab-9cff-408d47d289c5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5db163da-3342-494b-a67e-54eec1be33f7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f43dd653-05a6-46c7-92c6-be70eab2d766",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 10.702290076335878,
      "responseMin": 3,
      "responseMax": 237,
      "responseSd": 29.20177100571218,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675989776956,
      "completed": 1675989790115
    },
    "executions": [
      {
        "id": "30e497c4-de15-43c0-9243-e868dd43943c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e5e8a421-9304-4738-b254-dbf5c841e637",
          "httpRequestId": "23ee37de-2134-4b24-a201-7f574c144e1d"
        },
        "item": {
          "id": "30e497c4-de15-43c0-9243-e868dd43943c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "49bcdeab-1bb1-4a04-8b4c-f7c2b382a20c",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 0
        }
      },
      {
        "id": "8fea2a0b-efbc-4555-8d54-c83d6d48a7a1",
        "cursor": {
          "ref": "40f6fe41-6da5-41f7-9ec3-ec030707a1be",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d4b591e0-99d5-4980-90de-130ca84ea98b"
        },
        "item": {
          "id": "8fea2a0b-efbc-4555-8d54-c83d6d48a7a1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5597c9d2-a7cf-4929-9627-685c4024985a",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "c7a077d1-fd6c-4208-9658-4705c9a20485",
        "cursor": {
          "ref": "b04c1b68-dbca-451f-87fa-178c18b28ff0",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "04adaead-3449-47dc-b2bb-594463c24421"
        },
        "item": {
          "id": "c7a077d1-fd6c-4208-9658-4705c9a20485",
          "name": "did_json"
        },
        "response": {
          "id": "cbb89a77-63cb-443d-90ff-fc2a68867e52",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9172728-e66f-49d3-96e0-92beab27b1ab",
        "cursor": {
          "ref": "43cbd283-dbc4-425e-ab03-e0057c8de5f3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cd144716-6ba7-401d-b811-2e3426f57297"
        },
        "item": {
          "id": "d9172728-e66f-49d3-96e0-92beab27b1ab",
          "name": "did:invalid"
        },
        "response": {
          "id": "007f57d3-fbb9-4d7a-a226-a80c4cead3be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d9172728-e66f-49d3-96e0-92beab27b1ab",
        "cursor": {
          "ref": "43cbd283-dbc4-425e-ab03-e0057c8de5f3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cd144716-6ba7-401d-b811-2e3426f57297"
        },
        "item": {
          "id": "d9172728-e66f-49d3-96e0-92beab27b1ab",
          "name": "did:invalid"
        },
        "response": {
          "id": "007f57d3-fbb9-4d7a-a226-a80c4cead3be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0dbd9f38-78e0-4a03-b82f-b97e003f4226",
        "cursor": {
          "ref": "a30a2869-a5ed-45a0-bacd-61ea2233d1c0",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cdd93c70-1b16-45e1-b9e3-76e32977327d"
        },
        "item": {
          "id": "0dbd9f38-78e0-4a03-b82f-b97e003f4226",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "53ce9cff-fb96-4a01-8782-53a6a4038237",
          "status": "Not Found",
          "code": 404,
          "responseTime": 107,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e85fe32-3f54-4248-8916-f4e1e7aee9d3",
        "cursor": {
          "ref": "5dd7a92b-1802-4c69-a993-e281ecaf7767",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "17c62815-338e-4bba-a231-5cb3c199e134"
        },
        "item": {
          "id": "5e85fe32-3f54-4248-8916-f4e1e7aee9d3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4c89b17c-1ce2-4018-924e-ea6bf6cd189f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466c7aa6-3f0c-4711-9575-7a132a720786",
        "cursor": {
          "ref": "4bb15b44-c0bb-4dcb-af2a-b9dda549bf35",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c98ff7b2-f598-4c3e-b756-68026e88b9cc"
        },
        "item": {
          "id": "466c7aa6-3f0c-4711-9575-7a132a720786",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4c035c53-3ca0-4b18-b5cf-6cfde529d14d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c240a22b-ba0f-43b3-8813-5161b9a12e59",
        "cursor": {
          "ref": "007876ac-610f-45fe-a0f1-f75604a8cb24",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e8d47d17-cf52-42de-882c-3899d7e98977"
        },
        "item": {
          "id": "c240a22b-ba0f-43b3-8813-5161b9a12e59",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b39d8bea-d195-4af4-84a0-8108f1e593d3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c240a22b-ba0f-43b3-8813-5161b9a12e59",
        "cursor": {
          "ref": "007876ac-610f-45fe-a0f1-f75604a8cb24",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e8d47d17-cf52-42de-882c-3899d7e98977"
        },
        "item": {
          "id": "c240a22b-ba0f-43b3-8813-5161b9a12e59",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b39d8bea-d195-4af4-84a0-8108f1e593d3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa68193d-49ef-4f49-8eb9-1422995d28c4",
        "cursor": {
          "ref": "2cfb7ebe-65e2-4031-b1eb-755a19186543",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "60ce4d13-fda1-4866-8ea1-3b4361fe52b2"
        },
        "item": {
          "id": "fa68193d-49ef-4f49-8eb9-1422995d28c4",
          "name": "identifiers"
        },
        "response": {
          "id": "11360cc4-99b5-47eb-b4a7-0a52c9fa6e7e",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cf3e61-da23-4d9d-b1d2-05fe68419772",
        "cursor": {
          "ref": "da26589e-279e-40e8-937a-afd639fd386e",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4e18c2ba-4f9e-4690-b59c-672907f2880d"
        },
        "item": {
          "id": "18cf3e61-da23-4d9d-b1d2-05fe68419772",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d21e324-1929-43ba-8b72-721b84275aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cf3e61-da23-4d9d-b1d2-05fe68419772",
        "cursor": {
          "ref": "da26589e-279e-40e8-937a-afd639fd386e",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4e18c2ba-4f9e-4690-b59c-672907f2880d"
        },
        "item": {
          "id": "18cf3e61-da23-4d9d-b1d2-05fe68419772",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d21e324-1929-43ba-8b72-721b84275aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f0b5a8-2a72-4047-a7ab-1426a59fd968",
        "cursor": {
          "ref": "a46a51cc-1098-4b04-8a9d-a898daf9f16e",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "99e80a67-5aa7-402d-ab54-8f8099f81761"
        },
        "item": {
          "id": "b0f0b5a8-2a72-4047-a7ab-1426a59fd968",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e5ed6dfb-2ca6-435e-abc1-8ef947bbe7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c51ce50-0806-49ae-9c0e-3f0d51c13658",
        "cursor": {
          "ref": "cadacf7d-a5fd-47c2-80c4-5eb81c0df1d2",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "698057c1-96db-4a90-9e54-f4476f6a9fde"
        },
        "item": {
          "id": "9c51ce50-0806-49ae-9c0e-3f0d51c13658",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "6333916c-a420-4721-af5c-96202e28bf4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7101e8-da33-46a7-b1a3-e26bcb05f526",
        "cursor": {
          "ref": "c6578cc2-779b-49d5-8a03-57dc60328591",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0f997037-8df5-4643-8584-7d06f0eac020"
        },
        "item": {
          "id": "2c7101e8-da33-46a7-b1a3-e26bcb05f526",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "742d1296-510b-4bd0-90be-75d60b10c953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491ddce3-2098-4186-8574-e36d35a16eeb",
        "cursor": {
          "ref": "4696c1ba-2822-44b8-8599-eececb919946",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1ee2500a-595a-46c0-89aa-ca461a3e7b8f"
        },
        "item": {
          "id": "491ddce3-2098-4186-8574-e36d35a16eeb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ed5d1c10-e96e-4c31-892e-b0b8d8371890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4ca9d3-ad09-451f-b96a-d49044f2e957",
        "cursor": {
          "ref": "0342c357-e124-4923-9d9e-f93def7ed117",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6e157c76-271b-4a67-8915-bd4cd90ff75d"
        },
        "item": {
          "id": "dc4ca9d3-ad09-451f-b96a-d49044f2e957",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2dbd2e3d-532f-4aab-b48f-9358d1797e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3f7dfd-8fd6-4436-90ad-69efb46752aa",
        "cursor": {
          "ref": "91ef4a3d-892f-4396-96c6-ffa9b9e19f61",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "51d8180e-e412-4cf8-b7b8-3d67bb5652c9"
        },
        "item": {
          "id": "ad3f7dfd-8fd6-4436-90ad-69efb46752aa",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b972aedf-b298-4c2b-be49-98891165803d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f3fa7c-c1a9-4ae3-8284-b53e688ad34a",
        "cursor": {
          "ref": "69bf09fd-317e-46e3-82fa-62b78e199b61",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2a048636-85d2-4b89-9bc7-54789fdcbcde"
        },
        "item": {
          "id": "c6f3fa7c-c1a9-4ae3-8284-b53e688ad34a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d6e002b5-a3b3-49f4-ab47-894f1e14790b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ea1bc5-33ee-488a-8556-9b37c03cfc4d",
        "cursor": {
          "ref": "2e80d066-831a-4c51-ba29-15cf04a31dcc",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "98a1c7fd-2819-476c-b540-9d2bea68b4a3"
        },
        "item": {
          "id": "20ea1bc5-33ee-488a-8556-9b37c03cfc4d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "787680dd-9c05-4d1c-8fcc-c71dd18b5fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82828305-4eb7-43e7-9310-ebdefa914d6e",
        "cursor": {
          "ref": "9f844b09-827e-48c2-9439-db1f6e95f34c",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "926caa89-8735-4563-88fb-dcb15917e19b"
        },
        "item": {
          "id": "82828305-4eb7-43e7-9310-ebdefa914d6e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2212013a-8be3-4b9d-8a05-6696425ea584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0e60cb-e26d-4839-8e1a-b7dc5d686c2c",
        "cursor": {
          "ref": "684fd038-cd2f-4f69-8f8f-ca09f8291efb",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d5c00cf5-0318-4274-9c2b-97b7daa81192"
        },
        "item": {
          "id": "fa0e60cb-e26d-4839-8e1a-b7dc5d686c2c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "078eb390-bfe2-4fc6-9121-3941ae048f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c696d295-bf91-45bb-9a35-9169a5054a00",
        "cursor": {
          "ref": "0c1e7092-dad6-44a4-a635-d5f6b6ea9e2c",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "655b84d5-f1ba-4fac-83fa-f6e0b11fdd06"
        },
        "item": {
          "id": "c696d295-bf91-45bb-9a35-9169a5054a00",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "06e42148-0d98-4e1c-9492-3de0db30affd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eeeaeb9-a7a0-4adf-89d8-4607f236a4da",
        "cursor": {
          "ref": "fbc0ee7a-d9fb-4570-89e4-de1524c52e56",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f631632c-2486-4697-b900-52994619b76a"
        },
        "item": {
          "id": "7eeeaeb9-a7a0-4adf-89d8-4607f236a4da",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7649397b-b69f-4243-a452-eab92d925bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b692c9c-1e12-4202-8518-59d0ffbd8065",
        "cursor": {
          "ref": "b0df6670-bb27-4357-9a56-6640587d8545",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d01df908-375b-4e5f-808c-23a9155d4e3a"
        },
        "item": {
          "id": "9b692c9c-1e12-4202-8518-59d0ffbd8065",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "86c1d227-e8cc-4b67-be38-f7e1b938225b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed6cf4d-e59a-482e-ab7c-f24156e7aa66",
        "cursor": {
          "ref": "c46ce975-5d04-4974-a6e7-9276679729a4",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ef9a4962-dc57-4363-a1d6-d810254259db"
        },
        "item": {
          "id": "9ed6cf4d-e59a-482e-ab7c-f24156e7aa66",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a5d9e60a-c36f-4e99-aa95-8d88c2ab8595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca7a543-3f95-4872-b338-e1afbcf80042",
        "cursor": {
          "ref": "08f2fb3b-4f6a-4b3b-b602-6d884d236a56",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1196afac-e74d-488c-afca-aac610369a23"
        },
        "item": {
          "id": "eca7a543-3f95-4872-b338-e1afbcf80042",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1b77c1a1-89b3-418a-808b-ab05322856e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7806fc9-71fb-4b71-87fc-95ca89f5319b",
        "cursor": {
          "ref": "042f604e-df18-41e4-aa4f-8ada388d902d",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "74e909d9-d19a-4740-be0c-b76f00bc63ed"
        },
        "item": {
          "id": "e7806fc9-71fb-4b71-87fc-95ca89f5319b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "65f466c8-a913-45f4-ae33-4aec083ea8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9293dd5-0b08-447c-9476-cd9df1d7d005",
        "cursor": {
          "ref": "2d17295e-2f12-4549-af08-db458ec7542c",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c9074aa6-f37a-49a0-a85f-c27d8841a5f2"
        },
        "item": {
          "id": "d9293dd5-0b08-447c-9476-cd9df1d7d005",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "271fd424-ed6d-4e8d-81c3-452fd889c03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6881b080-f428-497f-addf-fa8b72cf29ec",
        "cursor": {
          "ref": "3ef28bea-9600-440c-99dd-606a51595f96",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c939f98f-9db4-4191-b732-e2cd09bdd8fc"
        },
        "item": {
          "id": "6881b080-f428-497f-addf-fa8b72cf29ec",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "58d8da07-8fe2-49d4-8849-4b4ad04f4de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4ef33b-5d6c-4a0e-9c0a-4205f58b1307",
        "cursor": {
          "ref": "45f60929-f6dd-4fb4-b245-4895e1b50412",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "579287cc-bed7-4c26-ae17-872654f7ef5e"
        },
        "item": {
          "id": "ea4ef33b-5d6c-4a0e-9c0a-4205f58b1307",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "02f080a3-9513-4118-b65d-ed1bd17e7eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c58809-547e-4e74-8b15-cb0e7924d067",
        "cursor": {
          "ref": "939bd67f-7cf8-466b-af3f-14aec2d6c1a2",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "32b87036-5e77-4183-acbd-06c82451b33c"
        },
        "item": {
          "id": "a4c58809-547e-4e74-8b15-cb0e7924d067",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "86f923cb-270e-4bc6-94c5-643b1930144a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cda5594-0d72-4bcd-a985-3b8c352e82d9",
        "cursor": {
          "ref": "e0f76ad1-b3d4-43e7-baa1-97a95a6f442f",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2a5a3334-e439-4ad0-a9db-f226bed1b874"
        },
        "item": {
          "id": "7cda5594-0d72-4bcd-a985-3b8c352e82d9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "860ca291-6d06-446b-bccc-a2769174d87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9a55f7-571e-4f77-8ea0-4f8281d29b3e",
        "cursor": {
          "ref": "8eb1f6bd-2d00-4ca8-925c-e3b130392fa0",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "20ec00ce-b972-4f36-a519-f626f289bfaf"
        },
        "item": {
          "id": "cc9a55f7-571e-4f77-8ea0-4f8281d29b3e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a1291706-dcd5-4dfb-9450-f3944fb85c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9d7c0f-c30f-4863-9007-96660827ec2f",
        "cursor": {
          "ref": "5d606b54-3cf1-49d6-9d69-6d4b4c0b3b17",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "502047cf-2dc2-4b8f-9e4d-4c7f0e081c85"
        },
        "item": {
          "id": "6f9d7c0f-c30f-4863-9007-96660827ec2f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1ebf104d-c53a-4855-ac62-c2dc547f2ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e126e9-f120-428e-be60-31eb40a405e3",
        "cursor": {
          "ref": "b07184a2-132d-474a-ae1c-41980343f224",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0a88fa8e-73cc-45fd-9992-8b6482398d96"
        },
        "item": {
          "id": "e8e126e9-f120-428e-be60-31eb40a405e3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "26f1376f-ed8d-493a-aabc-2d564e6e2abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5753ef42-897a-4e29-8b58-f7114687d67c",
        "cursor": {
          "ref": "7a395fb0-f14e-4d06-b8e7-52c8b885b416",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "995a0b19-ff6d-400c-b3dc-cffa53ad8552"
        },
        "item": {
          "id": "5753ef42-897a-4e29-8b58-f7114687d67c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "53889c09-f784-4d7c-972c-b3f5493fe032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca11058-fed0-47f5-bbb6-3a2660980531",
        "cursor": {
          "ref": "59245d90-b2f9-452e-a007-5ba343e986b7",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bc862de9-9b57-4f7a-80bd-0cf4f40020de"
        },
        "item": {
          "id": "eca11058-fed0-47f5-bbb6-3a2660980531",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0bb22c1f-14e3-4610-a82f-13f1f5481a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3793dcc7-fb84-4253-a6af-76304645b77b",
        "cursor": {
          "ref": "13d14529-75c9-4431-aee9-f5fad769dbe9",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "79505c08-0b5f-4125-bc3f-bc37ad80e65f"
        },
        "item": {
          "id": "3793dcc7-fb84-4253-a6af-76304645b77b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0a130ec0-650a-49db-b30b-1779c707e8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e293f751-6cfd-48e2-b151-4113c568e99b",
        "cursor": {
          "ref": "22b115fb-48b8-49d0-9eca-ac47361bd20b",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f3cef628-9e48-4b9f-920f-ba3cba9a7079"
        },
        "item": {
          "id": "e293f751-6cfd-48e2-b151-4113c568e99b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "663eb5aa-f533-4343-bce9-d35392d3efdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfb28f4-5439-49ab-9c34-bcd1943285f3",
        "cursor": {
          "ref": "3f4f19d6-a57a-4e85-8780-2117dcece119",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7e4e59dd-28ba-4fc7-a255-b113496f27d2"
        },
        "item": {
          "id": "abfb28f4-5439-49ab-9c34-bcd1943285f3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7b45c820-14ae-4048-ad56-8a1d5ce2197a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fd279f-e6df-4abc-8a16-2bea6fc7a30d",
        "cursor": {
          "ref": "495d186f-e396-4de1-9cb8-bb9905a166b3",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "77e0f5e2-70e7-4a5d-9001-6b722762c951"
        },
        "item": {
          "id": "c8fd279f-e6df-4abc-8a16-2bea6fc7a30d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0bac93ff-8cce-4c95-886a-f5a42f10a388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95edf47a-87f3-4f22-90c0-ac76e8737727",
        "cursor": {
          "ref": "9b576763-60ac-4e77-8ba5-039935f93a7f",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8318b578-8c27-43b4-990c-865323bcac01"
        },
        "item": {
          "id": "95edf47a-87f3-4f22-90c0-ac76e8737727",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "91276742-e12e-4db3-8b5d-7c7f828e423a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac78103-9ae9-42f4-a875-919297f2d088",
        "cursor": {
          "ref": "3e440a7e-6e3c-45b3-9e1e-6071eedff181",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "09cdfb42-e9a2-4c5c-a173-34602f8707e0"
        },
        "item": {
          "id": "8ac78103-9ae9-42f4-a875-919297f2d088",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "73e2e8b6-43d2-489c-afc2-9617d29d541c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f6f72e-7562-4ea1-a3df-8866500d6e83",
        "cursor": {
          "ref": "964b8602-6d8b-4f89-819b-3eefadaa7fd7",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "aff89ede-db39-49f1-9652-ee042cf1c341"
        },
        "item": {
          "id": "24f6f72e-7562-4ea1-a3df-8866500d6e83",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "56a75071-cf43-4578-b26a-b8dcb3b3c438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab553736-c3b9-400a-8835-dd309303be8a",
        "cursor": {
          "ref": "026a2d99-3d0a-4644-9218-eae2e7611453",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "15517992-f970-434b-8092-08e1a531edfe"
        },
        "item": {
          "id": "ab553736-c3b9-400a-8835-dd309303be8a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dadbdf43-583c-4d9b-afa8-708269bc5b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec41ce06-3eb7-43db-8f1e-7b55b08c9778",
        "cursor": {
          "ref": "a35993cc-b915-43e6-b854-81af2ecdc644",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aca17ed5-5767-4f5e-92bd-45d488e71873"
        },
        "item": {
          "id": "ec41ce06-3eb7-43db-8f1e-7b55b08c9778",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cb9fb3ea-d04f-44d1-a1e7-e04996120f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce29d3c6-e109-4dce-ac04-17f5435e769a",
        "cursor": {
          "ref": "64904e13-15c2-409b-9397-bb9dbe674cd4",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a3d88dbf-2efd-4f54-b3bd-610d7917e6ce"
        },
        "item": {
          "id": "ce29d3c6-e109-4dce-ac04-17f5435e769a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "95239e25-a0f0-47ce-a4b1-0fc308911455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36eb839-7723-4879-a6d3-452b8c962e65",
        "cursor": {
          "ref": "1892fdf1-5783-4f0a-914c-afba509c46ef",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2b358c44-83b3-400f-bd83-099d8ba15d51"
        },
        "item": {
          "id": "d36eb839-7723-4879-a6d3-452b8c962e65",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c7d3a150-4ee3-4f56-bcd5-e99dede19461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b63d1d71-68f3-40bc-a5d4-1f3eb2b3b89f",
        "cursor": {
          "ref": "629bffdc-8d0d-4661-b74e-f1185bb90e01",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3622ae4b-283c-43e3-a8b2-44b60c474d07"
        },
        "item": {
          "id": "b63d1d71-68f3-40bc-a5d4-1f3eb2b3b89f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "666dc116-24e3-44e6-8b8d-573a715266d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d996f1a-05cc-467d-bd44-9229df7b7972",
        "cursor": {
          "ref": "56532a76-993b-4e32-9ae8-0cb99ce5f7c4",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "26f6fb1e-7060-4eb5-a6e4-5193024655fa"
        },
        "item": {
          "id": "8d996f1a-05cc-467d-bd44-9229df7b7972",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "954334f7-2187-4719-b9b7-fd10b9d89288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3e8361-03e2-4736-abad-86cda2472afa",
        "cursor": {
          "ref": "dd1527e0-357e-4c1a-a314-f26da07cfdad",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0e5b2615-09b0-4632-a3a8-e6a883fa0a14"
        },
        "item": {
          "id": "fb3e8361-03e2-4736-abad-86cda2472afa",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2a8650d8-f5dc-47ce-9160-f41ac0092f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff431b3-2711-4a29-bbf5-757354986eee",
        "cursor": {
          "ref": "116b3690-d665-472b-b860-18896630ee5c",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e8793ec6-8252-4d59-8787-44b980dc5b93"
        },
        "item": {
          "id": "8ff431b3-2711-4a29-bbf5-757354986eee",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "24d44c21-6a73-47eb-a038-f79d0430f3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba588ed3-1b03-4138-a5c3-bf8050b9bc8b",
        "cursor": {
          "ref": "ccfd0bc7-8bb0-4b60-9ac5-17a874c2050e",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1c516bc3-e0df-420a-83db-a0250447a6de"
        },
        "item": {
          "id": "ba588ed3-1b03-4138-a5c3-bf8050b9bc8b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d05b0e43-876b-458a-9b4c-688de0430b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7519d7-4273-40e1-9a6b-7ae3c2be8e42",
        "cursor": {
          "ref": "b0c72d66-5915-4931-b93c-0edc57d5755e",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "94c1ad5e-35b4-453e-b4a3-b33ece1d33e2"
        },
        "item": {
          "id": "bc7519d7-4273-40e1-9a6b-7ae3c2be8e42",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c3ade35b-5670-4c75-86b2-af24035b7e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6081110-d904-43d8-8bda-7caf6802e5c0",
        "cursor": {
          "ref": "a5d7d8c8-8cd6-41d2-ac41-1d74a807f84b",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b03c2ee4-22c1-472a-b175-e9daa2480cf1"
        },
        "item": {
          "id": "a6081110-d904-43d8-8bda-7caf6802e5c0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f7ec9704-4bb2-4068-97f0-414a3ea1f244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "a9f8adb9-8181-4349-ba24-70aaa4313bb4",
        "cursor": {
          "ref": "bf8c596c-250e-47d6-b832-0611781ab5fc",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d94e9040-d098-4c9c-b2c6-69914065bc37"
        },
        "item": {
          "id": "a9f8adb9-8181-4349-ba24-70aaa4313bb4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bba99fdc-89d3-47af-9a6e-9b2cea4d37bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2be25a5-3028-4abc-a67b-bebec8e1cd8d",
        "cursor": {
          "ref": "46d7c4a3-8dff-47ef-9363-1edd2bef25cd",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c0dba983-3f15-4d16-a230-7f7266b496fc"
        },
        "item": {
          "id": "f2be25a5-3028-4abc-a67b-bebec8e1cd8d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "67325dab-9565-4b82-8790-14e5f4dc9253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775f5fe6-b0e0-413f-a7d2-6f8c0cbb6ae5",
        "cursor": {
          "ref": "b11a69e8-052d-4290-8a7a-5bed1f2d5170",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "48410c75-4139-49f9-ae8d-9ee18f76e1ef"
        },
        "item": {
          "id": "775f5fe6-b0e0-413f-a7d2-6f8c0cbb6ae5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a651a6ad-8d9e-458f-9365-b456c8ec70f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87782bae-336f-4f53-b506-d5f64672d806",
        "cursor": {
          "ref": "b6404d24-e9b7-4c0a-8165-4032b7a7b149",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "da6562ac-35b1-461b-a5eb-abfdabf8991c"
        },
        "item": {
          "id": "87782bae-336f-4f53-b506-d5f64672d806",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f68b261c-7b64-4824-a9b7-f410ff48b915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f64566-83ce-4f10-8677-f62a9a12792c",
        "cursor": {
          "ref": "00e0f00f-8e0f-4579-92b4-0e722941fc38",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "012fcab7-4caf-4a7d-8709-5dbe6cf76271"
        },
        "item": {
          "id": "e3f64566-83ce-4f10-8677-f62a9a12792c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "05c577b3-38e4-45ea-9af7-499fdc3929ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452b003f-7959-490b-afdf-acbc28edae00",
        "cursor": {
          "ref": "154c93a8-2222-431e-8618-b0224d852582",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "15480a62-1716-4b4b-996b-cbe9b85b6bb5"
        },
        "item": {
          "id": "452b003f-7959-490b-afdf-acbc28edae00",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "92161c47-dd4d-42ea-b76a-0b6765119268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca849b9-7012-41c1-80a9-42b07f7be1a6",
        "cursor": {
          "ref": "21ef57d7-991a-442e-ad73-eb6b5f64e0bf",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3a4cf989-090b-4801-a82b-351766e21665"
        },
        "item": {
          "id": "7ca849b9-7012-41c1-80a9-42b07f7be1a6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e9a9b6bf-1815-45cb-827a-a5b401fe48f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5377e5fe-ff44-4388-8c63-aa3d7ef47c3c",
        "cursor": {
          "ref": "b4be5878-5d14-4a16-b7ff-22bad7e5a567",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d89cf817-dcc5-4184-b5da-6a6281efcb4e"
        },
        "item": {
          "id": "5377e5fe-ff44-4388-8c63-aa3d7ef47c3c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "68eb0241-7e7d-4962-a714-a8ba433b8168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff7fa71-6d93-433a-b303-2aabee0074be",
        "cursor": {
          "ref": "f69c27fb-8607-40dd-8033-cddb77f3e6ad",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "85aaf70f-e60b-4463-8c96-5f437f179897"
        },
        "item": {
          "id": "3ff7fa71-6d93-433a-b303-2aabee0074be",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "49485d3a-b946-4949-978a-99e5d3682af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d000d33-eace-4b8f-b458-f15861111330",
        "cursor": {
          "ref": "3ffcb849-68d1-4def-b03c-52460c6654ac",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7b855a23-c69a-48a7-867a-87e7e7f9d3a2"
        },
        "item": {
          "id": "3d000d33-eace-4b8f-b458-f15861111330",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8fe08f82-30fb-4c7a-b968-e51219e059c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39f0d7c-12af-4463-aa98-9fefa20a11cf",
        "cursor": {
          "ref": "f6682b04-7afb-4358-91b1-666b271fa787",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "db5c4c21-01d4-44c0-bcea-dd746e8622e0"
        },
        "item": {
          "id": "b39f0d7c-12af-4463-aa98-9fefa20a11cf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3f6d3f61-39bf-4a4d-8638-a88abd907414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d97c2c-45c0-4f4d-b48c-b96a96c32d4b",
        "cursor": {
          "ref": "abc05b39-fc89-47bb-b8f6-79f780970d16",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "568a064a-e7e7-427a-a5e5-20bc1182d0aa"
        },
        "item": {
          "id": "91d97c2c-45c0-4f4d-b48c-b96a96c32d4b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b347e623-0c49-4bfd-95a7-46d5e49ce68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06480108-0e77-48b2-a88e-4396c1fde599",
        "cursor": {
          "ref": "5f7a356d-658f-4db3-8f65-5a2fb4bd6231",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a2cab946-1c99-44b5-b3ac-9f6d5b838fb3"
        },
        "item": {
          "id": "06480108-0e77-48b2-a88e-4396c1fde599",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6555013b-8f83-4f03-ad5c-8625bd677952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42278ac4-b07a-4f01-9cca-f86bf46968f2",
        "cursor": {
          "ref": "a39f5041-68a7-4a68-9963-326db71b6312",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3d5a1de6-d811-4c9c-999a-87e8eabb2e2b"
        },
        "item": {
          "id": "42278ac4-b07a-4f01-9cca-f86bf46968f2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "40c3b3df-2d8a-435a-8a95-9e4c7c724a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed0ca65-f554-428a-a033-8377c25b2003",
        "cursor": {
          "ref": "fd254a62-2b49-4f02-bfc7-005b90bc9815",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "117067ad-6ce3-4454-9093-237d4f6f35e6"
        },
        "item": {
          "id": "1ed0ca65-f554-428a-a033-8377c25b2003",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1e497ea7-a09c-4500-98bd-f0266cae7e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076b2d62-91cb-43aa-907f-434e39a7c126",
        "cursor": {
          "ref": "94348c78-a235-4037-96a5-9791310ebc44",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f5f0f052-80e5-4876-b479-58f73f63db66"
        },
        "item": {
          "id": "076b2d62-91cb-43aa-907f-434e39a7c126",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a8703ad0-3f67-40e4-a710-70bd5702e98d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c9e081-1ca9-4f0e-9d25-5a06d332f6a2",
        "cursor": {
          "ref": "551d1124-0ab2-4e44-9eff-faa760759e52",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5a436553-9fb7-4dc5-a84b-bcb3be8e1b7d"
        },
        "item": {
          "id": "32c9e081-1ca9-4f0e-9d25-5a06d332f6a2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "85ac7242-f0e4-40b3-b013-956f88122995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e5e9ad-67f5-4cd9-948d-22b7c82fc22b",
        "cursor": {
          "ref": "d100a650-1ef9-4c15-a6c3-de201288ce1c",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e08ef765-ba29-40dd-9aa9-d0903186b6b9"
        },
        "item": {
          "id": "69e5e9ad-67f5-4cd9-948d-22b7c82fc22b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4d97c762-c600-454a-a8b4-43b56c17dccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a053a56-5668-4ae6-b3b0-c4c215f13346",
        "cursor": {
          "ref": "47764213-15e7-4a2f-94af-84a9e580d91a",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4ce31f40-c7ed-430c-afb7-d0d4a35d81ec"
        },
        "item": {
          "id": "9a053a56-5668-4ae6-b3b0-c4c215f13346",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "60ac0ac2-3965-42b4-ab6f-5caec1340516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d691cf-07bc-404d-94cb-1f9a7e571b25",
        "cursor": {
          "ref": "66d72449-6b92-499f-a086-7511225278e3",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "52527aa5-8a91-4ae6-840a-8d7591dd2b42"
        },
        "item": {
          "id": "50d691cf-07bc-404d-94cb-1f9a7e571b25",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "69b30b5d-a4fb-443c-ac40-0f7eef8f6e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18519017-2f17-4b25-b313-a8c9eaaa46b1",
        "cursor": {
          "ref": "e942645c-04c8-4683-9d1b-8ac6d6889bda",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "01650774-cfb1-4e58-a2d4-e495d54a0e77"
        },
        "item": {
          "id": "18519017-2f17-4b25-b313-a8c9eaaa46b1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "404e8b53-2f3e-479f-bc37-3ce6f5ef1e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deced3e1-e5b3-4b8c-b534-c3b30b17201d",
        "cursor": {
          "ref": "dfa80687-4511-4867-ab7a-a0bc01633626",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3410e364-2ab5-4d61-88fa-b18114577df4"
        },
        "item": {
          "id": "deced3e1-e5b3-4b8c-b534-c3b30b17201d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f9925ba3-0d63-4543-9fb7-699bd73c759b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7ac1ab-e1d2-4d33-abf0-1a8fca5ab8f1",
        "cursor": {
          "ref": "2763b384-dc48-47b5-b85c-ec8120492837",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "28762f03-cde9-4f86-a0b7-1425215efdae"
        },
        "item": {
          "id": "0f7ac1ab-e1d2-4d33-abf0-1a8fca5ab8f1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "69f83541-76ab-458a-9106-91fb840be9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a526fa-bd0d-45fd-9cef-adbae005abec",
        "cursor": {
          "ref": "19adbbb0-fbdd-4c95-81b1-213c9ea7b37f",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b758bae4-9321-4d52-9c65-93d8f58761de"
        },
        "item": {
          "id": "43a526fa-bd0d-45fd-9cef-adbae005abec",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bcc53c75-f686-4f2d-aae5-9de1dfe60fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb2141c-e78d-462b-8557-090f07f66723",
        "cursor": {
          "ref": "82ca958c-cf71-4b91-8f5d-280ab15378cc",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "84cc422c-0076-4d43-8fcc-e5a85ec785bd"
        },
        "item": {
          "id": "ecb2141c-e78d-462b-8557-090f07f66723",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b20a9704-09c0-4039-8568-6a85b1b66eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fcf8536-9b0f-4501-86cb-4f8692f7916e",
        "cursor": {
          "ref": "f2546953-1f2d-4532-afcb-2375af7dd0c7",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f712b9aa-3b0f-485f-aa17-f6d50fcf2bb9"
        },
        "item": {
          "id": "2fcf8536-9b0f-4501-86cb-4f8692f7916e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "64753e34-36bb-42e0-a10e-fc5aaa4ae125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d62c2da-6cdf-4f7b-8618-7c0ae01dc3c4",
        "cursor": {
          "ref": "84fa2340-e147-4ad9-9dd1-592ae33f2332",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "40ae1c12-53c5-45ba-956f-de9d7e8a0770"
        },
        "item": {
          "id": "0d62c2da-6cdf-4f7b-8618-7c0ae01dc3c4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9ca70287-522d-4360-8789-0493f000d7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601c4062-419e-4dc5-afdb-4c26fab58baa",
        "cursor": {
          "ref": "c3d4ae4c-1127-4170-a50e-a4385d8c104b",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a4636eb5-89d7-4e72-9f5b-cd898384d451"
        },
        "item": {
          "id": "601c4062-419e-4dc5-afdb-4c26fab58baa",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9f40eb83-c0cd-4d68-b768-430759ad7e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b415361b-55cb-46f1-b3ee-af89a239d6b6",
        "cursor": {
          "ref": "5e50fdea-3386-4968-9e75-28affe76985c",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3977eff6-ef96-4926-a077-66f6f9030d17"
        },
        "item": {
          "id": "b415361b-55cb-46f1-b3ee-af89a239d6b6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2b815a71-4dc8-4a22-801f-8f3095b84720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b9ac78-802d-4f03-be6f-65f1d2a4754d",
        "cursor": {
          "ref": "826fc8a9-6a3b-4ee9-adea-852194135442",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e6a52d88-0b08-4f61-acfa-47b64017f024"
        },
        "item": {
          "id": "36b9ac78-802d-4f03-be6f-65f1d2a4754d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "519670f3-7ade-4435-a2d2-1186685ed3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bf374ad-ea29-4762-aa92-885ea53eb4d0",
        "cursor": {
          "ref": "b7a39d30-928b-4a98-81cb-7b25c0df13e7",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "73bf5ab4-46d7-4803-ac79-fa0d5f0b9766"
        },
        "item": {
          "id": "1bf374ad-ea29-4762-aa92-885ea53eb4d0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "582ca37e-d00f-487b-ad9d-ffcab8191721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c36bc64-65e5-4b6b-a249-5d19c9ab89e7",
        "cursor": {
          "ref": "1d6f40a6-f8b4-41a4-83b1-4a1e078c7173",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4c013b53-9143-4467-90fa-c6e2567a62da"
        },
        "item": {
          "id": "0c36bc64-65e5-4b6b-a249-5d19c9ab89e7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "308d361c-41dc-46eb-aef2-7029647c7aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddad352-cc80-41bc-9aa3-974e47985bdb",
        "cursor": {
          "ref": "832df44b-99b5-44e7-9461-ea9db139b46c",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "16a641e9-ff0d-4640-a50a-e4a090a9155c"
        },
        "item": {
          "id": "9ddad352-cc80-41bc-9aa3-974e47985bdb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0949108f-07e6-4fcb-b464-449b559f060b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e69b08f-a5be-4774-9652-1834b41520bc",
        "cursor": {
          "ref": "cbcacb4d-f543-4846-9bca-bbd6b6ed1897",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7e375dcc-f239-4325-ba9e-bfe32e8f8576"
        },
        "item": {
          "id": "9e69b08f-a5be-4774-9652-1834b41520bc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "eb1cf49b-2660-4a5e-9487-cde47a08a3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c7a835-a0ae-461b-afa8-079c2e9d5424",
        "cursor": {
          "ref": "d53c0852-5d51-4bb9-8754-fc10ef844efc",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7fa61390-2401-49b7-9e4c-549f198e941b"
        },
        "item": {
          "id": "64c7a835-a0ae-461b-afa8-079c2e9d5424",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "69ebf883-dbb4-4bac-b064-6d190c6c22e6",
          "status": "Created",
          "code": 201,
          "responseTime": 21,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "1b876dd2-d9d9-4417-a2ae-ae8c7a01cb80",
        "cursor": {
          "ref": "fe670d33-d9b8-4601-acfd-1387af4ddf0f",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "458405df-91d4-4197-adb2-629507d84490"
        },
        "item": {
          "id": "1b876dd2-d9d9-4417-a2ae-ae8c7a01cb80",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9dee62bd-a772-4df3-83a4-43d3c8012cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fdc680-0a68-41ee-86f3-184a7ab185c4",
        "cursor": {
          "ref": "d0883d5b-2eb2-459e-892d-16348b31b2b6",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3c8ce818-7c1f-48df-8f8b-2511e75d4b25"
        },
        "item": {
          "id": "93fdc680-0a68-41ee-86f3-184a7ab185c4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fe7e989c-046f-47ed-8b8b-b7c81dc0e75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195c2351-cf44-4826-872b-f306e7ffa755",
        "cursor": {
          "ref": "93c09886-7f38-449e-b003-2e25545311b4",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5c99bd49-c2c3-4847-afa6-576465bd36be"
        },
        "item": {
          "id": "195c2351-cf44-4826-872b-f306e7ffa755",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "eaa76bcf-2f10-4c46-8c1b-105e0fe80d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbdcee4-4103-4edc-9ffd-b500a7aae91d",
        "cursor": {
          "ref": "9a1db1f7-c674-417b-819f-2aebb0ca81e4",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "50dd9df8-4102-469f-9a18-845749db3c7a"
        },
        "item": {
          "id": "5dbdcee4-4103-4edc-9ffd-b500a7aae91d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a3bf021d-cd91-417c-bbec-f8f0075548f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98e9763-de2e-4a2f-89a8-942ecb831183",
        "cursor": {
          "ref": "efbfa931-02bd-4728-9b38-749022272414",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "dd53c87c-1def-4d71-b58c-41e903a32f58"
        },
        "item": {
          "id": "f98e9763-de2e-4a2f-89a8-942ecb831183",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cc1e48cb-6296-4981-a9ce-609e02f658f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c6c425-9e44-4b10-9c54-3805f12d7cbf",
        "cursor": {
          "ref": "f41e9e86-1ed7-47fd-8e99-5f5ff5f62f60",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "562c7603-c4d7-49d3-a164-f93e66198b63"
        },
        "item": {
          "id": "d3c6c425-9e44-4b10-9c54-3805f12d7cbf",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "983aa90c-0c8f-4b2a-b9cb-3411b582638e",
          "status": "Created",
          "code": 201,
          "responseTime": 21,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "1043f894-1da1-4524-b33d-3cb14c080006",
        "cursor": {
          "ref": "11385ec0-ad3e-4bda-9e92-76f5675b6f45",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9dcebd2e-7a07-4089-b6c9-b85cb6e44d58"
        },
        "item": {
          "id": "1043f894-1da1-4524-b33d-3cb14c080006",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c9b4fcd5-2253-4b6a-b1c0-3761862d62ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e31fd1-4c98-4206-b448-529dc1ad7ecf",
        "cursor": {
          "ref": "c4cb867a-a1a8-4782-a56d-34354bde84c9",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cca0e749-9575-489b-b70a-f6a65770350f"
        },
        "item": {
          "id": "c1e31fd1-4c98-4206-b448-529dc1ad7ecf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "153a408d-5afe-4c14-85d1-03a945ccccee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a470dd57-b55f-4940-8a09-39568b908996",
        "cursor": {
          "ref": "5791ed59-06b9-45e8-9038-91b60110da1f",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7eb5e4b9-9c5f-4894-b4f6-be790eedcb74"
        },
        "item": {
          "id": "a470dd57-b55f-4940-8a09-39568b908996",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ce56dc8c-6db7-4052-8f59-dc0a75e8bd72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e611b33f-9ed1-4f19-81b7-42d8a90bc5dd",
        "cursor": {
          "ref": "6f24f5d7-b7d7-4430-814e-0476ed2fb1ac",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4c39ef68-9a8a-4924-8fad-96d154a98b53"
        },
        "item": {
          "id": "e611b33f-9ed1-4f19-81b7-42d8a90bc5dd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f699762a-abd8-4424-9ad9-175fb89134a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7c1613-6eea-4a51-adb2-5990f3ccfdf0",
        "cursor": {
          "ref": "70609800-0826-47d4-8e6e-5987b4ac5b9d",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2230de08-d070-46ce-9604-ecf6fd6a2508"
        },
        "item": {
          "id": "9e7c1613-6eea-4a51-adb2-5990f3ccfdf0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0d0a74e3-53c9-4e15-855f-9d8dc73d5ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aeee972-c4a6-4be1-9871-3893dbdfac65",
        "cursor": {
          "ref": "41aec7cb-b4ab-42d9-b324-1b4f7782fa50",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5e19ff7c-f409-45ef-b9a6-72a43ee7fb21"
        },
        "item": {
          "id": "9aeee972-c4a6-4be1-9871-3893dbdfac65",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2c9dea93-215d-424a-b7a8-46cc188db118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e705cc2f-1cff-42fe-b807-363ca1b0090e",
        "cursor": {
          "ref": "893c1cfd-cc4b-47bd-8071-2fa1e490c783",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6227f790-6be5-45ab-9fd5-c2dbd8f1dc79"
        },
        "item": {
          "id": "e705cc2f-1cff-42fe-b807-363ca1b0090e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "05a04fe7-7eaf-4d6f-846d-317abe956911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94105a72-74d2-46c0-afd4-386d0f81a72a",
        "cursor": {
          "ref": "7b3f46f2-b347-4719-8944-9a4b6de23478",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "73807da8-4ad4-4e7e-934b-442297ed7363"
        },
        "item": {
          "id": "94105a72-74d2-46c0-afd4-386d0f81a72a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "658062a2-f903-4c0c-896b-7e0421bfdea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8c47c2-4c7b-4d0f-bd78-4a5417c1991d",
        "cursor": {
          "ref": "258344ff-6001-43a7-be18-2cae8b7b60cc",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2dd4385b-1547-4bf6-976c-19dac9421746"
        },
        "item": {
          "id": "ca8c47c2-4c7b-4d0f-bd78-4a5417c1991d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "71ef8024-752c-4e59-9a8d-0c092c8f0147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "e10ec2cf-b9bc-475d-b679-35d328d8ee75",
        "cursor": {
          "ref": "487f0eee-8182-4b18-8355-4e0f5a65d1fa",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "aeaf4355-f2ba-4030-8006-ed7a1da109a2"
        },
        "item": {
          "id": "e10ec2cf-b9bc-475d-b679-35d328d8ee75",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1e36705c-5e81-4d07-bc45-7f3397b2cbb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "bacdd59b-5536-49d5-9460-9cd0d0af6ca1",
        "cursor": {
          "ref": "19d8277f-c295-4c57-85bd-60ddbf0744cd",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "471fa67c-3293-4258-8399-87ed67b49a33"
        },
        "item": {
          "id": "bacdd59b-5536-49d5-9460-9cd0d0af6ca1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "dfb5822d-715d-499b-aa91-835977bd23cb",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c766f8-a1c8-4273-a1e5-227cd75a2bc0",
        "cursor": {
          "ref": "e20c1eaa-6fc3-4c4f-8fc3-5725e0e5267c",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b2438eff-82c7-4b2e-b9a0-29d8d3dcbc38"
        },
        "item": {
          "id": "c5c766f8-a1c8-4273-a1e5-227cd75a2bc0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c4b99350-6e1a-4e34-a858-d7815f97697f",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fae848c-d0fa-453b-9542-54d10a3e1c74",
        "cursor": {
          "ref": "40455c3d-4049-4f8b-9ae4-380137298c40",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7bcd996f-1ef7-4338-b416-e9c0367463f9"
        },
        "item": {
          "id": "6fae848c-d0fa-453b-9542-54d10a3e1c74",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a2d0a399-2b23-49e3-aa3f-a28d72e270d1",
          "status": "Created",
          "code": 201,
          "responseTime": 20,
          "responseSize": 673
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d20c74-2da6-4fbc-aff1-184bfebbf8ec",
        "cursor": {
          "ref": "2277fd1f-156e-4a68-9dfc-695316cc7391",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "20d42c18-4936-4707-a0af-26162e76a5a9"
        },
        "item": {
          "id": "65d20c74-2da6-4fbc-aff1-184bfebbf8ec",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7153e4f8-e8bd-4e37-a32b-56ed0dab6f65",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 641
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aede13a-ca40-411e-a104-8b32c076cec1",
        "cursor": {
          "ref": "bc420cec-2748-4ba0-8e67-f221f9e0cf3d",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bf9e46ac-7b9f-496d-b72d-7fb6748329b0"
        },
        "item": {
          "id": "6aede13a-ca40-411e-a104-8b32c076cec1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "89e66852-c1b5-4d6b-b45f-a29f63f139ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "e7232cbc-b0da-4263-89a0-fbffcc42e696",
        "cursor": {
          "ref": "0517d768-6d49-4039-b6ce-dd1ebfc0f970",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6a2824d8-83bd-45dd-87ba-79d691445838"
        },
        "item": {
          "id": "e7232cbc-b0da-4263-89a0-fbffcc42e696",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fbb5a4d1-28e3-4723-9280-ce18baf5e1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7232cbc-b0da-4263-89a0-fbffcc42e696",
        "cursor": {
          "ref": "0517d768-6d49-4039-b6ce-dd1ebfc0f970",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6a2824d8-83bd-45dd-87ba-79d691445838"
        },
        "item": {
          "id": "e7232cbc-b0da-4263-89a0-fbffcc42e696",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fbb5a4d1-28e3-4723-9280-ce18baf5e1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f181a22-c3d4-414f-ae09-303215423bdf",
        "cursor": {
          "ref": "801adba6-778b-4627-af70-a68a1b99fe6f",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1eaf5b5f-16a2-4038-abcc-3f34c5acd208"
        },
        "item": {
          "id": "0f181a22-c3d4-414f-ae09-303215423bdf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d7147574-081b-4d31-b240-c025d993ccbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef907d5-0bed-4817-bec8-9cb63017191e",
        "cursor": {
          "ref": "879fac89-5d89-4f47-95d5-215381ba5b9c",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f4ff4f51-0e13-45ec-b147-5b4a73cceb91"
        },
        "item": {
          "id": "8ef907d5-0bed-4817-bec8-9cb63017191e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3af83bd0-391d-4084-9f83-16d0764931b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cac048b-cb94-4150-94b1-067aa89b1c01",
        "cursor": {
          "ref": "9526895d-0c6f-4510-86a5-9719c7b637f2",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8670fea2-32ed-4f01-b6da-42e2dcce3c7b"
        },
        "item": {
          "id": "2cac048b-cb94-4150-94b1-067aa89b1c01",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9982cff1-4b93-4f41-b17c-caa5a0fb1264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cecdd0-22c1-41e8-9f0c-0f581a293c72",
        "cursor": {
          "ref": "3582faf8-07c3-4662-99a6-db332e12c0cc",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1b49a9ba-ead9-4129-87e7-462c94bcb7cd"
        },
        "item": {
          "id": "46cecdd0-22c1-41e8-9f0c-0f581a293c72",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "45923245-8c7c-4172-b8ca-1ac44a37de19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f41b77-2c17-456e-92dd-99f2f844bbfd",
        "cursor": {
          "ref": "8b5b478c-8384-45b1-88e8-35956b109bce",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9cdd42bd-bfda-43e9-93f5-ef225d75e66d"
        },
        "item": {
          "id": "22f41b77-2c17-456e-92dd-99f2f844bbfd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "86495161-240c-4277-aef5-6486d2089592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f0a7c7-d966-4d74-8bdc-b9dccc467691",
        "cursor": {
          "ref": "9fb98ec9-8c0e-4a13-87a1-9dac53030a35",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5829e6f9-6dc5-44fe-af87-87a568ef06df"
        },
        "item": {
          "id": "90f0a7c7-d966-4d74-8bdc-b9dccc467691",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "99e38990-00e6-401c-9dc4-68461d55c374",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "4ee21dbd-f515-4743-beca-ebbda2cd8192",
        "cursor": {
          "ref": "c8bbf543-a8e6-4324-bee1-84f39fac03dc",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a471ae2e-1aae-493d-bd01-e8a0ee7be7cb"
        },
        "item": {
          "id": "4ee21dbd-f515-4743-beca-ebbda2cd8192",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4bcca2d6-8450-44e5-82f7-cc01a1bf0f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca5a97e-0009-4a82-aba6-2efc7840467e",
        "cursor": {
          "ref": "01296473-d958-466f-b0cb-5a6a6088e074",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "021ffc5f-c8cc-43c1-a73c-16b0bec80ba0"
        },
        "item": {
          "id": "7ca5a97e-0009-4a82-aba6-2efc7840467e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "85212ae5-1024-4004-8642-dd6011618c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091b7f8a-d41b-49d6-b61e-1c2e76a228af",
        "cursor": {
          "ref": "b72d8660-b90e-4f3f-ba65-7193aaf65fe3",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "07d65b88-648c-4a1e-8c65-49eae0c8cde2"
        },
        "item": {
          "id": "091b7f8a-d41b-49d6-b61e-1c2e76a228af",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "09823cb8-8745-44df-ab99-fe986b24435a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a8c100-b009-49b3-974f-61cc5c592c14",
        "cursor": {
          "ref": "a1af65a2-e8b9-4f22-b702-824dae8c615c",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1b6dd23d-823b-40d9-b24f-d8fac4987ba0"
        },
        "item": {
          "id": "e6a8c100-b009-49b3-974f-61cc5c592c14",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "45ecdfdd-c0d7-4807-89da-16037cf94016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ea19c6-febf-4ff0-96d7-cc47e36cf54c",
        "cursor": {
          "ref": "30465d86-f305-47d2-892d-063ea7766a4f",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8b48a261-6df3-43cb-9d70-a39cf4ea215d"
        },
        "item": {
          "id": "76ea19c6-febf-4ff0-96d7-cc47e36cf54c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b34edc27-ed46-4228-9ddb-394f9cf3c50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d86f2dc-e135-482a-b4bd-4642085495e0",
        "cursor": {
          "ref": "932a2313-7097-4dc8-97c5-0dfddcbbe7f7",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "58cfce4c-5b56-4770-8793-4a3fb4a9c040"
        },
        "item": {
          "id": "6d86f2dc-e135-482a-b4bd-4642085495e0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7e3e2d0e-2ae8-4834-a9ac-52ed6361c648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e5ff41-1631-4e0b-86c0-2694a9d11dd2",
        "cursor": {
          "ref": "d9c508de-d981-4605-b974-edd7d4cb1f68",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8d7fc764-b9ec-4228-9158-c1fd7009889a"
        },
        "item": {
          "id": "a9e5ff41-1631-4e0b-86c0-2694a9d11dd2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "631870c2-e01b-40bc-92de-f13976960de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878b87de-5f37-4917-8b76-67c2b1c70bae",
        "cursor": {
          "ref": "8b8f30a3-ea17-401a-aaba-0c23477bd688",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2a1b8ec2-5f1b-4b89-bd23-fcea14ba109c"
        },
        "item": {
          "id": "878b87de-5f37-4917-8b76-67c2b1c70bae",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a7137dd9-3ab2-40cf-afae-56a14735431f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbe803f-8815-4cfd-b05d-12e551b69c38",
        "cursor": {
          "ref": "9f8e1e57-9d7e-4482-abe5-60d7bb499275",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "34ffeee6-c3a3-485b-ad72-5541d867d5d5"
        },
        "item": {
          "id": "dbbe803f-8815-4cfd-b05d-12e551b69c38",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "59f01d4e-6a6d-475a-8d5f-ab757ce7e175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69486ef-9bb0-47dc-b53c-7f96df8040ba",
        "cursor": {
          "ref": "2114386c-d68b-4f5e-8a09-d8cd322867f3",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e0666db8-a501-4ef4-b4a8-ff3773efca9c"
        },
        "item": {
          "id": "a69486ef-9bb0-47dc-b53c-7f96df8040ba",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6d2ebbf1-7920-40fe-8441-48196b2c4e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e24f6d9-361c-416e-b8df-f35a1dbd50ea",
        "cursor": {
          "ref": "930a771a-c974-4aa4-b909-cf6d64c252b0",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0f162605-56a7-4b63-946e-a50e7c041653"
        },
        "item": {
          "id": "0e24f6d9-361c-416e-b8df-f35a1dbd50ea",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "19224cd6-c7bc-4ffe-8c9d-d9c60606e9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ddca10e-29b5-45a7-b465-fc4edabd43e5",
        "cursor": {
          "ref": "be30276f-f45e-4683-a808-d869ef0893bf",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "aaa405ed-727b-4f78-ac84-d0579df9ba5e"
        },
        "item": {
          "id": "2ddca10e-29b5-45a7-b465-fc4edabd43e5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4a9d6a36-0f1d-4e88-951c-967d24e60826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa184a4c-21b4-4a73-a412-265b2358076d",
        "cursor": {
          "ref": "c0165a62-daf8-41c1-8e44-a737a6e450ab",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "00ceb63f-1e68-48be-b7fc-10b37040ace0"
        },
        "item": {
          "id": "aa184a4c-21b4-4a73-a412-265b2358076d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4d7cb78a-3e8a-4953-8f63-3a8de4053cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d63a7f1-e879-4752-b439-467958ef9dae",
        "cursor": {
          "ref": "109f871b-93bd-4b2a-a1d5-5781d10c0dc8",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "97e88e56-5001-4989-9210-80da8bfd787e"
        },
        "item": {
          "id": "6d63a7f1-e879-4752-b439-467958ef9dae",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b7f3a8c1-7ede-4c00-81a7-6a4a2d1b4db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564df69a-8dac-4a24-919c-2e35f8d9d0c6",
        "cursor": {
          "ref": "e2cb1bfb-dd0f-4b97-a18d-2c1742e89240",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3db51bd5-f095-48c4-a4a8-d5282a2463a0"
        },
        "item": {
          "id": "564df69a-8dac-4a24-919c-2e35f8d9d0c6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "70a89c51-6bff-4e5e-ba4f-92cedda5e0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c7df90-2a1e-4cb1-ba9d-be2e2de4eda0",
        "cursor": {
          "ref": "99ae5398-cf71-40d3-9177-cc5adef27cc8",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3f24d16c-6046-4522-97d0-3d2e5d07e879"
        },
        "item": {
          "id": "75c7df90-2a1e-4cb1-ba9d-be2e2de4eda0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e279cca6-af94-4f92-9794-4d3cccf6d7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6d669f-f75d-4dbf-99ae-e08c96c04d3a",
        "cursor": {
          "ref": "c30af67e-2bd0-4895-ac11-92c8d8ec5e42",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "54725da4-9df9-4606-b223-10dc591893c4"
        },
        "item": {
          "id": "0a6d669f-f75d-4dbf-99ae-e08c96c04d3a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5528d7d2-03b7-4dce-aef4-b407c49859fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f31eeb-94c5-4219-a78b-85d434a9aabc",
        "cursor": {
          "ref": "9baec3c7-28e5-4553-97e4-70ab221e923d",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "25325b94-f172-4fc5-9c6f-bcce9c40eeae"
        },
        "item": {
          "id": "81f31eeb-94c5-4219-a78b-85d434a9aabc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "661c1b30-3307-4b58-87bb-1b235573d1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb325744-b238-4b0b-9bfe-f35334fcced9",
        "cursor": {
          "ref": "881f9c29-d88e-4e9d-8c17-b81da6a88ffe",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ac0d23a2-a800-4ff7-a345-e0037c9b48a1"
        },
        "item": {
          "id": "eb325744-b238-4b0b-9bfe-f35334fcced9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a29a4c90-dd53-4499-aafc-c900c14c8034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e79053a-a948-4649-bc34-0a79ead06eff",
        "cursor": {
          "ref": "9eed4010-8b28-4d5d-ae1e-7c5a95691527",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b2ade6f7-52bc-4b12-a386-9455471d6a6f"
        },
        "item": {
          "id": "7e79053a-a948-4649-bc34-0a79ead06eff",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "44c3996c-c884-440f-a4d5-791581949a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2586326-be4f-4f59-8dbb-ebcea7c449f0",
        "cursor": {
          "ref": "02d9ee26-4e12-4405-80d9-e8e004764b0c",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fd8d5665-de75-492c-9d11-4f634dd7aaa1"
        },
        "item": {
          "id": "d2586326-be4f-4f59-8dbb-ebcea7c449f0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cc6001de-8b2c-4fe7-902c-05f2ff57aa0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9965e2-8472-4927-a1bc-b18cfb4d09ee",
        "cursor": {
          "ref": "ca03545c-70f9-4707-a4d4-15eb43730425",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cdb23d1d-951e-472c-ac1f-52c5657cf492"
        },
        "item": {
          "id": "fb9965e2-8472-4927-a1bc-b18cfb4d09ee",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a2e6b485-7b61-425e-8b72-e1f5ebdbb469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90fa08b-7e75-4fa5-9928-b192925abe50",
        "cursor": {
          "ref": "b797d511-1a96-4620-8c54-0cf258c8c9eb",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bdd2d5ae-9a79-4212-8e33-d291d058399f"
        },
        "item": {
          "id": "c90fa08b-7e75-4fa5-9928-b192925abe50",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "53b31a9b-f9e7-4651-89a3-9938e269f0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f64eb70-43d4-4b3e-ac02-dd9ee5329946",
        "cursor": {
          "ref": "f835712b-cc09-4e40-a6b8-ee140006d0b8",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c6d1a7a0-4401-4980-85a7-d0b508d2a726"
        },
        "item": {
          "id": "0f64eb70-43d4-4b3e-ac02-dd9ee5329946",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bb94e70a-2669-4192-9357-7aced5bf09cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52222058-b460-4640-bab3-759dbf33cec3",
        "cursor": {
          "ref": "d5706225-e9e7-4316-a544-f2e516d1c1d9",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "98b52f67-75d5-4931-b0c7-7f8cb032c475"
        },
        "item": {
          "id": "52222058-b460-4640-bab3-759dbf33cec3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6153ce6c-0a22-454d-ae7c-d043f15fa8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91e380d-b027-4909-9449-b4bcde1f54b9",
        "cursor": {
          "ref": "8976674d-7f15-4485-96f9-bc04e5923b9b",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ed9725b7-bfc2-4d82-8d86-c0fb3089bd21"
        },
        "item": {
          "id": "f91e380d-b027-4909-9449-b4bcde1f54b9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "87f93b5c-f2df-4cb4-a6f1-5d1a3d34c7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "a29fefb7-9ddb-46de-8b1f-c5dca0a288db",
        "cursor": {
          "ref": "c73f2557-ab55-45ba-98c8-b1484110b346",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b745f3b8-b840-4425-8615-fed1f256fd4f"
        },
        "item": {
          "id": "a29fefb7-9ddb-46de-8b1f-c5dca0a288db",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "be1dbc6d-bc98-4727-807b-e528b7ed13f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "dfb66cd7-8e50-49fa-a92d-7567b6e61e97",
        "cursor": {
          "ref": "6e6db47b-48d0-49a4-8029-3533905820df",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "079ddead-a0af-4df8-baa8-188a32e10295"
        },
        "item": {
          "id": "dfb66cd7-8e50-49fa-a92d-7567b6e61e97",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "17e186db-b3ca-42f3-a824-4cbcb62b4bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb66cd7-8e50-49fa-a92d-7567b6e61e97",
        "cursor": {
          "ref": "6e6db47b-48d0-49a4-8029-3533905820df",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "079ddead-a0af-4df8-baa8-188a32e10295"
        },
        "item": {
          "id": "dfb66cd7-8e50-49fa-a92d-7567b6e61e97",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "17e186db-b3ca-42f3-a824-4cbcb62b4bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fec57e0-821b-4895-b803-c46bda0ef6db",
        "cursor": {
          "ref": "30949609-dbca-42d9-ad9c-5f44d7a71be9",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "620fe30e-5c72-4383-a500-911b217ceaa6"
        },
        "item": {
          "id": "6fec57e0-821b-4895-b803-c46bda0ef6db",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5c376169-414d-4984-8e59-f0b001683425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4516e5-0f2c-4e5a-bc6b-2867c14c3a7f",
        "cursor": {
          "ref": "c7c76e8c-0ff7-4ada-a467-db7dc04d80d8",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "79cbddbe-6b0a-4609-acf4-85ffd2a70641"
        },
        "item": {
          "id": "8f4516e5-0f2c-4e5a-bc6b-2867c14c3a7f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fb9fd741-1554-43ad-bec5-e95a09b98c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afdfc31-85e8-4da0-88f3-6299f56aed00",
        "cursor": {
          "ref": "70309c5e-1187-47e3-85df-0de096357f46",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7d3f5996-e366-44d8-9eb3-657607fa4d72"
        },
        "item": {
          "id": "2afdfc31-85e8-4da0-88f3-6299f56aed00",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8bf56533-a652-4776-992b-48cc121c2de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf09fc8-39d9-4ba1-89c9-d475c1f56501",
        "cursor": {
          "ref": "b76c55ce-b2f3-4fea-9561-7e8b65597202",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c0eca4a7-a5c0-4ea9-9224-d77241a99e2c"
        },
        "item": {
          "id": "bbf09fc8-39d9-4ba1-89c9-d475c1f56501",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6f11eda5-b264-4a18-bd09-affd86a3e28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988ee1c4-8d5b-4f75-ae26-0e77bb271bf6",
        "cursor": {
          "ref": "5a9458b6-1dc4-417f-b05c-63f0900fc7a2",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b39bcffd-211c-4bbe-94db-b4dd04ab3fe9"
        },
        "item": {
          "id": "988ee1c4-8d5b-4f75-ae26-0e77bb271bf6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6b7ddb1a-b0cc-4932-ac90-7d0cdef56cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6327e5-699e-40bd-9e10-dbb41126fc34",
        "cursor": {
          "ref": "c5c713d2-7042-4294-98dd-b88bb49d5dea",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "150c3f5d-7cce-4caa-b780-0c7e92ea4ff8"
        },
        "item": {
          "id": "ea6327e5-699e-40bd-9e10-dbb41126fc34",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9424d669-2a5b-4785-b191-723867d475e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8d579c-3955-4b75-a571-dfd85c8d4acb",
        "cursor": {
          "ref": "2ff3fa31-2326-475e-b248-bf6c2a9c86d1",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "951026b8-f125-49bc-8d09-51a0d5cab299"
        },
        "item": {
          "id": "eb8d579c-3955-4b75-a571-dfd85c8d4acb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9e3a85d8-5453-4e3d-93fe-b94fbb417fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b04baf-1d8b-4079-9ed4-cec3baebb06d",
        "cursor": {
          "ref": "a67f988f-a1a6-4058-b874-c1a1b2834432",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "736650a3-1c91-4611-b0b8-54b19048e7e1"
        },
        "item": {
          "id": "69b04baf-1d8b-4079-9ed4-cec3baebb06d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "049ab2f6-bf51-45e7-af38-8fa10c2bcc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa88afe-f7c1-4c2b-b225-629321e3cfbb",
        "cursor": {
          "ref": "8e0105f2-87e5-4d0a-927c-0d3961712db8",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "70130f9c-ecc5-4c5f-9aae-17c70cf8caec"
        },
        "item": {
          "id": "8aa88afe-f7c1-4c2b-b225-629321e3cfbb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b98bddfb-7744-4474-8ddb-06d3919c4994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51b9ff1-7b8c-46cd-943b-f0f81b5b608b",
        "cursor": {
          "ref": "b55bf6b5-0c36-46c4-831e-d5833abcd38e",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9b31de07-4357-42b7-9272-ff75e23858e8"
        },
        "item": {
          "id": "b51b9ff1-7b8c-46cd-943b-f0f81b5b608b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "281ac367-8ec7-414f-9bd6-c2637a7372a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d870b7-75ee-40b6-aaa6-6cbab59903d9",
        "cursor": {
          "ref": "ffd46cff-d792-482b-930c-431b7a5e52a9",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cc1d864a-8668-4309-b49d-5dba622144c4"
        },
        "item": {
          "id": "c1d870b7-75ee-40b6-aaa6-6cbab59903d9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "db4e45ac-fe1c-4ef8-b714-c6c245a073e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0db03b3-2a28-4d4a-95c1-e8bf9524af34",
        "cursor": {
          "ref": "84f4694b-d2ce-4912-b74d-4c5150669ff0",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0069edae-074d-4522-a07a-aa4e570d7eaf"
        },
        "item": {
          "id": "c0db03b3-2a28-4d4a-95c1-e8bf9524af34",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e696a98c-5526-4165-a502-7d0b6fe4af4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564c34b1-90d6-44bc-b797-dddaa8dc9955",
        "cursor": {
          "ref": "612ee2a4-f4a0-48d8-9655-89774c0bdef6",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ce0769d0-0a89-4a17-bd14-5fa29139403d"
        },
        "item": {
          "id": "564c34b1-90d6-44bc-b797-dddaa8dc9955",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3eec751d-379e-4b2a-b949-31c1d4ab12c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9529e74-90bc-4552-a708-b77d1aa8e831",
        "cursor": {
          "ref": "f64dfced-f129-4517-8515-f6cdc5555a69",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "48d9f1b0-70ae-4a94-bc0e-9947b8fe0f3a"
        },
        "item": {
          "id": "f9529e74-90bc-4552-a708-b77d1aa8e831",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9cb1d57c-6c38-4169-985d-110b1cd4c641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137837a8-3ac2-4513-9c80-e826ba4153dc",
        "cursor": {
          "ref": "7cf71831-121c-47e7-9bff-2440da543057",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cb99ee6c-0b09-4933-b33a-62c970e450a2"
        },
        "item": {
          "id": "137837a8-3ac2-4513-9c80-e826ba4153dc",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6092042e-0e1a-45de-a16c-0c7988fd03dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdb51d5-0631-46de-a170-9c04ead02378",
        "cursor": {
          "ref": "03bf9468-c49b-45d9-a9db-2c7ecaba403d",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ee542bde-058e-49cf-b27f-5fb7f2c13ca7"
        },
        "item": {
          "id": "dcdb51d5-0631-46de-a170-9c04ead02378",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "40dc4da3-4503-4f89-ac0e-44de957cebec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87edfe99-4a7d-4adb-a697-556a90af0eab",
        "cursor": {
          "ref": "79cae4fc-a7d8-42d2-a2a2-6a9ac8221267",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5a122133-37b1-40f4-a4e7-f3d39a2e1238"
        },
        "item": {
          "id": "87edfe99-4a7d-4adb-a697-556a90af0eab",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "fb99d910-ec09-445d-a75d-1facd07c834a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b9d4b2-05de-4af7-986e-3a8df7bcfca9",
        "cursor": {
          "ref": "5bd51138-8b64-4ffc-a89d-61cbcfd331e0",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4badd927-ec71-4add-afb8-2d380468774a"
        },
        "item": {
          "id": "24b9d4b2-05de-4af7-986e-3a8df7bcfca9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "98a71291-2f9c-48d8-a36e-a6d46b9ca750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38c33e1-e429-4156-bf8c-8e197f019b2f",
        "cursor": {
          "ref": "879df37a-d985-47d2-b238-7ed7bf195e71",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "94c11046-08bc-4b75-a46f-6ab2a03011e8"
        },
        "item": {
          "id": "a38c33e1-e429-4156-bf8c-8e197f019b2f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "87f8b2b2-8aa3-46dd-998a-2a61e29e2edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3069725-2b10-4e88-baf6-4c5cfdfc2e45",
        "cursor": {
          "ref": "98a9dfdb-7352-49d7-9734-3ebf9a3c4c46",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d72a411a-65ae-40ba-8cd5-9cee97392d8f"
        },
        "item": {
          "id": "d3069725-2b10-4e88-baf6-4c5cfdfc2e45",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6d3ba820-4c46-4f52-aa83-8d226d231bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352dac80-1dec-4bda-8128-9ea271049726",
        "cursor": {
          "ref": "4e45fe73-fb2e-4952-931f-727eb43d74db",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e19eda84-0193-4b75-80a2-9b3f46be6521"
        },
        "item": {
          "id": "352dac80-1dec-4bda-8128-9ea271049726",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dc9d5036-4d63-44ea-b33d-22bb34214e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fb5879-0208-40d9-9d98-3e28a0d0d657",
        "cursor": {
          "ref": "ff63a519-1c64-4f7d-8edb-47418b0b4da9",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "658d638f-2b2c-464e-83ad-bd8bd7d9e951"
        },
        "item": {
          "id": "d4fb5879-0208-40d9-9d98-3e28a0d0d657",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c7ffdab7-1fa1-4813-8345-7140853bdcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f176353b-7930-47c4-8c5c-b7588e3d7a40",
        "cursor": {
          "ref": "ecd9789b-f539-4730-812e-8a0c33150a23",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0009e5b8-7e57-4f51-9755-ff5f862e2207"
        },
        "item": {
          "id": "f176353b-7930-47c4-8c5c-b7588e3d7a40",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c5974ed0-f0da-4a16-9c8d-6e0d3ad9860d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f506714-b124-41c6-9169-d61bef361ae0",
        "cursor": {
          "ref": "01dee1e4-af1a-4668-b4ea-ca560d52d58c",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "cc33e9e7-85f6-4053-9368-b6495629777e"
        },
        "item": {
          "id": "7f506714-b124-41c6-9169-d61bef361ae0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e9f35d06-3710-4bab-a857-37940965e49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f20d4c-c806-4653-a9dc-8427cc8b6976",
        "cursor": {
          "ref": "c65cd7a4-0ee3-4e96-a5f4-d7ddfa047e82",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "31460893-115b-4010-b53e-1e443a020fbd"
        },
        "item": {
          "id": "31f20d4c-c806-4653-a9dc-8427cc8b6976",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c548ac38-97f0-4eae-a442-1d67be7654cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08a8c15-b166-4d0d-8e0f-7b08b4e639f1",
        "cursor": {
          "ref": "603e8bd4-24c8-4384-8095-fc801471e90d",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "82fcf76c-4e82-4009-8e73-70b1cb1ccbe1"
        },
        "item": {
          "id": "a08a8c15-b166-4d0d-8e0f-7b08b4e639f1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "22a6164f-d11a-4169-9854-87cd0403663c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60cfb08b-8c3d-4d51-b17b-aff50655cdad",
        "cursor": {
          "ref": "686d732e-9792-4136-b435-b572fa64d978",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c410d094-51dc-4cbf-b87f-1251bb84a4b2"
        },
        "item": {
          "id": "60cfb08b-8c3d-4d51-b17b-aff50655cdad",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e0253142-74a0-4643-87ca-76772d0df290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af1da0f-c4f1-4887-b312-493803c9a572",
        "cursor": {
          "ref": "20d913b1-55d1-49f8-bc35-265d143dc54f",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "890da660-2453-4764-9435-098ecbf25101"
        },
        "item": {
          "id": "7af1da0f-c4f1-4887-b312-493803c9a572",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d5db5f29-d900-4416-966b-e8c6509aceb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a8733f-b67f-4a74-b330-ed2097300122",
        "cursor": {
          "ref": "097e7c9e-6f8b-46ce-8949-5ec2d4626129",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "76800909-49ca-4d79-afc2-cb819a1771fc"
        },
        "item": {
          "id": "15a8733f-b67f-4a74-b330-ed2097300122",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4528cf38-70c7-4eb0-a680-3347803865c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb0d1de-1ea5-4f78-a851-38daf209678c",
        "cursor": {
          "ref": "4373ee36-b1c3-4c7a-8b2e-8ac470232184",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7c038fb2-b3fd-47a2-8906-c47c3ea47aa0"
        },
        "item": {
          "id": "8fb0d1de-1ea5-4f78-a851-38daf209678c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f9eb801e-5aa6-44e5-8f44-fa77fcbd8b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11002687-aa23-4a6e-9694-560d2e6c5c77",
        "cursor": {
          "ref": "b18d970f-c747-4652-a3fa-90c9ee19019f",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f8091ce4-1ebd-4883-81fd-129af580fb22"
        },
        "item": {
          "id": "11002687-aa23-4a6e-9694-560d2e6c5c77",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "89542671-9b40-4bc7-bbd7-9dc03f75721e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046fe2df-8331-4381-9d03-9d90b54db1b9",
        "cursor": {
          "ref": "a9381273-360c-45fa-91e6-fec3e0d9fc36",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "66183a9a-d578-415f-bc20-5e096d063fbc"
        },
        "item": {
          "id": "046fe2df-8331-4381-9d03-9d90b54db1b9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "67fbbd15-13b4-4a8a-8467-f402d02c9d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754ba958-ccfb-471b-a0bd-50aab00cf1e6",
        "cursor": {
          "ref": "b044b776-6f2d-4f0e-a506-e5db843f3b17",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a7cac2a0-245d-4768-af51-3596b11c7e63"
        },
        "item": {
          "id": "754ba958-ccfb-471b-a0bd-50aab00cf1e6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f0b58c65-7055-40bf-a9a2-b0576bee7334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7964684-8368-4db0-83d9-84f4a204517e",
        "cursor": {
          "ref": "226ce0cf-9c91-409c-95bd-1bf277e4c938",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8ad7caa8-80ec-4347-9832-438b80342c33"
        },
        "item": {
          "id": "e7964684-8368-4db0-83d9-84f4a204517e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9fa114c3-ff1d-4e8c-920e-e1c865cba70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e06e99b-002c-47cf-aa82-656f70e186a5",
        "cursor": {
          "ref": "0e692468-c60f-4ca4-afa1-fe21e6a14355",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b6b3f461-a872-4561-b275-6049e6417237"
        },
        "item": {
          "id": "6e06e99b-002c-47cf-aa82-656f70e186a5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1888360b-3f27-428f-bd3e-821d1020eebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf93bca-9273-45a6-95f4-efcd82cb8fad",
        "cursor": {
          "ref": "da6fb5f1-3067-4420-a8ce-21ba60e0d1c5",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "81508da6-b9e6-418c-9018-e110174b8e5c"
        },
        "item": {
          "id": "ecf93bca-9273-45a6-95f4-efcd82cb8fad",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "73255cfc-5fc2-47b6-875f-97381d6a486d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a12519-5ed3-4498-850f-dbf84456a449",
        "cursor": {
          "ref": "c74619f1-05aa-4df3-866f-322e9f279e51",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9bc777ae-59fb-4f69-a981-5a4ca43ab8c9"
        },
        "item": {
          "id": "d3a12519-5ed3-4498-850f-dbf84456a449",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d6f0ec1b-8597-4a2f-a160-10a63ce1aeb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f9d8d7-c9b3-4aff-bede-830290d4ef89",
        "cursor": {
          "ref": "3db722bd-59e0-4c13-945e-86174e1a49c8",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b169090c-8b7c-4615-88fe-a6ee85cb7dc5"
        },
        "item": {
          "id": "37f9d8d7-c9b3-4aff-bede-830290d4ef89",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0e3b61ea-421b-4738-ab80-5c9fcca4809b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05be7f2c-0998-419b-843b-700c44741c25",
        "cursor": {
          "ref": "71e9fd05-fb15-48c6-8a78-77f0c23eb6fe",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ebe70864-1a1a-4d41-886a-cb71a05074a8"
        },
        "item": {
          "id": "05be7f2c-0998-419b-843b-700c44741c25",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "965b56a4-a88e-4f29-89f5-0861dcb529c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6620e4-84d2-4cc0-8149-d15dec597241",
        "cursor": {
          "ref": "a54d4a9d-d5a2-443d-b8b1-dc7aace5eeee",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "422e5ba0-d883-4a11-989e-cc4b7f82ed61"
        },
        "item": {
          "id": "ce6620e4-84d2-4cc0-8149-d15dec597241",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4ad9f5e1-ee11-44bf-872d-ecdd815ef3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e545fb2b-820b-4072-a8e0-b1f709f47138",
        "cursor": {
          "ref": "4a95df92-3cce-4ab8-ab84-56e145ff3a50",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b202fa95-1f32-47fd-899a-079f78aa4dd2"
        },
        "item": {
          "id": "e545fb2b-820b-4072-a8e0-b1f709f47138",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8553620a-8f3d-4fbc-b242-53f1b1ea3cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2e5dd3-5b64-406e-934f-1a95f9aa94dd",
        "cursor": {
          "ref": "386efda8-3821-46ae-96ae-9cb64c1f4025",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b797c8f8-53c7-456e-a4ba-12058f76a4f3"
        },
        "item": {
          "id": "bd2e5dd3-5b64-406e-934f-1a95f9aa94dd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "114fd147-3e2c-4a05-823c-c71fe5041a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9302c05-4a25-4073-8144-eadc1c3d741e",
        "cursor": {
          "ref": "678b6d72-96dd-4efc-aad9-1479956b903f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6a811a8b-f2f7-4878-9c58-f9db0bf6fcd0"
        },
        "item": {
          "id": "b9302c05-4a25-4073-8144-eadc1c3d741e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4e991a45-1109-48c1-a20c-6552850ce21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d091ba-f426-4c8b-9e9f-af65e903d6cb",
        "cursor": {
          "ref": "0d990d42-0da9-446a-9e37-6b7c97df63ac",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cc460f2f-d934-482e-b8c6-9fd2a6799a65"
        },
        "item": {
          "id": "42d091ba-f426-4c8b-9e9f-af65e903d6cb",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d14c7437-4876-4d25-9dd3-cba84d20cb3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4424dd4b-d008-4b32-8bc9-8ec559dd80fd",
        "cursor": {
          "ref": "f33216e9-73ff-45ef-8916-6db5ec156d48",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "62650368-529a-47fa-9759-2d0abe00ec9a"
        },
        "item": {
          "id": "4424dd4b-d008-4b32-8bc9-8ec559dd80fd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "948e5a2e-d51f-4463-a862-544d88f2a0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d4a778-4721-475b-b6d1-884c4d48b3fd",
        "cursor": {
          "ref": "feaf6767-6221-4de2-9622-5a18cadcfde9",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bd7d2405-447c-4a0d-88e0-3b6797acf3e8"
        },
        "item": {
          "id": "85d4a778-4721-475b-b6d1-884c4d48b3fd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7ffc102b-b53b-400b-b3e8-26e8709c3c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2832e370-115c-472e-92b3-604662cc8b25",
        "cursor": {
          "ref": "3c815647-bdcd-42e4-a863-a11e5a276da1",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f1198112-0a0b-445f-9d38-6eda1cd80ae3"
        },
        "item": {
          "id": "2832e370-115c-472e-92b3-604662cc8b25",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "dc81e6e6-7534-4dd4-886f-9c2fa5d6e7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda1ee54-0cfd-4f21-9b77-683e356fb547",
        "cursor": {
          "ref": "0d02e34f-7d34-45e7-af07-5c7acd3afe1d",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9d72fb05-a984-482b-88c1-10b1b50b742f"
        },
        "item": {
          "id": "bda1ee54-0cfd-4f21-9b77-683e356fb547",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4589a6b7-0c2f-41bc-89e6-140fb9846e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6584abf9-426c-4d55-9103-75c17d65c868",
        "cursor": {
          "ref": "851bfc5a-0921-4dec-9457-eed56c5306f0",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f0bf45ab-f5b3-4d22-9263-b5c2a991f026"
        },
        "item": {
          "id": "6584abf9-426c-4d55-9103-75c17d65c868",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e801f2ca-0353-4225-97cc-f52b88e146a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce8137b-cf79-4b10-ac30-6e030f3c7d4c",
        "cursor": {
          "ref": "7c3a0063-9dd1-4bea-b726-f262d9fd6315",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f65a6b3e-8206-4a82-af41-35d150cac9a8"
        },
        "item": {
          "id": "2ce8137b-cf79-4b10-ac30-6e030f3c7d4c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8e53eb24-f657-4e34-abf7-d109ce1f2bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c948f2c4-e4bc-476d-bcd4-28e0055b76c9",
        "cursor": {
          "ref": "1c6957ff-6274-4cad-a3da-80abda6a2eb7",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4fe114bd-b6e7-444b-b321-99a19a4bc16c"
        },
        "item": {
          "id": "c948f2c4-e4bc-476d-bcd4-28e0055b76c9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3c7884e1-86af-4920-940b-c21858d2ff6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0cdfd7-422b-496b-bde5-c123cb0dee53",
        "cursor": {
          "ref": "eddd84fb-8932-4ab6-8bc6-9ebd2dbd4210",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "919383df-7f92-4d4b-9000-b45a87907242"
        },
        "item": {
          "id": "1f0cdfd7-422b-496b-bde5-c123cb0dee53",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "01f9ab0c-20d9-4d0f-87ac-e442e38a26b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42db35c7-103e-47c8-ad6c-7b3ffeb896ff",
        "cursor": {
          "ref": "3603d5e7-fc4f-46b9-8d58-e27ef2344260",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a9114156-1027-48a8-a45d-2bde3cf2fcc1"
        },
        "item": {
          "id": "42db35c7-103e-47c8-ad6c-7b3ffeb896ff",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dc8d2b35-6dd9-4d37-9f10-68b295685413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ace94f6-e7eb-4e67-a466-82cea3123dd4",
        "cursor": {
          "ref": "d0401df4-dba9-4471-8ba7-79425cd21b48",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5eeea0ee-a264-4a72-b806-215aeeeac58c"
        },
        "item": {
          "id": "5ace94f6-e7eb-4e67-a466-82cea3123dd4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9e38d463-000d-401f-a1fd-278dce0c0bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430232bc-5da0-44de-8170-5e225ae1092c",
        "cursor": {
          "ref": "5fc842e2-e5a2-487b-80b3-33d1672a5a5a",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5e181fd8-75c7-4309-aca1-f4c37a6b8065"
        },
        "item": {
          "id": "430232bc-5da0-44de-8170-5e225ae1092c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0d52d8ff-e12a-4b22-952f-e9dfe6a4c0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7bdbb7-a1e7-4747-8dc5-ca6ca31a920f",
        "cursor": {
          "ref": "e5a492cc-5b41-4a38-bf1d-44cbf520cbcc",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c9ed2b83-1ec1-42d5-aa3e-2c02e4161fdd"
        },
        "item": {
          "id": "7f7bdbb7-a1e7-4747-8dc5-ca6ca31a920f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b932b509-4f89-4711-9c4e-8369773a941e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea8faea-edb1-4db5-9764-d8918db1aea5",
        "cursor": {
          "ref": "a8dda77c-4ddf-4f32-b861-5d868884f52a",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f40ce9a7-1f26-432e-aa80-e01b195d8052"
        },
        "item": {
          "id": "8ea8faea-edb1-4db5-9764-d8918db1aea5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "afda9cf0-c5dd-422f-af56-0befbd3c262b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ce15a0-b77e-4166-a510-c887e894e411",
        "cursor": {
          "ref": "ac395b45-e2b1-4809-a774-1af11872ab61",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3d3202f1-77e0-4afe-b1ab-e153445c31d6"
        },
        "item": {
          "id": "d4ce15a0-b77e-4166-a510-c887e894e411",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "98f62b6e-c819-4498-a612-3663ab32bc4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872d8b0a-2a37-4fcd-bbd6-d22603a25b73",
        "cursor": {
          "ref": "cab52d0b-1193-4675-9950-315b516ac5ce",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "db4d7c86-b84d-4ae8-83f4-aa5951fe575f"
        },
        "item": {
          "id": "872d8b0a-2a37-4fcd-bbd6-d22603a25b73",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c47393b4-3249-4eb6-b073-7ef207f0bc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8048344a-3123-49a4-a0a5-8f218c50dd78",
        "cursor": {
          "ref": "adf83a61-2fbc-4780-a50c-b83ddae6311e",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "805b9374-ff76-4d15-9c68-90131abbedb1"
        },
        "item": {
          "id": "8048344a-3123-49a4-a0a5-8f218c50dd78",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "80f7e3d4-2bc4-44f6-8eb0-31878a7eaf31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69eac770-4eb5-4cb2-9149-a7f7fb7010e7",
        "cursor": {
          "ref": "d51a0d30-3ffd-4c88-bc07-eccd6aa3b2c3",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9b12594b-beed-4596-ae48-5cacb5420477"
        },
        "item": {
          "id": "69eac770-4eb5-4cb2-9149-a7f7fb7010e7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1f10cef0-93e7-4125-8864-0c46d1881b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e48edee-b283-4efa-a0a1-c505541c80f3",
        "cursor": {
          "ref": "25789e4e-7895-4a67-af5a-0e3f09c367e9",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "53514050-b964-4ff0-979e-b9501e7abedf"
        },
        "item": {
          "id": "4e48edee-b283-4efa-a0a1-c505541c80f3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "96841412-d605-4ae6-8468-99fdcd97b5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcd4399-63f5-4d8a-92cf-f998d409d8b7",
        "cursor": {
          "ref": "268c1514-a4cd-4cf0-9988-25ea425a3d6b",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8abba04c-89e4-43e7-a651-f861b08708a7"
        },
        "item": {
          "id": "9dcd4399-63f5-4d8a-92cf-f998d409d8b7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1b25e49c-3f93-4d18-95f6-8a8c5a3d0946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46df1e3d-7005-49b1-b2ae-5f3458434ae4",
        "cursor": {
          "ref": "55aeaa5a-5229-4f44-9298-9c3af0b844f6",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7e4a6388-114e-4391-85e8-f2eab43de4a4"
        },
        "item": {
          "id": "46df1e3d-7005-49b1-b2ae-5f3458434ae4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4c57d976-54bd-4cae-a561-f07c02a6ec02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c8865b-7f16-4747-980c-28bcb44643ed",
        "cursor": {
          "ref": "d942942b-e554-401f-a067-268718964e1a",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4ab4caea-e858-4d58-8a46-a286adc48246"
        },
        "item": {
          "id": "30c8865b-7f16-4747-980c-28bcb44643ed",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "af4266c4-6d43-4b53-9d98-b4634b1e7cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29beec96-d89a-4c08-a83e-7b903329a1e8",
        "cursor": {
          "ref": "fcf74356-f707-446f-9e87-b5cb391b6a7d",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "beac5e79-b765-4c83-842e-3fd37875b53e"
        },
        "item": {
          "id": "29beec96-d89a-4c08-a83e-7b903329a1e8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "80b2c240-aa88-4fbe-a4b9-68d296f364f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a617f8b3-bd2d-417d-a918-4f217cbb5500",
        "cursor": {
          "ref": "a8eebf8d-6e9b-4865-b497-08318183086e",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "62df17cb-cc5b-48ee-8347-e102750cf58b"
        },
        "item": {
          "id": "a617f8b3-bd2d-417d-a918-4f217cbb5500",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2e8df713-45b8-4c6a-987d-27589b5d89f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424ee4e9-3cfc-4ec4-ba83-3ce130c72332",
        "cursor": {
          "ref": "8061def3-ea85-461b-9e20-7e448531a5fa",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fb9ff73c-08af-4d3d-a243-cbc7612a4162"
        },
        "item": {
          "id": "424ee4e9-3cfc-4ec4-ba83-3ce130c72332",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ae705a8a-1e75-4084-95db-bca0786084a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f6821a-30a0-43a0-a54e-3f6b50a37f11",
        "cursor": {
          "ref": "ea3c3e21-d79b-47b1-9ae2-03d8ace38836",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7d59aa13-0d0a-4fe3-a72a-1d130cd3d62c"
        },
        "item": {
          "id": "24f6821a-30a0-43a0-a54e-3f6b50a37f11",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d2a5aea5-3919-4c4f-813e-c6a2a3aa16be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7af3d0-3905-433c-ad74-c93ea41d20f4",
        "cursor": {
          "ref": "3b2ae6a6-14fb-49b3-a67d-04e8a56350a0",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "310b483e-27e5-473b-afb5-583dd9f4b914"
        },
        "item": {
          "id": "3c7af3d0-3905-433c-ad74-c93ea41d20f4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a1871f8a-e16f-4cac-8bd1-1ed67d8ddba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4aa95c-8148-4501-8c4b-74bfc881b8fc",
        "cursor": {
          "ref": "4b8dd0be-ad6e-413b-b436-af5fb9e3d2ba",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d451ca1d-6612-4b12-a692-cf138f919406"
        },
        "item": {
          "id": "0f4aa95c-8148-4501-8c4b-74bfc881b8fc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5e97ef39-9aaa-45ad-911b-d8af3d3ebe8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4458510c-f6f3-4ace-a538-23bf17e15bb0",
        "cursor": {
          "ref": "d8668f86-c15d-43e9-9275-85e5e1fcc97d",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "cd67ac37-ee79-451f-922d-8b2d9f84edd1"
        },
        "item": {
          "id": "4458510c-f6f3-4ace-a538-23bf17e15bb0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "623732ec-1a85-4cac-95ea-ff6d133b0b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed17d8a-8696-4a3e-a5cb-5349312c4f19",
        "cursor": {
          "ref": "0a087942-8b27-481b-8e72-a8641073fc0b",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e688cb5f-1898-42a9-a0b7-6b1c80abc6b2"
        },
        "item": {
          "id": "8ed17d8a-8696-4a3e-a5cb-5349312c4f19",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3ce57c0c-c044-4404-a6dd-f58c18952f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d13c5e-55f7-438b-8dd1-6f9dd5cc05c4",
        "cursor": {
          "ref": "98eed1a1-3a6b-4cd5-bb86-196a3cbebebe",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5df77439-7fd7-4301-bca1-74adc8fcf029"
        },
        "item": {
          "id": "52d13c5e-55f7-438b-8dd1-6f9dd5cc05c4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9a148370-3ce5-4bb5-8b34-770a9e4f08bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25def997-b145-4d8c-ba27-ec8d440b38cc",
        "cursor": {
          "ref": "0f9058c4-9dd0-4148-855c-d9662390e349",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ca36f07a-5905-47d5-8619-6fb35b83e893"
        },
        "item": {
          "id": "25def997-b145-4d8c-ba27-ec8d440b38cc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ef82a325-8f32-4cc3-be4f-e4cc5c4e65f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7cae58-b9ab-4749-9013-c5e82cbdf784",
        "cursor": {
          "ref": "8a6c4f5f-08a7-476a-9599-cd90a593cec5",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a0d11115-5f1b-4499-8380-21e85680bda4"
        },
        "item": {
          "id": "7c7cae58-b9ab-4749-9013-c5e82cbdf784",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6a7315c8-5651-460d-b2e2-154f2b64e269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79312cb6-3f39-4770-aed9-71c0ca1ffaca",
        "cursor": {
          "ref": "d6b7121c-dabc-4996-9003-88f8433a427c",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1761b479-f5ca-47c1-85c7-fe0d4f85ed38"
        },
        "item": {
          "id": "79312cb6-3f39-4770-aed9-71c0ca1ffaca",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0cf66043-8561-4b6f-92ef-5684cf47505c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81c91b1-0288-4f4f-ac33-5f3507ae703b",
        "cursor": {
          "ref": "1f41fe7d-f0d8-41da-b82d-7b578b46da2f",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ac84d4ca-e973-4162-97da-770df349ae26"
        },
        "item": {
          "id": "c81c91b1-0288-4f4f-ac33-5f3507ae703b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "05847848-86d7-4706-a726-086a10d012b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe567b5-4db6-4c35-8434-e5c8813affb3",
        "cursor": {
          "ref": "6496a2ff-7734-47ee-aad8-7ed1f1768cca",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2116fc14-fd9b-4301-9a12-ebba2b3a58b4"
        },
        "item": {
          "id": "7fe567b5-4db6-4c35-8434-e5c8813affb3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "00808939-aa49-4288-aa3b-a96d1558ca78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec176aac-c1c1-44f4-8fc5-7a404c2d769b",
        "cursor": {
          "ref": "01813320-f4dc-4eee-9b97-e3a17616de4b",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6ac78336-ffb0-46bc-8bb4-1d1be75ce09c"
        },
        "item": {
          "id": "ec176aac-c1c1-44f4-8fc5-7a404c2d769b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a31ae4d8-dee3-4b6a-a5f4-7ac67175532e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3438377-b751-4b74-a094-ff35e95b3f7a",
        "cursor": {
          "ref": "f85fd12b-d1a3-43e1-80ac-5ebd931aef1b",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "cf029610-f814-40bc-ad13-2394ff6b2f98"
        },
        "item": {
          "id": "a3438377-b751-4b74-a094-ff35e95b3f7a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "abc44cd4-51c3-4493-a707-4a7b75fb254c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7858344b-1f6d-4385-ab27-993356b5becc",
        "cursor": {
          "ref": "bf3e34bc-6cae-47b1-86b0-fb02d1a39275",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "efad41b0-255f-4554-9320-ad894dcc213c"
        },
        "item": {
          "id": "7858344b-1f6d-4385-ab27-993356b5becc",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0f090913-1c54-4f53-b91e-b286f3c704e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca59ab5-4a32-4b18-a16f-5289edfa57da",
        "cursor": {
          "ref": "e5203e9e-2a3e-495d-876e-aacb8b40ba81",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bb322d16-5f11-4e71-ac91-ef74b34c29b1"
        },
        "item": {
          "id": "6ca59ab5-4a32-4b18-a16f-5289edfa57da",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a755dda2-b036-4fdb-bfa7-c546fbbf7ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ec08e0-4ff2-4852-b339-62153f8b442c",
        "cursor": {
          "ref": "d95be741-efed-4e0e-9058-38cabf833e57",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "86452558-fb75-4b14-8182-8556de17bfa5"
        },
        "item": {
          "id": "e6ec08e0-4ff2-4852-b339-62153f8b442c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1c61348b-d651-4afe-a424-5fd31b879b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07235fc-ba07-447e-afd5-e67b53815495",
        "cursor": {
          "ref": "d8e952cd-7ada-41b4-9fe7-b0f039d33034",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7fd1e1c1-fd41-4039-a951-190adaeda31c"
        },
        "item": {
          "id": "c07235fc-ba07-447e-afd5-e67b53815495",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ced78cd1-cb14-4717-a07a-14d82bc16a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06c9131-fa46-4714-9cec-c40a62a1fcc2",
        "cursor": {
          "ref": "407f27ff-6042-415f-bbe5-980e5c0c5a9b",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8fdac32b-53d6-40b0-bfef-b77f64821b73"
        },
        "item": {
          "id": "c06c9131-fa46-4714-9cec-c40a62a1fcc2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0caaa220-756e-4b69-94ff-fe3cbec90ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f47472-78a5-4bc7-9881-d0a96430192c",
        "cursor": {
          "ref": "731156eb-e49c-4ca9-a27d-d92f21c02a6a",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "78b88dd4-5ecb-4b58-9b53-bee291f32dcd"
        },
        "item": {
          "id": "67f47472-78a5-4bc7-9881-d0a96430192c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ce82994d-fd50-45dc-9401-ff3c7d3aa86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547afcc7-b8dc-4b4b-b945-2667d8ceb2d9",
        "cursor": {
          "ref": "d02f51f7-8b60-4a2c-91e2-6c9c38f37dab",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "55b24da2-24e2-453c-8f60-0e7a48d86c3b"
        },
        "item": {
          "id": "547afcc7-b8dc-4b4b-b945-2667d8ceb2d9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "01b870fd-6dab-4f0a-a9d3-87454d4a6518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab732446-46b9-48ef-a062-98cbaa0fb761",
        "cursor": {
          "ref": "4a366c04-dd8e-4454-bdc1-7dcd33db435c",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8f67e1f3-c495-4ea4-9c36-ff880aeeeef9"
        },
        "item": {
          "id": "ab732446-46b9-48ef-a062-98cbaa0fb761",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "43a43122-10f7-42b3-b83d-f080826a874c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c5e25d-9cd8-4eab-a893-da27143ab38b",
        "cursor": {
          "ref": "96731f07-534d-4e8d-a14d-dc4794b47c25",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "907dc27a-45e7-4bc9-91eb-486a4cb02421"
        },
        "item": {
          "id": "b8c5e25d-9cd8-4eab-a893-da27143ab38b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b2974a52-9c07-4ab4-8ea2-7559208645a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3783d9-1107-4711-86b8-9fb86124da39",
        "cursor": {
          "ref": "916fd082-56c1-4d6c-8ef8-98a56d39db6d",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7d70c0e5-3028-4e18-80cd-64d9cd1f1575"
        },
        "item": {
          "id": "0c3783d9-1107-4711-86b8-9fb86124da39",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d666745c-0e66-43fb-92fe-57d289356a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80188b2-caf6-4fd9-b376-e4a4cc6956b9",
        "cursor": {
          "ref": "ddcc1db7-5aa3-42e2-a1a9-502135041382",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a0fe1178-472e-49cd-8b00-5741be1ca07c"
        },
        "item": {
          "id": "c80188b2-caf6-4fd9-b376-e4a4cc6956b9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e12dc49b-124a-4b3a-b8ad-b9d1b49196a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5ec3e5-66f6-4bb5-8321-52de85475afb",
        "cursor": {
          "ref": "0b1cfbd7-ee74-48fc-9466-d46cd3747516",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "66dff6c9-113a-4edc-a0bb-5de6dfa63e98"
        },
        "item": {
          "id": "1b5ec3e5-66f6-4bb5-8321-52de85475afb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "24905f89-c419-47bc-995a-94dfc27c8417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca5efe4-ecba-474b-a871-53152cf3bed7",
        "cursor": {
          "ref": "9b955175-8c92-416b-88e9-4b8a3df681ad",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "22fc75d7-2814-4658-92dc-d3ff7f51949d"
        },
        "item": {
          "id": "5ca5efe4-ecba-474b-a871-53152cf3bed7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "756fb685-c08d-45d0-a255-73ca59bab83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf193e73-f9ef-4cd2-821d-8272b7508044",
        "cursor": {
          "ref": "9d69122a-7ee2-43b1-88d8-506e13548649",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c35e6018-6604-4f78-9f5e-d5168a517e61"
        },
        "item": {
          "id": "bf193e73-f9ef-4cd2-821d-8272b7508044",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7e562cf4-7dc3-487b-9d7d-fd477592d7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea4520e-5219-4090-a51b-bdc409cbf076",
        "cursor": {
          "ref": "bfaa71b1-81d7-4c55-a15a-f3239017e0d4",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "94cf1be5-a0a8-4d9e-935d-d80fcf50a581"
        },
        "item": {
          "id": "0ea4520e-5219-4090-a51b-bdc409cbf076",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7166fe10-57f2-4ab5-9254-397b41ac7833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc3fc22-c061-4a0f-9618-312ac031c535",
        "cursor": {
          "ref": "74a3987a-ec60-4673-b975-39277f81c5d7",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7cd39c53-de68-4154-9d9b-237852dc1b67"
        },
        "item": {
          "id": "3bc3fc22-c061-4a0f-9618-312ac031c535",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5abe1fa0-b45e-4b97-bcec-b3351c9d0eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff8e629-6d53-47b0-ac91-28533cd83e6e",
        "cursor": {
          "ref": "0b42a9b1-1f16-49f5-a4eb-75471b552a23",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2804d255-031e-4215-89c8-27bce873eb73"
        },
        "item": {
          "id": "6ff8e629-6d53-47b0-ac91-28533cd83e6e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6da26153-56f0-40dc-936d-98d183d11bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22389bc-e9b4-4311-bdf3-76cdf5a99dee",
        "cursor": {
          "ref": "dbff2311-29cf-441a-a230-ba8e33b8166a",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9d4ee982-61d3-47f5-8af9-9424980e095e"
        },
        "item": {
          "id": "f22389bc-e9b4-4311-bdf3-76cdf5a99dee",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c815abad-a8dd-4a33-89f6-f35135c7dee4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a4850c-4bb9-4cc6-a317-f676bccc30c8",
        "cursor": {
          "ref": "be3c0871-8e87-4902-a3de-fdbbba341635",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "035d3f18-0587-47c3-b290-f98a64e50038"
        },
        "item": {
          "id": "53a4850c-4bb9-4cc6-a317-f676bccc30c8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "75390b54-c9dd-4f36-afc4-2ec7bb5642de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "4a1c5414-599b-4811-9877-d2799959c405",
        "cursor": {
          "ref": "1792fe9d-223c-4bda-97e8-d3390d68a0f6",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "03e0f591-1b36-44f5-846e-2c97e6d96e00"
        },
        "item": {
          "id": "4a1c5414-599b-4811-9877-d2799959c405",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fd2009da-ed8d-497c-a7fc-d269209f5318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "cdebbee4-7f13-4119-998a-e26acf0bebbb",
        "cursor": {
          "ref": "e4d4aba3-b8b0-45ca-9f4d-d8c959929c0c",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0a8c063b-bdac-4243-83ba-41fd6174cd98"
        },
        "item": {
          "id": "cdebbee4-7f13-4119-998a-e26acf0bebbb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "35d97852-1fc4-48b8-ac37-cc9aef799156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "ee0a75ff-ae87-46c7-b222-73a7b911bf79",
        "cursor": {
          "ref": "64cae11f-7184-485c-80cb-9fd1204935ef",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "99277546-eba8-4b75-8e7e-6ee13ae0eeb4"
        },
        "item": {
          "id": "ee0a75ff-ae87-46c7-b222-73a7b911bf79",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4dd7ddc-f50d-4fe2-b17a-455ded195cf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0a75ff-ae87-46c7-b222-73a7b911bf79",
        "cursor": {
          "ref": "64cae11f-7184-485c-80cb-9fd1204935ef",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "99277546-eba8-4b75-8e7e-6ee13ae0eeb4"
        },
        "item": {
          "id": "ee0a75ff-ae87-46c7-b222-73a7b911bf79",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4dd7ddc-f50d-4fe2-b17a-455ded195cf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0a75ff-ae87-46c7-b222-73a7b911bf79",
        "cursor": {
          "ref": "64cae11f-7184-485c-80cb-9fd1204935ef",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "99277546-eba8-4b75-8e7e-6ee13ae0eeb4"
        },
        "item": {
          "id": "ee0a75ff-ae87-46c7-b222-73a7b911bf79",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4dd7ddc-f50d-4fe2-b17a-455ded195cf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66390916-009b-4ef0-a03a-4438b0fc60fb",
        "cursor": {
          "ref": "1564225f-fc43-4b67-81ff-d23c6c0782a5",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a59b1ff0-7559-4076-89eb-af8afd199d43"
        },
        "item": {
          "id": "66390916-009b-4ef0-a03a-4438b0fc60fb",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d1333b79-1730-490c-a072-24ca49770668",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95df5bdf-e01a-48af-b3c5-85c98935124b",
        "cursor": {
          "ref": "af7d301d-0464-4b98-b04b-9bf9471da877",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "de83d629-682c-4496-8287-79fcca76dc45"
        },
        "item": {
          "id": "95df5bdf-e01a-48af-b3c5-85c98935124b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3d1ccd69-126b-44d5-9bf9-5da142c93005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "95df5bdf-e01a-48af-b3c5-85c98935124b",
        "cursor": {
          "ref": "af7d301d-0464-4b98-b04b-9bf9471da877",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "de83d629-682c-4496-8287-79fcca76dc45"
        },
        "item": {
          "id": "95df5bdf-e01a-48af-b3c5-85c98935124b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3d1ccd69-126b-44d5-9bf9-5da142c93005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ce830545-471a-47f7-ad56-55f805e9d408",
        "cursor": {
          "ref": "d1ea8e60-669b-47ce-8ac1-5cd04b4daf4f",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ff81cb1f-2e81-46cc-9044-aa5979bf00d2"
        },
        "item": {
          "id": "ce830545-471a-47f7-ad56-55f805e9d408",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "68234e24-e65f-4869-ad3d-767653631a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "9b00e79f-083d-4bc0-8d5a-afb858afa3bc",
        "cursor": {
          "ref": "fcec9bbc-ee40-4ffd-a27c-e7ac0a0aceda",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a5d812c9-69b0-4a8f-881c-19efc58ab931"
        },
        "item": {
          "id": "9b00e79f-083d-4bc0-8d5a-afb858afa3bc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fbb90a9e-ff01-4b13-b5ca-8b8fab3ce2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "9b00e79f-083d-4bc0-8d5a-afb858afa3bc",
        "cursor": {
          "ref": "fcec9bbc-ee40-4ffd-a27c-e7ac0a0aceda",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a5d812c9-69b0-4a8f-881c-19efc58ab931"
        },
        "item": {
          "id": "9b00e79f-083d-4bc0-8d5a-afb858afa3bc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fbb90a9e-ff01-4b13-b5ca-8b8fab3ce2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "bbece891-b332-4fbb-860b-f1ada934ff12",
        "cursor": {
          "ref": "2e2941d1-020b-485a-9298-395ad9e8e378",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f858d7a3-769d-4530-a6e4-82e67e13816a"
        },
        "item": {
          "id": "bbece891-b332-4fbb-860b-f1ada934ff12",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "79dcb80c-41a8-4466-befc-8182fe918b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}