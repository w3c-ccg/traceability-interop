{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "57950d60-6465-428b-8f22-609f0fb50d2b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "dcbdaffd-8577-4794-95f6-07ab9bf557b4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8bd45665-716c-4ba0-90c9-2e93d2de301f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fc8b1237-009a-4568-981d-c33f15c09105"
                }
              }
            ]
          },
          {
            "id": "dec938a0-623c-4f57-aabd-abc0d5ccd993",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f966dbf-be50-4bf2-9166-e03f9b3cf0eb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a0394c3e-451d-44f2-af39-3294817c9ff8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2cf8ab4b-2676-4dff-955f-6329d7082079",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f6eabd0c-6d59-4267-a6e9-479ae57376aa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd37fd7c-765a-433f-94f0-e7dd95577aa9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63d7f0da-4d05-4bbc-bb93-ab197feb6c40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8d98da6-84c2-48f4-94ab-3a18921281a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1885b1e2-dc6a-47c4-92e4-4d471180a895",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "775ee3e5-94b2-49a1-a096-8f55879e5ab4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "457a1168-60cd-418a-8a53-ca9af29401a7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f19d0074-d088-4d1f-a3d6-1edffadd285c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db701171-b2a1-4285-8730-404af4bfd2fc",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "87a923f7-606f-4f70-a265-3bbda59e68de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5889449d-0d64-4900-afc8-790b99f9859f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f8aabf4-13c3-497b-bf6b-3fc526d99017"
            }
          }
        ]
      },
      {
        "id": "5dff1367-d079-42d0-a0b4-5f89351e76e1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "41215f30-bda3-4717-b0f6-a2176f92a1f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ac468a5-d5dd-4121-8b16-52cc01735890",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "72c1185f-49c9-4cca-b6b4-2cdb70a3ca9f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d70a93-ca88-43be-85ec-05b0f68950db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16359f4b-a053-4cf6-97ab-53d46d9f9821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731644e2-4af3-4977-abc8-c10aab2c4f2b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849ff219-fd48-477b-bf55-0d1f95a1e762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "443a347f-5149-4054-9a4e-bddbb3307ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ebded8-4a9c-426d-84a0-4696deb2914f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b14cd6d-31ae-4fc4-b292-c3af8e1f2760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd0ae916-b249-4050-9db7-ffe64c2d2c29"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f02a124e-bc90-4032-8330-66c6c48dc0de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f46dadc-b867-48c5-a705-bbe26f86c4e8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b62f76a-af9c-4211-8e75-b8ff9714d52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c8ec1c0-8dad-4f9f-9bc1-dce2831f2545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34ebb11-2080-4eb5-be26-16b2daa8837c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62cf34b6-8b7e-46f8-bd22-d740d7531b9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9c87ec4e-301d-4f59-afa2-38b21cb23ac5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "407a6c40-e72a-4919-8986-7ff7cc50a5d8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88422f15-fb1d-4921-be1c-edfd17cd4a96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "802a601d-310b-4e35-b368-c1d9158a4ef9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30c5eee2-34a7-4071-bd89-5547379aec47",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6456b2f4-ec5f-46b3-86ea-34466718db65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e8bd029-0a55-486e-baed-cf705eb67673",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d326d90f-6bf5-4ce4-9116-3759af261ebf"
            }
          }
        ]
      },
      {
        "id": "4bb876e5-6e53-431e-bc3a-6c852fcd6934",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6bcd1ef7-311c-4cc1-832b-d488df3af3a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aadf47e9-2ef1-4f60-8b05-831fab9a6f17",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5df22de4-f08e-4990-9626-bbf11055ba38",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3567903a-fd18-444d-8b9b-475325a0dbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0789dbe3-2aaa-4567-8d7c-8e893b4860bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cfbb03-2d8b-4b5e-9339-176f60629df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4c94a2c-6745-4842-a004-b5a26a304273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dfed0e-1d5f-4c92-9127-23ed530fa10b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4debe87f-a744-4597-9117-d888062bdf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a060f4-bde0-48a9-9c51-57045b399a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9457cd4-59d9-411c-b940-3c50223df6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86089537-6468-4568-9afe-22cbb7494738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803c7228-03d0-4455-a222-4032b74e1a0f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab17151-2347-4278-a448-2b9d78bc0253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6be959-413b-4d46-82db-a01cc2973b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6b2b64-14f7-4fda-b401-5161ca545101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3ac4598-54a7-4e10-864b-33affc9ec4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ccebe2-b450-460c-85bd-7d1377afbdbe",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99360830-67aa-46be-9ef3-075203e526a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af62aa8f-260d-4dfc-a2af-c7d876833a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3354a293-1881-4b04-a0f9-f0567431b2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bcd6fe9-ffcd-4966-8149-a4737a960502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e002ae7-1ee2-4fc4-a1d4-4e4524814e7f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaa8175-fa4a-44df-aabf-329a1c2c73a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c15e001-597a-451f-a3da-f99d33261a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f4a144-673e-4e90-b308-55efad349b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9293564a-c7ed-49cb-abaf-7507d46e5af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72e7c98-3c34-4c7d-a15e-72efc22dfb7c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0d3079-748f-45fb-a516-bfbdc6595ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e283362c-79ce-4224-bae2-7a93d9dd1c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4617111f-3405-4e4b-8ed3-2b735bd95eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5940fffa-d323-46ea-afa5-a46b059f8233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92574aed-bdfc-4fd9-87a2-b5ef724f6122",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9daaa35c-fb10-4268-ad56-6f661c93f358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b783d19b-35a2-4661-96ee-e5fb875e7ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8afb69e-c298-4307-b239-cd3b262f4f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cef55375-c2f6-413e-ab9d-0f29ecce38e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ee9682-c1e3-422d-a3fa-9fd853df7c9a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a51403a-ae6c-4bd3-81fe-93dd51a65173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30cea6e4-788a-443c-944d-f47e8df2d6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63941e40-1dcc-4d8a-b705-d09440357133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8116a1a4-84f6-4edd-bbda-13341a79a403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136fabff-4aef-45ec-9c17-21e4b86100a7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff67979-43ce-483d-af32-ab28a61133f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6733b73-311c-495a-9f2a-1eae2268e893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2168897-40c7-4d78-9dae-1eebcd40da20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e41a0717-5c22-4f54-874a-c875689040e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2ff8b6-38e8-48f2-b9a6-df3d654a7b85",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983e173b-fc1d-4fd4-ad6d-b0000e3be29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b343ed08-07dc-4c83-9500-f16f1c1c7cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9ca2de-1a61-4607-bb6a-400dddffb7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23a4cb25-52b8-49e7-8781-2718c85e59f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7590a2-a964-41a1-934b-ded19e2d5cc1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8f0868-39fd-44ef-b5d0-aa54d0130423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905661fe-d4fd-4701-a764-1d03f6a6ef2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6f1ba3-84df-4a16-a2b9-5a7c77b52581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd76a88d-68eb-4a28-af4f-413344c48a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a4666d-270f-4376-936c-995334035020",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52361122-7109-4d9d-8fbc-7775095ceeed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daaa3368-d6db-434b-aa1a-187c836c2420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258dd5b3-a42c-447c-8978-1ee47e831a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10c15397-86fe-4824-9bbc-f24aebccdb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6317f364-1113-4fa2-9e0f-1745b16204cc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b41c001-872c-49fc-9ccf-b83f5caf025e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf33800-5af0-438b-ac6f-12c7b7593270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad65ad1-6aee-4ce7-ad90-b81c11e71d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9b7d4a7-4ba8-4f27-a7ec-15be3eb543d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5352b6f-d3da-4fd9-90e1-3190c406c8fe",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8670fc6-5c2a-4b3e-b3fc-425d7188cdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7114b8ca-70d0-4fca-be83-f78af86e5dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4820a201-e842-4741-b7be-788558014e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4233333b-7a64-4bfd-afc1-2b5560124fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee09a25b-66aa-43c4-98ec-274c9a87d525",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2a2a43-7ccb-4a65-94e9-c7377fd2f4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cff5478-8cda-41af-9eba-99242608a779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44259679-046b-4f75-b270-40f862cf302e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1cebd24-096d-454d-b5df-8dec86104a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5dfb0a-0066-4335-917b-1807e15d1a4f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833824bf-0afb-4404-8d4e-d66fada30f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32381d43-ddb3-4c74-b3a9-aa5ccb7a82bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30be6440-b001-4610-a962-f5478d9e9341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52a88958-35a5-408f-b712-e9229de7f0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cbb5dd0-e7f8-4e05-a61c-c5675b237580",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802d3f4a-48bc-41c2-bb24-ccf6f29f0765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc377028-9ec3-4a31-8ef6-4a382b6004e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82525710-806b-4ec5-8982-adb62dcaed43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41cc07f4-105d-45a7-aa1c-867f3db2d3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abc4dfa-1b06-48d6-8532-e2f459eff697",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784676ba-fa64-45ba-b1d6-2aa4dff0ce4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b1eb10-49d4-4dd6-a602-07a8d64ae69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24136eb-cdab-41f2-9855-2b525649f06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2274baeb-53fe-435c-9658-7a65477c5f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609373cf-7562-497f-ab19-73cb889b9cd1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b7b3e8-f4af-4f3b-bfc6-297c6dcfa03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99cf139-1f41-4f46-84aa-e9d45c5dcda0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c090f5-ca14-4c02-997d-2623c038ad50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37f8f116-74ea-438b-8dde-37b640598246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919748e5-8050-47f8-a907-07267043a106",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862fc8cd-0d0a-43a0-aecc-1ff8690fd558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e043b8-5a26-4fc8-a504-7ed436e67f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a72200-c14b-401c-9c3a-b3c6ea57b6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5a5b0c-c7a7-47b0-83a7-036d47dc3c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdef2c1-efa9-4219-9383-0399ecbad741",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138c972d-6325-421b-8905-f7cfe0001c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dad0ba1-97a2-451c-afc8-56ca2e0625e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6977a212-5f23-4790-b346-970a1ce3b366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9137c556-6538-4747-b97e-04bafe61c92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74b2bc2-7eb0-4849-8dd1-5d3b916d8381",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbb3367-fb08-47db-913b-86f5fc5bce63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebbff6db-eafd-4bc6-bea0-36c33aca8796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d419fe-240f-4f6f-a617-704562147586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a993004-5f7b-4e62-b4d1-b6336a797be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226bb2eb-dc75-4fff-a345-a1baf9ba6b91",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3d64dc-1f81-4b95-a0b8-27199fc8e2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b035973-0b85-4134-a504-8e05b68ffca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cec242-54fd-4eed-a628-0613b4c15fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1db6dc2e-0a54-4b09-9e12-a9abde13d17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093da846-6caa-4844-a5cd-410c801c9bc6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c23736f-4ad6-490c-97b6-a74cf5e03ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8bd4e9-9837-4d66-8684-02bef141ce3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090e0eab-421c-4aa9-ab78-2927c016599c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a53448bb-2205-4495-b719-1e206bc3141d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e287d51f-976f-4a43-9e73-51a30ca5da27",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d574c0-a14e-451a-b64a-0de1aeaa4292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a70ae3-6f0e-42e0-a54e-8c83422efa47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c652b7-dc86-4412-aa33-2d93336dd09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6aebea4-52f1-4b3e-8138-1b3729177a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee91731a-237c-4f5e-b771-e32c931aff8c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50e72ed-0095-4351-a0cd-0440ca5e591a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a98b72-13be-4b6e-8c0a-b06f6c78db7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8751d4f0-c21e-4a48-8d5e-8f037400a50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b67e07b5-798e-4df6-aafc-447ed0dfbb0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7785ac-2b4d-48f0-ab06-9b246be8d6b0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41c4778-f5e3-4318-bd66-2bf85b7ef9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab1dc64-a9eb-405a-a5c1-c6a83796d15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ece732-e00f-4ef3-b039-8a38ae6bf7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dc685fb-5b2c-4926-863f-81d2519d6708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d8de54-6cc7-4828-840b-533cde973400",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d47e7cf-4800-4650-8c69-dae0eb98bad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c8d9ce-03b3-4cd4-a25c-8a7a964f3fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6750ced8-ede5-4793-9e83-b1088ec4f68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca5b9ec6-6471-4b1e-adc1-7eb6609be745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535ed882-8615-498e-8cfb-44d433e1bc1a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca8e9d4-05e2-4e6c-826c-f4116be02c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b685ccb-a480-4240-ad3c-ab0e09278fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11fe04d-9b41-42ac-864b-efbe50eed963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8448827e-0637-43be-b177-e92224c72c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c45f91-a828-460d-b7ad-7c694ec696f9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e27c287-02e3-47fa-8dd6-32ee2901fd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2135a5c-0135-4e00-81ba-083eaf6f996c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d322e3-e819-451b-b425-10390252d59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddd5a39c-b892-4c83-9ef7-f301aabc706a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db00df25-3e9b-4076-9dd6-6217e64a17f0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09929e3-fef1-4a21-999b-65d61edf7a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f98530-706a-43f6-b976-2002866ee94b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e5a9c9-b269-493f-8bf8-9fe699dfd6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc9bbd83-58e1-449a-9787-b0df2bbb5163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed18b62-3deb-4775-875a-ce933efc6b45",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9213796c-0539-4f1d-912b-a2474262ae9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819e8b37-84ef-4de1-a172-efeb34f3c286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4622fe92-caaa-404e-85ff-5a8ca75a160a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fcab087-31b0-492c-97f6-bdce175b6af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bfcc03-2e66-49c7-b549-8c11aae96b58",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2199e719-85a0-42dd-ac96-118a0ac5b113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f459a2c-066b-4418-88f5-d5720f35801c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2733af-f50a-43a5-986c-bddb7229afe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "968f63de-ab40-4cb0-806d-7d88c556c179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5bcd54-f620-4648-9bdc-a9baedd72612",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ec9998-e099-4a30-b92f-92153ea12d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84fc920-bafd-45f0-a74d-22072dbe8df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2f9ed1-eafa-4aa2-9d63-eb195723db9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6779de64-d8f7-4f11-830c-b72e0ea20aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08738cd9-8bcc-496c-8041-e59db3f96bc6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9c2dbf-406a-4ec6-9765-5021ab5b8b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2053c4f-5cd8-4223-be28-c939586ef676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba15c61-b67d-40ef-9d9f-a76fc4f6ad00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4e54a8f9-6a0d-4547-bed8-5891fea61ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a94474-fc19-4193-a55b-0bf91ea4eabf",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf35314d-24a5-42dc-bf73-26e7b9fd5746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b626814b-f081-45aa-a510-47db59e5619f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5102c70c-20cf-4515-a049-c16b0b728337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d9866c-2608-4c41-8519-09d357762502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5195b7b3-b670-47d6-acea-548ee44628ed",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144e5445-5443-4e66-8025-3bc854dda193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13ae00f-93f4-4714-a199-b84189bc09a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a0faa9-3058-46d2-aac0-4bac6f60c33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d8699dc-4abf-4595-9fb3-5113faf040ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac45462a-c9b0-4fe7-8c78-e090803f6012",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215bb746-4de5-4a92-97cc-f03eb6aba559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5372c3f3-fe9d-4f68-9337-d94ab8c55089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2459c9-65fd-4c2b-9c38-3e3605d8f6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8db6c4ce-ce2b-484e-955f-8a2f89f04466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e6a9b5-3b5c-44e1-b579-d1ac29552e06",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3b286a-47d7-4800-ae66-0571f42ebe55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567857fd-a1d9-4762-a8e6-a749397852ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfeb4079-e7aa-4e83-8db3-2d9151b38217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "667579a5-675c-4a37-b6d9-6aed49ca503d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3958bca6-6494-459c-a0f1-5269b39651c0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853441ea-bc57-44ac-b2bd-9f39c8bf14dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3df1658-c023-4ead-988f-acb5c79fe4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9b7ba7-078b-4933-b186-953832ff1aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e3e5f5-3f7c-4d21-9630-22c5d5f465e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b24de5-3be4-46f4-bafd-3bfc80667fd5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ad9f14-d48e-4220-924b-b00f3f96340d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db3f7ec-af70-46ca-90fd-e9f89c73f130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbcc51a-2712-4448-aff0-109a50a2ff71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7af116b2-8ee9-471c-a992-ec4ab19e86c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40b93e4-6864-4ca4-b901-a20930c93fba",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8023e10e-f87f-43d4-9ba0-6490ab0ddf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346d8345-ca19-418d-878e-bd5e49661ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd884e1e-d423-4de3-b1c0-03411362c24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0062ef-be1d-4f71-a94f-9448112f06f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855495b8-c6cb-406b-b1e0-a5739c1b00d6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ddfbae-dfd5-499f-a630-82268425da34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3408a3c6-96d0-4fda-846a-95f6ccd8452d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6a94a2-0395-4695-af67-e9b479ea79f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9ad83fc-ec9e-43b3-abd4-0ea9f2e53323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0478c2d-ae66-4d63-93d9-023d184b4512",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0468289c-219d-45eb-a9bc-7e64424c3ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb45acc-2d7b-4c26-bb9a-8c5ab85e3dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155d6443-422b-40dc-bc98-ad21702ecbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0006db3-2fad-4002-83ae-2baf771285aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8fad02-9974-4c65-8431-34f09e55fd59",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b054321-485c-4512-83e8-62bb2bb257c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfdcdcf9-6e7b-43ec-8741-f626cefe6917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e347ec-c1a6-448d-b9d0-1e44dd131e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "44ccd160-4778-419f-91b0-cd9f9ac4afc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882eabb9-44cb-4a0f-a925-c0412500bee6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b04580-5f6a-4ed4-803f-7a7387c539ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67aeed6-7da6-4662-920a-b9422a23d474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0458e0-38ee-405c-a283-a0346f16d7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a00c94b-ba95-4a34-9473-c7c86508d209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15cce02d-5da1-4782-94cb-09e2dcf4f7ec",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cf62ce-09a4-46be-8575-8aa80f3291c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ace012b-42fc-4cb4-8c01-b79c13394e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d8d132-b447-43c5-9039-6428d9592dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd6bf25-5969-4da3-8be3-5ec45e152279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ea4993-5f5a-45bd-bf39-56c0010edb13",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70888013-aa13-48d8-83fd-c5d11815c32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fafec054-c7eb-4d8c-add4-3d1d259eb2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fa9bba-dbee-403a-a9a6-58332d55650d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd6893ca-4a16-49b6-b24c-02fafe767bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa1954b-6607-46f6-981b-611aa5c91d6b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfdadce-6e08-48e1-8670-a1f093540f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327e3c5c-2ea0-4b88-b252-d93333088a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8eda9ef-105b-4e80-afd5-2a127d24dfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f49036-1f99-40b2-9cf6-a5bd99e89c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21511e77-e9e5-4d60-b762-5d0e702cc36b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51183c96-7f53-40b5-a85b-cc013e0fd33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40607508-8918-4836-a4ad-0e3805d981d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c2330d-2bf8-4cf3-9f5a-c86338f9c7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9f4b9f-1d55-41a5-8fa7-63dba0b98a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c2c1cc-5545-40bf-9c06-60836c197632",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68eb6cc-982f-4319-b28f-5d931042aa66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b79e288-f131-47c0-ad49-805c7160042e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7f094d-6ca8-44e3-8571-a3af7305250f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fafb0e9e-ca58-436b-94aa-b038299a9bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd957ca8-b08a-4af7-a456-035b62675a03",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22abe651-7fe0-4403-81b2-1606d34cff05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953b4e59-eeb5-45ae-bc9d-4ee1ee0522c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8be16a4-264f-4e06-94a1-83f85eebf089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "427d0d29-6ae4-4f0f-a517-a2f6cf823514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b606f78-2886-434f-90ff-03e541dc2a9b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a22ee88-82cf-4cd6-8aa4-614d49d672a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6627a1c-fb2c-4078-92c3-f774fb0b2f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8388bd-4329-4a31-8d48-2619a3cbdefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a99fff-6467-4bdf-817f-f47c6b238b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013550e0-e166-4995-8d65-840d96a6108d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecddca09-8157-4ecb-b9bb-59d55ffdff5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d60526-bfd9-46ea-a558-442a31b97fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0182d8c6-ec4f-4240-89c7-4de91a82d275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be190919-1c22-4ad9-8bb9-42a1e21bddb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8a9c0c-6417-40bb-b891-122bf9795aa7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cbad42-7bf2-4db7-8dff-cc5e6b744041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2c67a5-11c4-4915-b5c1-0d27927f1d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3ce3e7-f1ed-4b46-8160-ae9c4d74e102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be298e20-de90-460f-aed2-ccb6ed7ba5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e314e96-07d7-48e2-bd98-07fd4ed58025",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0923b9-b96a-4f5e-8672-3920261f1e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f196ab00-420d-4c4f-87b0-e6541990182a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c436f973-41be-476f-af9a-e3adf4dea83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3d0853-c6ea-4472-b934-75657c191e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a031e0df-f4b1-4acf-b395-0b86f459b7ef",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912b8822-d3d1-47bc-af90-4ce307458889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "160cb3c7-aa68-4e1c-a845-1d34b31f5298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9282814-f785-4ccd-8fb9-1c19ef0681cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf3088e0-5b30-4768-b0e0-ead4f90019e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d67029a-d8a0-4dcb-941a-3fdc657404c7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5810afbe-103c-4110-be89-548ae3f2cecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16985cf8-bc59-4df5-adc8-ae2844474d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eba8992-c1d4-4fb2-98c5-c36a41f4107a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6415b522-6f4f-40ec-936a-4f54f2987384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b815e9-ab10-4b60-b694-c3e582fdc2c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e15b74a-23bc-44bc-b95b-3d14e02944e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1596faa4-ab10-4265-aab7-efe6e57397b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2152a7e-baef-4248-b413-1605431e8a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "53375257-322a-4719-aaf5-9ddcf7d61fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad182a1-f408-41c3-8c36-32468d663b18",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023ee3d5-62fa-49c0-a5e3-8e170a3c0169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c69d02eb-f499-4a3c-be0a-9c1352b65e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a70abc-f641-4e1c-a851-3afe14ec3fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7f4bcb-1524-4e4c-8118-3d9651afa743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd696dc0-009c-47ba-a8fe-e76edf14884e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939c0dee-a191-4ab3-b294-e47948fad228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de185f8e-4fdf-4eb2-9c3d-79746429176f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a415eb5-e941-439f-9b8d-9f11f2590275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "97ba62ec-a9ac-41bf-8695-7765499aa8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc19cb3-d2e9-41f2-9934-261f7842e287",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f137ec4b-746c-4cc2-bbab-3fe7b0750c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9a025e-f155-47a7-b1e4-7012997d2312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57044b0-75f5-4b3c-8924-a6d162bd8b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "79ad8be9-ce21-4241-ae5b-1126bf9a788e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b30845-cadc-4afb-92a1-63c509784b68",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54dd563b-4725-4845-9c5b-cd48a2385812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91fa9816-25e3-4a26-b321-22fc943fdc06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f51b8f-fbad-4760-9109-954b2e2f3a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a8078fa-cea5-46c6-be4a-521002584531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b9d653-0308-4b28-b727-91a1ef1cf664",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce73844-fe1d-482a-a5f3-b238b124c8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd96611-d4d8-4168-a503-06b726377b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cce6c3-0139-4a79-b1c6-0abd95a158c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb4f6a1-c72e-4eaa-bb07-74a685b2b6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f84906-4e50-4446-93fc-d1f759c6ed5e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d457343-8b2d-46f3-9883-2a41ba384561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1103137d-3143-484b-9734-36961358c2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111b2260-56fc-42c4-975d-617458173e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c01db3-b545-45bf-ac6b-47e8b3e15b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0008437-bc2f-46ba-a591-2d8b1e24ea93",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd64781-c55c-4d9c-89fc-182d02ce7e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "867ac4e0-97fb-4092-b59c-44b498c2e8cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca2f891-110f-4a19-b7da-c37f22f5f48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dde1bd5-4cd1-48b4-a1ac-86c61764dc8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e128a41c-6b74-4467-8d78-0fa6283a6027",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3497ac70-fbe4-4aaa-8872-dc62e56f7ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46906809-c7ac-4624-a503-aaad9f943da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3534683b-ff32-4da2-818b-38d97920afb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3560f3-b774-4af9-8650-9428b43c2900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ffb664-1f32-4e84-a1bc-5503645b3dc1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db38ec9c-a8c0-4715-8928-d082657198b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9c4693-76f2-4b86-b882-348142f7c630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96452c45-72d6-4c89-8a1c-f5a1dc6f84e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ece15d3-6bf0-4d2d-a7c4-776cd658be87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d38baf4-d0f2-4a61-807f-9b4adb169002",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e47da9f-eed9-4e6c-b955-8c5311b217b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf072a0-7ad0-4963-915e-5f6c4fea97a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa1d92c-4850-4d90-82b2-ea2ff4633468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5648cfb6-c7c1-4ed5-9624-9aac094158d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8413b1c5-b24a-4436-a15d-e31e84ceefd4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21642995-80f1-409c-a6f4-f5c6e19504d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b4f9c4-d04f-4ffd-8bdf-6cd39af41fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d434c7dd-2e1e-4f1a-bd07-cd9a9484d1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c885c0c7-9e73-4fd4-924c-a679dfc53e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddf7b11-28bc-4ad0-99f3-30852847bdd2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776c9979-b873-48b1-aee7-eafbe1a3541e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2608041-7838-49f8-9642-7c97303e82ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ea851c-d87d-4ba2-a45a-eebe9b854bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d743f9fd-552f-471e-b52d-10a38c085a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fe86d5-050b-4b3c-84cf-7eb02379792d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4100512e-5bb8-47a9-91af-878fcbbd64d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cca2f4a8-8665-437f-b844-4e2b1ffa11ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01efe516-d9c7-4b3e-9881-a2628b6d1b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24a8f5ef-fab3-4023-8c0c-bcdd85da8b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26b402e-5057-4efd-9472-27523976d3b7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f49b184-4239-47d0-84da-81ded5006259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa433dfc-0ba0-4c65-9a4d-ad921cb4bda7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae8402f-4785-4c71-a020-2a3fba79acdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c28e6c08-5e3f-41ab-b8e7-3d496d7d2398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be964e45-749c-4653-8dd9-b824b5f12344",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62719328-e0ec-4929-ae99-127003cc3c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98940427-354c-4a91-9f18-46b28df7154e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455dad68-1169-4ac5-9660-f0b88c876c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf534ca5-0590-4385-ae8e-65c82d777a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b4270b-4c6d-45b1-9f02-833d9ff5f947",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "553b3cca-bf1a-4b21-b720-a6fca3f81cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a9def5-51be-4564-a1a2-1f4ad7ef3563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e2084b-9521-4e15-ae2e-1d864da64329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "02fe1851-13f7-4286-bad6-22135ca89661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f090c5-7ca5-4239-a749-c3d84109560c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd1c655-3457-4b18-b3e0-ed4abc1c0e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24fe525-de02-456e-9596-8b75a287bb90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aecaaf3-16be-4fe4-8732-9c633d9835cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa4191c-ea6e-4b93-a536-45158b121744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d07c86-3f14-46ee-b7e1-2f4c39009666",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e81d304-1dfa-4eba-a033-791a65dae8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d4409e-465e-43ad-8d24-aaa00a89fa84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd4b271-8dec-4bc1-acf4-f1cdaeb87ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a403844f-5b7b-4aae-a1f6-40ee6560ecfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3e1ded-d544-4e1d-b641-b998eaf3f426",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314dc42f-cd25-434f-ba85-01106b28a008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f82d910f-8c75-4189-99ec-e22799ed7791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6285f691-c01e-484e-b69b-7d7bb1dbd87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb5914cc-d9c8-4064-9305-fa8a532d7cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ed455c-5711-4ec2-b315-814a670b27c3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d60354-66c8-4ec9-9db1-7191113aa35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "267a1745-5112-4e44-8ba9-da994bb1c4b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa846ddd-14e4-4c10-820c-0e6c7a2b0912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6f3c5a-0a61-46d3-b70d-a1cb94cfbc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcd773a-09be-43e2-b59f-07bfdaf8a731",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254f00f1-3e81-422c-8c54-2c6f4cbebd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013502d7-14fd-49a0-9cb0-bb8fb9241178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283c1b9c-f50a-41a7-8e59-1f72aeadc339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0513a0-ab34-41c2-8696-5b4bb9890f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdb1149-8ad5-48e1-b3c5-8a9a22026135",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607e216b-8758-4b9c-ae2d-7ae10b5c714a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e64d5291-659a-4f3f-895d-d61b5ea6519d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc289ebf-8292-4f52-8d66-ba42308b81b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b38ef83a-1eb8-427d-ad8c-90f533d4e0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a904ec4-c575-45f5-a9cd-434f1572ee82",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6536d4a7-7f68-4ba8-9c99-5e337e970219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b32325c-0e87-4c64-ad78-e6684cbbed0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f7ca64-f239-4a74-9212-55251cd0e6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "067247e5-be5c-4a44-a86d-1e21eb0c5807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec347017-e591-4a11-9b2e-5b8d75132ff0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723757b3-d4c9-45b0-9704-8e37e2f939a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab521930-8457-4f14-ac4c-3ba541faea90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059bc257-8f59-4592-938d-5f5048164826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b217c7c0-be2d-478a-a758-305f283e7892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ab3200-fa78-4d39-bd30-5c6b8425680e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26700d9-f163-4ac7-ab18-bc6afd279d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1c46ce-2d0e-4f63-bf04-d418b579f134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4766ad2-6fa3-40ea-a496-10adf054ee81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3d1ec00-537e-4720-bccc-38fe67f02947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2f77bc-45d1-4db7-995b-551771cefb38",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79c1918-a004-4ed6-b4c7-4eb946af9ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9c7ac5-0937-40b4-b642-9dd79a1bd870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b64549-ddd9-4331-9c2b-a9988de1a4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd39caca-8f58-42aa-884c-8396fc61938e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc2055a-3156-4523-8bdf-b9c78ea65f34",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752c5344-a836-4729-948c-3808aa657001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e79e91-ba6e-4b35-a911-f3c0cca4db76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59169802-5d6c-4ce1-9ad1-203c0f84ad6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b02e57d-71ac-4535-94e9-738e839c613b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc72ae7-c8b4-4d73-ba0e-2b0f972a2ba4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad2f437-e54f-47eb-a36e-ef3040d04000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08f0fbe-e08d-4c3a-a4b0-19590fbbfa2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6650f0c1-e779-4455-bc8d-0a45ddedadf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "146f9cb6-7095-44d7-bc75-656b8d6623b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db80a2db-9d40-4100-8800-6259420246bd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705eba22-1fb8-4dc7-9afe-df9e68878ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8b1190-870c-4896-a2fe-5a4a3a2efc11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056a8c7e-07a7-40d8-a497-0ba1302dae28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2a9b37-75e7-4a6a-a6d4-1d803c551789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc98840-b1df-4f20-93f6-95e092275143",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f89bf1-f453-4150-99a2-29f1134f19d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d20cd1c-d86a-4735-a587-d245a70130d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d4a720-6f28-423f-9110-b712bf0ac609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb579db2-ecfd-4092-9891-9139b09ce84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef1f069-33b2-40ff-91d9-754f0a64e52f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0618a27-8d1f-401a-b5c8-1235a4b9518b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6656699-193d-461c-a66b-186f3460fe49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36edaa36-86ea-48d3-b582-fd42641ca4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b194288-9594-48ab-ac60-4df651eba420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695648f6-5137-48ef-9cb2-1fb650e68de6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1bc188-96b6-4a2d-9cec-8170cbd52ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2900000a-06ba-4373-9dfe-326dd2d6aada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74192d99-8853-4ca5-a652-c801c6102774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8475e9-fd9b-4d49-ba64-e4a7e1692771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f59ad0-eb7a-4a8d-bbb1-076985051ae0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41a2e0b-6cf3-4f11-a7cb-a201c705d20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2faef09d-dd1b-450b-9f7d-75a298888278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2eb6000-11ca-4aef-bcd8-67c475a7ca5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dad5703f-e169-49c6-b114-8a21a0bf319f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d5e189d-879e-4019-931e-eb3060359ffb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d735b29-d6f0-4d8d-a643-0fca577853aa",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c5ea88-2528-44bb-b656-f10e4c20e73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "faf3a34a-6a54-4c78-967c-89a15914bbe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae0b6e8-8ce6-420a-99d7-9ba5c59ed5dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f44ed7ce-38a1-44f3-ba22-b77787102267"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80e209af-134a-4193-bb46-8f8658680b8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01abe6b4-4f9d-4823-bfca-b6018e7b7efb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9767e1cd-7aa8-4dc0-945d-a121be9b250c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c76a428-fefc-42bf-be26-cacaaf56ea42"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48947326-2eef-4891-ab89-00463f6f89ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4e3fb987-b8bf-4b62-ae9f-ae85b0240278"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "54d8f657-117c-4325-a008-0983a0cd96c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3428fa1c-34a2-4880-a28c-b4e2af0cc6e2"
                }
              }
            ]
          },
          {
            "id": "2158c4d7-1a8c-4211-b4ad-3f5649b9ac5e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "181d8396-fb3f-4106-ae03-2a221c8e0678",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "4b697d7a-9503-466c-bc6c-bbf1c80e40e6",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b2aa43-68ee-40ac-9520-51515997581e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e68f1e32-f6a3-4b5f-810e-3a81575081ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9ed3c0-45a4-4089-bc7c-88f2525778b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7c0123-e4b0-42a2-b9b7-0b1b8c0b8b55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b000cc44-f005-49b6-b64c-0283f831365f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d499434-7320-4a53-b12f-3c0124a5d9a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3344ba81-f21a-46c1-be4f-65f12f693afa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "386e9390-2755-459c-bcbd-2c45907f8711",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "57022561-7f92-4a72-aca7-be1c46ab7845"
                    }
                  }
                ]
              },
              {
                "id": "e832dcc9-5c25-41bb-ab60-8ff5c89fa8b2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0607008-d220-41c0-9466-ffe1107c011d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b73238a-6bfe-44f8-8f6d-b5a439434a71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "802983dd-1a4b-41c9-a733-f5a930ee420d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "507bb25c-f7bd-4973-b0db-ef41f5e4d6af"
                    }
                  }
                ]
              },
              {
                "id": "76e418ac-9647-47ed-95d9-bc31d7df87d5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7155cedf-9f8d-4f17-aef0-967ec224cdde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "772c1583-b6da-4e51-ab56-0f21093bda4d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f6f804c-552c-46b0-a400-02513f509339",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1d1ccfba-8df9-4a9b-9563-9e90628d1c89"
                    }
                  }
                ]
              },
              {
                "id": "800e0c80-ff4a-4ebd-b7ed-a11e4df9a0a0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "038b9a12-d34e-484c-bb99-c9cf5474f523",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47ef92e8-e369-47fb-998b-def7b06d9b9d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0170de99-5496-4936-9640-8c1f0ea27db5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7245f4ff-8029-42c5-93ac-826ee1bda314"
                    }
                  }
                ]
              },
              {
                "id": "017e1b50-1bfe-4b93-b079-aed549a50354",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "811c6fa3-9aa2-4248-8937-bc105cb7d623",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43e9ac98-f24d-4190-ac19-a7bd275c8ccd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d290475c-1a16-42c4-95da-9d4b5a7a1b5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a59e5cfb-20fd-46ad-b9f3-0940db4af26e"
                    }
                  }
                ]
              },
              {
                "id": "a868ad7c-a122-4d44-9429-20a782cb286e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea4639f3-fa08-434c-a9a4-1bdcaad326a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18063dee-641c-498a-8054-68439f22a015"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a5c33f0-6248-4e1e-a9fc-8ac6d6a47dc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b8a92497-93f1-45ab-a3da-3bee3a5f6e8a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e02a3317-fb02-4550-9122-cfb35023c9e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f73a1395-9074-4307-9da0-53aeefe2d18c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c260dfc2-b9aa-4aeb-99de-71e29587620e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97abf4e6-da67-4af7-9bb4-4b4e2d44817c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d3c20c7-b0ab-4bbb-b3be-7c075a0d1667",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "da792ceb-ea55-481b-bf0a-3e5928435b7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8aa807ad-02c7-40da-b8b6-4b2c553d1166",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3def0496-516c-4231-976e-a6e11bd1cd72"
            }
          }
        ]
      },
      {
        "id": "246c4436-55ab-40e9-a46c-94552c36060b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8fbcdbc7-2757-4819-b5f9-5330a7aad644",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0d081bc-62c1-4951-9dc0-976549a5a968",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d8beb5ac-a184-4d59-8955-91d68a901fe5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425bf0eb-c980-4e2a-aa30-d8ab196e94a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d137a3d6-1f20-4161-a544-8c5f0ffbfbf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa02910f-83c2-4760-932a-4d27f72eadb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a33f95-b392-4f38-93d7-1aed2edce539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f7530c-768c-4e32-a656-b29ee0e6329f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107d135d-181a-4886-aff3-85064ba08510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6a1faf-7d42-4c01-83b1-43fab4fb343e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b309c2b-428a-46b5-9063-a9fad80c7ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee38e524-0429-4a9c-a8f6-4cfd59a19f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2693b1b4-b6eb-43bf-97ba-d12d126f9022",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a693132-8319-409f-8900-b3fa3ae6d04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157ff69c-242b-4f46-a4f6-64273dfb2df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51595c90-2f28-481e-8d8f-9fb92941b1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb9b351-199c-4956-926e-6da8502fdb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b53ab0-6a92-4fde-a0b8-6e4422d38d7d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f16bc7-11a8-4ac9-88ef-109a1d665358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951778e7-4537-4bd8-81f6-14f1fa369f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e858d1-5b90-48ea-bb21-f122c3ee1805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "679b5bbd-928b-4e8e-b2ea-939926ff8e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e407bc-4994-44c0-b29d-165596341651",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "285a81fe-e5e4-4ad3-9653-f75b1a0205be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803f5821-1d33-4328-bd9b-d8f896b09f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc9f63c-5c1b-4064-8c9b-0207f993f0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ca44c3-219a-4f89-b092-1dd1addb0dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4415da-6cb3-4666-8c35-63ab60fec668",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668cede0-478c-4d8d-ac0a-e9d93272dc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e53052-2d38-4ad6-9b23-5abc9a8a9513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243fea67-776b-41c9-aa27-cafbdacc82a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "365c43f8-1fd0-4aa0-ae56-02c242b792f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d23d55a-7d31-4b87-9233-5d1708b9b281",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00e4d32-dbc9-43fb-944b-d2cf4ab82f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc49bb2b-a216-446a-89a2-acdd037e6101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5aa4cee-1f2b-47bd-a0b7-84d36b95b092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b973bd3-b9bc-46f5-a265-60331a2b3b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc86bae9-240b-4bf0-ae53-fcf80c82dde6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13bf5e85-ba56-4811-b55a-65fe6a83c8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3517b70-eecd-49e5-9643-8879f596e552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da716e0f-61e8-4136-8094-4288c3a06b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b27e884-4202-4648-8eb6-725feb13ca18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3198e63f-6687-4834-aeea-dd75c4d26c47",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a88be70-543f-424a-bad1-70842f520d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b0fe86-2dfb-4c96-abfa-4e21654fe5bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135fc036-8b81-4636-8dd1-614630d209b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b829c5-ea70-44d4-8d1e-8acc31370c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322e3ef2-c1f4-45f0-887e-969707fc97da",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056adccd-7edb-4b5d-baa3-2c4ebc6b4a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b1735e-dca6-4b31-864d-5ee7babc8449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d392f02-ee51-4e87-aa91-ab3cf18fed41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "695638aa-8355-4454-8b0f-c51998b10e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1f37a8-1dbc-4f3f-abf6-fbbccd01b114",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0809f51d-75ba-4c69-a054-b4b98320383f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7209eef9-0a27-4a7e-9f95-80ab754d4155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fb73a4-ea56-46d6-93ff-bea50086f4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "377a1743-f1d0-42af-802d-1a8b6fae511e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fdd003-36eb-4e8f-8bd0-8a1e5e9fb57d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdb9a6e-2eda-4295-b741-944504298f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dece45e5-29c4-41fd-92b4-c86956635690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddcb279e-ec3d-4a06-8604-6e0571aad244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "40df21e9-f75c-4ed7-be63-b942a5035860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7afb4ff-3e39-41d9-8e61-f117cd23b514",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f7f8cf-e888-4836-b3a7-6152264a8c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a4f74a-670d-4a22-95c7-3aa7d2a3cdb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca2e5cb-3877-4f9a-a628-9a7fd42d30cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f18f391-d476-49f8-b77d-6a3760580398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e59c227-3393-46f6-917f-2ac89587d69a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4a8059-a763-497c-915b-2b679ee4c440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69239a2f-4b4c-4bd3-882e-6653c8b91d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a2cc24-39ca-43b4-8f91-e93aaad65c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "540e1422-44f5-4118-b315-af6b2b052561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be8082b-7ffe-4610-82ee-b1cf2453388c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33969e1-b8e3-447a-bfcd-c85e6df86e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c49d3a-a787-41b7-b9d6-5fa437fc3c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39976c64-4c8a-4778-aa3d-68b579330cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1a368c-4998-4a42-bdba-28556528c1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea0fc29-f5e2-41ff-8d9c-2d99ffe8cc55",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1feb53d-b010-4d52-924a-0a050295bc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c701b09-6aa1-4180-b0e1-357485cd0b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8369a23d-2465-47f7-8171-efc8b66b25a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "822e6dc2-182f-4164-8bf1-3c5f3f48df52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ea78ca-2c18-4628-a686-dabf4601e557",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61562baa-b535-4f90-aacc-c1c603d60f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562cea57-1333-4736-b269-a4dc3a7ec9a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fb9152-507d-47d5-99a5-8ea838aaed78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "100c7c69-1d38-4b0a-8c03-6afa5a64f03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce61b09a-248f-418f-8bd4-3dfba4ae709a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1a3213-6e4c-4f64-88b2-523f9bf6eb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e979f085-f8ca-441c-aa3e-a98d48cc973e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041687f5-bae2-4116-85c1-4a5c6216568b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "161a3e37-ba24-4d65-95e5-40dda289c757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8090e95-509a-4170-b9d3-5cf29915cddb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb272394-d2a0-451b-bd3c-052dce1e1509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d8f3a35-7f39-4fc8-80fc-375180d53f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a891e1-1937-47ba-a357-ba79aebfb36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab7cbd43-3d0b-472e-a031-777b80446ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d1728c-e0d8-44e9-87a4-388ed751c84e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729a8a47-36ab-4c9d-a7ff-d04e5646c9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b23d6c-fd87-4fca-9bce-bc582959be67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bb05a1-9324-4150-b871-789bb42b6ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91c94ac3-e98f-4ccc-a2a3-f1fb7b935349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9928b5-ae09-4f9a-adc4-798de6456415",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85d639d-c36d-4d81-9160-ff3166e18120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be776068-9dec-4230-bca2-cbaa49876d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b743d1d-90a0-4dc6-aa1a-c3b263bba394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb630a1a-4234-4237-8850-67c2b02dab74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe69cd8-baaa-4baa-9db4-c3523f58424a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e62b6e-b34d-440c-92f4-bb8994dd2ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8fdc9d-87d6-4418-93d7-b38d97b2d362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0118c18a-533f-49fd-9153-a35d83c03858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7781515-cd58-42b9-b8aa-b1c4b89b6bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22d45bf-e16c-401d-bd84-093c91ffdc7b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c6192c-624a-4806-8a7d-0cb8106deb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698e2313-5869-49ff-935e-95bc1517b653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4703da-7b1e-4e79-88cd-bfe7c10debcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c060a03-9d97-40a3-a459-434ecc6f0fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2cf80f-6149-415a-a06b-fe2cdd5e5671",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3fa2a8-835d-4698-93a3-76637b1028ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4baa236e-dfbd-47e2-94c8-a911a63b80ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75094738-9c18-4ac4-bf22-f4eb68dfffcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "590d71d2-cf89-4019-88d1-c3228816c8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b8e32d-62ac-42c6-8fa6-7a3dca1cf34d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef4d122-e469-4fac-9ac7-bed6d975d07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e82ccfc-f9b4-4618-b770-5a732cc43a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6cf65d-dfb8-43f9-a749-6f06aaec6c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b502d30b-b494-4e6f-986b-b714f1e439f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3d6c71-fa45-4501-826b-55237f17a1a8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9960e8-c3fc-4f5e-998c-f1251de7d7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a179f41-84df-42c3-aa3c-c79109761dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871a79dc-e486-4f5a-969a-f33ba6b27dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb8d293-bb21-4002-a33e-1051f57c4370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bf2be5-57d2-4aa5-9a8e-1a09596ac3eb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228bdd37-7b42-43e1-a36d-7448b37304f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7578f062-e9c7-493c-a908-c6fec6a9b743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930e0dc4-4c95-4c42-9bfe-118c837d36cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54fc215e-6e9a-48a5-aa30-eb52dfcddaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b7ec1b-3a21-4030-a1ea-683d06e40ec2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faaaa738-269a-4b2f-81bd-31549bcf988f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b00b95-8363-4f87-994a-e34e583c65a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3267c9eb-ebae-4788-8eba-dbcddb7af344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18fbf38b-c13d-47e6-9746-997a6ad7db85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb638ed-5b21-47f1-9939-12517ab34701",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdded483-d48e-4925-b9f5-50f92a90d003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec8005f-c3a9-4d16-b54b-39b7b830fa03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b2d1a8-d10a-4e44-8add-e18451759874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8112b52c-fb8a-42bb-9e6a-aa3da8e4fbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac9c139-cf53-468c-965a-99409ee097a5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58080ab7-db64-4a8e-859a-ebea3b59089a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbd61a20-142a-486b-85d4-51713c1d80f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa33c8b1-f35e-49ca-8318-68d91816fbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7189bf19-e21d-4a34-9776-6fa7c9f7a504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7934b566-aace-492a-9daf-a558380dff43",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce8d11c-9dee-4395-b988-9c9ff0d45f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136ed31a-575d-4621-8999-0daa979fdf20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cabd98d-bdf6-4af8-ba9a-47891d325617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a547128d-2025-42c0-b9f8-db8c2b5874e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2459d6-701a-4e7f-9612-ff620dc45265",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0bd7b3-5b2f-4b07-93ab-d804eba871b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b539d402-d824-4191-a646-590bb1346057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcf7eea-66f8-4d19-bb2d-893b933147d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9916111-cb28-4537-ad6e-36cb648e0499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbce138-fb2e-488b-b3a4-a003205432ca",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469adcf2-b1b1-4c64-9064-21cc375ea473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca082ee3-68ce-4e05-95b0-23b2f681f211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072361fe-3f2b-431e-be19-54c814835133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e94a97ce-4584-4bca-ab4a-590172c06e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a82700d-a431-414a-ba44-94d09603c3e6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0eb5134-6fc4-4103-b20b-2fc253ffa193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd59ddb7-d95a-489c-bdfb-66ec6f61d16a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b965821a-5d5b-46fc-892d-6d653aa0e7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5ee915-1a70-4601-b3e3-40e7780aedc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8133364f-e36e-4fbb-b342-f3ce0a7ef631",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1977db1d-8892-4ae6-a147-bea4a58279c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83944149-099e-42c9-a0b7-04c280bc0d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d64b7e-f50b-415e-a25b-db5478f9a5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dde73a2-24a9-49c7-83ea-61d175a03353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74af3cb3-d4d1-4c55-8ffb-c0674b6e1e40",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0cfe03-84f4-44e1-aa49-e2bcbe3cb6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb8b170-c7bb-4ab2-8da5-3c2a1e64f506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3054bdf3-88de-4804-ad5e-8e7a9ea2809f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d39ede-7546-4790-886e-f6a741a04ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210dde75-f5c2-4ed7-b006-05eb298c248c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3db8db-ad36-4f88-ac26-9e81a547eb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e261ad26-dd84-4959-9d35-f6b7a90142ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e09081-6684-49bf-9936-f101fcf673ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee402d96-3e68-4615-be69-cf004b1947da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "665a856f-9cec-4518-a44a-77adfc35e528",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8dc6c0ed-a030-4ce6-8767-2ab75dc026a3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a594127c-16b3-4b28-ac82-de84df338424",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "971b3106-5dd0-4490-8f17-fbd0e159bb8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f09f22-81ff-478d-99b0-7e496e373cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81ea0256-3c84-4529-a1f6-50d2e8bda84c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4983aa5a-18fa-4f2c-b8cb-08f3b683e88a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc2b7dd5-df54-4166-9bc2-b73bfea9efd9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32ec06ea-2e1c-4b6a-a7e7-da3be2a4be34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5029f014-e765-4781-bd5e-983522c1be37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50161658-1d89-4e3e-be76-61a2275129c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cabac329-3891-4f08-b80f-1b495fcae86d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cfe40f6-ac72-411d-b3ce-0c8584729978",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0dd1bf4-c9ae-48cf-a487-b23f9afd8736"
            }
          }
        ]
      },
      {
        "id": "57d025eb-c89f-4b7f-8e03-a4e4610d1a9a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8cb5ee2b-4946-48d6-b1d1-b7356176d5e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "96c559a8-0a74-47ce-af8b-f853383068c9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "92e025d3-a9ee-4c34-8edb-fae8a11cbfd6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbd949a-019c-41fe-99a2-43b88f6938bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73763010-cfd6-4d3a-ab68-ab2e21d4801b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37772eec-3caa-4895-bde4-fc070e42051b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179978e5-4ce6-46df-9985-b91586fb50c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8e7535-5c33-48f5-9184-f99d7a1b7fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4ab571-a545-4991-a2fe-bd0f889e7397",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b491e2c0-bf9a-44c9-82aa-6a8df8ab96d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9802f0e7-936c-4bda-afae-7bb2b9d365d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b324e849-d3e0-4e4d-8222-f989bbe84faa",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f41b13a-d4e4-4818-9c8c-06470a77be21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114bd704-3ff5-4c32-ba85-3de8eae6dbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623d7f8e-b8cb-4432-9cd2-a60dc50403f0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3380a196-a1bb-4216-9ee7-0fdb82b5f729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c36a47-4bac-48af-b72a-0efcd6da60f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b89b26-8c40-4be8-8392-0d7ac9435780",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d73451e-e10f-47a1-b93e-cf9497d198fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b034a745-89fd-4b9e-ba2d-63d1ba48e1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae44bd05-5c88-462a-958a-260343bf5713",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aaa3ad7-7ca8-4968-a3b6-7ad27ec0c0b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0450106d-69cf-412e-a2b2-a2c1ac321c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8544d5-6a20-40c5-bb73-1cf231d9e886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58396a6-51b8-48c4-b678-0a5354357ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1442a4a-170e-4d18-90c5-b87280545b0e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d50136-e309-4969-844e-2d1d07b28675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "421415bf-548e-4fac-9b7a-336e7e8707a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74fed58-d27a-4176-a546-021ce4807167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aae3cb9-d7b0-46b3-b2b3-c78587b05c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6189741-6caa-4fce-8f7d-a9f72d74246c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8762ff42-2e2e-48a0-9ca9-1e2265fae740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70f0ade1-2844-4d4a-9b40-2168d7248164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec027132-3918-42e9-9a1c-a04875a499df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79259d31-c595-44b4-ba54-4546a61a8f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356ca7a9-f7b1-4315-91a9-ca3e2a844184",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4032eff8-8261-4f69-b31f-c3e3a232a81e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c9ba78b-946a-468b-aefa-6074aafded94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15fbe67-3b13-4b1b-b3c3-3a1ca83eeb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3c9c613-0917-4df1-b4a1-6370d363879e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7b9c56-4e5d-48f2-817b-5c287a98e233",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a7d6b8-12e5-483a-959e-3d34e1cad1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "386da2a8-e082-4288-84d4-afd214b2da01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cd4ca1-0f64-4b49-862c-0a1dc6509c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4427d8c-8d6f-4f21-89fe-507f5827f955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271be5b8-0d3f-4437-8636-9e1dd8557294",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd00461-07cb-4158-b214-155f01985fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a62e8e-be4e-4a8b-8f9d-5d3a7f3a618e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ed4d3a-cc2b-4936-af8c-d06828c23ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db4fe51-b0b8-4349-83b4-f46b327a87dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350375c5-e2e2-47c0-b326-adca49722b3f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d10d25-aef6-4675-b5e4-a2a17b96ae72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b3d4606-a8d2-4f8e-acf7-f693fdcd73de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32548dc-c43e-4da7-997a-79478b5f1aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0dd266-0516-4d61-a419-9c728f3f3389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22742e7-98da-4763-95f4-c506b8811b25",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ba2513-4771-4c55-9c03-285b69808fc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daab5463-909a-4736-be63-fac1f683ce03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfba9fb-a9f3-4f4d-8ed3-c87a9a280598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716c2f25-37d2-4074-8f34-f600f2b55ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a15e4a-4186-4652-8404-4b6bab92cee7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef50c71-7336-47c8-993b-1008abc8ec8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8e2e339-7777-4701-9faf-d6e251c8d97d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4532aa3-d5cb-4350-a650-e8d2f3260287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d619a752-950c-4a7e-9af7-5e1aa4f99d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7ef654-1102-4d1f-bfe3-4f66a917cdc3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52461243-145e-41e9-9974-5b84e693567a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2125aff-a9fc-4214-90c8-f63daeefff9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34033bf1-3c69-4429-a94a-86b2dedda42c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48394051-fbc4-4607-82d8-415779292129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46238d2-4e96-4a77-81eb-2fe5d7f09184",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcec068a-7e57-4c8d-9e45-2ba081456aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c493eff4-b5ef-4886-ba5c-0c46fad360a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9218dab7-c779-4506-bec3-9e49c78d0e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73803456-a569-4ef1-81e1-b7902758bb1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08f207f-9c43-4fb7-b327-4f9a40e61c13",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798e570a-6c18-49d9-99c0-262087ce3584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b3d4aa-d710-412e-bf42-ad534afa6171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f35a1bb-1d72-4191-b1d4-8bad93bc7f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4f2945-5045-4d3f-91b5-85e1238c057e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95dd5cf-9b78-47ba-ae31-dee99292ce5a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf473ed8-f83f-4d88-b698-996cd52e64d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba4ea5b-907b-4655-a29e-926151112d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8549a57-c7b7-4827-9452-d1ade92a4ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0888400d-b0dd-4941-a0aa-d38111def1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920fc783-83dc-4176-8f93-a962aa343676",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a56d760-6336-43dd-b1f6-d47ca4a53815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec73fc10-a6c3-4680-93b5-6badfc5699cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a625d4-5471-41e5-9750-45407ff85735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9530a73f-21ae-418b-b997-58bc201cfb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5952049e-73e7-4c34-8e81-8eab5e77538a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1e9093-29c9-4978-99a9-d8666dcb7114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fefdaa69-0e3c-44f0-ba0c-853e9102d390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e97f661-9e6a-413c-8555-53f98fb93201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc8be3b-7ba9-4aac-9373-9588abd3a64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b035301-fbde-4f7c-aeff-278e1f214ca2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b26fd9e-8d0a-4f83-b82f-543e970862b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f21b0c11-e305-4887-80a1-cbb782ba1d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3626a567-83a5-4675-88c5-0e35b5df0603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1be561-8ae4-4391-9e73-daff2d98b101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cf0bb1-810f-4679-841c-91ac453f05d3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee461db-2ed8-498f-9cd4-3aedbc9b4c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3db0d3-dfbb-43b9-8105-b30a1fe1b4fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554f77bb-b793-4629-9c96-b218c6522ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930aad43-d487-459d-b2a6-e229ccbc94f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743f0f93-425a-498a-8f34-c0e1cc9bdd21",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4c0c7f-dcfd-471c-a1ec-532d5d7ddea6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5d20d52-2417-4aa6-a97d-a489fde67504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00445ab-700a-4672-8043-30c0cc5457a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f370d10-d95a-4bf0-839f-86532ac54e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94ea6b6-7344-49b8-a0ea-07edd5014326",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088a60cc-228f-4d4c-a25c-825d48b27358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30524d5b-fab6-40d8-ba90-f1d778e886ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d3faf0-cbf2-405f-a10b-17129d7c3897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f7b804-0722-4839-baa9-9cb3a1122c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61bb78b3-a00e-4ad3-b5a2-f32d1628e389",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac4b460-c693-4666-8aff-82926e320b97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e436cedd-fbf2-4e57-97d1-6a20e213c461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3a9e10-a979-461b-adb0-ad0629fdc458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ac10c7-ab49-41ca-825d-04d671bdf8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6568ff0-0529-428a-9d3c-cc56463c6420",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b97fd4-2411-4a35-9abe-9c5c30c45c39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b329fd4-57a5-41cd-aedf-a89b10d3e905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c97b9ec-2852-4965-bd9d-d122351cc270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a809511-e2de-4733-a341-97bfecec8130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bc8667-f68c-4da4-b703-f1f675543a29",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2ac674-2ef4-4a64-aa54-bb8b8fae93df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4403719e-1bc8-4280-a89f-d34194612eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021f8e81-7704-4d51-b7d9-5cef551bbfea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41479f16-83b1-48af-8b79-386c91709e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c2cf24-881a-468f-9236-fa2f5583b3c5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b714533-14bc-4855-8ce6-94ff9f3783ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "617050a0-feb4-4ce7-a947-28798ee1cb3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "127c99a1-07ab-4fba-a616-e4995cd6eb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71976a2a-532a-4496-92d3-a7d316a2b082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b860b6-66a1-4a92-9c64-aa1de0865290",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8431bea8-d77c-4f6e-a846-b3f71337e195",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6de37bb-6061-4625-80ca-5ea177bb5ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aeab370-4050-49ac-9472-ec1d78ccf43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec504223-6e06-4dec-a314-a10fec9c8eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31951e44-5abb-4694-a289-4e9cde174950",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a449904-9a7d-4639-acb3-ab5a1672a808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "116781c6-9fbd-4cf4-a52a-1e1ba16d9194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cec71f6-287c-4ea4-bff9-f0e29d1ab6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356d0759-53e9-46a9-906b-5f100c5bb413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1757a955-c16e-4367-9517-fb6f799c8054",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff0b325-438c-42e4-9118-f190ba9ce4b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2263dc10-06d7-4ee7-8f0a-ec23f4fe9a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5acba72-503d-4153-a1da-6749bdabe5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca6a207-c7a8-49b9-93cf-413db60d05b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5fddd2-0edc-401a-8a12-352d4689528f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f07df3-6361-4df3-ade4-6b2fb59551e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b04eccf-4dab-4f4d-97ed-ad25d98cb4d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f68618-28a4-47f2-b7e6-71a60e571f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18cfe14c-9439-4ca2-8d65-27a7cd776fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc6c4f8-f213-4111-bc32-bdd05d58d6bc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c59fbb-3abe-4ca0-88d7-2f2317d97c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ad2cf03-a8b3-4b1e-a846-9bc17c95dc12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e301cd-739e-448e-90d9-59e82fb0a9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5926aba3-799f-4a74-b79b-82ef253c1b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd974d7-7321-4e7f-bab6-db489f10dcfb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3392e6-50c6-440b-8912-47d74d7ee50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47fd5512-1f22-4b5b-b4ed-fbdc922bce97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d371cf9f-6a2a-4226-9dc5-8053a5fba7bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "745695e7-1ef9-4277-8bb8-42f5dedcaebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2156a86-57c9-497e-9b94-e3e7fbe36e6b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4092ae4e-d8cc-46a5-9ef5-7cebc55793d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8095313-d7ef-4d62-b3b4-1ebe27e635d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b450c0c3-a3a8-4d8f-9e8f-e56f2ee0e841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6b8c00-27e8-455d-a52f-46a3ccbdd24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304a0e79-1f4a-4e30-95ad-8b44dce9a6de",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3e4db2-9ebb-46e8-893d-87d4220cc31e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a146c3f7-c5ab-4e3c-bcce-c3d1627083d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aafa9c0-d18d-4cfb-a78e-4c9255f29611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4f4360-40c1-48e7-b9d5-7c51b57c702b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8262d250-214f-4671-8b86-b467f6db563a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8c3470-a427-41c5-93ad-d200058ac563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bb218e-f8de-40ea-96be-ce6542cc7a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6631b3a-6530-45e4-93d6-c3ec765f402b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8a8ac2-294b-4f4d-8fa1-53b4b22df962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49dc39fe-f193-42de-af2e-a0acaf22b2f8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f49c79-42b5-49be-8633-9cf17a9b50c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1c3bfe-773d-46a9-9595-9683dce23243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5e29e1-f44e-4824-9265-5e7b53053063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cedd4e12-3792-4142-ad06-9e41b8a6a619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055fe2b3-0d47-4585-9240-39570517b367",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2002464-c823-49aa-9ba4-cf8c0c325b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2245f95-180d-4d24-b80f-d211cad09309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "108c9c7b-b70c-4bf3-acb5-d3540a804619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785f075a-7dce-461c-bb25-21af414b2691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5aba41-5033-4830-89b8-60c89fa760b4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7781df0c-e535-4391-8224-21e47779a287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88cb1ea9-8c38-4492-b06c-f517cd598b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886679e1-29df-46e8-b172-d32a7cc52625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec4a780-45f2-4b1e-a850-54ce7af79199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a24b9f-9762-4d21-b107-865b812fb4b4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d946c33-527e-40c2-9519-f669ee5aa3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9761c372-3c63-4467-a314-de95a5321cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86be91fd-e5d0-421a-938c-372c58e23565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24f733c-9675-412d-9159-9064f6c5ff1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d67a87b-2277-4399-ab83-4ef4f01b3bda",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd4e85a-31a2-4ae5-9bc2-3b888916fb70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322798e1-8992-4a9e-96eb-320a430b05ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ddcc72-bb28-4e77-be97-b3d387f3d44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28fe5049-9c0a-41aa-b0ca-aa7ffc17f1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e418685a-f362-416b-b1b4-eedea876f348",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc276e12-ba8b-4d92-a12a-a86131a20677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9013f7fa-360b-4166-bc66-2ffd97be021b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b315432-54ba-4546-9cf4-16ee1788a23b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0feb5103-683e-40d1-a5ed-f28b12343b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3ec773-9765-4773-8ab0-951345336ec6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3962a668-70ba-4c89-863b-3830559b8c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a8d85c0-b652-4ca6-b1fc-7e92ccb4af4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82462436-42fa-46e2-9fe9-131ea2fb73b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1922504a-6b0a-4d77-82c5-2be2d63c56d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53ee3a6-f064-49e7-97b9-8fb5c239c5dc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b8590f-54ed-4d97-ad8d-affbba50ee44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed2d147-85c5-4a02-9ff6-ac1dc41e7d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e227f27-2db3-4805-9465-c79b53fa2c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ca9c99-55bf-4b1a-892b-b0ad97d697bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e6e3ce-4aa2-4c62-8d65-90340280a3d9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9585f74d-e8ec-4d41-bc6b-38be8b0538dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6a7661-30c3-4497-bbba-8830f89d4a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3c4137-1843-472b-b3a7-54358a2cacfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10316ed-9c2f-430e-9cf5-20598a118bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96160aa-bd2c-4770-a1f2-f7a2a6432bee",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e81a37-5594-42bd-821c-883addd181e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef306444-a056-4ade-a6a5-8ccc341fbd50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29fa23a-fe14-41ad-9db5-26d732dc04e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe17304-2efe-4a07-a2a8-770f2094bfcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3732eb1-24e6-4772-a1d6-7356aa9d7157",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec05327-eb52-4e10-907d-3bf737e8101a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f669f7-9600-4a9c-b285-07a21d3ac8a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "660f8550-ad1c-48e5-b170-a8a83ca66d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0363bc-6329-4f9d-8942-930da6953e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bdceb8a-bef7-4661-8e22-f5e830bd10aa",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406a8740-2b91-400f-92fb-6419728b12a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd74b6e-8c13-4db2-b48b-b566c6a3fdc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2951c3-689c-4b44-8836-b80c1d885a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc2b99d-a834-4b18-81ad-20363b64dc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8cf029-779a-4736-a537-d57e6d58bfde",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edfdb35-0b84-4395-8316-ad4dfd24f407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a1f333-7c95-44e5-b826-39dc2825a91a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e051294-2aff-4c89-aca8-1435d2ead448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36809c20-f732-4db3-a167-9fa41aa96c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77242993-0bb4-47c9-bd1f-d00dc8fe0675",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd8a525-a174-48df-9707-5d52b5b29ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45c3d0b-ab6e-4496-9b14-00834fe35091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee74e1c4-ded6-4cf1-871b-75602e5dede6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715efbea-d644-45a2-beab-076b96cdc6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1f6a5b-437f-4f29-989f-8bfbd43069a7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d667d60-3cba-47ad-84fa-e362b5211a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd81d4a8-8ca1-4fa6-8851-e0b11bff7688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e573171e-1604-4479-b0ef-76ffad172fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385fe6b9-0233-4328-a379-3fbf61c65a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e112f950-3ddf-4b0e-b014-2d86e7854501",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42458079-e30c-4989-b91f-51750b638031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988c4e9f-dedb-4869-bf0a-c16d096586a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3223146-f68c-437d-92a9-08fc5b4c646f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda8b8e1-504c-4362-a871-b874c6b16a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df78cfe0-adac-4819-bcbc-aa07de18e4b6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9922f307-c36d-4254-8bee-0831e70050b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2949b55-895e-4ddb-ae2e-1d3cd2761a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13244de-cc45-4e47-929a-3598d2266d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ee90b6-5c6b-4ea8-ac1b-96acc2f48342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7ee6d9-a1c1-4c48-9476-b2df6d9fcb9e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6ab054-4328-4e18-8736-ef8d6d077a51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "961cd46b-92b1-4261-ab4e-5ef62c1db531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa22596-4684-4d40-8a1e-fb757d9f2957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d1c512-411c-4c8f-ae60-0759bc961e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da21c1a-81f6-4b41-9e9b-67ece09f5e60",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6cd6fc2-2269-406d-a463-a44508676f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb060699-9df9-4a33-8ad6-1666aab3f053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "078940d6-6ecd-4b1b-ad8a-0c7beb9ea3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e64ace-382c-44f7-a15e-2c5257757f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42aca4c3-ad4f-4a3d-b121-294924e110e7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47c9331-9296-4b1b-9c0c-a261983079fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4205190-6e0f-43f9-ab68-0a4830d95046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42168839-d557-4afe-91eb-60945beab10e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8435e1-5cdc-43b8-a7e5-c5c3b7221c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00264a4d-a060-42b5-a863-26a21194bcfa",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85cc209-f8f6-44e9-bf82-a2253cb386a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53499ea-49ae-4957-91cc-7f6aa3100219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "793449c0-5050-475a-ad41-8fa0bc39844d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37aa8ecc-781e-4db3-abb8-8bd8918da486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df7fab3-7b11-4ef1-bac4-f5ec468378c6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a48e244-1bdd-401c-9421-0480221a37f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f634f1ac-4f30-4e78-ac6a-02c4f7c8b8f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280a34a0-e13e-4bde-a45a-75ebb6fe553a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d1709f-4823-494d-bae2-b4798c0ca109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2c60c8-8ace-4500-8f22-154923071e98",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0643593-2de2-4624-bde1-c29ffa249f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1f6d77-eb45-49c3-b572-9da4ff992b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b739a0e2-c68d-40b6-929b-d40df90a2f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a810c89-dae5-4b9b-a3e4-998a9bde3232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca4c17d-ddbe-4a7e-a62a-95e91229ce7d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b662717-d14d-415a-8574-0a5f54b6912a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65b8cdb-8b84-4bc2-9eaa-42e452350c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a38e66-46cb-4926-99b3-8f4a655c4606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "732f5a8d-57f1-490d-be9d-4dd53c33c266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbab491-0233-492a-bfee-24d52724631b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94651b8-36e4-40be-9c3b-e1f2d97c04e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185210cb-dfc8-419d-8c88-f304d058380e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc32a706-a611-41cb-9290-4404f59098fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e0caf7-7330-4c23-8e28-35e09ea35bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2f9b3d-9396-4395-9160-cbd4b46667da",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336370b9-4f30-4498-b1e5-dc6dcc9c72fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6129e4db-5ad1-494f-b2c3-932a3d4af1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d24625-278f-4460-8efb-34fe8895b4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b76b45-c31d-4b9f-b493-cbd3a72b71da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beedbd17-c7bd-456a-9783-935b62eccac6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64870df3-d54d-45d1-9dbd-94a05e3b9b92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4685d0a-b152-4fb5-812d-f38f76f5530c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6680b245-78a3-4aed-95bf-6cc2fc075507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59118d80-894a-4fa7-905a-96acde3352e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6210ff9d-2537-41f6-8484-850419a2efe7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d25516f-0113-4981-a569-64f16183b0c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c6fc6a0-63aa-450c-a65a-868d4fcb672c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c56e0f-0d45-46da-b28a-eebf4e919133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b62f09a-d5f8-48dc-b167-9ea79fe57e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28258f8-4d75-4e3e-83bc-f258b677906f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce288d86-f7a1-4945-8f56-215d159ed3d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f772a64c-4ddb-4aed-a97a-cec24838c1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362756b5-6e7b-4691-b938-6f5d84b040e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558336b5-c606-4dd8-9b12-05c03498bb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7953a5-1426-415f-98ff-572af691d26f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2858580-0490-406d-9ab7-e17aa6815f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2be332b3-8cea-4df5-968d-6c7f1fe8a610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6844de7d-f1ef-4c6c-ae72-263e3f8cd272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d57fd156-0519-4ebe-8737-e7f252323ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c947f45-b2ca-408c-9b60-f6633dc4b1ed",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c82595-d377-4142-9c10-aca665089d3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1602dfd4-2c0b-49fb-809f-f19f5dcd4ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bed8cc3-86fb-4c5d-ab85-0d7ab5438e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8b0f6a-6bf9-4e20-8ecb-47ff080fdadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e827ec-e401-4922-9d86-ee22b4f02bf4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6664b6-05da-45ed-b279-af24d46c0bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5112e631-86a1-428f-b251-ea6fd02d225d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60e24ec-0abd-4c21-902e-a3c958c2ab26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8df0c6f7-b75c-4cbc-864a-76e84f6df66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b8bc3a-da31-4d86-95c8-8edf9619ea9c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560e260f-0b24-4746-8fe6-799738d68771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78d9910b-1ff6-4e5e-9e26-f7e8fe722d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fe5683-6308-4e2e-bea8-383cf34fb327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e00b53-2e9d-499e-b52b-aec90bf34da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee907f2-51e7-4b75-a265-2dd159aadb26",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7a07e7-64bf-43e3-8746-9adba69164cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddc5aae7-cea9-43db-9a0e-663c8dc8ff6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf0b514-a08f-42c5-b2ee-22bdc558b394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c018f6-ef0d-436e-9173-a0afcd607814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5509bf-a56b-4556-a300-5455c9256bf3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2455972d-e1e1-4785-8d8f-fc56db574b0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe65e33a-5639-45b0-b489-467758a71f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33668cb-3505-4787-846c-ce50006f0e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a22c0b-c877-46a5-b109-b795666d1c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcab1af7-da78-4527-9670-e8af3b9333e0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82c0c43-c778-4e32-8c4f-1217e86ad60b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f914beba-9f83-4680-b8ca-d1da5ddeb07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2f7e86-9023-49b8-b29c-8762c55b3281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d046fd68-a80e-4a0d-aa9f-a2191203e7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9342494-34a1-4d77-a2a4-70d35ff3cdb7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c5e2e0-7b80-4f44-a655-c79ab7a44b64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9488f46-c958-4518-8c59-6da95f4c28ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc9a45b-d392-4e81-9d14-f129fbfd1bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d022c64e-44ea-4165-a03f-ef8c50e11efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898d4f00-3d2d-47ff-ade1-b71ba549eaef",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c4cb94-0ab2-47e8-ac4c-f55b834779c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afb0076c-82a4-474d-9512-c5239d538017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cbea24-fe3c-4be5-a036-da8e029e73fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a861ea66-64e6-4cc7-84bc-b50ed5f30387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff40b4f-366b-4ca1-8307-3a14efdaf53a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d0d197-a5f6-4a6d-bcb3-884a65e7579d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be473def-03be-4917-a0df-fb99e6d69ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1831c3-1acc-4972-9315-9a538545e012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0bf2a83-2ba3-4fdc-b53d-0855cb2234d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db52dc8e-cebc-40b2-b20f-9d4470a084e4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb83b16-3f62-405d-89f0-1f582453d64f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84bfab97-1369-499b-973f-06beb9c1fa27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "231c1b2d-acd0-4543-aa5c-a9b786a0b96f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e95595-387a-48f9-ab4b-d0333fda63bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18173a0c-d655-4d7b-9fe4-336c332eed99",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d5d726-8039-4f3a-a645-06ff1d92bcb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dffda05-5263-4618-a16a-fee1942a3af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e37d2b-a65d-4cc2-8c66-baff8c1434d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8c9e27-77fe-4e86-970f-b59672e649be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfd5372-81d8-4a7b-8c6d-d794ad79dc84",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7660cf7b-be81-45a4-975c-700c026d6c9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86efba2e-f6e6-4722-8e77-8f84fc018de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05873084-4224-4473-a4a2-cf397b1a1351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206bc0eb-9ba9-4f6a-bafe-4b85ce1cf728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2817815c-ba8a-4bb6-81c2-84da8028b9f5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91991073-4918-424c-99c5-36ff844c9458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb05429d-2eea-434a-8443-2831d5bdb222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa643b79-3657-493c-8988-ee9b780b86db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb923394-cbc0-450d-9105-28da2e8eab26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563a7051-f0e7-40a7-981a-4bc9225b88da",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d721ad95-68df-4f30-8f75-3a4812235ea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "013f34ab-dd32-4137-bde2-2e03e9ada26a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb72342-80dd-49fa-b3c1-36da74234022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab059a5d-11a3-409c-9982-73bbf74144dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fe6d42-4359-48d0-b4a7-618afee7cbaf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce97a2c9-0b62-4573-a3c3-b5cfa7d6c63d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be33d851-ec0c-4cb1-99b7-6dba73884f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d998f241-4f9b-45a6-8550-1e5f3eb080a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440c64f6-307a-4204-b9d3-863d6b77ae89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc6d6db-9552-4c4e-b1b0-9489a94bfb2e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3024ad9f-5c83-418a-9550-cce1c7ad5f62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d3d0d2-52c7-444f-9bd9-83c1cf6d5255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bcd428-760b-41ed-a73d-525012843a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49b855e-f292-44a7-9490-22e7b76c59ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab2cfda-d36e-4930-8807-b838544ce956",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e35ac4-e8c8-4772-a026-977762f4f17c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45860926-bad0-4aae-8817-f05a6e458ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a065f9-ea78-4437-8d72-cd69117c94d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3a356e-32d3-4f29-9229-7511be6e34e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e52076-fc23-4813-997d-aed11c25fcd6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14967f43-36ca-4d29-99f4-eb2cde8a8cae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb360c41-c86f-4b82-8500-e6d633b1bbbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff8f9ff-8137-4c90-894f-61a8f9a1dd6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d380b9b5-299a-45b0-acba-abb090bb9891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fce4e79-ae52-44db-84d9-1c1568525dcc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e555bc82-1b1d-4098-a62b-4b1be39b30e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81a83048-4f4f-4680-8750-6a2e04237a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5857c605-38a3-427c-b4a4-b3b8488b5aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac6f7aec-985b-40ec-817c-bb9a3e534728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832da9d7-7b00-4aee-bf67-9a4f14d14fca",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08360f96-580f-4a17-9c60-030653971597",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25afa2dc-2205-47cb-998d-069f6575c356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe30ee0-9ad4-4245-8c09-3a468c1e9656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe3c241-edc5-42cf-a05a-165695f47eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c664f69-9ebc-4945-a233-a16203e7d767",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec2e1e9-a9e5-40cc-bacc-1d8005426943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b24ef289-3a46-4da5-9368-7e25e59d954b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "822377f6-a88d-4f5c-9582-44d83f34589a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aaa5cd6-7715-47cd-a1c2-ef11d4cb1055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f24bb8-4bec-43e4-8495-99e81beae05c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1fc8d7-b596-43d9-ad48-2baee375bc46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535e7e11-83e3-4f23-95de-4408ca5bf717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6800cee-57dc-49f5-b44f-f72216394823",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ed3c46-5e0e-4d65-b991-e0e49ec05d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e297192c-ea45-4616-b798-d28ef75035e7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb332580-c36b-47d7-93fd-b9951d1959d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bb7e107-da34-4115-bbfc-3409dad753e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7927ceef-12e5-4035-be49-372122fdb78c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "559800a4-4c6d-4c59-8e29-8676dde15b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5ce087-ec5a-4905-96d9-c4aaa3c93b29",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0580a2e6-e2e6-4aac-849c-f757e64604ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff0e598c-daa8-42b2-8081-4421be20e4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24a1f82-03b2-4ae1-93ec-5d71fc1b29ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0af356c-fc5f-4853-8ac5-19db98accd9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa2a097-1ed8-47ad-99a7-caf9012ace78",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6e6ec8-99f1-47bd-b5fb-2ae8844175e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d89198f0-d533-4902-8d39-50aba53c13ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8a81d1-d774-481d-83a7-e62b206ae25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8121eff1-bb95-4443-88d5-842a0d29c556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237d9afe-a6e4-49fa-9152-6bf1afc0fbef",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f65155d-1aa5-47d6-8285-65e8cbbfdfcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b1ee9a3-5213-4d12-969c-8296e88e942b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e77ddd-a0a1-417d-aced-ec7211025eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7583cc6f-74df-422d-82a3-21379234b3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa0e339-db2b-4230-864a-d1fe73729495",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b1e005-6501-4b4e-9cbe-56cc5bcdb1de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "423da86a-4610-4ed3-ba38-a57894566788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38700421-fa88-4ac4-9cff-57c96c69bf48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fed3fc9-7c0f-4607-80ca-8516d98a1f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1a9612-8c1a-49b5-a8b9-d4f877d762d4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f5aa2f-2d26-4e55-a254-8a2389eace24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c1dd479-d94b-4629-a32c-171ec9ccabb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589315a3-62aa-4f2a-8661-ff4c0b426459",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c64d2496-a93e-48c1-ac2f-ae7cdadbc896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494f8336-fa9c-48bf-b836-e95b6b221bcc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70d64b8-1457-4acb-88a1-a744b8033d6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deb7d591-89c2-4a09-b710-a99267ac0e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b1b87d-a90d-47ff-8fae-21aef7a269b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e875b6-bef0-433e-aa4f-460411c40bcf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "868787bb-3f4d-415a-b305-ab9c0abb72cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "050057a3-805e-446d-b074-48cc8088f971"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6afd40e6-8314-4ac1-b814-0f84f4ca6bca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e335f32-f4da-453e-a417-af494b62c89b"
                    }
                  }
                ]
              },
              {
                "id": "cdecd002-68cd-41c3-ac9c-9f824a46c582",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5fbcace7-ee07-4a8e-a74e-7114bac75520",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83ab91a-7a3a-4d16-891b-d9f47f5227e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b997d468-9d05-432e-b77a-87c58d221595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60306ff6-2dbf-4b4c-b211-1e82222c3c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d45bac79-705d-4821-9e5d-a07d1f48b68f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5413483c-b90c-49e8-94df-e5422a7d15ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72243459-c192-434e-a5e5-c4f65b923761"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6eaef48-67cd-429a-a1fe-d25dbaa98c41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dabed3f-2660-4526-86b6-d60eb36da5f3"
                    }
                  }
                ]
              },
              {
                "id": "01d16006-79ae-46ec-942a-bb96b59a427f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "688e1f50-d3ea-45db-aa70-9c4e4cad9579",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e1a110-2c4b-482c-b9ff-3adb795bec19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d1c0c3e3-1b32-4165-992a-f37e51c3f0c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca68d08-8f58-41dc-ab92-7646f6a6c2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68403e7-fe28-4866-8a03-002945144a4c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d0a1cee6-b9ad-491b-8d00-90f5e8eaf12a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bce2caaf-4b6b-43ba-b445-d80bdc9f5022",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "019b908e-f8ed-431e-9c82-fd41373c9636",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "eb66a9c8-c187-4523-9d5e-aaa762c83c2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de0b813d-138f-4209-8da2-083522d86fd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61c8008e-2a85-4087-aa79-147442ae829b"
                    }
                  }
                ]
              },
              {
                "id": "9dd115b6-8865-4950-abef-7ca7825381a5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9bead11-944b-43cc-a8ee-06467380552e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8860999b-7c76-4b4f-8d00-5a4b7e31e0e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d65fc89-dd88-4195-86c0-f01c7bfd8b0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5f75575-8cd5-4b90-bc86-bd86fb7b1745"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98fcfb7a-cc98-48cf-9f73-9b10e4cab6de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e65e5519-bf0a-4ecb-bd45-e080102b824e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "115094c8-fb02-466a-a14e-3eca20a4f3ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53d79c6d-e78a-47ea-bd4f-c6430c58fa0e"
            }
          }
        ]
      },
      {
        "id": "b938c473-d137-4c53-b1e8-efe2db799c3d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7da97f1d-876d-4104-a508-3b24d04c80f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ef33354-a186-40ec-a1f4-6c9355972212",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9eb86f06-151c-4817-98d3-96e5fa55b06c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f13604-b493-42ff-9b44-25174a3f7e78",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3c7a9d89-68b2-492f-bb53-cbd11fc129ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51440961-467f-44fd-ac41-619ff871a848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "055e9af4-613e-4a36-b82a-4a0afced743e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01c704d3-d9e7-4df5-9bdd-59e3a1d54629",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a8c5588-c480-4078-9b31-2ab0cf8f6cd7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53658fe2-4e30-4052-973c-0e3adbbbfd06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaa3fcdb-d70a-4715-a53a-5890cdd345c2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c821d5b-0a08-4ca6-b104-f68b44c9bea1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6dd506c8-6b86-49f4-b977-7b3ce1dab97c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8914b383-8c9c-4d5a-aea7-76a906d88b26",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ab4796d-b4bd-4a00-8669-e29993a3070a"
            }
          }
        ]
      },
      {
        "id": "421b1ebd-7993-4f6c-ae37-a16ac1dd6926",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b6542b20-c9c0-43ad-9ded-095b8603da4c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4fba8d06-3ca6-4a40-a541-3478d37c3c7e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61f8bd10-51a2-485f-ab1e-deab85a8ef32",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb1f15a-3ece-4b0b-ba7f-3f3de58fc740",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce273533-8b09-4e83-91b9-d605e249843c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef124846-304d-415b-856c-2c463f215e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbac1dc4-251a-4e5d-9b09-fe4efade77dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "374b1c82-b3eb-4fa0-818f-bc383459939b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9477de8a-64d5-408a-b474-336db6e30bd3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b79f980-c103-4efc-87ba-770e8283ca66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17bdc7ab-b0a5-400b-b9fb-61f5aa29e475"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5dfc0283-688d-402b-8400-0eb9b46fb266",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "094ba9ed-2f08-48fe-9b11-3e0a23421aaa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00b89241-1fef-4f3e-bf65-a967c0e29d3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e74f34b-ba85-496f-b51f-a8988f9e6630"
            }
          }
        ]
      },
      {
        "id": "b017abde-3047-48a9-8db1-cf5b93e1910d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a0dbc870-5d5f-4094-846c-4284322705ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12b89894-d6a7-4780-813d-82532232f2cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a76f4080-5156-4fdf-a35e-c59d011cc147",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a751a5a-f381-41f9-a96d-ae5a1c5ea213",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0e175a4-446e-4b69-8b7e-dfc1d4f9c316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82865e4c-6412-4f96-bf31-6a7393ed820b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d47ddba8-7bdf-4e0c-bdcc-63efa0719da0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56820086-c6f4-467e-9109-51a6d1dab665",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bac62a7-df5d-4fdb-a019-2b14292d4831"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "589e68c4-a4c7-4ae2-b459-2983aed4f7a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ad24253-63b3-420e-8a4c-5a6083b26c57"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c951f3d-778a-4c42-86ee-4bdd59d9296a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9d1ee6c1-7cac-4ffb-8d72-3b3133b1d248"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cb46daa-e5bd-4f21-9a07-d8207511280e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "881e9014-2581-4070-acde-9efbcf902ec4"
            }
          }
        ]
      },
      {
        "id": "9d7700ee-405a-4e66-9c52-0cc71e5fd629",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd43d9cd-3ea1-453d-9946-ceb6c5ef4c38",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "149698ab-fc44-4450-bcfe-5941136fcab4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5e6130cd-8852-475c-8e8a-ad7732e6bb8c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94d2cfb7-e60a-4f37-bac7-fce612dff5c5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c387f3a9-9668-4ab9-91aa-820ccbadf063",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.3174603174603,
      "responseMin": 9,
      "responseMax": 679,
      "responseSd": 78.35193809392223,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713227678339,
      "completed": 1713227701234
    },
    "executions": [
      {
        "id": "dcbdaffd-8577-4794-95f6-07ab9bf557b4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e6d6667d-4629-4f07-b7b7-f62e985b9ba1",
          "httpRequestId": "94d64f8a-a40c-47d0-800d-5845219bb144"
        },
        "item": {
          "id": "dcbdaffd-8577-4794-95f6-07ab9bf557b4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5ff7def8-37d2-43ff-840a-50fae4cfdf83",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "dec938a0-623c-4f57-aabd-abc0d5ccd993",
        "cursor": {
          "ref": "6d170933-1e27-476f-aad8-44adce584773",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "46f6dda3-40c5-4ce7-bf08-484583576813"
        },
        "item": {
          "id": "dec938a0-623c-4f57-aabd-abc0d5ccd993",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fdb52c4f-62b0-4ef3-8d6b-72597b84edbb",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "bd37fd7c-765a-433f-94f0-e7dd95577aa9",
        "cursor": {
          "ref": "8bb71f60-6bdd-46f1-a0eb-c48f008c25f7",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8bda23e1-c6bf-48b7-8788-6b9885cd1759"
        },
        "item": {
          "id": "bd37fd7c-765a-433f-94f0-e7dd95577aa9",
          "name": "did_json"
        },
        "response": {
          "id": "c7410845-ccbd-46cf-b694-700468a3ca5a",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c1185f-49c9-4cca-b6b4-2cdb70a3ca9f",
        "cursor": {
          "ref": "f4dd05a3-150a-4273-a0e0-06cfee9edab4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7f551002-4059-435d-9065-3e41f24767e3"
        },
        "item": {
          "id": "72c1185f-49c9-4cca-b6b4-2cdb70a3ca9f",
          "name": "did:invalid"
        },
        "response": {
          "id": "a1811362-d3ef-41a8-bade-3ca3c11c985c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c1185f-49c9-4cca-b6b4-2cdb70a3ca9f",
        "cursor": {
          "ref": "f4dd05a3-150a-4273-a0e0-06cfee9edab4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7f551002-4059-435d-9065-3e41f24767e3"
        },
        "item": {
          "id": "72c1185f-49c9-4cca-b6b4-2cdb70a3ca9f",
          "name": "did:invalid"
        },
        "response": {
          "id": "a1811362-d3ef-41a8-bade-3ca3c11c985c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731644e2-4af3-4977-abc8-c10aab2c4f2b",
        "cursor": {
          "ref": "5de92f1e-2d15-4f10-9d49-3e22d21d989a",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9d7fe2d8-a088-4c75-a8e7-1261ea7ea2e1"
        },
        "item": {
          "id": "731644e2-4af3-4977-abc8-c10aab2c4f2b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a0096d03-c317-4fc0-b9cb-58659b6211da",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ebded8-4a9c-426d-84a0-4696deb2914f",
        "cursor": {
          "ref": "3ee3db48-c886-415e-b2e0-13fbc69020bd",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "35e6f983-572a-4fd9-8a55-b2ac9f1e7921"
        },
        "item": {
          "id": "36ebded8-4a9c-426d-84a0-4696deb2914f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6973b729-e94c-4803-b500-09632449cdde",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f46dadc-b867-48c5-a705-bbe26f86c4e8",
        "cursor": {
          "ref": "939e0df8-8aff-4ad0-b5ee-9291e8cf2388",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0cc44bc2-52bd-46fd-8d68-ebe015bdbf87"
        },
        "item": {
          "id": "6f46dadc-b867-48c5-a705-bbe26f86c4e8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2071316e-017d-4060-b584-af162e7f95c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407a6c40-e72a-4919-8986-7ff7cc50a5d8",
        "cursor": {
          "ref": "a2c79a6d-bdb5-4fbd-9e0d-6a58f250b8f3",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "24c18a81-c8a1-4cba-b231-9ef380d63cd0"
        },
        "item": {
          "id": "407a6c40-e72a-4919-8986-7ff7cc50a5d8",
          "name": "identifiers"
        },
        "response": {
          "id": "b102d30d-4d57-418b-aea2-8723a5277deb",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df22de4-f08e-4990-9626-bbf11055ba38",
        "cursor": {
          "ref": "a380edff-2858-4d1a-94df-d6e9e2908dd7",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6540a482-0dd2-4e70-ad1b-01f9727b7916"
        },
        "item": {
          "id": "5df22de4-f08e-4990-9626-bbf11055ba38",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "47cb9f92-38e0-4d6d-8e3d-2004feec88b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dfed0e-1d5f-4c92-9127-23ed530fa10b",
        "cursor": {
          "ref": "3909c6c9-32c2-47c8-9f00-25808d354657",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ade0ff9a-7edd-4c4b-8059-98306f31df36"
        },
        "item": {
          "id": "d9dfed0e-1d5f-4c92-9127-23ed530fa10b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c8dd98e1-021a-46a4-915f-1417947a648a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803c7228-03d0-4455-a222-4032b74e1a0f",
        "cursor": {
          "ref": "965d124f-3077-4e63-9e7d-90a55a8d4263",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5198cf1f-774b-46da-969f-73ff766c52a4"
        },
        "item": {
          "id": "803c7228-03d0-4455-a222-4032b74e1a0f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f62fb6b4-d788-41ca-b0cb-4b96db4045a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ccebe2-b450-460c-85bd-7d1377afbdbe",
        "cursor": {
          "ref": "a8e97d61-8302-4a12-8717-a3766e83f410",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2207cc66-f1a0-4c3e-ad53-673d49b5e996"
        },
        "item": {
          "id": "11ccebe2-b450-460c-85bd-7d1377afbdbe",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "97dd2687-ca51-45b0-9a5d-404aa2579df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e002ae7-1ee2-4fc4-a1d4-4e4524814e7f",
        "cursor": {
          "ref": "a632be93-c60a-472e-ba71-103e34d9f5c8",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "67b26b8b-7575-4ae5-bb43-0ed4ba62c99b"
        },
        "item": {
          "id": "9e002ae7-1ee2-4fc4-a1d4-4e4524814e7f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "17641114-4e43-4724-a188-2b3b0cbd20f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72e7c98-3c34-4c7d-a15e-72efc22dfb7c",
        "cursor": {
          "ref": "8c9c1d4d-36ce-4756-af9a-e0daf9062a92",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ded590b4-dcf6-411a-81ec-a18cd9150d4b"
        },
        "item": {
          "id": "a72e7c98-3c34-4c7d-a15e-72efc22dfb7c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b676643f-e355-4fd1-969b-3fbcc427a160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92574aed-bdfc-4fd9-87a2-b5ef724f6122",
        "cursor": {
          "ref": "e80a2eea-0d01-4914-9df4-2d9e5368e948",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fb38532b-8e42-4c22-9f4c-391dc281aa8a"
        },
        "item": {
          "id": "92574aed-bdfc-4fd9-87a2-b5ef724f6122",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "57833ac4-56e6-4b89-81c0-d0d183f2155a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ee9682-c1e3-422d-a3fa-9fd853df7c9a",
        "cursor": {
          "ref": "820f466d-bf20-440a-b57f-7cc3c739f025",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2d516522-7b57-4603-91d5-13cabf9e6453"
        },
        "item": {
          "id": "22ee9682-c1e3-422d-a3fa-9fd853df7c9a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e52ebedd-2954-4300-b193-9904a5c60e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136fabff-4aef-45ec-9c17-21e4b86100a7",
        "cursor": {
          "ref": "29b86938-6605-48a8-9b17-9710612af143",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2352bda2-1cfc-4fe0-bfbb-932b6896c93e"
        },
        "item": {
          "id": "136fabff-4aef-45ec-9c17-21e4b86100a7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "94b168b7-c6cd-4a00-bdd6-1c7e614acd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2ff8b6-38e8-48f2-b9a6-df3d654a7b85",
        "cursor": {
          "ref": "c7ac6496-c6b9-452f-94f2-0bed7c0467a1",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f868b126-2714-4598-b2fd-43d7179eba8b"
        },
        "item": {
          "id": "ed2ff8b6-38e8-48f2-b9a6-df3d654a7b85",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8ee7af98-df5e-43b8-a0db-bcc895f55e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7590a2-a964-41a1-934b-ded19e2d5cc1",
        "cursor": {
          "ref": "2b0d340c-b3a4-42b8-8c52-1fec07c490c9",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3ded3476-d15f-45f5-a3c1-19a64f1e43b0"
        },
        "item": {
          "id": "6d7590a2-a964-41a1-934b-ded19e2d5cc1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a18b5b78-e864-4d68-99e2-bc7974e284a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a4666d-270f-4376-936c-995334035020",
        "cursor": {
          "ref": "2c49ce3f-ea18-4752-b4fe-7d9ffb937e20",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "850ded48-f97e-4c9c-b45b-7c681e9910b0"
        },
        "item": {
          "id": "c1a4666d-270f-4376-936c-995334035020",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "51870483-3aaf-48c4-a979-ec6071b82507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6317f364-1113-4fa2-9e0f-1745b16204cc",
        "cursor": {
          "ref": "41ef480e-bbcb-45a2-808a-a75d9ae9e7c4",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9385203e-0ada-4735-a916-e06ae5e25264"
        },
        "item": {
          "id": "6317f364-1113-4fa2-9e0f-1745b16204cc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "54370c45-b81c-4e93-a768-362f5514a417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5352b6f-d3da-4fd9-90e1-3190c406c8fe",
        "cursor": {
          "ref": "f07fdeae-c9f6-4da6-bac1-9902ab829ca9",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "adedcb59-cb93-4c65-aa53-81c4c3e88811"
        },
        "item": {
          "id": "e5352b6f-d3da-4fd9-90e1-3190c406c8fe",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8a2d9a8c-638f-4d17-bb24-556ef0aafe5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee09a25b-66aa-43c4-98ec-274c9a87d525",
        "cursor": {
          "ref": "a97731a4-e069-4337-bc1a-82dc09f66905",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9683d6b6-1bea-44e8-b356-3d8672651301"
        },
        "item": {
          "id": "ee09a25b-66aa-43c4-98ec-274c9a87d525",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7d76229e-4194-4cbf-aff8-1e0cd6d1aded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5dfb0a-0066-4335-917b-1807e15d1a4f",
        "cursor": {
          "ref": "d12224ad-51d8-4cd2-be6a-ab16ffd60613",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f17b38dc-9a12-43fb-ac47-2bb2c1c074db"
        },
        "item": {
          "id": "ed5dfb0a-0066-4335-917b-1807e15d1a4f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ed63a584-7092-4645-8dfd-2463c53b0eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cbb5dd0-e7f8-4e05-a61c-c5675b237580",
        "cursor": {
          "ref": "8e1d889e-44da-4faf-9ea1-d40a60fc4502",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8741af9d-1163-46cb-845c-6b4b15a78ecf"
        },
        "item": {
          "id": "4cbb5dd0-e7f8-4e05-a61c-c5675b237580",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "89055625-89fa-4ed9-8872-906519e33563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abc4dfa-1b06-48d6-8532-e2f459eff697",
        "cursor": {
          "ref": "1e309259-e154-4f7b-90b1-a36f934eb1dc",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ec53a5c8-bc0a-4336-8cfa-e3279f986000"
        },
        "item": {
          "id": "5abc4dfa-1b06-48d6-8532-e2f459eff697",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d9f43aa3-64ce-4faf-b2be-9d7a721ee9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609373cf-7562-497f-ab19-73cb889b9cd1",
        "cursor": {
          "ref": "e9c160df-680a-4419-87de-7be34112fdc1",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1387285b-ff21-41b1-84de-7adc41ffe486"
        },
        "item": {
          "id": "609373cf-7562-497f-ab19-73cb889b9cd1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "344ebe7e-0afd-41c7-b32d-f78e3e291dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919748e5-8050-47f8-a907-07267043a106",
        "cursor": {
          "ref": "cce0bfae-0d89-456f-8d84-169c937a75a9",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0ae1804a-1531-499b-a527-78eee934b05a"
        },
        "item": {
          "id": "919748e5-8050-47f8-a907-07267043a106",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "46c6c6de-02d3-4d7a-8e2a-0b7a9ad85b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdef2c1-efa9-4219-9383-0399ecbad741",
        "cursor": {
          "ref": "925eb941-cd55-488a-b8a6-ce825f084d41",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "25224d57-8925-4f14-9a7b-d12f7e391684"
        },
        "item": {
          "id": "ebdef2c1-efa9-4219-9383-0399ecbad741",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e4bb1783-001c-49e8-93f7-b1bcdb87bcdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74b2bc2-7eb0-4849-8dd1-5d3b916d8381",
        "cursor": {
          "ref": "947923ea-c6e2-421f-8c1f-18628c951662",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e58ed961-09fc-4a0a-8a9b-f938a0181361"
        },
        "item": {
          "id": "c74b2bc2-7eb0-4849-8dd1-5d3b916d8381",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "74b0da5e-2243-44f8-89cd-c5006723abbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226bb2eb-dc75-4fff-a345-a1baf9ba6b91",
        "cursor": {
          "ref": "a7c1cc1a-f78c-4474-87b9-86d03797bfa8",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b95f4d7a-c08e-40b0-bb5c-6425b19e24a9"
        },
        "item": {
          "id": "226bb2eb-dc75-4fff-a345-a1baf9ba6b91",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e583e953-1931-4d48-9c24-c16d00be7477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093da846-6caa-4844-a5cd-410c801c9bc6",
        "cursor": {
          "ref": "e98b0e2f-2ec0-4bf2-ae28-97656cd5ddbf",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "64341ac6-a6f3-453f-aebd-cda18eeb7d25"
        },
        "item": {
          "id": "093da846-6caa-4844-a5cd-410c801c9bc6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4f5bf061-73e8-41d4-b0f3-6deaabf2165a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e287d51f-976f-4a43-9e73-51a30ca5da27",
        "cursor": {
          "ref": "6f08bb3f-d378-43be-969e-5aacec4dc18e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "54328e7f-d8e2-42af-9bc1-2d31b374632f"
        },
        "item": {
          "id": "e287d51f-976f-4a43-9e73-51a30ca5da27",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6df462b3-a9c1-4dbc-9452-9ada89f52893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee91731a-237c-4f5e-b771-e32c931aff8c",
        "cursor": {
          "ref": "c9745924-ed47-4d40-b762-1a833204e0f4",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bb09fda3-74fb-4cf2-9423-155428ae99a0"
        },
        "item": {
          "id": "ee91731a-237c-4f5e-b771-e32c931aff8c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "10ed8d76-b2dc-47d0-9f20-fbd373a99f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7785ac-2b4d-48f0-ab06-9b246be8d6b0",
        "cursor": {
          "ref": "f69d1cb0-9070-4a27-abcd-06ceaf21617a",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "900ae837-9d7d-4671-9742-fddff7dd5526"
        },
        "item": {
          "id": "eb7785ac-2b4d-48f0-ab06-9b246be8d6b0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "87df2be0-bb2e-4abb-b162-74d732d57ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d8de54-6cc7-4828-840b-533cde973400",
        "cursor": {
          "ref": "45966a52-299f-4ef5-ab75-a6d12df48fa3",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "76a85bd6-732e-41d2-b2bd-92163a9db18e"
        },
        "item": {
          "id": "95d8de54-6cc7-4828-840b-533cde973400",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5db00471-74e3-4ffe-822b-686576d6d4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535ed882-8615-498e-8cfb-44d433e1bc1a",
        "cursor": {
          "ref": "39053e15-cd59-4e0b-ada7-de179603557d",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "371b60be-6c54-47d9-a6eb-848cdc6e7c65"
        },
        "item": {
          "id": "535ed882-8615-498e-8cfb-44d433e1bc1a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "dd3c2a73-2ca1-4d80-800d-44dbecfaad2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c45f91-a828-460d-b7ad-7c694ec696f9",
        "cursor": {
          "ref": "3ecc4ac7-0c15-4b4b-9fea-e88f932b8c4a",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b0e0b2f7-a3fd-4a3a-bf51-31e0f5aad817"
        },
        "item": {
          "id": "b4c45f91-a828-460d-b7ad-7c694ec696f9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "719b1763-b18f-41df-a0e6-1c82145aa9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db00df25-3e9b-4076-9dd6-6217e64a17f0",
        "cursor": {
          "ref": "70062c5c-931b-48c8-abb9-f840580b6a68",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e41e9518-1566-4a26-aa80-61091af5c695"
        },
        "item": {
          "id": "db00df25-3e9b-4076-9dd6-6217e64a17f0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a4d0076a-096f-4cb9-9545-fc9c477c3bdc",
          "status": "Created",
          "code": 201,
          "responseTime": 679,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1ed18b62-3deb-4775-875a-ce933efc6b45",
        "cursor": {
          "ref": "f4435eb6-24be-4d05-ada4-adcf57364ac5",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5dfdbb55-0256-44ad-b395-0c2d457c5512"
        },
        "item": {
          "id": "1ed18b62-3deb-4775-875a-ce933efc6b45",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1cb26a71-276f-47bb-a3c0-022cfb6edcc8",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a1bfcc03-2e66-49c7-b549-8c11aae96b58",
        "cursor": {
          "ref": "0112b5cb-fe76-431e-83e7-c11e003ac2ee",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d048585f-2c2b-4fb2-84c4-30533c2aa26d"
        },
        "item": {
          "id": "a1bfcc03-2e66-49c7-b549-8c11aae96b58",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bd25e15a-ddd7-4d50-99e7-253ecd0bf072",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5f5bcd54-f620-4648-9bdc-a9baedd72612",
        "cursor": {
          "ref": "f870d36c-6846-4e9d-8e17-65a9940c69e8",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a7341ecd-d0b9-400c-8d89-f7c9e6d8d44e"
        },
        "item": {
          "id": "5f5bcd54-f620-4648-9bdc-a9baedd72612",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9a16b7ed-0bd7-484b-ac38-93370df3b2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08738cd9-8bcc-496c-8041-e59db3f96bc6",
        "cursor": {
          "ref": "ff1d3f56-15db-4fc4-82a4-5c587457a3dd",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0c4b55e7-8ade-4639-8b47-fb2d3096d155"
        },
        "item": {
          "id": "08738cd9-8bcc-496c-8041-e59db3f96bc6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "19228b16-c9f9-4222-b9fc-468a69f875cf",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b7a94474-fc19-4193-a55b-0bf91ea4eabf",
        "cursor": {
          "ref": "22ff1e23-320d-4dbb-9532-d9044ba5b3b4",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fdb89519-4e43-4823-89e6-369a3f48ab12"
        },
        "item": {
          "id": "b7a94474-fc19-4193-a55b-0bf91ea4eabf",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "eccc4298-146e-432f-bd5d-8b88a0f861a8",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5195b7b3-b670-47d6-acea-548ee44628ed",
        "cursor": {
          "ref": "6d6d661d-dccd-4a61-ae37-11c4870c00cd",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f3787970-c752-4a9e-bbc2-0dcd3e8db9e9"
        },
        "item": {
          "id": "5195b7b3-b670-47d6-acea-548ee44628ed",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b07f3825-11ef-4816-beb2-215ac21122fd",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ac45462a-c9b0-4fe7-8c78-e090803f6012",
        "cursor": {
          "ref": "9f30ff4d-3142-4dbd-990b-7b88b5622a11",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6b6f684d-6061-440b-9fc7-818f8465aa4e"
        },
        "item": {
          "id": "ac45462a-c9b0-4fe7-8c78-e090803f6012",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fff30d5c-da61-4ac7-bcc5-85ee299ba89f",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "59e6a9b5-3b5c-44e1-b579-d1ac29552e06",
        "cursor": {
          "ref": "71d51b20-4f08-4ee4-9122-cd767ea6b058",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b556497f-6481-4fd5-824b-5be9e8ea3661"
        },
        "item": {
          "id": "59e6a9b5-3b5c-44e1-b579-d1ac29552e06",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c71835cd-d2dd-4d8f-8257-97e0373ecf8b",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3958bca6-6494-459c-a0f1-5269b39651c0",
        "cursor": {
          "ref": "2f720f42-0a36-48eb-be72-ba4ee1f2cb25",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7c0aef8b-996c-4673-b0fd-e6a2408b3703"
        },
        "item": {
          "id": "3958bca6-6494-459c-a0f1-5269b39651c0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "78bcb5b4-b139-40bf-b083-4a03c6a50262",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "80b24de5-3be4-46f4-bafd-3bfc80667fd5",
        "cursor": {
          "ref": "640eb2ea-3b35-4809-9673-1ac02d183901",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "54cb92b9-30ab-4d44-a2c9-e83443e3423c"
        },
        "item": {
          "id": "80b24de5-3be4-46f4-bafd-3bfc80667fd5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c73b1313-0606-478e-85a5-2ca6dea29760",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c40b93e4-6864-4ca4-b901-a20930c93fba",
        "cursor": {
          "ref": "d3503abf-0b2a-48fd-9159-3c8ba7b7e4d1",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a0d40d50-0cf4-41ef-89b5-faf8ccce64b6"
        },
        "item": {
          "id": "c40b93e4-6864-4ca4-b901-a20930c93fba",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b86e33cd-4c9b-4c9e-8c45-dd747b61b04e",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "855495b8-c6cb-406b-b1e0-a5739c1b00d6",
        "cursor": {
          "ref": "08d05128-12db-43c6-9525-93fab86ba7c8",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "00a13f58-d0d4-43df-b533-11d380fdc48e"
        },
        "item": {
          "id": "855495b8-c6cb-406b-b1e0-a5739c1b00d6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7575abda-29d3-4308-8248-175cb5a69c88",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a0478c2d-ae66-4d63-93d9-023d184b4512",
        "cursor": {
          "ref": "45b9e3b4-c7fc-431a-a4b3-db0d91ba87c7",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d7105c98-53f6-491f-926f-24fafd5f4487"
        },
        "item": {
          "id": "a0478c2d-ae66-4d63-93d9-023d184b4512",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cda21370-a4e6-4cca-9d26-d993fac68103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8fad02-9974-4c65-8431-34f09e55fd59",
        "cursor": {
          "ref": "4380c152-11e8-4cca-a274-5576bf4127fb",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5ae2383a-a559-4f98-93fa-b8c8ba9430d5"
        },
        "item": {
          "id": "ed8fad02-9974-4c65-8431-34f09e55fd59",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "841caa10-c1f8-402d-a799-d8e7a3a85d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882eabb9-44cb-4a0f-a925-c0412500bee6",
        "cursor": {
          "ref": "6a6c7fd6-e115-48e1-ab3b-41bc81b04543",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7796aa1b-2450-41f7-a4f1-d44b1c1c9ef3"
        },
        "item": {
          "id": "882eabb9-44cb-4a0f-a925-c0412500bee6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f0dccbb8-d490-480e-a2b5-2d516dec7d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15cce02d-5da1-4782-94cb-09e2dcf4f7ec",
        "cursor": {
          "ref": "80936d75-dc9e-4504-8b8b-46b26fc50048",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "db03ac9c-8395-47b3-a75d-41b58c6f8bf6"
        },
        "item": {
          "id": "15cce02d-5da1-4782-94cb-09e2dcf4f7ec",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f7032be3-8ce6-46ce-a482-ec62bc26daa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ea4993-5f5a-45bd-bf39-56c0010edb13",
        "cursor": {
          "ref": "18454cd3-886c-447d-b3e1-88f4aa50a4a5",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8cc044f1-3e61-4bb5-bc96-22102ccaeace"
        },
        "item": {
          "id": "e1ea4993-5f5a-45bd-bf39-56c0010edb13",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2fad4f04-7a5f-4191-b0a6-7fc102ea77ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa1954b-6607-46f6-981b-611aa5c91d6b",
        "cursor": {
          "ref": "7a1a7db4-ff92-4e2c-ae67-fcd19c224356",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "28102046-2da2-47d0-8995-05b323d775f7"
        },
        "item": {
          "id": "dfa1954b-6607-46f6-981b-611aa5c91d6b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1d75e2df-7894-4663-b8bf-d426260adace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21511e77-e9e5-4d60-b762-5d0e702cc36b",
        "cursor": {
          "ref": "a0ddc08c-28f5-4ea1-8316-a450ec2a0a31",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "856ba761-a129-49cc-be14-0588ce56ddd3"
        },
        "item": {
          "id": "21511e77-e9e5-4d60-b762-5d0e702cc36b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d08dc540-7b15-4004-831e-bd4a2fa1f7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c2c1cc-5545-40bf-9c06-60836c197632",
        "cursor": {
          "ref": "aaf3a1eb-340a-42d2-9cb6-b93cd4d9a756",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4f27c624-34ca-47e3-8308-0b3acde69446"
        },
        "item": {
          "id": "60c2c1cc-5545-40bf-9c06-60836c197632",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f461061c-bbfd-4092-a377-d73a52f0d656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd957ca8-b08a-4af7-a456-035b62675a03",
        "cursor": {
          "ref": "8268b7ef-2504-444d-bcbd-e9e496a43075",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e08c1aed-805a-4ba7-9b89-47a34a3a4d87"
        },
        "item": {
          "id": "dd957ca8-b08a-4af7-a456-035b62675a03",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5a836abc-49b9-41c5-b9b8-21231075178a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b606f78-2886-434f-90ff-03e541dc2a9b",
        "cursor": {
          "ref": "88a8b0e6-4fd8-4adc-9010-2bbc5a719aae",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "87cf17cc-ea10-45ba-8f2b-1ec6b8c3d6a8"
        },
        "item": {
          "id": "5b606f78-2886-434f-90ff-03e541dc2a9b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "712e2650-ca6a-45f9-aa62-0b4b6fab79bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013550e0-e166-4995-8d65-840d96a6108d",
        "cursor": {
          "ref": "3207308c-efeb-441e-ad28-f6819cbaff0d",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0c530025-7179-43eb-8e30-42d8c8419cb6"
        },
        "item": {
          "id": "013550e0-e166-4995-8d65-840d96a6108d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "77320e78-d0b0-4025-9228-3d44409ddf97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8a9c0c-6417-40bb-b891-122bf9795aa7",
        "cursor": {
          "ref": "cefa5577-4554-4410-9715-5ad9724fafe4",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4810a6e6-0cd5-4e44-9a3f-4cf5f524d5fa"
        },
        "item": {
          "id": "fc8a9c0c-6417-40bb-b891-122bf9795aa7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "caa1b42c-1f83-424b-9152-117a2082ad16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e314e96-07d7-48e2-bd98-07fd4ed58025",
        "cursor": {
          "ref": "511d8ba1-6a83-46a6-8a15-21d6c222f796",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "68b1e961-2335-4872-87f7-5e2c47e6442e"
        },
        "item": {
          "id": "8e314e96-07d7-48e2-bd98-07fd4ed58025",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "27662342-b3cd-4858-abcb-bdc08b44c991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a031e0df-f4b1-4acf-b395-0b86f459b7ef",
        "cursor": {
          "ref": "9e439275-7030-4a30-99ee-114b1a4fe7a2",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d2c81e09-3b19-434c-93d9-9a9c3e9beacc"
        },
        "item": {
          "id": "a031e0df-f4b1-4acf-b395-0b86f459b7ef",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e3343a50-7022-4e1a-ac1b-2763ad42cb32",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0d67029a-d8a0-4dcb-941a-3fdc657404c7",
        "cursor": {
          "ref": "73f68166-6cbf-48a0-9f10-142edd3793b9",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "91cee18d-55c2-4f0e-b59b-32abee996c31"
        },
        "item": {
          "id": "0d67029a-d8a0-4dcb-941a-3fdc657404c7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2cd63bd2-274a-4a0a-b4ba-366d5c2399e5",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "55b815e9-ab10-4b60-b694-c3e582fdc2c3",
        "cursor": {
          "ref": "df00e0a4-fbe7-47d5-ae88-ffcef857e306",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2f97588d-4867-4ce3-991d-9d2673f3e7d9"
        },
        "item": {
          "id": "55b815e9-ab10-4b60-b694-c3e582fdc2c3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "61ff9e56-78b1-4a1c-9883-a15348595d88",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0ad182a1-f408-41c3-8c36-32468d663b18",
        "cursor": {
          "ref": "428de4c7-cf68-4e5e-9383-0d6ba2405bed",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "aa1a9586-8923-453b-9a8e-f3299749aa2f"
        },
        "item": {
          "id": "0ad182a1-f408-41c3-8c36-32468d663b18",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9a568008-bb7e-4142-abf4-ba1f19494d4f",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "dd696dc0-009c-47ba-a8fe-e76edf14884e",
        "cursor": {
          "ref": "8b7e0adf-9bd9-4f66-b2b9-c39992ed883f",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "33cb9d95-a0e4-45af-a66d-128b64a9d4ea"
        },
        "item": {
          "id": "dd696dc0-009c-47ba-a8fe-e76edf14884e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "708125f3-0498-4179-a0fc-9252fa4d34a9",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5bc19cb3-d2e9-41f2-9934-261f7842e287",
        "cursor": {
          "ref": "cfe058fa-8f8a-421d-a6cc-123bbdc92a49",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e366d77f-e571-4698-9af6-35a1839c481b"
        },
        "item": {
          "id": "5bc19cb3-d2e9-41f2-9934-261f7842e287",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "de1e0283-1eef-41a8-b10e-05c03cf9a076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b30845-cadc-4afb-92a1-63c509784b68",
        "cursor": {
          "ref": "e42ddf2c-27be-492a-ac5e-94e11455b7e5",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "790b64c9-549c-4c19-9cd5-d0d599a97641"
        },
        "item": {
          "id": "57b30845-cadc-4afb-92a1-63c509784b68",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ee5713c9-885a-4849-9617-7edd958a2bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b9d653-0308-4b28-b727-91a1ef1cf664",
        "cursor": {
          "ref": "588f2fa3-48e1-4825-9015-d6fa9db882ae",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fe163182-9cc9-4317-8f47-1fbd1cce02f7"
        },
        "item": {
          "id": "f4b9d653-0308-4b28-b727-91a1ef1cf664",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b0a20135-edf6-4330-af49-6eda57d0f270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f84906-4e50-4446-93fc-d1f759c6ed5e",
        "cursor": {
          "ref": "d309fea4-53b7-4c6d-a3c3-24a6617126b7",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8056823e-3e73-499f-b6e7-038ab4c4e474"
        },
        "item": {
          "id": "32f84906-4e50-4446-93fc-d1f759c6ed5e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "06d68df9-1a89-452c-b35e-68dab344bed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0008437-bc2f-46ba-a591-2d8b1e24ea93",
        "cursor": {
          "ref": "1d98cce2-5368-47bf-af2f-82bab9b545c6",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "22386afc-92b9-4e41-b74e-00ef80f3b18a"
        },
        "item": {
          "id": "d0008437-bc2f-46ba-a591-2d8b1e24ea93",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2bb38c54-2e73-4ba3-869f-78c140d71ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e128a41c-6b74-4467-8d78-0fa6283a6027",
        "cursor": {
          "ref": "d45b94cd-fa7e-4b26-b111-2ff56d68be72",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f060e4b7-8508-4630-8c64-3a18a8ba7f61"
        },
        "item": {
          "id": "e128a41c-6b74-4467-8d78-0fa6283a6027",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7d922f86-2677-4ab9-aaea-cfb125ab58f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ffb664-1f32-4e84-a1bc-5503645b3dc1",
        "cursor": {
          "ref": "0bae7248-1522-428d-98f3-a2c7e7ae637b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "83f8dc1e-4425-4543-b313-672bb1dc479f"
        },
        "item": {
          "id": "72ffb664-1f32-4e84-a1bc-5503645b3dc1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "50756478-31a6-49b3-b957-3b7f0f350b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d38baf4-d0f2-4a61-807f-9b4adb169002",
        "cursor": {
          "ref": "0e26b3bd-0557-491c-b154-470403082570",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7adf9d8f-51d1-4310-88a3-bac5047eed9f"
        },
        "item": {
          "id": "8d38baf4-d0f2-4a61-807f-9b4adb169002",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a4f6c8dd-8d28-41ad-ba88-763cb066be60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8413b1c5-b24a-4436-a15d-e31e84ceefd4",
        "cursor": {
          "ref": "bcf732af-e6d2-4fa5-a4bc-70effb6c16da",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0e86d3f6-12f2-4940-977c-ae8f7783d4de"
        },
        "item": {
          "id": "8413b1c5-b24a-4436-a15d-e31e84ceefd4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d32de596-5e76-43f2-bc6c-17c2a6034d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ddf7b11-28bc-4ad0-99f3-30852847bdd2",
        "cursor": {
          "ref": "853299a1-c785-4f70-99d2-1b0ad762b85b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1102db86-dea2-438c-94f1-943ffeaa33e8"
        },
        "item": {
          "id": "4ddf7b11-28bc-4ad0-99f3-30852847bdd2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "07804a5e-354e-4d8a-9200-fd4153164ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17fe86d5-050b-4b3c-84cf-7eb02379792d",
        "cursor": {
          "ref": "5bfadd67-21f1-485a-aab0-a38f682b4912",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c3cffef2-9015-49fc-9587-234b3c3033ff"
        },
        "item": {
          "id": "17fe86d5-050b-4b3c-84cf-7eb02379792d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6b5d089d-d1e1-47e4-82dd-d8a00c88107e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26b402e-5057-4efd-9472-27523976d3b7",
        "cursor": {
          "ref": "a3541ba8-3b1c-4caf-bb10-08d9dba37345",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d8592f4c-4ecc-4254-83de-7cb083413eb0"
        },
        "item": {
          "id": "e26b402e-5057-4efd-9472-27523976d3b7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "25cd3bf5-7b8d-434d-9f03-e5c4b645f811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be964e45-749c-4653-8dd9-b824b5f12344",
        "cursor": {
          "ref": "adc8972a-22ff-4690-bee7-5d092dbbe13d",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "aba47791-7ea3-440f-bdcd-bd53f57e6a2e"
        },
        "item": {
          "id": "be964e45-749c-4653-8dd9-b824b5f12344",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "be0b2866-c695-42d6-ad91-fcd7d1c5ce38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b4270b-4c6d-45b1-9f02-833d9ff5f947",
        "cursor": {
          "ref": "09d4723f-a3d6-4998-b9c1-ee074b877d83",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "abe288e4-5f7e-4bca-826e-dd8c91c87496"
        },
        "item": {
          "id": "c3b4270b-4c6d-45b1-9f02-833d9ff5f947",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "faca7c0d-e487-4407-aa24-23d093a51347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f090c5-7ca5-4239-a749-c3d84109560c",
        "cursor": {
          "ref": "22d2b042-24a0-407b-b1e1-dcafcb3b6233",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a8ab5a78-e314-4d47-974a-829ebaa712d5"
        },
        "item": {
          "id": "88f090c5-7ca5-4239-a749-c3d84109560c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "929f7ac7-a624-444c-a85a-ebcdb51dc8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d07c86-3f14-46ee-b7e1-2f4c39009666",
        "cursor": {
          "ref": "b2e517b8-4fc2-46e8-b989-0c23c87a3f04",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a2c3c93a-5c4d-4542-a921-e8039eff5532"
        },
        "item": {
          "id": "88d07c86-3f14-46ee-b7e1-2f4c39009666",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fa65cfe3-07d7-4c6f-948b-96416ab9bb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3e1ded-d544-4e1d-b641-b998eaf3f426",
        "cursor": {
          "ref": "ba67ba0b-84e4-43db-b94b-61647fa68fb3",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "bea0cdd9-5379-4452-adb9-2b4c8020dc1c"
        },
        "item": {
          "id": "0f3e1ded-d544-4e1d-b641-b998eaf3f426",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cf997b21-412d-4372-ba44-7a14d5d9a16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ed455c-5711-4ec2-b315-814a670b27c3",
        "cursor": {
          "ref": "b502d70f-07e0-4dcd-a5fa-796beca97fd5",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "27b717eb-1b15-4d69-b60b-2842de81774d"
        },
        "item": {
          "id": "72ed455c-5711-4ec2-b315-814a670b27c3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cc68ae49-fd1a-4c45-9544-e2452518f580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcd773a-09be-43e2-b59f-07bfdaf8a731",
        "cursor": {
          "ref": "2db6e1b5-869d-48e0-8acf-623b2800c69c",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2775b028-e668-441c-b2cc-6e65c1b7993d"
        },
        "item": {
          "id": "3bcd773a-09be-43e2-b59f-07bfdaf8a731",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "711fa2db-a875-4c26-8ed3-08594658d539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdb1149-8ad5-48e1-b3c5-8a9a22026135",
        "cursor": {
          "ref": "143be9fe-3e6b-43f5-b92b-e5ee3f2cf5d9",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6fc50c1f-a1da-459b-85f0-603f1ac6fb64"
        },
        "item": {
          "id": "dfdb1149-8ad5-48e1-b3c5-8a9a22026135",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3e750d9f-0258-49aa-9040-cb428c0d9ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a904ec4-c575-45f5-a9cd-434f1572ee82",
        "cursor": {
          "ref": "c12e5ed7-66b1-455b-acbf-c2b99136a21a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e8727ba8-c0ce-42ee-9b6a-2fca8c2ca4cc"
        },
        "item": {
          "id": "5a904ec4-c575-45f5-a9cd-434f1572ee82",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1434cd0f-36ed-4faa-9af8-38ee5ebc6941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec347017-e591-4a11-9b2e-5b8d75132ff0",
        "cursor": {
          "ref": "493d8639-8c9b-4bad-9022-ae4002a19b94",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d29a68a8-c362-4616-bf18-3eea792c42ca"
        },
        "item": {
          "id": "ec347017-e591-4a11-9b2e-5b8d75132ff0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bc16e6af-f480-4b03-8a6c-e58681464f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ab3200-fa78-4d39-bd30-5c6b8425680e",
        "cursor": {
          "ref": "52b456b7-0c8a-4dee-bac9-82100bf8d512",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "896881e8-1cfc-47f5-a4b8-e280c6be92fd"
        },
        "item": {
          "id": "b4ab3200-fa78-4d39-bd30-5c6b8425680e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "aff5cfa4-3236-4d3d-a66f-f2c352292ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2f77bc-45d1-4db7-995b-551771cefb38",
        "cursor": {
          "ref": "3f83523a-97cb-4e2e-bb5b-fdbaf5e6f529",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9be5db39-dd6a-431d-b4a8-7fb809ea06e8"
        },
        "item": {
          "id": "0f2f77bc-45d1-4db7-995b-551771cefb38",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6831d57e-cbd6-44be-9fc0-aa28f9c94f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc2055a-3156-4523-8bdf-b9c78ea65f34",
        "cursor": {
          "ref": "fbdebf8c-d5d3-4cf9-96c3-6aa64a3b904e",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "57f61aa0-b156-4d52-81cb-b14e3755b6f5"
        },
        "item": {
          "id": "1bc2055a-3156-4523-8bdf-b9c78ea65f34",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a3731d73-1aef-454a-80f1-90b9e8ebdf4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc72ae7-c8b4-4d73-ba0e-2b0f972a2ba4",
        "cursor": {
          "ref": "7ffb0fbb-17cb-4e0a-9b35-5a04fda96e19",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e6ba1b90-1f06-45ab-9dd8-a5626ed7463e"
        },
        "item": {
          "id": "0cc72ae7-c8b4-4d73-ba0e-2b0f972a2ba4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d589ebe3-55f9-4def-985a-5120869e42e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db80a2db-9d40-4100-8800-6259420246bd",
        "cursor": {
          "ref": "0a5a9154-6c2a-4e38-8f2f-464ad065cd12",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fbc6fc9a-86b7-4587-ab61-2b6460c70786"
        },
        "item": {
          "id": "db80a2db-9d40-4100-8800-6259420246bd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2289ac10-8c3c-4c65-9fc7-52a2184eb42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc98840-b1df-4f20-93f6-95e092275143",
        "cursor": {
          "ref": "a560b25c-b07f-48ce-ba90-a622fea68c8e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "40009ea3-50f6-480a-9b82-8fcbc784033e"
        },
        "item": {
          "id": "5fc98840-b1df-4f20-93f6-95e092275143",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cfb38756-bbd2-42cc-89df-a776f5f65b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef1f069-33b2-40ff-91d9-754f0a64e52f",
        "cursor": {
          "ref": "f2499bae-3483-47f3-8db7-889776291ee9",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "522853da-ff89-49f4-85ee-85e45a01c891"
        },
        "item": {
          "id": "2ef1f069-33b2-40ff-91d9-754f0a64e52f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8f4b2f5c-f6eb-4512-b95a-2ec2b9547e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695648f6-5137-48ef-9cb2-1fb650e68de6",
        "cursor": {
          "ref": "df167019-d147-4b10-990d-c13613ac67b2",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c234a362-3d1c-4c91-89c7-e78c323af2c5"
        },
        "item": {
          "id": "695648f6-5137-48ef-9cb2-1fb650e68de6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e68289a2-7402-41c7-8b63-502db26d125b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f59ad0-eb7a-4a8d-bbb1-076985051ae0",
        "cursor": {
          "ref": "a7cb8478-1a94-49b7-9f57-702553ff989b",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e79ef36c-48cf-4742-928f-4980522ac6a1"
        },
        "item": {
          "id": "05f59ad0-eb7a-4a8d-bbb1-076985051ae0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4fbecad4-14af-4480-9a00-3e5e0288333e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d735b29-d6f0-4d8d-a643-0fca577853aa",
        "cursor": {
          "ref": "71b0aaf7-92b0-48b0-bc34-f4d6964c0213",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a1561f29-44ac-4611-87fd-01c06eefeb5e"
        },
        "item": {
          "id": "4d735b29-d6f0-4d8d-a643-0fca577853aa",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "67ac1b7e-e338-4731-8234-c94c6efc4abb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b697d7a-9503-466c-bc6c-bbf1c80e40e6",
        "cursor": {
          "ref": "13e1ba38-698d-4990-9594-4aff72b62d82",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f96c59ea-5829-4a7c-8328-7d05f347f4cd"
        },
        "item": {
          "id": "4b697d7a-9503-466c-bc6c-bbf1c80e40e6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5514fa1d-411a-4bbb-b80d-db209355087c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b000cc44-f005-49b6-b64c-0283f831365f",
        "cursor": {
          "ref": "5e83ebf2-431a-42f1-a694-767cb18db70d",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f9e7a3e1-8047-45bf-be23-0ad38eade556"
        },
        "item": {
          "id": "b000cc44-f005-49b6-b64c-0283f831365f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1754d943-64bc-46cc-b860-d9b548b8eaf7",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e832dcc9-5c25-41bb-ab60-8ff5c89fa8b2",
        "cursor": {
          "ref": "7ce985c0-fc02-4150-ab8b-e46fcb16d8ec",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2c38793e-0877-417c-8937-982d7813d804"
        },
        "item": {
          "id": "e832dcc9-5c25-41bb-ab60-8ff5c89fa8b2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f3b50c43-eef4-4871-a1cd-4035b1e107d2",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e418ac-9647-47ed-95d9-bc31d7df87d5",
        "cursor": {
          "ref": "4c8eaa11-58a9-444d-a35f-1d37e5a45739",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f3d336f2-06ca-4915-a735-fa5ae548fc7b"
        },
        "item": {
          "id": "76e418ac-9647-47ed-95d9-bc31d7df87d5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b5131eec-fca4-479d-b118-6cea5f66f90e",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "800e0c80-ff4a-4ebd-b7ed-a11e4df9a0a0",
        "cursor": {
          "ref": "68c5cd2d-a3e5-4ae3-8019-0288b7a09b66",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f4f86cd9-2d89-4c8f-bd7c-e165e0ccc9a3"
        },
        "item": {
          "id": "800e0c80-ff4a-4ebd-b7ed-a11e4df9a0a0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "99ca6c69-2b5e-47e1-b9db-1cafcc70419d",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "017e1b50-1bfe-4b93-b079-aed549a50354",
        "cursor": {
          "ref": "2dcbcb43-dbe4-4980-b53a-33a78970c3d0",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "273a2abd-353a-4068-9704-b56bf5f40696"
        },
        "item": {
          "id": "017e1b50-1bfe-4b93-b079-aed549a50354",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "675df2a5-67c9-4820-bf56-6c14faff7adf",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-16T00:34:51.227Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-16T00:34:51.227Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a868ad7c-a122-4d44-9429-20a782cb286e",
        "cursor": {
          "ref": "475a9f01-00f7-473b-8a40-180b0c531ec7",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "22e88e01-e78e-49d6-9c05-f0d5ff163b64"
        },
        "item": {
          "id": "a868ad7c-a122-4d44-9429-20a782cb286e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a652fb20-9cc1-4bfd-8407-8093d00071b4",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8beb5ac-a184-4d59-8955-91d68a901fe5",
        "cursor": {
          "ref": "249ef458-43b9-49cb-baa6-db91691310d6",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "88eb200e-8684-4d65-a26f-a2380c894582"
        },
        "item": {
          "id": "d8beb5ac-a184-4d59-8955-91d68a901fe5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "03df0c84-5fef-47e0-9b89-fffa3e491cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f7530c-768c-4e32-a656-b29ee0e6329f",
        "cursor": {
          "ref": "fd14e369-7cbb-4dd8-a70a-86c50006c031",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c6bd5ddc-9aa9-4322-b05a-e958b2d5021e"
        },
        "item": {
          "id": "a2f7530c-768c-4e32-a656-b29ee0e6329f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5ffc6bdc-3cfd-4a8b-954e-c35bdafc3d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2693b1b4-b6eb-43bf-97ba-d12d126f9022",
        "cursor": {
          "ref": "617ff371-ed74-45fe-8d89-ef885aad11bc",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "511dfc4e-51b8-4346-9c8a-50bfd8b20dd2"
        },
        "item": {
          "id": "2693b1b4-b6eb-43bf-97ba-d12d126f9022",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5b75ae2d-61ed-4eff-9aed-5caecad9d282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b53ab0-6a92-4fde-a0b8-6e4422d38d7d",
        "cursor": {
          "ref": "c1dbacb4-0b7d-4c57-a08e-77bb2fc30462",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "833b7e2a-4724-445a-a29a-5ad43fe65735"
        },
        "item": {
          "id": "31b53ab0-6a92-4fde-a0b8-6e4422d38d7d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "255ee7a3-6355-4d8c-a236-ea9df83fb2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e407bc-4994-44c0-b29d-165596341651",
        "cursor": {
          "ref": "a571a1df-2c42-4c1e-a295-a4aca133a54f",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "52c527bc-e646-404f-9c0e-9edb32546192"
        },
        "item": {
          "id": "c9e407bc-4994-44c0-b29d-165596341651",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "772920d9-f905-426d-b888-7d76c4a4ad0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4415da-6cb3-4666-8c35-63ab60fec668",
        "cursor": {
          "ref": "94cb7c2c-d263-445c-b57e-e1346ea5f43e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "84ca6ba8-430a-4f93-a3fa-a8a62ace39a3"
        },
        "item": {
          "id": "df4415da-6cb3-4666-8c35-63ab60fec668",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "13e39718-cd52-460e-ad49-05305c3269f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d23d55a-7d31-4b87-9233-5d1708b9b281",
        "cursor": {
          "ref": "0df518fa-aac0-4b45-89b3-a0e9f0714af7",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "03ecb9cb-4129-47c8-8d80-940ef3e4a796"
        },
        "item": {
          "id": "6d23d55a-7d31-4b87-9233-5d1708b9b281",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dc80d8f9-cd9b-4b47-8f95-f6b4e6848480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc86bae9-240b-4bf0-ae53-fcf80c82dde6",
        "cursor": {
          "ref": "b7ecbae5-97e4-4b9d-9a1a-f32d57e40503",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0b4d3769-a6a9-4ae6-bec7-713f5580060e"
        },
        "item": {
          "id": "dc86bae9-240b-4bf0-ae53-fcf80c82dde6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a1075f0f-2394-446a-b53b-3f4fc05cb1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3198e63f-6687-4834-aeea-dd75c4d26c47",
        "cursor": {
          "ref": "b2a03c82-3843-47b6-b201-74dca8df541d",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "cb5f0e97-8a3d-4b2f-ac03-a11d1cb55f5b"
        },
        "item": {
          "id": "3198e63f-6687-4834-aeea-dd75c4d26c47",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2446c499-e3ed-4869-ab1b-315916d91c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322e3ef2-c1f4-45f0-887e-969707fc97da",
        "cursor": {
          "ref": "2263b6e5-bfa9-4943-94ab-1d04c972788b",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "34192189-959c-4c70-9bcc-92facc931783"
        },
        "item": {
          "id": "322e3ef2-c1f4-45f0-887e-969707fc97da",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "21cf4c81-92a0-4dd4-8afc-106362d536ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1f37a8-1dbc-4f3f-abf6-fbbccd01b114",
        "cursor": {
          "ref": "8e6b91ed-6379-4ac8-b067-86399519de27",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9431de5f-27ff-46fc-8a46-0f4a3df9ec51"
        },
        "item": {
          "id": "1b1f37a8-1dbc-4f3f-abf6-fbbccd01b114",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8034c7c6-ff33-4bb1-8ee2-8743f3adab67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19fdd003-36eb-4e8f-8bd0-8a1e5e9fb57d",
        "cursor": {
          "ref": "3eeeacc0-4113-4b1c-abfd-72df234e0df9",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "14e0c14c-473e-403d-bb53-9d30a1e7af92"
        },
        "item": {
          "id": "19fdd003-36eb-4e8f-8bd0-8a1e5e9fb57d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e77f26fc-1fb4-4c61-984a-7d5ac1dc1903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7afb4ff-3e39-41d9-8e61-f117cd23b514",
        "cursor": {
          "ref": "5b5e6adb-b0f2-4544-b119-02be5d9dd02f",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3705e0cc-f393-4f97-9111-f05c48941be1"
        },
        "item": {
          "id": "c7afb4ff-3e39-41d9-8e61-f117cd23b514",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1bcbffb6-d484-456f-b06e-4d439050d797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e59c227-3393-46f6-917f-2ac89587d69a",
        "cursor": {
          "ref": "13c4d13c-109e-45f1-bf7a-e9eeed5d249a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a706e59a-56b8-472d-8316-40658f74869f"
        },
        "item": {
          "id": "4e59c227-3393-46f6-917f-2ac89587d69a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "76afc2aa-c903-409b-af0d-1127e20a31cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4be8082b-7ffe-4610-82ee-b1cf2453388c",
        "cursor": {
          "ref": "6a29a44f-2382-48a5-b4a9-7dcdcd449798",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e606362d-6505-4ded-b5a7-03c364c0d564"
        },
        "item": {
          "id": "4be8082b-7ffe-4610-82ee-b1cf2453388c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2e3a65bb-9b8e-4655-b027-1a46df1c1322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea0fc29-f5e2-41ff-8d9c-2d99ffe8cc55",
        "cursor": {
          "ref": "dbd6d40c-974b-4755-bccc-e127f406b56a",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "07df0886-47ec-44ae-adb1-fdc614c6978e"
        },
        "item": {
          "id": "2ea0fc29-f5e2-41ff-8d9c-2d99ffe8cc55",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "422a7ee8-9b52-44ea-8ee8-99bb58e17a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ea78ca-2c18-4628-a686-dabf4601e557",
        "cursor": {
          "ref": "7a1be494-aeb5-434d-92eb-6365e02a2538",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f9569211-4291-42c7-b56b-0d8fca382c9a"
        },
        "item": {
          "id": "11ea78ca-2c18-4628-a686-dabf4601e557",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0854da11-8539-46c4-ab53-c9e5eaaf12c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce61b09a-248f-418f-8bd4-3dfba4ae709a",
        "cursor": {
          "ref": "b02be641-a133-476b-aacf-93dccfaaeecc",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c1c08103-caf0-4fd7-bb43-a86dfdef277d"
        },
        "item": {
          "id": "ce61b09a-248f-418f-8bd4-3dfba4ae709a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "af377b8a-7eee-4057-9547-9da87b96831b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8090e95-509a-4170-b9d3-5cf29915cddb",
        "cursor": {
          "ref": "0e993998-9d98-43ce-89c2-aea527e1c9e6",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "85e63808-efae-472a-9ffa-810546ea2a99"
        },
        "item": {
          "id": "b8090e95-509a-4170-b9d3-5cf29915cddb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2aacf19f-f881-4a3f-8bfd-78722c60e2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d1728c-e0d8-44e9-87a4-388ed751c84e",
        "cursor": {
          "ref": "151530d3-5aa3-4fbc-b7f2-ce76961e01b0",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8c152c8d-f025-4740-991a-61a1aa887848"
        },
        "item": {
          "id": "18d1728c-e0d8-44e9-87a4-388ed751c84e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "767bd285-f179-456f-9bc3-931d943933ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9928b5-ae09-4f9a-adc4-798de6456415",
        "cursor": {
          "ref": "cfb6aa83-9fa7-4033-a72b-3f65d5c290fe",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7de08b5d-c56a-45f3-8213-dfc9688e1a95"
        },
        "item": {
          "id": "1c9928b5-ae09-4f9a-adc4-798de6456415",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "28718a0b-531f-40db-aea2-644fd6650e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe69cd8-baaa-4baa-9db4-c3523f58424a",
        "cursor": {
          "ref": "b1d28f3a-7a51-4f3c-8d98-b4d24fa75d56",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c35c66d5-a736-4a90-a4bc-0bb6db5e82e8"
        },
        "item": {
          "id": "ebe69cd8-baaa-4baa-9db4-c3523f58424a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a96452a6-6f4e-4900-a7f7-e6751c577938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22d45bf-e16c-401d-bd84-093c91ffdc7b",
        "cursor": {
          "ref": "69e39613-e5cd-42f6-8ec4-1ebfe291f601",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "01632488-beb7-4f46-b46b-17ddaa0d877e"
        },
        "item": {
          "id": "a22d45bf-e16c-401d-bd84-093c91ffdc7b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fb87e61d-773b-4815-8519-a7708640c3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2cf80f-6149-415a-a06b-fe2cdd5e5671",
        "cursor": {
          "ref": "6a950b33-e878-46a0-86db-b4b6ba665ef0",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "283d53ac-b39a-4c2f-a977-e7bed9bd65fc"
        },
        "item": {
          "id": "fe2cf80f-6149-415a-a06b-fe2cdd5e5671",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a0e39c87-517d-427d-862c-34759a551e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b8e32d-62ac-42c6-8fa6-7a3dca1cf34d",
        "cursor": {
          "ref": "0b2f1652-e08e-44bc-b192-98d6aa8921ea",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "37aab268-006f-4e2c-9476-629a834c8208"
        },
        "item": {
          "id": "54b8e32d-62ac-42c6-8fa6-7a3dca1cf34d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6fdf7d99-3972-4d9a-a5e2-250c41cc1ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3d6c71-fa45-4501-826b-55237f17a1a8",
        "cursor": {
          "ref": "6807000c-4585-4912-a1b0-4571bc0286ec",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e609984e-e37d-4449-8275-3b2d90e8e9b4"
        },
        "item": {
          "id": "2f3d6c71-fa45-4501-826b-55237f17a1a8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c14b90b4-7e7e-4ca0-ab88-67d240bc3ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bf2be5-57d2-4aa5-9a8e-1a09596ac3eb",
        "cursor": {
          "ref": "379daea3-b8ec-437f-b6d2-f5103d640bea",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "58240c84-5d8b-48e3-86b1-0af7396cffdd"
        },
        "item": {
          "id": "92bf2be5-57d2-4aa5-9a8e-1a09596ac3eb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "108bac85-b473-41df-87b6-4adacb66195c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b7ec1b-3a21-4030-a1ea-683d06e40ec2",
        "cursor": {
          "ref": "b6754dc1-478b-4fe6-81e4-3192474d550d",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bacc5c52-abfa-42ce-9ca8-5150b959890c"
        },
        "item": {
          "id": "b4b7ec1b-3a21-4030-a1ea-683d06e40ec2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9f547780-5818-484e-a7da-5ad54b40cd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb638ed-5b21-47f1-9939-12517ab34701",
        "cursor": {
          "ref": "76e591fb-4305-4a5d-ad10-88f71ffbd457",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c7b6ebbb-2aa9-4ba7-91d5-833bbad7bb35"
        },
        "item": {
          "id": "bdb638ed-5b21-47f1-9939-12517ab34701",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2aa107a6-993c-4ad4-8f34-5e676b7c40cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac9c139-cf53-468c-965a-99409ee097a5",
        "cursor": {
          "ref": "c1b5f143-05c4-4a70-82f8-401170949268",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "af403c14-7b05-4844-845f-e3c7bbb0cd73"
        },
        "item": {
          "id": "5ac9c139-cf53-468c-965a-99409ee097a5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "30694489-cb28-4262-9b40-cf0330d139f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7934b566-aace-492a-9daf-a558380dff43",
        "cursor": {
          "ref": "c256ac1a-0e3b-45ef-8185-7c36c5842efa",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6d28d240-e39d-4619-9413-76f0d7c85093"
        },
        "item": {
          "id": "7934b566-aace-492a-9daf-a558380dff43",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "706e79d1-e70c-4fe2-b048-2c7b5ad59337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2459d6-701a-4e7f-9612-ff620dc45265",
        "cursor": {
          "ref": "58286b94-2b8e-4e87-b418-41f19d3a4769",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "167e5314-ade6-4d32-96c1-1eab28cee38b"
        },
        "item": {
          "id": "3d2459d6-701a-4e7f-9612-ff620dc45265",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4d033173-6e48-408f-89cc-89b0bf950203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbce138-fb2e-488b-b3a4-a003205432ca",
        "cursor": {
          "ref": "169bb021-f7d6-4a9b-9753-0fae49ecd241",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c2b1508f-a390-4319-825b-97dacf2014ef"
        },
        "item": {
          "id": "7bbce138-fb2e-488b-b3a4-a003205432ca",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "bcd70d66-f4d5-406f-bc0f-1d9f539dc689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a82700d-a431-414a-ba44-94d09603c3e6",
        "cursor": {
          "ref": "b8684675-4aa4-40dd-aef2-32de8f08947a",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b784d7fb-d21b-4df0-9234-14184772c6d7"
        },
        "item": {
          "id": "2a82700d-a431-414a-ba44-94d09603c3e6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "191e6e43-72e4-45cf-97aa-77b45c932ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8133364f-e36e-4fbb-b342-f3ce0a7ef631",
        "cursor": {
          "ref": "02bee501-dd3d-4b97-9a48-5457acb0bfe8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7212ab72-57d6-402c-9ae9-f4a653b59abd"
        },
        "item": {
          "id": "8133364f-e36e-4fbb-b342-f3ce0a7ef631",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5a684d14-5f6d-4e20-907e-0a979fb9632d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74af3cb3-d4d1-4c55-8ffb-c0674b6e1e40",
        "cursor": {
          "ref": "a38207e8-f139-4fad-aef2-7cd8525d0601",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a8fa1a42-8af6-4f97-b39e-8a187269d377"
        },
        "item": {
          "id": "74af3cb3-d4d1-4c55-8ffb-c0674b6e1e40",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "5360f11e-65c2-468b-b84b-1dd044d7f004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210dde75-f5c2-4ed7-b006-05eb298c248c",
        "cursor": {
          "ref": "1458de7f-ea4e-49c3-8a48-e8dfc0004290",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9ba8ac3e-8838-467f-8d39-67ceaf9b6656"
        },
        "item": {
          "id": "210dde75-f5c2-4ed7-b006-05eb298c248c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1514fd80-585a-436e-b064-d78e0be86b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc6c0ed-a030-4ce6-8767-2ab75dc026a3",
        "cursor": {
          "ref": "1b962ea7-40e5-4d58-a3c3-1e26098a9a75",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "742c4220-9713-491f-89b7-0807bc1cd072"
        },
        "item": {
          "id": "8dc6c0ed-a030-4ce6-8767-2ab75dc026a3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0918f656-d62c-4ea6-b97b-e3fedd5b843c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e025d3-a9ee-4c34-8edb-fae8a11cbfd6",
        "cursor": {
          "ref": "23f86bbe-ca13-4341-8f93-3e76a50ca089",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "82e6459e-e59e-4ed3-9164-3e80cdda193f"
        },
        "item": {
          "id": "92e025d3-a9ee-4c34-8edb-fae8a11cbfd6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "44336747-eb18-4e00-8748-81f825b8433f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37772eec-3caa-4895-bde4-fc070e42051b",
        "cursor": {
          "ref": "2a97adfa-b491-4097-84a5-9c41e6ad2c05",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "72fe5747-b163-44d1-983e-4d30be1ec28f"
        },
        "item": {
          "id": "37772eec-3caa-4895-bde4-fc070e42051b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "60b01a39-ee6d-452e-a3f5-206f8452ce6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4ab571-a545-4991-a2fe-bd0f889e7397",
        "cursor": {
          "ref": "cd600935-3620-49f3-8670-67df5fbe8806",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9ed0d51c-55d5-45e7-9669-e1ab928edfef"
        },
        "item": {
          "id": "bd4ab571-a545-4991-a2fe-bd0f889e7397",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e673791a-dcab-452e-8e45-ed37aabf7bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b324e849-d3e0-4e4d-8222-f989bbe84faa",
        "cursor": {
          "ref": "3159e67b-6158-482e-bb55-ea93e6791a1a",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "76b1845f-84bb-4b3f-8731-5354683ea0a6"
        },
        "item": {
          "id": "b324e849-d3e0-4e4d-8222-f989bbe84faa",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6df52b3e-ab08-4208-82aa-f756a129dfb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623d7f8e-b8cb-4432-9cd2-a60dc50403f0",
        "cursor": {
          "ref": "e87ba39e-ac12-4ff2-9024-f0f4ab51b36b",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "686d3839-635c-4ab2-a3df-38993be61e28"
        },
        "item": {
          "id": "623d7f8e-b8cb-4432-9cd2-a60dc50403f0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ccd42d9a-0ce1-4dd2-8742-24fadc45df66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b89b26-8c40-4be8-8392-0d7ac9435780",
        "cursor": {
          "ref": "2c7a4a42-067a-4c86-82c4-ea12af98cda7",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d3f76ff8-a6d5-419c-b959-342a03f52ecd"
        },
        "item": {
          "id": "60b89b26-8c40-4be8-8392-0d7ac9435780",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f0597cc1-fe32-41c0-b3c2-5782bc27e418",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "ae44bd05-5c88-462a-958a-260343bf5713",
        "cursor": {
          "ref": "58749726-ff85-45df-943c-125095ba78c6",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a5241e04-8690-4a32-8482-d9b744cab181"
        },
        "item": {
          "id": "ae44bd05-5c88-462a-958a-260343bf5713",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1c6574f6-df67-4a21-8192-7ba688184df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1442a4a-170e-4d18-90c5-b87280545b0e",
        "cursor": {
          "ref": "1f9ceb57-aa92-4dcf-ba02-c2c6e59f56ce",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "138ccf88-cb04-4ce8-8f7e-07150b3d7bce"
        },
        "item": {
          "id": "b1442a4a-170e-4d18-90c5-b87280545b0e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b243d160-d534-495b-9864-7d76e007676c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6189741-6caa-4fce-8f7d-a9f72d74246c",
        "cursor": {
          "ref": "3cd247aa-ff9d-4a1f-a03b-1c561f30f2db",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0bea354e-c879-4641-8d24-97413cdd34d3"
        },
        "item": {
          "id": "e6189741-6caa-4fce-8f7d-a9f72d74246c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ef34bcd7-ef4b-4e8f-bd95-20480d1138df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356ca7a9-f7b1-4315-91a9-ca3e2a844184",
        "cursor": {
          "ref": "57c4c8f4-1862-4b4b-9532-265701378257",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b0a8a284-a8df-4917-884c-5ce8aa153f3b"
        },
        "item": {
          "id": "356ca7a9-f7b1-4315-91a9-ca3e2a844184",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "22210545-2526-4eca-9811-cd8f906e9d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7b9c56-4e5d-48f2-817b-5c287a98e233",
        "cursor": {
          "ref": "2fd2a6fc-819f-4688-841b-821816dde402",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4d97b0d7-5e32-4784-aac9-12163e452933"
        },
        "item": {
          "id": "cf7b9c56-4e5d-48f2-817b-5c287a98e233",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e25ace53-acf9-4c06-ac40-5e81657f9c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271be5b8-0d3f-4437-8636-9e1dd8557294",
        "cursor": {
          "ref": "7ba89fca-5ab6-4a9a-9f4c-9e75fd1282a7",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f6dd8e17-7342-4219-9c0f-a3450bc82c9c"
        },
        "item": {
          "id": "271be5b8-0d3f-4437-8636-9e1dd8557294",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1dcacaae-d2f9-4d0e-8abc-1e326281b84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350375c5-e2e2-47c0-b326-adca49722b3f",
        "cursor": {
          "ref": "9ddca36b-a3e7-4822-93bd-a1f02708aa83",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "aab697b3-f97b-45ca-9adc-97b03f15962a"
        },
        "item": {
          "id": "350375c5-e2e2-47c0-b326-adca49722b3f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "36d24ac8-fb29-4d92-b1b9-95db45427b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22742e7-98da-4763-95f4-c506b8811b25",
        "cursor": {
          "ref": "fc89fb71-9f17-423d-b29c-0f5d46b4732f",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0a43a34f-eeb6-4629-9888-5c3a6fb6ee5b"
        },
        "item": {
          "id": "a22742e7-98da-4763-95f4-c506b8811b25",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f21605c7-6f66-4858-8a2c-369e06c0ac88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a15e4a-4186-4652-8404-4b6bab92cee7",
        "cursor": {
          "ref": "48eb416e-49a3-49dc-88c2-17f37f81b748",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3910d892-bcac-48fb-8f8b-ff2792a6b48b"
        },
        "item": {
          "id": "61a15e4a-4186-4652-8404-4b6bab92cee7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "35b11dc1-193f-42b7-94e0-89a194227766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7ef654-1102-4d1f-bfe3-4f66a917cdc3",
        "cursor": {
          "ref": "ab87798f-6e92-4fc0-b16b-e2a58d9d0fd3",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ea6bfb58-7b16-44d5-ba01-479e6267aef9"
        },
        "item": {
          "id": "9f7ef654-1102-4d1f-bfe3-4f66a917cdc3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6e3ed069-8266-41f4-9cd4-b961eee0b147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46238d2-4e96-4a77-81eb-2fe5d7f09184",
        "cursor": {
          "ref": "00d4b5ec-4407-4a02-a33a-dbd8df4d9b42",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "219bff56-7a90-4a67-9b1e-4ed8a07193a6"
        },
        "item": {
          "id": "e46238d2-4e96-4a77-81eb-2fe5d7f09184",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e358dd86-f954-4599-8eb0-e66f35f6ddfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08f207f-9c43-4fb7-b327-4f9a40e61c13",
        "cursor": {
          "ref": "9bf99720-a7a0-480c-b09c-4b45ca045d7f",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "df351908-807e-41c8-bd08-ccd5a664ca66"
        },
        "item": {
          "id": "c08f207f-9c43-4fb7-b327-4f9a40e61c13",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "701254e7-a849-4aa1-946f-7fde68c1edb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95dd5cf-9b78-47ba-ae31-dee99292ce5a",
        "cursor": {
          "ref": "2ed18007-63c0-4110-baca-7e073a0cdafa",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2ab3b3c6-e946-4e1f-b791-01de4ddec03b"
        },
        "item": {
          "id": "b95dd5cf-9b78-47ba-ae31-dee99292ce5a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "40ef96b4-cef1-4da6-b365-81bf109c99e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920fc783-83dc-4176-8f93-a962aa343676",
        "cursor": {
          "ref": "aa29dbd2-2a8c-491a-b730-ec7b39d42d66",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3a368a4e-52f2-41e4-8fa9-4bb1df5a9127"
        },
        "item": {
          "id": "920fc783-83dc-4176-8f93-a962aa343676",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "18c5239c-ea74-4400-9ecb-82fceb8091f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5952049e-73e7-4c34-8e81-8eab5e77538a",
        "cursor": {
          "ref": "e0cf9202-e9fd-4018-a904-374d5323e1a8",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4c95a57e-bbe4-4467-8511-bca274cbc76d"
        },
        "item": {
          "id": "5952049e-73e7-4c34-8e81-8eab5e77538a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6cc8e5f6-34a2-4906-808c-a59e5ce7fdb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b035301-fbde-4f7c-aeff-278e1f214ca2",
        "cursor": {
          "ref": "33fff1ee-b6fd-4bd4-b039-09f3095f1562",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "636837bb-aec7-4b34-90a4-9934b75dc4a5"
        },
        "item": {
          "id": "4b035301-fbde-4f7c-aeff-278e1f214ca2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "dcbd61ee-9e77-4c1b-8ea3-7038c73553a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cf0bb1-810f-4679-841c-91ac453f05d3",
        "cursor": {
          "ref": "8de0d559-6e0d-4cd0-bc41-4a5a78fb0b83",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c1d8701e-d6a4-4c7b-b52d-a3e7c897affa"
        },
        "item": {
          "id": "b1cf0bb1-810f-4679-841c-91ac453f05d3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "44262fa4-af9e-40c1-bca3-9b4aa989fb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743f0f93-425a-498a-8f34-c0e1cc9bdd21",
        "cursor": {
          "ref": "22fb1a5f-5196-4754-8502-126524339f40",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ac49c289-80b6-4827-a01c-095b6c7b9806"
        },
        "item": {
          "id": "743f0f93-425a-498a-8f34-c0e1cc9bdd21",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2901b167-f72d-41ca-8aa7-6e175f736bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94ea6b6-7344-49b8-a0ea-07edd5014326",
        "cursor": {
          "ref": "ec7212cd-fe58-43db-8ccd-44fa4a8d4cbb",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "502ea16b-5478-45f5-b93c-a5c7c4ce9404"
        },
        "item": {
          "id": "f94ea6b6-7344-49b8-a0ea-07edd5014326",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c185c117-f052-4f56-8625-7d8f3430fda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bb78b3-a00e-4ad3-b5a2-f32d1628e389",
        "cursor": {
          "ref": "4c1e4c0e-24c4-45cd-a420-6a52be3ad178",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c980ce5c-be51-442a-a95e-f0cc29eb9368"
        },
        "item": {
          "id": "61bb78b3-a00e-4ad3-b5a2-f32d1628e389",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "515c53ef-a39c-449e-8982-131ff0c4259b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6568ff0-0529-428a-9d3c-cc56463c6420",
        "cursor": {
          "ref": "75c35854-06e2-4628-800c-d1dbcf4e57e5",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ec0cb81c-869e-49a0-8c33-c41eb2c40825"
        },
        "item": {
          "id": "f6568ff0-0529-428a-9d3c-cc56463c6420",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dd2f5e47-8150-4829-b84e-cb8759ef9548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bc8667-f68c-4da4-b703-f1f675543a29",
        "cursor": {
          "ref": "af6f0f0e-cc40-4be0-8e33-37d72c56762e",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9e7e75b2-c3dd-4504-b97d-77b685a8cfab"
        },
        "item": {
          "id": "d0bc8667-f68c-4da4-b703-f1f675543a29",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "dad31648-6f61-400f-b37c-7cea74f5b994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c2cf24-881a-468f-9236-fa2f5583b3c5",
        "cursor": {
          "ref": "94a2247f-9793-4319-bd6e-85de6de0b0ec",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a0a61db6-df7d-4f28-bb6c-cd18ad33db16"
        },
        "item": {
          "id": "a6c2cf24-881a-468f-9236-fa2f5583b3c5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c730e9fa-f5d0-4868-9b24-2a7df65f2b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b860b6-66a1-4a92-9c64-aa1de0865290",
        "cursor": {
          "ref": "2af3f3de-332d-46db-8a99-a7b4d9c090f6",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "720f3907-e6be-409f-b148-e31aca936909"
        },
        "item": {
          "id": "f3b860b6-66a1-4a92-9c64-aa1de0865290",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "89a1a3ba-e468-42a8-bfd2-861ae1daac02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31951e44-5abb-4694-a289-4e9cde174950",
        "cursor": {
          "ref": "436e167a-2651-4b1f-9e9e-17daf174f046",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "373482e9-23f3-47e2-af83-493cf94c75b4"
        },
        "item": {
          "id": "31951e44-5abb-4694-a289-4e9cde174950",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6ed97ab7-84d1-4f10-b529-8c95a9473e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1757a955-c16e-4367-9517-fb6f799c8054",
        "cursor": {
          "ref": "44bb6b9d-fb93-4567-b41b-f52204076d9d",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4aa46517-1d00-42e1-bd75-60a0126b22df"
        },
        "item": {
          "id": "1757a955-c16e-4367-9517-fb6f799c8054",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d2ae5706-99fd-43ee-88cf-8e88640e8c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5fddd2-0edc-401a-8a12-352d4689528f",
        "cursor": {
          "ref": "18e5b31d-01ee-4844-ba23-04ebc6247632",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dd8ac782-8a8f-4503-be1c-728933ab4124"
        },
        "item": {
          "id": "fd5fddd2-0edc-401a-8a12-352d4689528f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b4b3d6fe-45b2-4b27-b32e-708bdad8921b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc6c4f8-f213-4111-bc32-bdd05d58d6bc",
        "cursor": {
          "ref": "f1f0abc5-014c-4e9d-a3ee-c222a87aa072",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "11004414-81de-426f-a14a-494e1ab93b35"
        },
        "item": {
          "id": "4bc6c4f8-f213-4111-bc32-bdd05d58d6bc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "beee9721-e9c0-4cf4-8331-dcca77dc5d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd974d7-7321-4e7f-bab6-db489f10dcfb",
        "cursor": {
          "ref": "f59b29ee-ac16-41ca-9afc-7c9e4f678a5a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "62a164a2-fdfe-4588-91b7-371cb6ddd2ed"
        },
        "item": {
          "id": "ecd974d7-7321-4e7f-bab6-db489f10dcfb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f1442b78-b603-4869-9ca7-ec54db2dc68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2156a86-57c9-497e-9b94-e3e7fbe36e6b",
        "cursor": {
          "ref": "be14580a-a6e1-4b7c-b904-55bac01ab7b3",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7c12b43c-d52e-4dd0-a6ad-d3c7e0d071f7"
        },
        "item": {
          "id": "a2156a86-57c9-497e-9b94-e3e7fbe36e6b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4d348fd6-8647-4a7f-9c13-acb78350f00e",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "304a0e79-1f4a-4e30-95ad-8b44dce9a6de",
        "cursor": {
          "ref": "8422b449-eb26-4639-bff5-d186786837eb",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a337afd4-0243-4432-ab57-aadce9a1b1f2"
        },
        "item": {
          "id": "304a0e79-1f4a-4e30-95ad-8b44dce9a6de",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2a203120-8539-468d-b8f9-47a367912b9f",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "8262d250-214f-4671-8b86-b467f6db563a",
        "cursor": {
          "ref": "4bc7dfdf-6def-4d76-89e0-70fe6a8c5e05",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4549fcbc-2436-4d6e-b5db-d46683b590b8"
        },
        "item": {
          "id": "8262d250-214f-4671-8b86-b467f6db563a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f282d9ee-f424-4f71-841c-968dc0cb96b0",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "49dc39fe-f193-42de-af2e-a0acaf22b2f8",
        "cursor": {
          "ref": "161eccec-2adf-4544-afc9-1d1046000743",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "da1e8d28-ce73-47c2-8244-7fef0b0ca7a9"
        },
        "item": {
          "id": "49dc39fe-f193-42de-af2e-a0acaf22b2f8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8837c2aa-594b-41ae-b68d-d3ed0988f81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055fe2b3-0d47-4585-9240-39570517b367",
        "cursor": {
          "ref": "1bea8f09-28bc-47f6-910a-652877fd8c68",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "11b64885-64f2-4233-94f0-8290acded263"
        },
        "item": {
          "id": "055fe2b3-0d47-4585-9240-39570517b367",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "189a4247-644d-466e-bf3f-bd758d368522",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "5e5aba41-5033-4830-89b8-60c89fa760b4",
        "cursor": {
          "ref": "2a4cd1cf-1e1c-4343-a472-6710d8154ff1",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "eaeb3a13-0f7e-4a80-8743-7fa2fcfbba62"
        },
        "item": {
          "id": "5e5aba41-5033-4830-89b8-60c89fa760b4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7b129772-a0d9-4e88-80f7-80680a0b410a",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "03a24b9f-9762-4d21-b107-865b812fb4b4",
        "cursor": {
          "ref": "c1463f88-f67e-41e5-9123-6e8954b2d6d2",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5d4215d2-ad9a-4ec7-b9db-8efde436bd87"
        },
        "item": {
          "id": "03a24b9f-9762-4d21-b107-865b812fb4b4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f2374c05-69fd-4056-8d0a-1aa685b5ea97",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "3d67a87b-2277-4399-ab83-4ef4f01b3bda",
        "cursor": {
          "ref": "dc99899b-f1b4-41d2-aa55-e606477f8083",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c9930c13-1066-4a04-aa4a-2ef2acaa9900"
        },
        "item": {
          "id": "3d67a87b-2277-4399-ab83-4ef4f01b3bda",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1153740f-d7e8-40d1-831f-0dc2a9669428",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "e418685a-f362-416b-b1b4-eedea876f348",
        "cursor": {
          "ref": "cc8bcbf5-4706-4bcc-a52b-df449bd53eed",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ca8db845-6b04-47bf-809b-2512e657b879"
        },
        "item": {
          "id": "e418685a-f362-416b-b1b4-eedea876f348",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9e6d9480-20aa-4f60-9538-ddcdbb4a0521",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "1e3ec773-9765-4773-8ab0-951345336ec6",
        "cursor": {
          "ref": "98831317-d37c-4e2a-8068-d3a952cb969b",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b32b9dd1-5556-453b-ae7c-f03072b21d33"
        },
        "item": {
          "id": "1e3ec773-9765-4773-8ab0-951345336ec6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9016a5e2-aefb-48eb-8a17-26c1f9eee583",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "b53ee3a6-f064-49e7-97b9-8fb5c239c5dc",
        "cursor": {
          "ref": "ffbf840e-5914-4608-855e-3f17e5753120",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9b882a95-8900-4e63-bdd8-9004860576d9"
        },
        "item": {
          "id": "b53ee3a6-f064-49e7-97b9-8fb5c239c5dc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ab17c1f7-bb58-4b2e-bae3-5131efc1e5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e6e3ce-4aa2-4c62-8d65-90340280a3d9",
        "cursor": {
          "ref": "21a3a72d-4090-49c2-a014-f2d6384afe4c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d4a54045-ef2c-4103-ba4b-4775a7d4df88"
        },
        "item": {
          "id": "32e6e3ce-4aa2-4c62-8d65-90340280a3d9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "87dedae2-262e-4468-a754-21dd8938ff3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96160aa-bd2c-4770-a1f2-f7a2a6432bee",
        "cursor": {
          "ref": "d65e5b99-eecd-42c1-b1bb-1ad7ca148a04",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "20c443a9-db17-4d5a-a81e-8f27e81acb1b"
        },
        "item": {
          "id": "a96160aa-bd2c-4770-a1f2-f7a2a6432bee",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ae6e96f6-fa4e-4e20-94cb-f5e4fc079bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3732eb1-24e6-4772-a1d6-7356aa9d7157",
        "cursor": {
          "ref": "28939da2-7a11-4c3a-93ac-1d0c60a50755",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "03f22a9b-bbcf-4098-9986-1b87fd07581a"
        },
        "item": {
          "id": "d3732eb1-24e6-4772-a1d6-7356aa9d7157",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ec429477-1733-4ead-95bd-fc950f8654e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bdceb8a-bef7-4661-8e22-f5e830bd10aa",
        "cursor": {
          "ref": "185b87ed-0bbe-45d3-8e81-44f26db8c419",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "625e09ac-d326-4bf5-a2ee-497cf3b11c72"
        },
        "item": {
          "id": "1bdceb8a-bef7-4661-8e22-f5e830bd10aa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b1556fbc-5ceb-4896-9dee-87aa051bcecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8cf029-779a-4736-a537-d57e6d58bfde",
        "cursor": {
          "ref": "301b9935-876b-474d-ac74-bab02036c696",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2064caf8-a73b-482b-b71c-f7c7a7239207"
        },
        "item": {
          "id": "4a8cf029-779a-4736-a537-d57e6d58bfde",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "841e4bcf-e4de-4c92-b7d3-670a16ac5919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77242993-0bb4-47c9-bd1f-d00dc8fe0675",
        "cursor": {
          "ref": "eb1aed94-93af-4632-b7da-31eea73a42bf",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fa76aa2e-371a-4827-94af-6f7e68744db2"
        },
        "item": {
          "id": "77242993-0bb4-47c9-bd1f-d00dc8fe0675",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "63054ba5-2abc-494d-af69-f0328010bc52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1f6a5b-437f-4f29-989f-8bfbd43069a7",
        "cursor": {
          "ref": "6c6179c6-4fc3-4a54-a18c-296353377c76",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "59aa0c61-1b98-4648-a6b1-57cb465d72cb"
        },
        "item": {
          "id": "af1f6a5b-437f-4f29-989f-8bfbd43069a7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7d690eda-1068-42ca-895c-4c74052b993d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e112f950-3ddf-4b0e-b014-2d86e7854501",
        "cursor": {
          "ref": "137aa072-6723-4252-bdc3-c55ba986cc06",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "799c46a6-97ad-41c7-be71-4e96638ec7aa"
        },
        "item": {
          "id": "e112f950-3ddf-4b0e-b014-2d86e7854501",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "818d4fd9-e654-4c63-8ebe-176a23971e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df78cfe0-adac-4819-bcbc-aa07de18e4b6",
        "cursor": {
          "ref": "b182b2d2-aa68-4ed3-a52c-e9a8aeb33ef9",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "efe7bec6-6e15-4bed-aefe-db082b2151ba"
        },
        "item": {
          "id": "df78cfe0-adac-4819-bcbc-aa07de18e4b6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "297b8d4f-f836-464f-9f73-79aefdc3a2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7ee6d9-a1c1-4c48-9476-b2df6d9fcb9e",
        "cursor": {
          "ref": "4baf009a-7d57-445a-ae3b-19a7491c750b",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ebd05a57-09fb-4a1d-8b5d-fda2db9a7678"
        },
        "item": {
          "id": "ca7ee6d9-a1c1-4c48-9476-b2df6d9fcb9e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ee261f6b-8863-46ec-be3d-7813f594b6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da21c1a-81f6-4b41-9e9b-67ece09f5e60",
        "cursor": {
          "ref": "9b560be4-9688-44b1-a9f5-2cd55215dcc9",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f1dc0710-dafa-42dc-bd7e-a74ade59c479"
        },
        "item": {
          "id": "1da21c1a-81f6-4b41-9e9b-67ece09f5e60",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0654abd0-ca8d-463c-91e1-6b3e751b24e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42aca4c3-ad4f-4a3d-b121-294924e110e7",
        "cursor": {
          "ref": "04a94a62-04e7-4fdb-ab60-cb8e959e208d",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2d64a8c2-e8b3-40ad-9cd2-df93db02000e"
        },
        "item": {
          "id": "42aca4c3-ad4f-4a3d-b121-294924e110e7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0e0c7d21-2cd3-4798-9ce8-7acb15b061f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00264a4d-a060-42b5-a863-26a21194bcfa",
        "cursor": {
          "ref": "c33fb4a7-0bac-459f-bfd1-20150d6af4f6",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c5270601-b28d-41c5-a916-7b199c283e52"
        },
        "item": {
          "id": "00264a4d-a060-42b5-a863-26a21194bcfa",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7d0ed8bd-cec9-4605-8315-d4ea5a6accae",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "5df7fab3-7b11-4ef1-bac4-f5ec468378c6",
        "cursor": {
          "ref": "2851c4d5-ad7d-460f-bc08-04819b51051d",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6196afbd-57d2-4b82-8ae7-339ff7a13cfd"
        },
        "item": {
          "id": "5df7fab3-7b11-4ef1-bac4-f5ec468378c6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d3a16514-4f07-4ac7-8ab9-d20074fd7ca6",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7c2c60c8-8ace-4500-8f22-154923071e98",
        "cursor": {
          "ref": "78041ca5-c0e9-403e-a891-8464cbfd51f1",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a9f2abb9-781f-4fe3-9eeb-1caad2ec4e1e"
        },
        "item": {
          "id": "7c2c60c8-8ace-4500-8f22-154923071e98",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5e658b1f-7c00-49b2-9bad-5042bd1e7efc",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "bca4c17d-ddbe-4a7e-a62a-95e91229ce7d",
        "cursor": {
          "ref": "46c876b3-3fc0-431a-b7cf-78107412f4f2",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9e5fb4af-7027-4abc-87c3-49d470e9064b"
        },
        "item": {
          "id": "bca4c17d-ddbe-4a7e-a62a-95e91229ce7d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1d59f083-0530-43a1-84d0-58dd46cfaa4a",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "7fbab491-0233-492a-bfee-24d52724631b",
        "cursor": {
          "ref": "34cea9f0-5526-45cf-8614-75cff783daf2",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bff9c578-d331-4f04-86d3-8afb530d816a"
        },
        "item": {
          "id": "7fbab491-0233-492a-bfee-24d52724631b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "75ba0d50-b793-4b17-9175-64c50c5d4fd7",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "9b2f9b3d-9396-4395-9160-cbd4b46667da",
        "cursor": {
          "ref": "dcece4ee-72c2-48ce-8e76-e646fb84da32",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "425c93d7-1d94-4105-b9f1-c8cea222b4a0"
        },
        "item": {
          "id": "9b2f9b3d-9396-4395-9160-cbd4b46667da",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e89cbe86-d970-45fa-852a-6a4c7a8018c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beedbd17-c7bd-456a-9783-935b62eccac6",
        "cursor": {
          "ref": "d43ac62a-dd83-4817-a541-6e2af91b14f6",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "386754c0-1c73-4401-abae-8e4f3eeedd8b"
        },
        "item": {
          "id": "beedbd17-c7bd-456a-9783-935b62eccac6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "374ce75a-8dff-43fd-bdef-c6cfdf42cee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6210ff9d-2537-41f6-8484-850419a2efe7",
        "cursor": {
          "ref": "2d7cf045-b375-4753-9efc-3956ccdb28cd",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6c7b0cf4-2a5a-4026-af25-cea232f32e2c"
        },
        "item": {
          "id": "6210ff9d-2537-41f6-8484-850419a2efe7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "435e8813-07c1-4a04-bae8-17a95bd2c224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28258f8-4d75-4e3e-83bc-f258b677906f",
        "cursor": {
          "ref": "0122d7dc-07fe-43dc-8f56-6345ad1f4c57",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fd576911-a773-4b5a-b9c1-f0c198c9b6b7"
        },
        "item": {
          "id": "c28258f8-4d75-4e3e-83bc-f258b677906f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f1b4c3c7-c28d-4f39-8439-e8fd36bf9604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7953a5-1426-415f-98ff-572af691d26f",
        "cursor": {
          "ref": "196dbd10-0aef-42f8-9883-56eba25bb18e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a78e6da1-7251-4f01-86bd-91e3e96c282f"
        },
        "item": {
          "id": "ef7953a5-1426-415f-98ff-572af691d26f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ecf4c5ad-2618-481a-8686-7a0be7f5853c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c947f45-b2ca-408c-9b60-f6633dc4b1ed",
        "cursor": {
          "ref": "cce932c0-3afd-4447-9569-b3b2b13a1249",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "335ac52d-8cb5-4606-a9cc-ba7ea16f1a2f"
        },
        "item": {
          "id": "9c947f45-b2ca-408c-9b60-f6633dc4b1ed",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "94feaba9-2271-4a90-8e7d-b1b52d245172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e827ec-e401-4922-9d86-ee22b4f02bf4",
        "cursor": {
          "ref": "b77dafe5-ba91-4ee8-9018-29e467bb0b5f",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a59e4258-f21d-49a4-8bb8-418ff02c4582"
        },
        "item": {
          "id": "78e827ec-e401-4922-9d86-ee22b4f02bf4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1b9dc98e-c104-4814-b80b-6f5cc16c508d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b8bc3a-da31-4d86-95c8-8edf9619ea9c",
        "cursor": {
          "ref": "967ca2e6-1218-498a-a0fa-62b717bd3eee",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9b6a33f5-88b8-46b6-a45a-6a72aa7c37e9"
        },
        "item": {
          "id": "62b8bc3a-da31-4d86-95c8-8edf9619ea9c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6dadea3c-5f7d-4ab4-8598-af80c8affb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee907f2-51e7-4b75-a265-2dd159aadb26",
        "cursor": {
          "ref": "6931489b-d346-4463-8681-5611b7851fb4",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "887d637c-5591-4887-889c-10594870784a"
        },
        "item": {
          "id": "bee907f2-51e7-4b75-a265-2dd159aadb26",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "98c86d42-0273-45f1-8c50-532b0e93f983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5509bf-a56b-4556-a300-5455c9256bf3",
        "cursor": {
          "ref": "71b7f835-180f-4e10-8451-1456a40bd595",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0cf7e0f6-fd95-49e1-a1b0-6906e8c1c749"
        },
        "item": {
          "id": "cd5509bf-a56b-4556-a300-5455c9256bf3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "32c67411-c528-4555-8ab4-7ed4e650ddb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcab1af7-da78-4527-9670-e8af3b9333e0",
        "cursor": {
          "ref": "136442b2-4ca6-40b6-8ab6-46c1fafac347",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "765e05a7-3aed-4bb2-9b12-b0f970965ca0"
        },
        "item": {
          "id": "bcab1af7-da78-4527-9670-e8af3b9333e0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "47998b55-f698-40d5-ade0-7ae5f412b19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9342494-34a1-4d77-a2a4-70d35ff3cdb7",
        "cursor": {
          "ref": "4b65df1f-2173-4423-a32d-8e9e3c32ab47",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ed7ee580-3145-464b-8bb2-7699588ba6a4"
        },
        "item": {
          "id": "a9342494-34a1-4d77-a2a4-70d35ff3cdb7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9a4c30cd-7264-4e5b-a002-5dec75f74b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898d4f00-3d2d-47ff-ade1-b71ba549eaef",
        "cursor": {
          "ref": "da61f748-343c-4009-801f-5c643c26ab6b",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "98fd1625-31f1-45c7-bbda-72ae633c0e25"
        },
        "item": {
          "id": "898d4f00-3d2d-47ff-ade1-b71ba549eaef",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a2317101-4e15-45a6-89dc-a11aa7382213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff40b4f-366b-4ca1-8307-3a14efdaf53a",
        "cursor": {
          "ref": "da8f2da0-6e2c-4c7f-b505-3d6eafc5fb22",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2efe77cd-4945-49de-8ec1-9631c8d3c9ff"
        },
        "item": {
          "id": "aff40b4f-366b-4ca1-8307-3a14efdaf53a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a132f3df-0c23-4e5a-a55c-befbb5a8e0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db52dc8e-cebc-40b2-b20f-9d4470a084e4",
        "cursor": {
          "ref": "591b3dc4-ad62-46bc-8f12-1b7713939035",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "efb26953-d2b6-4366-a94c-330fe09c0cc9"
        },
        "item": {
          "id": "db52dc8e-cebc-40b2-b20f-9d4470a084e4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a27c07ad-a129-40d2-8add-794caeabbfd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18173a0c-d655-4d7b-9fe4-336c332eed99",
        "cursor": {
          "ref": "1b073c12-dbe2-4acf-962d-0882c64fb9cf",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "95a3597d-43ff-4037-9165-7b1d72fd0488"
        },
        "item": {
          "id": "18173a0c-d655-4d7b-9fe4-336c332eed99",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "42fb634f-f8f8-48e1-b311-7c0b394f225b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bfd5372-81d8-4a7b-8c6d-d794ad79dc84",
        "cursor": {
          "ref": "aa9e88c8-735b-471e-b3d0-beb78e7557a0",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2fbed834-6e06-4baa-acb0-4d4d81f9681f"
        },
        "item": {
          "id": "6bfd5372-81d8-4a7b-8c6d-d794ad79dc84",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "306bd126-9e0f-4982-bd20-74f384fd9873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2817815c-ba8a-4bb6-81c2-84da8028b9f5",
        "cursor": {
          "ref": "eedb7db9-2f3d-4457-bc59-1affd2929852",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "38d200d4-484a-4578-a647-cbb224a291cd"
        },
        "item": {
          "id": "2817815c-ba8a-4bb6-81c2-84da8028b9f5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8d12e0a4-5fa1-4822-9398-0a97a2a9294b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563a7051-f0e7-40a7-981a-4bc9225b88da",
        "cursor": {
          "ref": "40fc27da-b391-4de3-992e-7cb4e4711b02",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "82ddb6c5-a861-452b-b3d4-55ea6157d642"
        },
        "item": {
          "id": "563a7051-f0e7-40a7-981a-4bc9225b88da",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "66e3a757-e94a-407b-8016-f41463dbc9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67fe6d42-4359-48d0-b4a7-618afee7cbaf",
        "cursor": {
          "ref": "c22b47c4-3ae8-4cb9-bbb4-e450cd1c99fb",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "66ef85fb-c043-478e-9ea3-c976e66616af"
        },
        "item": {
          "id": "67fe6d42-4359-48d0-b4a7-618afee7cbaf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cc25087a-6ec9-42cf-9c1b-e623930a54ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc6d6db-9552-4c4e-b1b0-9489a94bfb2e",
        "cursor": {
          "ref": "88d347a5-6c0e-4310-b741-9cf3a083fa2f",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "650624ce-2412-4e57-99a6-04c8856096cb"
        },
        "item": {
          "id": "9cc6d6db-9552-4c4e-b1b0-9489a94bfb2e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "353263d4-f2db-4405-be1e-1d1417896a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab2cfda-d36e-4930-8807-b838544ce956",
        "cursor": {
          "ref": "f7f3f1a4-7d4c-459f-bd2a-e56c34379106",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0264703e-85dc-4bc5-ac7f-2b9db6005a4d"
        },
        "item": {
          "id": "9ab2cfda-d36e-4930-8807-b838544ce956",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dfae7e9b-12df-4887-93ea-97aee78b5de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e52076-fc23-4813-997d-aed11c25fcd6",
        "cursor": {
          "ref": "71e71c85-53b1-48da-b1fb-50ae4095ad4b",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "df16fe7b-3946-4200-a5ab-2dc0e3bf09e1"
        },
        "item": {
          "id": "d2e52076-fc23-4813-997d-aed11c25fcd6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4b32b00c-34a8-4216-a97e-ea6fd3ab0833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fce4e79-ae52-44db-84d9-1c1568525dcc",
        "cursor": {
          "ref": "11960a93-9aa8-417a-b1d2-2a32cdc5fde0",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ec89168e-2e69-4aad-b04f-1335bc161928"
        },
        "item": {
          "id": "9fce4e79-ae52-44db-84d9-1c1568525dcc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "17c25772-e606-4c7f-800c-f388ab1ae55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832da9d7-7b00-4aee-bf67-9a4f14d14fca",
        "cursor": {
          "ref": "e20096ad-f6d3-4ec4-b424-b6c6c65d14fa",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "61f74c6f-4cc9-4b82-b27d-65750a30a555"
        },
        "item": {
          "id": "832da9d7-7b00-4aee-bf67-9a4f14d14fca",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4cf673c7-518f-4252-bad1-e137908a31b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c664f69-9ebc-4945-a233-a16203e7d767",
        "cursor": {
          "ref": "00436385-9c86-4ea3-b6eb-9c6557f7ac61",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "67058787-9add-4719-895d-27ec68e5e29f"
        },
        "item": {
          "id": "3c664f69-9ebc-4945-a233-a16203e7d767",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "dcc6b8d2-ff40-4a72-b54c-cd4e1243b3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f24bb8-4bec-43e4-8495-99e81beae05c",
        "cursor": {
          "ref": "8c9f8aa1-52ba-44c8-8965-a0d2f47634d6",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "aa717c43-1d82-45e4-9312-454372954d08"
        },
        "item": {
          "id": "95f24bb8-4bec-43e4-8495-99e81beae05c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d4661afc-eac7-469d-a43d-bf56dc9e884e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e297192c-ea45-4616-b798-d28ef75035e7",
        "cursor": {
          "ref": "4d088cef-8248-4c08-a08f-deb9f4bb1eba",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e65a62af-8df6-48ce-8571-8750ed59e8c9"
        },
        "item": {
          "id": "e297192c-ea45-4616-b798-d28ef75035e7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "28e2353f-570b-453d-a785-02908878e70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5ce087-ec5a-4905-96d9-c4aaa3c93b29",
        "cursor": {
          "ref": "41f1fb78-021a-41e4-8bc7-9d8e89c6e372",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f88de503-2026-4beb-b651-e10182a56844"
        },
        "item": {
          "id": "db5ce087-ec5a-4905-96d9-c4aaa3c93b29",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f609cc1c-9da0-4f9f-9708-e1a5ee84123c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa2a097-1ed8-47ad-99a7-caf9012ace78",
        "cursor": {
          "ref": "7be3cc03-98e1-4b30-a8b9-3471790b7bce",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f22785c2-bb0f-4d5a-82df-5df42846a3ee"
        },
        "item": {
          "id": "aaa2a097-1ed8-47ad-99a7-caf9012ace78",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bd764a31-559a-4503-a2f6-51c7147411f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237d9afe-a6e4-49fa-9152-6bf1afc0fbef",
        "cursor": {
          "ref": "16c3113f-0cfe-4262-b7d1-7df63f841f1b",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d4050a97-6ace-4620-ad64-d42508258970"
        },
        "item": {
          "id": "237d9afe-a6e4-49fa-9152-6bf1afc0fbef",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bd07dfee-3f2b-4602-a4e8-cb423b5ab481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa0e339-db2b-4230-864a-d1fe73729495",
        "cursor": {
          "ref": "e7dede40-c354-43d7-b18e-d682be47b4ac",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2f86156b-28da-4f90-897c-68daca70524b"
        },
        "item": {
          "id": "3fa0e339-db2b-4230-864a-d1fe73729495",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "33479e8b-8c43-46fd-841e-16a6b307e2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1a9612-8c1a-49b5-a8b9-d4f877d762d4",
        "cursor": {
          "ref": "821d3218-b2a2-4e9b-8326-6e146cf6b795",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "44e78ce2-a2d3-41d5-8250-496e99031c0d"
        },
        "item": {
          "id": "7d1a9612-8c1a-49b5-a8b9-d4f877d762d4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4028b305-80e6-4b50-81f7-13936ee5c6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494f8336-fa9c-48bf-b836-e95b6b221bcc",
        "cursor": {
          "ref": "6b21d286-7e6a-4123-a5d3-6e2fa9304471",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3fed31bf-ed40-4443-b676-d0a1e7e01b8b"
        },
        "item": {
          "id": "494f8336-fa9c-48bf-b836-e95b6b221bcc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d6129e01-6bf1-45d3-a975-0020881525cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fbcace7-ee07-4a8e-a74e-7114bac75520",
        "cursor": {
          "ref": "a8913906-ce40-4477-aacf-f228d9df652e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "30a151ef-8826-47b7-925c-04b5779fa745"
        },
        "item": {
          "id": "5fbcace7-ee07-4a8e-a74e-7114bac75520",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "dd8aeb67-4d1c-4842-a82c-f387d1bf1bb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688e1f50-d3ea-45db-aa70-9c4e4cad9579",
        "cursor": {
          "ref": "52123763-fd7c-4a34-860b-487a31b2dc30",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "386f6083-274b-4693-bf40-cbc232666260"
        },
        "item": {
          "id": "688e1f50-d3ea-45db-aa70-9c4e4cad9579",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8dfee16d-1eee-4054-b0a2-9334b3eb8f03",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "bce2caaf-4b6b-43ba-b445-d80bdc9f5022",
        "cursor": {
          "ref": "2a0c1364-5e5d-40e5-a09a-1c93d64a25e5",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cd193e22-1b9c-4474-a2a5-02c0964efd71"
        },
        "item": {
          "id": "bce2caaf-4b6b-43ba-b445-d80bdc9f5022",
          "name": "credentials_verify"
        },
        "response": {
          "id": "702d99d7-3171-4c0b-99f4-82b8a96622fa",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd115b6-8865-4950-abef-7ca7825381a5",
        "cursor": {
          "ref": "6e14f7b7-e73d-48bc-a74d-6c33ccaf7c02",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ff445b28-ac23-4ab2-9015-70dbe63d69fc"
        },
        "item": {
          "id": "9dd115b6-8865-4950-abef-7ca7825381a5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d6a1aff5-5246-4225-86f5-8290197ec03b",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb86f06-151c-4817-98d3-96e5fa55b06c",
        "cursor": {
          "ref": "68e653bb-644e-49ea-a780-37864f7697e7",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "40fd923b-02fb-4c70-a371-27d843570bac"
        },
        "item": {
          "id": "9eb86f06-151c-4817-98d3-96e5fa55b06c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "443b808e-b39c-48d0-9922-09f01411d61e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb86f06-151c-4817-98d3-96e5fa55b06c",
        "cursor": {
          "ref": "68e653bb-644e-49ea-a780-37864f7697e7",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "40fd923b-02fb-4c70-a371-27d843570bac"
        },
        "item": {
          "id": "9eb86f06-151c-4817-98d3-96e5fa55b06c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "443b808e-b39c-48d0-9922-09f01411d61e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f8bd10-51a2-485f-ab1e-deab85a8ef32",
        "cursor": {
          "ref": "7eefe608-5b55-4ae6-84bc-16b2571c061b",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "59ddbcd7-dc05-4115-847a-22932dee57d9"
        },
        "item": {
          "id": "61f8bd10-51a2-485f-ab1e-deab85a8ef32",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ecd016b1-c081-4ebf-b2a7-919c46529ee5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76f4080-5156-4fdf-a35e-c59d011cc147",
        "cursor": {
          "ref": "c8fbc8f3-4c38-4f58-acaf-9e984837239f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4e62c469-3ca4-4a58-89fb-bd4f0b407915"
        },
        "item": {
          "id": "a76f4080-5156-4fdf-a35e-c59d011cc147",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "90bf8842-32b8-4a55-b195-590a2e9b5c07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}