{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6c851eda-45e2-4ec3-b2b7-a726ad58ce51",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1a266888-f27c-4f43-9814-4794705bf6f0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dfb122cc-470b-40a1-8790-13c5376328ed",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "19176392-84a1-4325-9cbd-966518fa0a4a"
                }
              }
            ]
          },
          {
            "id": "ab8619bd-0219-49e4-a2e5-7cdb6b29e179",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9126314c-a197-452b-b964-ce9dd9483019",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "530071eb-2e6e-40f0-9375-8da57d159051"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "958f9eed-d3b2-4fe9-9cc3-3ab68993add3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a36f2e97-e4ee-4375-a6fe-5daa7cae2e7c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "79d95959-1f49-4369-b29d-cbacd70e4fec",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92bf1b88-5cdd-406d-89ec-5b19203b5b52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63aea714-40e6-4410-a988-ff5a2403ac27"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e976db12-cd49-439e-939b-eb001067663e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef968339-dc1a-4470-9d92-7ae4f2571643"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1996465d-20df-47e0-aea7-a95b70e6e231",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "feabeb89-cb7f-4fc2-9ffc-f585175ede6b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e55ea3b-8f51-4ab3-85d1-559350a9e890",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "782f458d-5038-48c7-99c6-b057f65b8085"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb8e7f61-8d7b-4b81-aed3-37b283a14f33",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fdadf3b-c2a5-4386-acb5-a5426cd5c855"
            }
          }
        ]
      },
      {
        "id": "288194e4-0331-4f64-b23b-d16e833a63e0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4043fcef-e8a7-4375-bb3f-64140f8f5356",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71f991a2-4c75-40ac-a4e1-09853570132c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "106a5a55-3d49-406e-92a7-c26c9d81dc36",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9f4c12-f296-4d48-a5fa-58b463593ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7afc9541-47e2-4d2c-aa57-99f7d1ade733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee05987-9042-4538-825a-215cc6a62888",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e722ede-59de-4a58-b8f0-929c91e4159a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8953d82c-d9c4-4e95-b0b5-cac6a9bde470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44872c6f-85e9-4b29-8875-34c8eb0d7902",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9b1260-ce22-4da4-98c2-3e25f19c56a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae0089d4-6001-46ba-8eb1-2a45e28024c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f801c85a-7d79-46ed-89ac-3fc9e3471b2f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c64ab74-c01c-45fe-96e7-686e6e1021a0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722af188-e7ff-44b8-bfeb-3b2ee6c989a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72f6f1cc-b1be-492d-9407-794e6b3b6181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6dbfa38-61be-4914-aa13-bb693fff6583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f244806a-dd19-4e1e-a353-82fd7b398819"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "844479f4-9b18-4b74-a061-001dccd7afad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f11cc91d-e74c-4bb7-80f7-524d90f43a97",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b77809f-91e8-4293-8ba2-6328783bab15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9a62e3cb-ce78-46a5-9aeb-85dd5f34beeb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78af62e8-0b94-49a7-b983-df5448162c87",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "78c641f0-4171-415c-9fe9-adda012bc143"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4144826d-9329-4b01-841a-642944c04649",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e5a3015-4bbd-4162-9110-56f294bef400"
            }
          }
        ]
      },
      {
        "id": "067021f2-5d09-4f44-b5b2-923d535dd548",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f322a6a0-5c38-4ed8-b903-7b78b47acb69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fad621b9-3888-4385-b329-21124bf22243",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "49342d2f-be26-4dfa-93c2-b5793a9c8d90",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a807cd1d-b37d-4122-96df-9af2b31e4246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a937e215-4fdd-4cc7-bcbd-ab6c442453ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a00f02d-6c87-480f-bcf3-793660ce02c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51bdb73d-325a-4ec8-9c2d-2110afaa7859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a74313-91a7-4e8b-a0b7-6e47972c8903",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd76abc-3759-49e0-97eb-79521a38dded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d11b35e-72ab-4dcd-adff-af65ea82a360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3dcf37-aecd-4e80-8bb5-113dfe83c02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1648168-2d4d-4dff-9b23-bf6f121af30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549d7933-fff2-445a-a44c-c0d641fda608",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69a3dc0-829d-4ff2-91c3-7807eaef29ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b754aad8-0a4d-408c-9d33-a710bf0f7a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5f530a-3c8d-4fbb-8028-63799ee99d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69708f88-bac9-4c5d-9c7a-3bca2ec9ed6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6893ceb2-5169-4ce7-b3a3-26839677510e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84766f0f-71a8-4106-81db-0b1fd4460df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc689a4f-a7e0-408a-83d9-ba48851226bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b80da78-4def-4af3-be72-f4fb3580fef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c78fda5-989b-4d28-9b35-50cf10a904ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe843be-0631-4461-806c-148018410d5d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1825387f-0b99-40f1-8ce6-7f0a1cc6f3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42c3682-e7f5-4a99-bbba-7701e19c9f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cee60ee-2155-446a-aa47-6ea1d0724ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fe34d1c-b94a-48c9-874e-e65cbfbbe7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00c7aca-669f-4a8b-8bd1-ddbd9112bdf8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd66287c-050c-4c66-b276-04ff1608ed5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f38fcf-3303-4588-8a36-83d48b7294a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be658297-2e20-409a-9653-cd9b67f11b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7c8a1f4-0fe6-463f-9cbb-627e8daf23b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4433be2b-848b-4c8f-8e6e-e229a9a451f8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9e199e-56b7-4e1e-9225-88eeb45005e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2330353a-1877-4a18-bcea-abdd3748c47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ec215a-2345-4d5a-ab62-2d35ac62316e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca58265c-0185-4d60-ace4-c6bdeb779d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb48a410-cf27-4b15-8ec9-3262ed98d3d1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c267302-5cb3-4895-a44d-67ee30712cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb2dcd4-45ad-464e-a628-e525340fde04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961c96b0-e812-45f9-9ffd-f05785285fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a6c97c2-da69-4de5-90c3-d3671cb177d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38773dce-39f8-4954-bf88-1f08f4de9037",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "134d1c9e-d8b7-4480-a245-9e05c2c2bfa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d3c7e5-1909-4885-9d52-768362bf0e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29dc4f94-d898-4b25-9b36-9331d54fdb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b750605-eb4f-4dc3-8654-ce4f920222f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73241cc9-41d3-4385-b3be-72156af46584",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1d3cd4-e00c-42e3-97f1-bbadf132be2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18269cda-6ccd-451a-aa34-c530b7199e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f489362-ad35-45a1-a2e9-bd313a42b317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef34f88c-5a06-43c2-ae10-9b8b0555817c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc833ff-3ca8-441b-a2e0-a6cbc3f7d28c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798e309e-85cd-4596-b0b8-8ace291153c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99af19e9-598b-41d0-aad6-915114e4d11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5130ea2-c116-4b55-8583-3899f528aca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f2af8ba-98ce-4060-bcaf-bb411735044e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0b0a68-7db9-4465-88ff-d08e746e24aa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc73433-61e9-46dc-8083-8117445e2a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c79dfb49-827b-4772-9bb8-fdbe18cfb1c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee3f66b-76ae-464d-bd44-fb93645419de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0611305-4829-4541-b11f-d22cd8132aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a197f0c-3019-4ef8-90fa-481708ab061e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe5edf8-79c1-4be7-b786-172d9007f3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259e5a89-aeb2-490f-ab11-a428d1b9d554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae60df1-402c-40c1-bc7e-78d873ede300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53a96564-6bc2-4e41-9df9-b221a3d69c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11e175f-c699-4ec8-a15a-c9176425e066",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d85492-e2ae-45c3-9543-e5c56416423d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01fb5206-4aa5-4359-a4bd-21fe381ab865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c9d2df-c26b-464e-831a-5a4e4f4deaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1809e1ab-8f56-482c-a8f3-0fedb09da337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1c0740-a978-486c-ba60-4e507d7ce901",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1651a6-adbc-49a4-9abe-1a1db169dd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55f9d6b-6261-4023-829a-74f8cab8d668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed92f35-7ec1-4b72-839d-d29b64cf5ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83aafda7-1912-4edf-bcb3-b7ad601916b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8000fa3a-9ff5-4f0a-9738-426d21145cfa",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35ac756-5b0e-4595-8bb8-72006a0125cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6069ecd-abd0-4a66-b06f-1ce283afda5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447c94ca-4b76-4ffa-acd1-4447ccebafff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9c751d2-870e-43a2-952e-ad49e9e59f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973e298a-39f8-41a8-bb9e-57fb952d4571",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7427deee-8058-4ed4-a03f-a28e4209d94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86a7790f-ebfd-4955-ba1b-5802bf898f45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb853fd-a163-41f4-b94d-bd6c776b5f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82c2bf87-9d09-442d-b4c3-434f30493e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7398b0-e70b-4dd8-b270-d076f73cec34",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ab94b6-ab17-41b1-b83e-34f5217e1133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af19f469-8791-45a4-933d-6f1e05f5610f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad3169a-b299-403c-b156-0dc9a237851c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a26a7db-a517-410e-bd44-86f0721aa970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f32e51-8ad2-4f5a-ba8e-a1db59058b95",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9b72ec-12bd-49b9-b4b2-aa844365bdbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d706253-d915-48bc-aef0-b6f2b89059b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f3b335-222f-473c-9af1-0bab0bf20d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65184cf1-ad4f-4630-a72e-eeb0898d063e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08e2555-3f0a-470d-9426-af294d65cff5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f8c946-b963-463c-a2f8-aa044c585107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7952af82-5526-4f75-9d91-221f35be5a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf656df-6ffd-475f-9f59-6b5df11c0248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abccfd55-b095-4863-9b9b-d55823f9bf2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c740d8-73d5-4b44-99e4-1c9b3667abb0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73fe943-6bcc-43b4-825f-b20e2ad4a649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53f59662-9901-4e20-a93a-8c62cce23f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d6a65b-b638-4c27-bf4d-80410552df74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae4a2b7c-8369-44b8-81be-c0fbaba04f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4919e0-2c72-45a4-8d44-490fcb35cc9c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9de0caa-e2d1-4cc3-9a47-bf0fb1e69118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c764da3d-1d23-4347-9d07-dc71e1383962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e768d6c-6e83-4a87-8da7-dfd501509595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c79a9046-431c-4eed-b673-fe75433e9c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdac9910-bd3d-4a9d-b59a-e6903e596978",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331c4d40-e80e-4fe4-ba40-2f08d3e20215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42d536f-f9f6-4827-974f-d385b73bb42d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca22293d-3751-4d26-a778-8674e7fc0d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "646db2d8-8148-440b-9ab3-c4d72dedf3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a487b0-3a9b-4333-b560-b484d9f45793",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f46109-3d1d-42c0-85b6-7ba055afe9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c413c4a-150e-4cf7-bfc8-f40fa02ebacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28759f9d-2874-46cb-88d7-4fa45490fdd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d517d0a9-f71c-41e6-b2bd-dfc4f91a8736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac4f07d-23fa-41da-992b-fc21ddd24e58",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa5986b-188d-42e7-adc8-833184bf02eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6c61f0-32ed-4945-9f46-3ac85ad084f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139132ae-8049-4e64-bbf0-10c643c28e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e849928d-b92a-4d70-90fb-f3e641526f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478d8cf8-6c03-4cc4-b20f-a9f0014af060",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db67acfb-6b07-4f45-9d3e-cad4f7a9ee7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab21a683-724a-4235-aad3-2aa8a967ef8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982e1edc-720e-4ba0-b29e-6c64a7f0b013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2be11783-58c5-4cee-8002-ba6e3c01a787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a30e41-6a65-45af-b5bb-bd8a9ede12e8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c505c9fd-9b15-49da-8121-d192048c4565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d54e07b-4de4-46c4-8030-26d9be034a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4188d4-e7a1-401a-99b3-8d75e3b1dbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c833c2ed-4513-4310-9dd0-68d0d6901e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b5d823-8528-4af4-86d4-5c8b6e4372ce",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318e016c-26db-477d-a557-b6d98241c1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f949f3d2-f06c-4e1d-96b3-84f73366352c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d766a8d8-5740-4a2d-8666-08d4319b0ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9bb0c97-a863-4a6a-8649-64ab61677907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9665a328-10b7-479f-b680-5448f326edb8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd5a900-7fef-48ce-a4fa-b194f8e3a653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1488d14b-c675-4a71-85a7-8f64d49cfc00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33afe197-4653-4380-8261-c337e285e842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa416585-b04d-48d8-bb71-745f41c523b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0886e0a-dba4-45ba-8cf9-68574f954eb7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6cd31d-4d2f-4cbb-92e1-a62569455fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78fa0e5-fa76-4ced-9e0f-fe5979b28628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e37e8da-e9d1-48bb-9c14-ebaff8c59b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c320698c-82d6-49fb-baa8-8dcde1f02992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1979d9-17f6-4da5-a38a-f85a43dfbc39",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637dead5-f8ac-46e1-8b2e-a43a267f30ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdb5500-aefd-4e4c-964a-36faac278929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e43482b-a9b5-43a1-a38c-15153da7d937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5630cccf-5cf9-47ab-8b09-70886e77deb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97675a1d-e97f-4fd4-b032-ab7b8eeb78e5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa5dee2-7ef2-44c6-9245-d582e747e532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8665ff77-5171-47bd-a75d-1d0340625891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a45d6e-aab9-43e1-89bf-65140eeece0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf7b9f0-8b3c-4317-b7c4-c4d57bb8269f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b891d283-7bd9-4dc8-adca-22978ef0cbd3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b61dd98-73b6-47eb-b105-d48b1d69c9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb30b12-8c35-4c03-aed8-d1ba9ff6e7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06cf4f5-34d0-417d-a8c5-404cab9ae205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40d04cbc-cf9e-46f3-bc6a-5a771b42ed6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319e7fec-7502-485a-8ea8-facf316577b1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b797fbac-28af-401d-8fa2-4c5dce587cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f28725-c2bf-4b10-b841-8974ab76f876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58446900-773c-4551-bf2d-56378a78e2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1b7a4e-6dfc-4426-a937-85b55ba8f9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1440ddb-2468-4329-9050-6d04739e7ce4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792ded38-6937-4e4d-9746-be916bcdb354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03b3560-a518-437d-9755-bb5eaa794d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80aca839-e3e1-4a7c-9b77-c67d375ef1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "31639295-1f21-4805-bce0-b6cd66b5abe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc029e9-9806-459c-8870-5f8924620f5c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bc9b6c-0016-4f92-9187-0f3788d469ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7798648-c511-4ee1-979e-bd505aecd035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2985b7f9-980c-4ea7-b39e-53a7ee90a7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90d1c679-4e28-4ae4-987d-33de0d6c8c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ffe168-570b-4299-948a-eb7734228990",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce554ab-d82c-466e-b0b5-a4f207e1e81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f43efea-a98d-4f4a-98ca-38d3e32bd568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e62920e-178e-4b00-84e7-c5642dc63888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce960981-9b63-444b-9602-bddbd639bfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca970ab-b3ca-49dd-8d5f-aef8ea501c8e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80aec614-217b-4e00-b2ab-39b3bb640976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67178ddf-1d43-43ac-8aa5-5913afeb102e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e242716-e62f-4912-acff-018a0a42eeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "68c14c1a-5e8c-40a7-8466-93270ce386d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904c7edb-2912-464d-94af-e19f541c079f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3038c2-f8d2-4e0a-ba9d-256f6a95e9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af64327-9c27-4213-9bc9-dda5eee4013d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd2d04c-9c67-4943-9e1a-2e969692bc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e604b17-381c-4417-9658-15eced70a053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55bef35-0671-4228-ad7d-69d5373abca0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cceb251f-5c6b-4d6e-ba8d-3f31ae8160a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5fba635-87ec-4c6e-8090-846d32c4d0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d51f18-5962-4a4b-b5c6-b5ade9de5032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b9e068c-c824-442a-8685-c41c00cbdec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338a48a7-3695-40fb-a5f0-67033bdf761c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32312bab-b0fd-48b8-ae49-789ab0fb9b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1721cec7-62d4-40a6-84c9-2a2173bd337f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2144f3cb-0c71-4533-b59e-23710755129e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9029b63b-fa1a-47c0-b163-06d7ba8c2621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef11ee7-edb1-49ac-8106-cf8cee559c40",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d6ce74-3584-4fe2-9a19-a9d4863ede3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9773cc52-43cf-43af-b50b-2dc7b03bf683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0131a7-8f09-4bac-8624-9351b6a0157d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4d840d2f-bc06-4a8f-a2b7-4c1ccd3d041f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9d1324-99fa-4ea5-bd4c-427045caad0a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2336fe00-4abb-45c9-97d3-ede04bde0377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db80497d-0c73-41f4-ac5d-53014811bfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beecf7e1-56dc-463e-81dd-103e94a9ac15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0afd1f1-77f9-46f0-9f6e-0bc61db8cedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62ccbef-2b65-4362-988b-cc82597b13c0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da5baa5-47f1-40c5-befd-345fd9892e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0c8922-a49d-4666-955f-605c2356a3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221159ff-482b-44e0-a9b2-ff6dd9518067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b62776f9-5627-47a3-ac0f-1713ad36010d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c3485c-d155-496c-a642-dc3ba4ce544a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb9eb66-6aff-4655-a153-a9ab5dff6bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ade12f-e4c5-4fc5-bcd7-2ff2658eb863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac9661a-40d1-4ef1-a093-a2d79522ecf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf463b3e-a21a-4c55-a13c-39c26805d2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704da9d4-7b04-4f0b-8b05-5c4ce0c983c4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3b899f-7939-42ba-9445-602f32429291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287388a6-ef1d-40d9-b1dd-e9903fbc0b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6db7a8b-580a-407f-929f-97542c2b5ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84a19637-3c92-41f7-83c7-9934bab00bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fe8e39-7aef-4d41-b184-eb46382badba",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fd93d3-f4af-4eda-84f8-7ec8374ed94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f48168-a240-4778-8cd1-f067d6ad3964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdfed62-c808-464a-adff-6345d1fc7bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9719f2-be20-49be-b1df-6cfbf22c5e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e33c298-c0f6-40e6-8306-927d743a3d46",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d53f44-92ef-49b2-a999-26d47bc70186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690a5199-5f41-4dbf-88f1-a41382b8e7f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d308a76-8e53-4a9b-9ead-4a466ae39abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d85ec61-ea74-443d-b824-35f7427b345b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c717588-1181-4d07-af2a-733d5f2e81b4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424048f0-ecdb-4129-a401-3156f8c18b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a756fdd-be80-4276-af9d-5d73e25c8f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da5848d-b91d-48a1-9093-39eaaa721e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64dcb728-77ae-4ce6-a2c5-629fe3d6d7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee342c1f-c339-41ec-86e1-dd71b5375de2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93b2669-4e59-474d-b588-abb90dc9a725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fbca56-faa4-489c-a28b-3e978e5d4fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa59e6a-e7a0-44a1-95de-22455b15a2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55bcb9d5-ecf3-426b-9d74-3bc6847a80f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1eaccd-0c8a-4d82-b08a-516b32a6375e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1910214-d749-489a-945f-45b436334df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431d960c-a264-4968-9884-d8e80cb12290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3909ee5-36b5-4c79-9eec-9b5c6f29c698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a775724-2cb0-4d7e-8aa7-5e12ee549cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083e3695-7d2e-40d4-8166-7e8c3292b08e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5abcd58-3d79-4485-8a02-af1b01e5de8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f3e717-39e2-456c-9886-4e1f656a5033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef52b955-4763-4d02-97d9-91b535778981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c6aa019-168f-4c01-bd01-2e2056363ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a29a0f6-839e-4f08-9bbf-9c54ad75e6cf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0d9dde-4b27-4ab0-9d70-56bbf685b970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1feb1d0-76dc-41f7-b7a6-1662453702fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad8a9b4-4049-4f8c-be0a-890db30000cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5ded25-583f-4f06-9f8d-26badbfff07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929b72ad-f57b-4344-a861-efa024d92053",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae195a4f-82c0-4642-a421-a9dc65b0d752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0acf775c-9a2f-4eac-8992-e4d46fe96cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7728fa-25e4-4d79-8559-16ee9230e757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92efe00b-00f8-4049-8063-6ddcc5e95551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ddebf0e-62e6-4e86-a145-1771978d15c9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431ca210-c47d-466a-b068-03224c5b64f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cda8ad9-d1b8-41be-8ff0-17c4a2588770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858f85c3-878b-4b9b-a887-c4040353cbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "886a07fd-f9a0-4e52-9045-7340e98db36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7316b584-d4ea-4c91-a8ef-3247961a114d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a96c9f-3c56-4f74-8982-88ed7573adb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687ae795-b4b8-4995-88c3-f712f4aabe9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e3e654-35df-492d-8a79-5d69fce45fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "507f3896-d2c2-491f-8d9c-7723980e2fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721fce45-48a3-4c1e-8cb6-7bdd7fddff96",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d15774-d89e-47f7-a5b2-6e01354c68db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6577fa5-5030-45bc-aa42-1bf0dd757a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399da138-dd74-4ec5-a357-e3402e5484ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc6381b-9474-4b55-8b2c-57e78151d5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7139258c-4c1e-4abe-be7c-97c60d11ba6c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1348d76-0563-463a-8475-40bda5183d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71373717-1300-42a0-97fa-57efdc7b901d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31263d2-5184-4294-8462-b3bdf402b69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "14a68c59-d910-43e6-9738-74fc0d91d030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4394ac2-2537-429d-a54f-44c2d644eaa3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a01539-e5b6-4959-bcb4-6c294f847684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a51b90d-f4ec-4d5b-8aa4-0ad16b29127b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf38f83c-d46c-4ad2-9ed4-e18945ca1c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "67b4e69b-23bc-4c4d-8765-be4c2257bd77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5355869b-1d51-44f6-8c0c-413640f0b04f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3960ffd5-97d6-4e11-ae2e-a323a4ddb542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ea9f7d-7f17-47f1-b164-3a34155ae286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a323f55c-3725-490f-9886-d4c3f4a32ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "172636fd-6cfb-4974-9fc7-ca54ab2cf88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c248c607-d899-4780-a6f5-408b7f5d9dd4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2f4324-13c1-4807-867f-70eb59c2b472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0c1afe-a062-4919-ac10-5534376ca88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c99f79-560d-4804-93e7-29d1b6f82d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "30cf779a-2cc9-4056-a31c-1ed8834d9864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4b4aa7-0c89-4663-a250-025e147e0879",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "168a29d7-a4a8-4c26-9a1c-e240777ce87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdea13d8-4353-4499-a1b9-eee5dcc0b46d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8b14cc-4a7c-4951-bcf6-4f3e7d9f326e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "44358de2-9fc2-4ced-866f-6a2826aa4e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e24951a-7103-4237-acd4-6d454de542c4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d953c5e-8abe-4f45-90ae-8d067e445837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6448d3-9300-4e55-a03b-b267283ef10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3820ecb8-08e9-46c3-8bf5-962e28765ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5c20ce-91f9-40df-aaec-0d08c85badbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e239a99e-87e2-4765-a5c0-de405b20358f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bb04da-320c-4839-b15b-fb6b4a13c732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f63123-7d64-4e7a-8343-975688e3a8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee94a5d-a19b-4e18-b079-70f09ab978b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ed5225-48f8-4064-8e1d-ee6931aa4f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbfa614-b16b-4633-97c0-cdd2b68d2b5b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e790b128-33a7-498b-ba93-27075857f76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749dba77-77f6-4677-8ebf-dc7636d00b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d892127-3c8b-4f82-9f19-c09dcba403e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e54885-05f4-4a1f-9e75-a1625997b2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f8ac01-e2b7-40fa-8bc7-515c51cc466e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd68090-1932-4ab6-82f9-3345471a00a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b4263e-0862-466a-85d7-1a4d67454603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f9b076-e847-4fec-9936-65dec4214120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd4cb16-5536-4fc4-8cf8-08390f8d2079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2d4ca7-3ba1-4076-a8ee-4a3f9a212ee2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce5a9a0-2972-4245-917f-f696e565c599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45254992-e903-4073-a5de-b2e31a1ed65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9854e3f-99dd-4e20-a4fa-2e74ede6ffaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59a17a54-0375-4eb2-97bd-4c9b8c94527c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffeff09-5960-4eb5-9f1e-2f3396f1fbb2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d93578c-aa76-48e1-8645-5295c95a38e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3907d38-abcb-48a6-aa91-e82f6cc4b982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3acf578-dd12-4964-9aa5-498b0c3caf0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6b211f-71cb-4370-a2eb-0e9a87001495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb216d6-f8bd-4a2b-a917-a27f72493bf3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f7fbc5-511e-4639-9e7b-52a719629887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8fb6d6-33a7-43b8-aa29-4db87eb23b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec85259-2f31-45f3-99eb-e32b948acda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "654fb489-57b2-4d3a-98d3-86528db36c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cc9dfe-0346-4b88-a483-141d3734c695",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e311ab-eb07-498f-974a-1928a27ea4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1b84f1-d098-423f-8d27-13ef033a4952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fae211-6893-4f43-b6e5-0a864ee64e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6928e7-8645-4a62-945e-4e1831a9b889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8bab73-98c1-4472-8b49-66959cd46a78",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc83a139-227b-4108-bb1b-ea9f05bea37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76d2a98-96c9-427b-b995-cb152b56f5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b7c938-dbd5-4a4c-af34-d87f093bcfd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e110e2f-cf1d-4a69-b45f-d6bdf7a40d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f63a979-7407-4a78-bce6-a3903c3b02ea",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c0b2b2-8dc0-45fa-b8fc-b4629fb67b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da74381a-257d-4d0b-91ab-3b95b089ed1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3bfd79-5328-494a-aa3c-b1bb2af6a04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcbc659d-b97c-4153-8d32-07eb6b34de86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1703b84-e762-4ff6-949c-2a3db25d1351",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6bf700-0547-46b8-991b-6afb23d2c3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e5b69a-671a-4ef0-ad61-c48009d87d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7a526a-f426-4f1d-b01f-15d4e9d39181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "284b7e86-c7aa-4c77-95a7-04215ece8600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f51c8b3-5c54-428f-89f0-28c1b2abbdf7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa95e8b2-5037-402b-b374-cd4344afe709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ffb2d0-51ab-4a13-a3d4-b88ceb41ca3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fe64c4-7995-4f61-849d-d771d95f2c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f587e96b-9f28-4c37-8081-2091eba20d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f41a81-c7dc-4e94-834f-2c981bb252c0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0843a7d8-d9a7-4537-b669-70c420d28256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b338f23b-fb6b-4ad5-ab56-4721a0912aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c602a7c-ef41-4c35-808c-63d68f67a4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "66eb1940-c8f0-406f-9c60-af3ea165ad80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9302e3-940f-4a87-b738-9060fc44e5bd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99e5623-ffd2-42ac-afaa-3bc7a75cc78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419d9145-f11c-4b4b-90a5-ba5eec5e519b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a466529-eb89-4da5-9041-b4d5eb7afa04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bc55177-882c-4697-a35c-6e6d84407648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b7dfe1-dfb1-4ea5-9213-cce7a184160e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baaa1648-a7d3-4f65-9d03-1ee730dbe578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f377be-e7a2-417a-9c82-30a9c9cb3f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b892e0-2899-4933-88ab-bb4ecffe708b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06280973-a47b-428f-856b-f3b0e57cf576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5037b078-24bd-4229-9c11-0e4ee869fdc1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f6292f-796c-43bb-bf86-a22e91aaa233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d034a306-27f6-49bd-84d2-26ceb1c5e289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64893f11-e464-4814-a0dc-4074c22553b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd459828-ea71-4103-ace9-82aea8fa3d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d123d27-cd67-4e72-bd32-cd4901452e7e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fc0612-744c-477c-be3c-23aa41687a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2a8f17-ae10-4016-b631-a44e0e0b2396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38405008-c554-48aa-8875-0788dc395002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c537de3-2294-4be0-b63a-478727ecf70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2baaabb8-da45-472a-9388-d46c0a745c70",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466db05a-4196-492f-b573-e11811144c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8ccc25-fa93-4535-a368-7822132962b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eeb0293-266c-4bfb-b417-2feba3a41d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f0cca06-d37b-46db-b081-d289415ee7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73984c6-e877-4378-b986-bf61195ff451",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537da82a-319b-4b54-847f-b937bc9d7fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3caf70-23f9-4452-b1fa-f040f83d0de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80f149a-fb55-40dd-b856-a2725fc4d819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c73595b7-09cc-43f2-9f09-5bdf6a3dd7b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe68b93-c1fb-4a2d-b4e7-e06a37f60c2c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0316d42-2797-475b-9eff-116cffcbeeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a0ce34-1e76-42d3-a739-7bc904bd27f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d8c8f6-ed7b-4a2c-ab9e-99c9de4fd70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7fd5515-b58b-4d02-a6ad-e1391f4524e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c5a169-f91f-43a9-a0f2-c97d7e85f277",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c152bf-170b-4a4b-aca2-f89ed7f3a121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e3a68e0-5f35-4653-9add-bedbd92632f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492fa266-e59c-4295-90a2-afaa012c16ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90f661af-a811-481f-ac1a-5f5d37d0958f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d2a8ff-83af-4787-91e6-480b4d38df34",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16610b42-ccf9-44ed-bcf7-27017732a40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64665f1a-f737-4aab-af45-621d7f7ae95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ca4044-580d-4a11-b8e7-b325cb39612e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae457b99-c864-42c8-bdd8-44cd409cf96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805d70ae-a6fd-4503-b828-07e435d36067",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1704b1-7f31-4255-8a46-b07bb290afd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c830a3-5147-4a19-95b2-f178997c1564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cbf9ec-0db5-4462-9c2d-efbef0a8bd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d99d2d2-aaad-497a-8eb2-4d49dd180075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae505c0-34ee-4d18-8a2a-5792b4dd4b36",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4419009d-31e1-4dfd-9d47-68423d9834d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266a9113-c83a-4cff-a5ad-27057b2dd1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcf9085-bbf2-4689-bf38-f3eaba79b0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f52be31-1985-493a-984c-870d8835f557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1d03ad-239c-4250-87e1-302dd0e4c9b6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c2cccd-808f-4ddb-a15f-0bf58c7c853e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249b38c6-3bf5-4f59-a503-653fa4b054d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6886e68b-c7ab-46bf-b0c2-d4aa974ef574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3de62941-0d3e-403d-ae30-4e9b05043b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea8df11-e017-4de3-909f-974946cdd558",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebcd8b81-5a48-4db3-9672-c30802459e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb3b338-7a72-4d28-a8ca-c8388fe31167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae66139-87ed-4dba-83f2-f233ac095609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5501a258-ff05-4d98-b6a2-f41f5c1b3ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdcf7e86-b94c-47fc-a7f5-d37f96009037",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906ff2f4-0ba7-4621-82b1-3fe46bf4ca6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bcfca8c-146c-43cd-b5f8-e79eab414a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecda440e-db08-4c29-af2a-afad57cf53e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d64046f-246c-423d-9349-915c7b1bd076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75f1642-7e34-47b1-945d-9d7cc7644b32",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700a31f0-2eac-4b47-944e-b0e81170c411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a516f4b2-43c8-4fb9-8a72-0b2b4e0c1408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d811fd-9aa2-4200-9df1-3bb6db91e7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "076c08ff-1a51-4261-aa0b-e06a6c57e706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5103d0b3-94e5-442f-8ace-61b130155187",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cdabeb-2a9f-43d1-84b3-11ff1652ada8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86fe54db-503f-4c9e-a176-7cc02c63cad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ce872d-09c1-4e01-96d4-aca796aa4a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b87534-25fa-4b34-8b25-6ba2f45f93a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29d6fb4-12be-4d09-82b0-12bf998b7ae2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b3d2b4-2410-47a5-9c77-5019e5864c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "46c7d394-8aec-4a1e-8b4e-bbdc2d3685a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de3009f-c3c3-4148-8b87-ac1b08212186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1292ba36-bdfd-44a8-b6c1-f66c7ae5e091"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "36003252-7427-4809-9f8b-d851fc920099",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fbe14614-469a-4aab-9141-77cd585e944a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d478ff9-26b1-4299-b1a0-74b87417a53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f207671-2189-46dd-b96f-8d8e4498c312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e5ce3b-d4e0-4ac8-97cc-4472d0cd40d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac7228ef-6352-46d7-8114-fd3c9291d524"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2f813da-5b7f-4b73-9b57-308a302b7943",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c2934a5-9a51-42a2-b167-a2b97df3863f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e99f0ce-b008-42ef-a0fc-ee179b0c6d20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2402a24f-45c5-4b70-9c04-cbfe6add2fcc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4a79c602-2e47-46dd-8761-f6bcba860359",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef577782-64c8-4609-8c98-df882d09b314"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "40901e35-7412-42c0-9984-ca082da32e44",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "344d68de-c662-44c2-b570-f864d6c45602"
                }
              }
            ]
          },
          {
            "id": "f87fcef7-9794-480c-8cad-2b0af83bce4f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0168d91e-6f34-4ffb-b564-3d3ea92be280",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "9d565a02-3726-4248-bd29-0f63b32ddc99",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8f0e60-ed7a-4b17-aaa5-cdf8f2347d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f55b828f-be52-4c43-8826-c4558a12cc51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea7d94a-1a48-496b-8613-1652d87f7e75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e8d00f-74d7-4075-b6b4-15d2248630ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b1493b6f-5c36-4e42-b41c-e65201ba6188",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87336519-1e87-4c32-b93f-a51fd0907665",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c1d6452-f674-4d69-a722-022b64a5d459"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0080868-8c1b-4a0c-bec9-05270c599879",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d9c6e98c-d6c3-410e-aedb-57b8f1a5764c"
                    }
                  }
                ]
              },
              {
                "id": "bf3bc7b7-74df-48c8-a2ff-9a2be705020c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7559c727-439e-465f-9f46-49b642945e37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2076059e-4d23-44e2-910b-14442392dd90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dc09950-bf12-4966-9725-ffb19d9f88a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "85eff82e-5ebf-4027-a559-2ddbf0c3c8ae"
                    }
                  }
                ]
              },
              {
                "id": "6cce211a-49e7-45e6-bc8e-4119d67aba2b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ecc0199-3b21-459e-a781-2f1aecfcb0e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39c07637-1808-437b-ae83-da46adfffea8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c41900c7-54a3-4350-a2c4-a617c2fefb0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e01de83-d34a-4960-8b7f-7995378dda87"
                    }
                  }
                ]
              },
              {
                "id": "9adb982a-1b4f-4600-afc7-01a3824b86a4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be0e625a-6db8-43aa-8b99-1c08956aec5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f9ebc74-2364-409e-9dbd-6a9bce569aa5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6638aac-5108-4b4e-a296-8f39cc771923",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cfad463a-efe1-4e82-835e-8da4fd940a28"
                    }
                  }
                ]
              },
              {
                "id": "0ba0c7c9-b74e-477a-b5c7-f9d9c02d464a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f2188cc-3982-4308-9e3d-ce1dc158e194",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec5d8dce-b843-415f-a7e1-e7039452cf7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e873a78f-37d1-4838-93a9-0ff360c38a87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2a0892c3-5132-40c9-81af-8bbee472f9df"
                    }
                  }
                ]
              },
              {
                "id": "b001f028-bc00-4161-b56e-ed23503dc600",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64b9ea4b-f4d7-4a6e-b5d7-bf44d4d9ef6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d4ad19a4-fc90-4708-bec0-487bb4ae67e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a96a32d9-c35d-491d-b31c-7895256bc311",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a5899d37-8a86-4b66-a82b-2982a2191010"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dbec6420-039e-4e3d-bc73-db4535529fec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4997c0ef-2474-49d1-98ec-73726ceef750"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94861550-fa66-48d7-bdc0-04c6b99a489f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e531f014-160c-4ed1-bbbf-819de21fb78f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4970f6e-982b-42b8-8fcc-ac9c3fb6c2e2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "57f75640-944e-4dcb-b0c0-43c53b67e66f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df54df9b-5cd8-47c7-af9c-74c0502ed97d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db5a7863-a841-47ca-bf3a-f88a7658b5ae"
            }
          }
        ]
      },
      {
        "id": "48e59d18-fa15-4775-bec5-0bf293413017",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a27ba3a6-507c-4f78-9a52-8590ccf499a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0f3923b9-ef63-4c0b-a673-5ef347821e68",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a43498ad-5564-4da3-ac10-c9f159bb60a4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80eea67-860c-4592-99a6-4ed3bd1edbcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "634a26c4-5b18-465f-b9fc-b5ea975f4873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435aa97d-9c6f-4825-9c87-368f5fe86e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bdad072-7ad1-41cd-9a6f-6d5a76df985c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0266ac73-3513-4f5d-a4d3-2d88a815d8bc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b62067-b74c-49c7-89f4-8a5bb00f98ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ebe33c-0a49-4b2d-b48b-c378a813ef09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6765e317-7d9b-438f-9802-611e5bbf172e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc1dcee-5c2a-464f-ba95-4413b5eab591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb3bea1-d1ae-456d-b133-dffbed62eaf0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "926ef22a-3a12-4c90-904e-15dca8ea14c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1ffc2e-5a75-4248-a292-f1510e018bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56a5e7d-a50e-491b-bcaf-f3907dc8f5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "530047fb-47bf-49cd-af65-1f35bdc8b125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf524aca-6af7-4f68-92c2-b1c90869ee7e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87dea35-3c76-4a83-a0ba-1120bc0e9a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a61d88-1ff9-4bb7-9532-53de1ec062e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af09c48-9dd1-4bc8-8a27-7d483355143d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "071a8422-bbfe-4e10-8def-26e558b9e94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee7ba30-80ea-4ac9-9a7b-0661127a6b22",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba27b15-3c51-4eb9-b686-d2bd97a086fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dbd0893-113f-4d34-bd1c-d2756495be14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558b923d-e7bd-4c33-af2f-820b09965819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c430a0bb-dfd4-4504-934a-b6b4f2f7e932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb74c982-7636-484e-a8de-4628ddc146ac",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4edba7b8-a5a7-47e1-9952-5f938b1a55f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b76d6b3-1b90-4710-994c-ba60e8cf4b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799b57b1-f644-4862-8394-258cf02a99e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a21bd18-fdec-4c24-98ac-19408bed6a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dc71dc-104e-4a6d-a65a-128bc48f94ab",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4068e95c-35ad-435a-9e94-9bcba3d67491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269c9a2a-95c2-4723-9ceb-9196b58ddf63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a205c7d-429e-4465-84df-e4cd210441e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1fef7f8-ef44-44f8-ae58-31121a08b415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfd09e6-c290-4306-a023-8f044a5a9092",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c83d31-64f6-4d20-89b2-5d7cfc68df1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545919b1-faed-4fa0-ac86-889e13f004f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd76d05f-3e9d-453e-b12b-448567c51bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76e2d997-a846-4230-a7d3-2098e15eebbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce9d219-882b-4de9-a817-53bd826deaa4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05611b15-26e0-4116-868f-0dc2ad3b5e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7df3280-6745-41be-b00c-45bbae1cd477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edace249-c68d-4e56-81f9-2011def53d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3635c6d7-e3fd-45d9-8969-1b09013345d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb6622a-548a-4c73-af97-3c8374dd5561",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f9f385-dbd2-4b90-9f3e-10958a6a6630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120efd5c-8810-4511-8dce-c00386505442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0a34b5-4ef1-4a65-bc18-d78f279a0a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4f1b44-f7a0-4de7-9c81-2e19c4a08d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1aba4c0-ee87-4416-81af-8076b071b5a0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee575f2-b0a4-44b0-b051-f6ac0afbf6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a4e191-ece5-4693-bd0d-4ea869c3a01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aeddb1c-32f7-40b0-8dec-354f38946dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b63baa-e6fa-421c-9555-261437a766d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1464ba94-14bc-4b23-8955-494bdac3eafc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c73ca83-3813-4fe3-ba38-aea3d0dbab90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea00275b-7d01-4781-8147-63241564b468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abfb738-1eb4-4b5f-ab54-9eebce62eb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "803086ec-d311-40b7-ae15-7f4dde416a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0fd7d9-71f3-40af-b455-5fbe8fd424ac",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540a9542-1342-483d-ae03-b1be7d362268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4975fb6e-4736-4f11-9b9e-7a72d4950c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b186fb0-3e50-4666-a5c0-d6df9ba1e084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "040a1d47-49f1-4ac2-806e-4e7911c15d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16911718-d34c-48bf-a235-40c47a570fef",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e7a0b0-fd61-421f-bb15-f6ab6c2ac839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2f8085-f7f2-476e-b438-0d0a7a055ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12539815-6001-4a35-852c-ca0252471f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a8e5b8-cdf7-493f-95a4-033ac67c578c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7654dc-ef0e-4998-8fb2-c487582d8102",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1455dd-c884-4c5b-96de-69502d160788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7056526e-d160-4261-89eb-13c048770f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c01b3d-2c9b-4b8c-b29d-0047623975d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "42cfc279-ff2c-4a46-81eb-80d8a792101c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa6e776-e669-466b-8e75-cef8c06854fe",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70422008-8769-407c-b6fd-e7ac2dada706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c445f3-2e75-4a7a-97e9-7d98efbb3ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cb7269-a4ee-4334-80d0-06e65d233b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2de65cb8-5e1b-4a27-b8fd-f5420606c91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb01562-5b56-4e28-aa87-f444218bbc25",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2677d46-58d9-4c9f-87f9-37742ce7bcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf4f498-9c4c-44ba-9d38-12dac1a5e82e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683b0e4b-a937-4ab5-8732-da6893edf105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e01557c6-8c54-45b5-8a30-4f478da1c794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11899942-3560-46fd-acf8-b23b583c929b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd4a1fe-ed80-41c9-8418-8d832420b584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a0ef79-1702-4b95-aebd-8ed19cd82125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1449f8b-b61b-4639-9c4a-7afa4fe195d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdbd351-f03d-4e4d-9c7d-02c6104f1f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710ea1b4-4ece-4d6d-b2c3-704c24e9d61c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491f99ee-ff6f-493b-b5fe-9adbfb240bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f4714a-96b4-44e7-bb8a-ba4e83880166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f2663d-c1e7-4b31-a6c0-9fb74d3edb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d22a5b5-d362-4568-a958-d40f95bccd43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cf6e3c-cc2b-44e3-974a-8c76901544fd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477bea15-865b-4790-867b-2495b62d1c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70f5577-3cad-42ed-a7d5-15d28f221391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673fecf8-7342-40dc-af39-964cdef5c069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfcf4fbb-779c-48fe-bd33-fee419f9427b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa9f3e4-0656-4ebb-8318-10908769d4f7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb7bd79-382a-4f15-9613-f76b653f4bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048e2126-9812-4ae4-86f2-773772bd83e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66cf8bb4-75aa-42e5-8e68-b9c8c769271f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd26c724-8cb7-4761-a27e-8396baf39713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f96433-1595-43ab-adb8-259440750ab9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef42b01e-001d-4096-892d-db9201d3b363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7174830-34b3-42a4-a6e4-5be6ae77f321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3a4d62-00ef-47fe-9395-8d5ba99b2cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22d03044-36fa-4fc0-9291-8f742655954b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77baa6d-bf57-426c-9c0d-3fad87b5fedd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36937bcb-6b55-447b-9674-b59dd6e65881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b302cf9-808d-4c22-92b4-1e6a54956e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1f8fdc-8639-46ce-bfb2-e9c2330502cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6806ac6-d815-4cf6-9a95-c70bcde227b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc86a96c-e778-465d-adfb-d78a7c1032f6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fdb322-d40a-438f-9ee9-dca48be15547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2887b7c-9fe5-4dba-87ba-25358303cbd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5efdb08-5998-48e7-a9cb-47e790907136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a07cf91-58ee-4dbb-91f7-4303145c22fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe468e5-5d9b-4285-8f09-afe6fdc84d85",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7992676c-1e4c-4148-9994-541798203fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46994241-b175-4184-8238-607004be3eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6743de4c-c966-4391-9158-f26ae09e9949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10bfe235-2af6-44ba-ba35-607f2039eb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413e5063-2a99-4c71-9bd6-675b09783a09",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df6fca9-4857-4666-8cb6-070ecd7d992b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de16c3a-4555-4ca1-b016-9c576dbda20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414cac9e-7976-495d-9c3c-c482ceab7f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0946167b-47da-4600-a711-cfe4e272d217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce373d0-ef6d-4ffd-82e3-7e6764c63cb7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b82502a-e7ed-43c6-b6bf-f74919365282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3e577c-e7dd-4b02-9a39-fc7aac502ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff90f47-d67e-4def-873a-09686595289f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a821c95-a2ea-4226-a483-52cfcb550e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fdf69f6-49b1-4093-8713-6f2b7d2fb41e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1227037b-dcfd-4580-9b39-880790031610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2673c9-7ce6-4d61-b083-6cab622544d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2471ef5-35ca-4e7b-aaf7-575b201f24ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9042cc7-959f-41b2-a3a2-5cd59b98d68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe0d37e-82c2-418d-87c6-839dbdec0070",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91553fc3-4de3-4a07-a846-777222073f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca6197f-9b62-436f-8ce0-86d3a7568956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64158c51-7f50-4baf-a102-be76d7127daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8adca79-43e6-46a4-9cdd-c1696699115f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e871c1-7a3c-4850-bbaf-4adea5055d4e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25ff146-8843-4d78-8bf0-998af42c6d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd1956c-910f-4c40-b905-6b709b3f57bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c450be83-ccde-45a2-9f9c-83da8fc628cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "712a557a-4ab2-46d4-94b2-2cf3465ad02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f632239c-2380-486b-8d62-c1be4b0ac731",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f3e5ba-6c20-4cb5-aa1a-3272beafd40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c9502f-587d-4e66-b6ee-76136da60c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d114f98-9517-4b7e-9793-7105d74c5b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7b1d0f-e327-43e6-ba8e-8c0c5f605453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ea9914-4e59-461d-91be-fdf4f728b6e5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14249b9-8782-4e16-875d-355caf13508c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fff782-8cd4-450d-95e0-c67ed224f161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6b7b3a-bd19-47f7-b89b-2073780e1fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "764728d5-dea9-4632-bf95-edc399330ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2223d560-f91d-487d-9bf1-23ab6481fe0e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14db305c-192f-493c-82f5-5480f222dfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f382160c-264c-4f41-8375-036fd39e6ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a328ad-b5b2-4418-ad41-5c5c8b3c30b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89284bf5-7205-407e-a767-4cead748d517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0b6582-7c19-4624-b827-9c8054d61523",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80737054-7f2e-4475-a610-7a0c89bcac5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123935b6-2456-44b0-84fa-e96ae75e9c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf38cccf-49f3-4aa1-8655-c277d8b145ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1096ffa-2fbf-45a0-b8e4-b93de96b92d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55dab688-8005-40d3-8bc1-d85c0746f201",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc877d4-333d-49fa-89c5-763decc14d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34be4d1-49a9-4fd3-94ba-df6860617b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bd7353-6c89-404e-9a02-2ded1652175c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d028b41-4f19-4add-a718-1b3d6b985c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d488732-ccc8-47eb-b35b-c4309476a5bd",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40533bae-d1ad-4a5e-9d97-07ba94db9e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79f0825-a453-4046-9e90-a0c9ff71566f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02e17b0-359f-4852-844f-9d801213f716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c893368a-07c9-4d0c-a097-d5cb065facd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275b7891-fde9-4d60-aa01-6ccad27255e6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627455d7-66bc-4b12-ae65-e6707261900e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a343fa-5111-4b9c-916b-52d4e6df3953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421909ae-017d-4ab9-9c8c-c52819b66cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbf5893-7f32-4843-8fa0-0179cf6010f0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2aca036f-1084-4657-bcb5-6f23495fdc28",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30ed1746-88ee-4f51-82cb-1110ec2d5ca7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34127946-0823-4d7e-a770-4011a76c9c3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b0678160-cb23-479a-9d5a-cbc722a0a98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2a53f0-62c7-4cfd-aa66-2645405e6df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d05e5cf9-84f1-4f42-8372-f30ac65ed9e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3d74b26-fd65-4756-bc0b-a3282354a1cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f879749c-37d8-4f66-b240-158e06ba7f0e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d63ae79-fd3a-4dcb-8a68-796da7d81b14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d59f94c6-e814-453a-953b-e81d5890c0f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad05eba3-14b5-4eec-ab2b-a54b31dc16a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3185212d-c3dd-480c-8592-50caf8eb9999"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b53e279c-8201-4340-9fdd-3381531a3a24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb8dffae-1f89-416a-878f-bad579992890"
            }
          }
        ]
      },
      {
        "id": "948d07a1-ebe1-42be-adea-f47477679637",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e502b010-42ca-4bfb-b9b2-df1d086eac0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf25f32f-9f69-48c2-a6ed-66d0d65d75f8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "53d10bac-dd9c-4694-8d0c-4e4d81d0caf8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69c8c1a-656d-4095-bbf2-d5b26b54d9df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eab972d-e642-4026-b311-21d94a07cbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d462181-f023-49f5-bc79-655302f967e5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c514eeeb-57de-4e6e-8dcb-1cec3be88d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a363ad1-1445-486c-980a-ab7d2612d362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d230fcde-7c5f-48bd-bb6e-2c35ccf0a706",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05da500-d68d-4dca-bcee-2ce68d637b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05bd558-8d13-4b7a-b573-4ff6048427bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549ef651-e65d-42d0-b82b-faa5b78e7993",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365df4f4-54ff-4a10-b5a0-eed98e888c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e68c20cb-8d42-423a-9abe-9b51b953cba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3225a420-49ec-4345-9e5c-07a7e14c381f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dee3e4d-e825-45bf-93d0-9b4247ca263c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3990f3b-e9f5-44f9-8dad-2121c0e529ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef12847c-4438-4a3e-8b0d-52e09c3bb479",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf47277-5882-4c85-936c-1445fe857829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36bba076-58db-42a4-80e1-7f42a5ef792e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd62927-7e01-42d2-9ff6-6bae551091a4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03b1e33-2217-46a4-af7e-a3a0204ed108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b822e5-0c05-4351-8c92-1d2fa3c460d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e62bb6-d252-4b25-8731-c224b6ad7b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8519663-c94b-4410-8dd5-a67ee48cc592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7a8a73-da41-4ec4-8c0c-40499fdafa05",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43c0187-5669-44b4-a781-6048501f188a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e368bc2b-9d6e-43f6-9f3b-eb08a191b8f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7220fc-d529-4c09-9198-1811a7d14169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70bdd99f-c2c4-4ec6-b5ca-eae3e1e7fe6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6670de60-7125-4e88-9d7f-d9b0175aebc2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad56b52d-0120-4304-ae3d-5be31b3885c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4bb03a5-64a5-4968-a740-f666cd3437d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19302f2-d769-442d-b1b8-206a53bb2b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607b6133-98f9-40b9-b44b-bcfab5ef1f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74df38d7-9331-4d32-aa44-457eb047a78c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eaec45d-7e6c-4cfa-a348-27da6a01845d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00be9931-15fb-41d5-b589-f697e264876e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "946bb572-4a6e-484e-817d-5267e9bd8ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e81980-ae7f-4a06-a336-2b1eca2d787b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3d3532-144f-46bd-9b0e-1388ce83da91",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6150b4-4ae6-46eb-ba9c-9a1649a64099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2741d8e-6e55-443a-804d-f41486181444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d5c00e-9e04-4820-b098-5bc720e60b1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0b3418-235a-4e6d-9d1d-8bd5308c8ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99050480-d933-42c9-a22c-c882a01d220c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f3f8d3-de4a-4869-9176-963b76dcac79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42adf28-ee7c-4cae-a002-bc2ac79f1e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffbfbe2-6377-426e-a527-071625dbb9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a109ad-516f-4e34-be34-4ab2a78df824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c52ad96-94c5-45de-9395-3321815e597f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe6c2cc-ef8e-4568-a893-2de6cfd611ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd315eb4-7edf-4a40-8eec-4b6cae9a956e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ff750b-b5c7-4e15-9a4d-ab04b842996a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eaa4ee1-c947-463b-9b91-944c3b7ffa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743b3961-5f8d-47dd-aa34-7f6029821ab7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2a7cc0-c8d0-4381-9bda-b7889288ed20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "115114e5-5160-44c3-9f83-01345f11782a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb66352-2a1e-4cc1-b4d2-9651a55172b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b043a97-cbef-4fb4-a084-766eda4612c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef4738d-2c46-4f2c-b5fe-1c0ad16780b6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc75557-5380-48ba-8ac2-d1dc595bf05f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf231971-daa9-4a7e-8c8c-62fc7862f364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642ba0e4-a238-4f69-9ce2-618de2d7bcec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e38771-f970-4875-a4c2-be19a36c9801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5813c19-6316-4645-977e-53387a4f549b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4d727d-b606-4bb3-93a0-e4361ddababe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a99fef83-041c-4d2a-a492-12f71fbb13dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da17e9c-eedf-4609-aee7-4a9dd6352e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c83924-0bd1-441a-88ce-6a8151adfc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd05f4f-f495-4136-a2de-72068e55cd98",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0aa1db-0315-4996-98f5-9cff501a99cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c536d1-9236-4c2e-b9c0-ffb0231d709c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8e82a8-6bee-4499-8b02-4d6fd74bd305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd01c0c-9344-4a8b-af8b-e467af15296d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f197dc75-e5f3-4759-941f-aaccf217976b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88f6de6-77bb-4645-8cad-5a2b26325629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1812701-e020-4306-bb89-a1ca037482a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e655c640-61c5-4420-aedb-efae5776bd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a658c598-a25e-485a-b19c-793b41862c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8403de-cc51-489a-8488-b7221a7392c2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19096bb8-5bc5-4bac-90ef-fb8c86a4068e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6279aa4b-1cca-4f92-901d-341d850f6f23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f824c94b-49de-45dd-bd94-499550808e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5640c034-720d-456a-a53b-f34f9f6f6c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c754479-995d-4789-a77e-896daf13c47d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc08e40-2464-4631-b946-c2e46eb70921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e060cc6a-2f59-4a31-96f0-c266a61415f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e621b86-4e9c-47f3-8411-43f6ba4445c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f665a1b2-6b1c-4c9a-843b-6922e5df4dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6714a4f0-66f0-4bb3-983c-d5d9264d442d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef429a8-e0aa-4f09-84e5-f5bd4246c35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1eba708-18dc-4035-a341-f7c9e00dee74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b710f201-2c87-42a2-9bdc-6ad1302b7baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6eff1f-23a4-45ce-9c53-1f557cf71e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ce4dae-ea97-4d40-855f-16204d8c71b6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e987cae-6fc2-4a00-9165-2c168f765220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5da9524-cc88-44d1-904d-4eb31546b2d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405845f9-e481-4aab-8b16-c4c4cb434921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366b15ff-63e9-456e-8374-ba9effe50e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4f73ba-1e5c-4be4-a3b1-0f233057fa02",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f368d2d9-2ee9-4459-9f14-ae3727ddec1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee31670-fbdd-4334-9845-7f0850066a4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e0d114-5890-4b70-85e3-8b2888f661fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a614887c-3444-458b-8816-0f3160d9ece5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61457cc-fbf1-4c8a-b7bb-64d5bc0c735e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e262682a-4080-4327-a41c-001ca04c62dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed3d24ef-5ba7-443c-b5ab-7444e656ecea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "845e720c-47fe-4b1b-b391-c213368bb9f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bd67ff-d84d-49f2-a522-d198dab349eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4a9f4f-6fb0-4f68-be89-9e6814ed0760",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d2cbfc-b924-4119-bffa-ef1886406ce3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c60618ea-ac3c-4623-91dd-e33869f7b860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0affe8c4-528c-4153-89f9-a79f4094822c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3dd0ce-25d3-4f4a-8056-72ca41621438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a439c3a-4425-4f08-9b49-2b7d215e34de",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38218d0b-dd75-43d7-838b-c4e1d038ad41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ac1549-f586-4917-ab49-403c170ed209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9414655-682d-4524-8e49-401982844dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1045f91-4648-4814-abca-4ae9e7c33a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9968b11f-1611-4310-82c9-92bb62b14a32",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51821461-cc2a-4796-97a2-d7d1731f5f7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "328a76ae-910f-40b7-bee6-f6e122a455ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb77a9b1-2b2f-4560-855f-fb886ac0e069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4194b2-de8c-4b89-ae78-64b098ad009c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd40fc8-2389-49e4-bdf8-382f813d4694",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503f50f4-027e-4bac-8e2a-2298b201eb35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc547e1-77e3-40bd-9358-bfff842a0cf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71937f80-9749-4656-80dc-6bb306865edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1fec5d-6466-406d-967e-2c8e2ce90457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25565784-aa08-45b9-91e2-7c6b441fd42a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62c3e57-1312-48db-97d2-612bebd04a36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05afd84d-2e84-47b1-aafb-63fc90a7ade0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb02c90d-1e99-4f08-889c-6e4eb51f25d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4741f6d7-5603-4c49-a24a-ccce73ca88cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c54c6b-0341-457b-8490-034a8fbd1051",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ab4d0b-163c-4347-9835-020a97c540f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba9fc117-84fd-4b2b-a5af-758380bb1296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da3e4ca-36b5-447f-b597-c8d3f8f9c942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e945719a-275f-42ff-857c-78bd4f7bc7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a7ed15-a60d-4b2f-a388-25a950772010",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24accf11-eced-4462-9506-fa6d23c3cd24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0cc24ba-6b6e-4280-b2b7-034518aa4d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e43ded-715d-442b-be54-f634cfad8cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2ae77f-e67a-4ba4-be21-d0d0b0e73aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eca81ea-f793-49b9-9f54-3847799ca746",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f278360-288e-49d0-aa75-8ed3a9dcb6ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f550c389-fcee-4c15-aa25-23521f7882cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31476bd7-abc3-475b-a824-7a4bff698139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea8b213-251d-4182-bddd-dd080a72eff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdca263-ab5f-4a70-b6f2-adf364b9dbfd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed804ed-e6e9-4943-afe3-4ad761abf4b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5f7db57-af09-4c60-a221-bdf85007fe22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709ddd5e-00b7-47f5-b85a-e117058b6d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c3a7ca1-0c7b-404d-a44d-45f795c82754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db57931-5c03-47f5-8b00-0613049136b9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330803f7-77f5-43f4-97c0-2e42729af516",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c24c9b3-f890-41aa-8498-1ddd211cad3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cc1dd9-d35d-4cfb-9404-57a76ae8f8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "713516c5-fee6-4de8-8d8c-4b3841ec5e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24da349-357d-42ec-aa53-2e77116cb7c7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e8ef76-05d1-4cb2-bcfd-045006d0105e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed66d19-6a04-4661-99ec-b4d09b52c9ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7649c0-9d9b-4132-949d-5e83479e3b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed1066a-2562-403d-a928-e436ce0b70fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27a998e-9193-47d8-97cb-a922fdeccb88",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12089b4d-223e-4c99-a3c9-21e1592f401d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a8f116f-e3fe-494d-9520-0da7fea3f621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e06cea-b0dd-443b-8de3-a0597600d515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6df8f1-a8b4-409c-a919-949734edd38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671f6c78-3520-4c5d-9120-8fe385cacc68",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43393e71-ae72-46aa-bf8f-e937f2216519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264b889f-9dac-4bb4-959c-ac51d379c0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3609e02-8eeb-4c7d-9af1-e270f5fc3725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d92c19-b82f-4116-85ad-12bb57ff6270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93344e14-4b68-47cd-bd6c-888128e39d36",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbfcf79-b096-4266-bb35-331e010404a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5938ae8e-fe0c-4dce-9b22-78033d46bd4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7676ece-100c-4055-bd6a-f61ab575f2d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c5feb4-fe15-47d0-a15d-1375da0af2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c170a79e-8fab-4312-ab70-19733ae015e8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841e06a2-6a75-46d3-8a87-59e5925d0e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208eb206-3667-4c93-8837-b236ba156a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "893cbea3-f3cb-40d7-af54-1745c956604e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "235a9372-ec8e-4301-9104-1ae1db11d137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b386c2-93ea-44f4-b2f0-0e959ffe73c8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b566059b-deaf-4087-8257-0ff5640ef85e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57644477-3cf2-4306-ac85-af3ec056098d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52176159-5110-441c-8391-758a22111370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58fa71dc-d856-416a-8fb0-434e7548cdf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77426fb-4681-4616-ac55-1c4ecea336ec",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301e735f-6cbd-4029-99e4-c99fcec9f137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbab091d-0f79-46f5-8f95-15ea3dc97844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75ee394-20b5-4014-82ed-4f87b99d2e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25117e11-e45e-43d9-aba3-cd7a7ced959f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf18775-5dd2-4967-9d23-a95d5e0547be",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceba1f20-89b5-4f2d-ac30-ecc5f7f61f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061ab3f3-c543-42a9-94cf-b87865b5bc65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d3b3ab-2379-4b9d-9e75-3c5701d232f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca79e6c-28c1-4c10-ba67-a2e6277c5162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace1be81-ff5a-4334-92d4-957b56235678",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f227b78-9a99-4a5f-80b5-a7fd652513b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946e60fa-2481-4a7d-b97c-8ef683077fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10d6e61-32ee-4e82-acd7-e35f60d07018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81acf994-fc2f-4c54-826a-4f3b018a158b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0f055b-b2b3-4a0d-8170-e6463211e24c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4a8e7d-ecf1-4b33-8210-97e3748f2413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1531f685-7896-4f20-af5d-862f33df7903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac0a821-987f-45a2-a8ac-cc2792f6e8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8250cc53-513d-4c79-9fe1-288e13ef0322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e17d9a6-f114-423f-89f8-375118f7b9ab",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56a0444-f233-4126-80fa-3f63205510f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da7062a-84cd-4911-b0c9-9121b5e12ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88c630b-01dc-400b-ae1e-2d81eff1a10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "269c976c-d47e-40db-a1ef-4673ab7f1b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce66fd7-b3f9-4bbf-8348-11d750560268",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148b23f7-65f7-4c4b-9b5d-10a70650f056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a2ceb3-59ce-4fe7-8f53-b8d2143c315d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdae10e-3909-4662-be81-cf3173420014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7096d8-d7f0-4fbc-a11c-54b2cef182c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaaa0003-45a3-48bc-a379-404ed0e2b55c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f4d85a-f39a-46c1-b7ab-2edf2380b694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ed6e49-17fa-4723-9a6c-3fc0bac9cb9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6baf2c-9fce-48a4-a066-ae5db617e6ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4a162a-016c-4096-8c74-eec4ab84047d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0edbd3-16d1-4fa5-8513-d86171c01c6c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008cf40e-639f-41d7-b2ca-a9e6a867759a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee759971-77af-4584-bca0-371c42bbab61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b720de4c-2ed8-498d-b677-9908ff8fe1d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48442f86-2186-4f85-974c-4f116f9fbe99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba1bce9-60f3-427f-ad79-4beccde29470",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66466c1-f65b-4a08-9322-7ea501229f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6173e24d-672f-44b3-8488-57acbdb89b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bce4aeb-ba88-4a0f-9030-6aed95b3aef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07fbfe4-5775-4b79-b6ef-159294f5abf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6445b6a4-15ea-4ca4-93f5-09726c9da331",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fd3855-c7b6-4ad7-9ac3-07f267d8c3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05f1e18-19a0-49bc-9bc3-9be3a6975f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ea45f5-b79c-456e-9835-7b78522c833c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eadcd465-a92a-42ff-aa06-ed192af4ca35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ab2af0-2543-49ec-b82d-72a585e3ce44",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86020d3a-4a3b-49c1-b48a-a1b3909383ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fa1098-e1cb-417b-b542-5475710e2544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af34a03-450b-4c98-9818-eb1b6af0bd3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08b9bfe-014f-4700-a9b4-428e3ab1df26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67a294e-f70b-4845-a8f5-6b3f4612812b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6934cbbc-07d3-4698-91c2-56c52f0ebf26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbea85c-c592-4be2-8a07-c196527ac1cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "190c2170-d5e5-46a6-b444-623dbe01fec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1884e89a-acbb-4650-a537-74d8b4095922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97dfbe1-901c-4050-87f9-dc5523f68cfd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd94d685-85d4-4984-989c-5b56d2e8d7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3d5655-9f1a-4aa0-82f3-e89624d5b84a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28592b1c-f5ba-42d8-8276-93f41a9bb0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c72176b-e500-4990-bc12-112f4c9016fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9be42fb-a6e7-441c-881f-893aaf604429",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0561dd3-3fc2-437f-b3b8-1ea59ae839e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded8921d-e164-4a9e-a81f-a464434150e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f12fb75-aa24-46fd-91e2-2fece071af1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40528ca-5c21-460f-b39a-c54775cc3a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b82a152-05a5-4c06-867d-c14be27590da",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb56aefd-ec2b-4994-a711-b738a798da1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04c52cf-5724-4d17-a91a-997867078c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3d0c45-11b9-436d-8d2a-15ed470ccb23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409e7314-1243-461f-bd06-61713d474358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33868826-b14a-4db7-baf6-05f0ac92b85b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7036f8-79a4-4f82-b1e9-43791f1091c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15fdfdce-fd68-4904-b927-53a962c9b8be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a8cbd2-72e4-4f62-ae1e-a3b8264ff86c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e785990-bafb-41d4-846d-cc555562acbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1460fff-1a49-4f9e-b2db-cb6d26880649",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2c1087-c7b0-4029-ba0b-d1d995462f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702b0301-568a-4937-b0b9-b18633893e1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8521ef8-78ce-4bd8-8b1a-07ee9e69cf83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a49e4c-66fa-4790-af61-60dfd806400c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060e3dd6-af71-4265-852d-ee382b198084",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c446214b-974f-41c8-be2f-adef48eba5a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17501203-a7dd-4d3c-9454-b10ecc5bed3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52680340-7a97-40c4-8762-6a5bb917ff8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4179372c-2276-4c62-a2a1-053d81246e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf156a1-49f3-4702-8a7f-079b19bb5cd2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd3bf75-7b97-4847-abc2-947d9103da8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13909385-6b5e-4b4d-9957-c26ecf7884a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889ef2db-f9aa-4fc8-ac18-c46adf531b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a15ef9-b940-4a6d-8229-177fe103c2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5c8fb0-e043-4eeb-8b06-a4065e186207",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13afe4b5-4c60-48bc-8dd2-c9712c3c8739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "561ebb5f-d67d-4922-b93f-293709c5e654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6695e51d-da18-402e-b425-c0e71d765514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa6e880-be69-44c1-b8d1-8b57850fc05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0e5ffd-bf7d-4438-88ab-13e125ad058c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2607bc6-83c3-43c0-9b89-7da6f22fb916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b5a90d-d6fc-4fbf-b1b0-2f13826f9f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d66106-4f37-4776-8547-fe2c300dea7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f6b391-ef56-46ff-9052-410bc02e8524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe6eff9-e744-401b-acae-c1c20668515f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0674d8-6e89-43b4-bcd5-98a35e254a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdbe0ea6-c74f-43ca-b5e8-442fa1c89a82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc71524-0bc2-4d56-8f93-720c31a782b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e470ae46-4523-40d6-9bfe-7e798602e996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71379bd7-e1e4-4cdd-87a5-9140f47bec79",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d69f18-e9da-4c22-bce6-7c05d4248ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfa9504-64d3-4bee-90a5-a50d41e07d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e2e94a-b517-487b-afa6-fe1334cb0853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e2ee7c-76b3-45f7-933f-9b04cf8e7e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c41f75f-688c-46f3-a4be-5151b3e22592",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7ba2fc-8570-4077-9e55-e17a5fe910ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f70b4de0-7f2f-40ac-b65b-8414ef3b3269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe53f62d-2614-4d13-b347-443174d4b598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121a90b7-0087-41c0-a2d3-85bef3301b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d116163-0bfc-46f8-857f-05a2bdd31193",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f525b56b-f957-4f75-96d4-8316d3b878ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "140519c7-dead-4a01-8cdb-221de12ef67b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b6866e-c50c-4bab-ab2d-05dba5247dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1205251-6ace-4194-8de9-17ed0535334f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccfd7bb-bab5-4d00-8ce6-c665746b6b8b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a25c98-56e1-486d-9339-66aec93218b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ede3623-0034-4acd-9283-767d3f5741a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3483d64c-2fdd-4ec2-a456-8cc26bc2d38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f006a479-a4d0-4e0a-b7d5-6efa8108f164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe6853a-6577-498b-add1-6525698b51e4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53bacb4-917f-44d2-a61b-bfd274f26688",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43e8e43e-a07a-4331-8943-d56f644a5e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b333fa6b-da83-4f18-8f11-90eb57513b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f146db1-9c43-4ae1-b86a-62c374fe3d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ba25e3-157b-499d-8d65-a1b474ec43b7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775cfbc9-c353-41d6-8254-1fc2f15b64a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fff75ec4-53e2-4fb9-96a2-96166408361e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8d9a7c-6b8b-4345-b404-ffd4fdb3f57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbfe03e-3fca-40eb-b767-65060c2b63ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482c19ab-4911-4f4d-ae81-8368db6c40b9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437ccb80-6633-49a2-a586-9d7084c11974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b179e77-8b4b-4697-af7b-fa6c1a751e1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5592b8a-3877-4b03-b55d-b3d83de02f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57082531-e87a-471b-9ffa-b315cc00e21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257b08c9-aa4b-4535-ae11-247f0e0783bc",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bd6ed7-530c-430e-b888-6163a98ca495",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "969abd08-c6db-474d-a4a2-38a227d767ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca522fb9-e291-4b27-9e43-6e3895e04e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02be0a62-47c6-457b-a0ac-685b091d8c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc16e402-d43c-43c0-8387-a04e34c8fe82",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8488d98d-ceb3-4e45-a2bc-7c5f58349c97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "661d5002-db7e-4574-bcd1-ed34948aeee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7f8ff5-21da-40e2-874e-764a19b5cdf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05fed381-5364-44ac-aaff-32dd0aeaffb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264e4d7e-d430-407a-aa8e-2fc2a0853896",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2d42ab-5cfa-449f-9be1-56b7bf78f114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2e68870-390e-497b-9283-c93cbfe1944b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4071d1-39ff-4490-b54b-e3e202428c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b06d0d-79e4-428b-8252-e4938684ce41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b7c153-bcdd-4822-81c1-275472f9a2f9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97851456-0f93-4b81-ba41-b0fa74831dff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "610e9f12-7138-4f97-a720-927bb398199d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee689dda-e7c4-4448-b4a5-419012e9064a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19aa6027-9050-4904-9b1c-13d30f5c01b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb986fa-cd05-49d9-87be-733dc0d933f7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4041531-b1bf-4b8b-be09-f054c1bf30f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91d2d90e-5d25-478e-97c4-4bbf94a6effb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f85fe73-9e33-4540-ac06-0e6cd6303105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd8c463-7a37-44b1-8608-9ea35be65675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a5fd6c-6366-4e31-9909-a683b6b14cec",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c033d3-9112-485e-bd3a-1ee6dfb449fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7471ed5a-745d-4db1-b76a-339677f0223b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b33b106-94e0-43d1-99b7-17805d497dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823bada4-2785-40cf-ab34-30ccc2b7693c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35cde92f-42c7-49b9-bf2f-c2300f05136e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711f59e7-e4a9-42c3-a418-d91e3278bc1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a34d7b5-6921-4f2c-a58c-d049fe22338d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4452d1-86f2-41af-ac99-4e3e453af662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb139a8-ee5e-4622-91c2-8a6b253a7178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb6f0b7-a889-4591-a0ed-098ce8fb9243",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fd07ca-917e-42ed-9628-fde43534ef39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "728796ca-6c4f-4777-b810-7c29e2b79f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90875998-bf2c-4699-88bb-3533ae0ea893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8decb277-093e-4911-b325-ac362fc6405d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d536c5d4-cb9c-4cc3-b81a-d0d8dc334115",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd5eba9-0646-4926-b276-cf0ad87a375e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2f767ff-e2b1-4dff-8a5b-0bb96391ec1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c80472-ca66-4e16-8961-f80ab95ad7a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0742613a-7f15-4bcb-af5f-c9fec1a84b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d80954a-0a7f-4ea2-9cee-3a9962385dde",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0449428d-dada-4fa8-818d-b33c93c72b81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79588a2c-71a6-4ff0-b000-3695fb860ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81b8ab6-ccbc-4580-9358-d7f6cea890b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c30c1a-0836-4697-a3ee-7c6250f17c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa550f48-059d-43c7-82c5-b01b3de69e2e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9931a098-5c07-4537-ac82-924bdee7d815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44ed8cd6-730a-4c60-aed3-dd3b3d30d919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "140578d4-7dc7-4b96-9c59-8f712d5181c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e326fa-0f96-4d44-9f2e-93129399ae35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ebc29f-fe54-4359-87bf-793148d69214",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83078199-bf8d-42da-a78c-44bb9b5e14cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a47bbe1f-52ce-44e3-b0ef-3610845aa56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9025d44-250f-4d9e-82a0-a4ac997474a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "850f3699-acd3-4204-947f-11310a363789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e65412-8826-4e06-aa9d-1fccbb605410",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8e52b8-8bfc-4bbd-b84f-c1810a4ad677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f97fd4c-7257-4900-9332-e1186e3e2070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6578df27-257e-4fbb-aea8-4c0ed8f34a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50fcff86-c9e1-4748-a82f-44cdc07b0a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4fafca-0534-4e94-bb2a-93fea759ae44",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddb3dd2-e9a0-43a8-9d6e-a1ab4caa3c98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8e0483d-52ff-4ec7-8f64-8997b922b483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77dda7a2-b367-4151-a4a4-bfeed3936de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2f1e11-40dd-4422-a5e2-b10c417ca3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51684cc7-656b-4eb0-aad1-fb96b381cd76",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3845a037-7259-4f6a-8695-b7503d4c05c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3caf29c0-58fc-4ef0-a269-e0f532321c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ed2dcd-2211-4c84-8a37-a5b84639dfa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e745856-7292-4133-878d-46cb682223d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac52431-a011-479a-8586-644023a95aaa",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77dfd7f-ac83-48e4-bd41-9ff7d174d7d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74a4bf9a-8ca0-472a-93fc-45e2d8cd5f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2e9ae3-fead-4033-8db2-e39bc7d4b4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125fb00b-bdee-4511-b8f4-b0079cd90d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6186bd-02e5-459f-9887-83f3f3b8e92f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5295b5-621d-47a6-b205-df6e154d309e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e574439-854e-46ce-b2fe-25575c58e29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9054bb4-40fa-4410-8e54-9000cc386cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b893bfda-bdfd-47e8-aa37-0524bb79109d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3601094-0a86-4bcc-8ea8-553a2e3a761c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574c7215-8619-4d31-b083-990cc2713644",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c6d1991-ecb4-4fef-8cab-5c326c6cd2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50caf035-e3d4-4c01-8a37-7a64a70a5a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9b23a7-f0c3-40fb-bb40-da9b0f1f7f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f5f8e3-d7f9-4d68-bf11-dc890c7dfe64",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5635fa72-f76b-4169-854d-e2d7d98bb032",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eb7d992-d0ac-440b-8abd-9e57fc5082bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b043ee-f836-4f1b-ace3-7cfba4349f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95125137-ba98-44c7-9508-982e95ea67ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7158c3cc-4c37-44d1-8301-73865d3167b2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c3cbaf-de5b-4a40-8f55-7da8fa713c13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85f77e94-a98e-4e41-b567-fa24d011af27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6777505e-ccd5-4dbd-a76f-acd6ea38b0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17e69f8-77e8-4112-8d65-596d1c042b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58664e4-0b46-4d53-b508-f44a3207b35b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fad28d4-618e-429a-b130-4182f09cf0cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "374143bf-0706-46c3-bc3f-d6976ffda6f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3ba715-54db-4168-bfd9-65ec98a4b17c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277eaf01-4f16-479e-9b99-ad6cf7748400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a53585-e949-4b74-a85c-ac3b36e59898",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ef9f50-5f57-44c3-a9b9-990839b09a88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef7eb161-802b-49a6-bfe1-cf9b8e80c939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c791ecb-b095-4261-9bd6-99788b92697f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e35529-1257-49f9-99de-982a907ff9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7c7d5b-2738-4781-bedd-f2405c016113",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5084460e-0865-4837-a2ad-979a2a8e5080",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b26fa44-55ee-4f07-83f5-5ea844b9e228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73363b8c-bb8f-40fe-9e10-231f34ec8216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08802ada-a8ba-4cce-9c25-492f520d5886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ed856f-9969-41cb-abb7-5dd9a6d833f7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a41abdc-c79d-40ba-81eb-8d144c384eb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fe987dd-3fd8-4d3e-a14b-6bd341b64495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298c140a-f18f-49ba-a9ee-fb8ffb46ab83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9132b91a-b5c1-4482-a8ca-00ec25b455c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8d60b9-a55d-4090-9ea9-1d6e72c9e61f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24aad14-ff96-4afe-8e00-37864eec476e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66baf397-dc8d-4b70-862a-009e81319ed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa67ac5-5c6c-4e77-9714-07ee3aedde37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a9c03b-1984-4430-a4eb-13eee02adc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cdb2c3-bf9c-4c50-be28-60620d7c83ea",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9935cecc-4308-4bfa-920d-5784953747a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7e96343-ae50-4736-8dff-076dd2d5f1b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2499fbd4-d252-45b9-ad87-b6384bdb72a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e56b6b-f4c9-4e89-8a89-3e20176a812f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571e242a-4f2b-4a2d-912f-37cc5eea35d6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b0d396-7fb3-45b9-82e3-8cfa027d3471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97612550-9457-4f4c-8f1f-b2779475ad59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d90f45-b1c6-4ddb-b9c9-c87fb008fdf5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57294809-c29b-4166-a106-69fe1caa7a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48a71b7-2d24-496f-9632-e70b0bd97943",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16144ec5-28fe-4b83-a4a5-fb832f33ead5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ac1dc09-e27a-494b-bda8-0b78d03f5d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6faf246a-93c9-47f2-b9ad-cc73b89bbf73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2474b31c-dff9-4f2d-9592-57a2d914c517"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36b6157e-4cd3-482d-84e4-fb3c341aaec4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f802f80c-1dea-473d-bff4-daa271465bf9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc77e7e0-72fc-41c8-8b0a-138ab7f2a2fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6eae8ae-83aa-4c8c-9aee-2bf1561a88f3"
                    }
                  }
                ]
              },
              {
                "id": "c899fdba-4997-4f22-aeb1-74df9edd0d46",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7ba2512-c5d1-472b-a182-54b19de3f9b7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fbcb92-6862-4e8e-a936-ab0d69642afa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c2615c8e-6539-4e77-816b-bc448f88a93a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58536ed-4984-4548-b53e-202ac103f3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf22c17b-b64e-49d0-88da-a56143c47098"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1bc6a5e-1ce5-49c4-b565-3278e9fd858e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9e88494-dc34-4e31-ae39-19b453a6a221"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0d72531-61b6-4b35-baa1-389f95770d6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e35d187-6454-4d0f-8508-a234d059e3c3"
                    }
                  }
                ]
              },
              {
                "id": "9f03e643-2564-4caa-bbcd-f6cc615b703e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b999456e-7b57-497a-8b9d-5d2a1455643a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d730dedc-32d0-44cc-9d92-c0ec5d37874b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cf77c2c1-dcf2-42d8-8777-5b7e06373286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ee4835-cfe6-48a4-965b-d65049a767e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372f2f04-5d6c-410e-a8f8-9d302b7ae7d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d8c94464-ed37-47f5-bb6b-9049df097889",
            "name": "Positive Testing",
            "item": [
              {
                "id": "af9dbbd7-ec4b-40fd-a201-1e05fdf7c97d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb94f9b5-84d4-4a46-9670-acbe56e8ba27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "042a7fe8-1e5d-4761-b416-5b779ab183ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3633b169-1fce-4f64-b0fd-f98b8eac0af3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45834213-2a64-4b5f-b2ff-66f7ecc5aa51"
                    }
                  }
                ]
              },
              {
                "id": "84546ecc-50b1-4a02-bb41-3e666fa7dcb8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c06da026-2ee3-4630-8ca7-323da219500c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6b894724-6f7a-4e87-930c-ae0e0da856df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "948389ef-f592-4d6c-aa13-aa73aed0e6d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e06d6b4-75a9-4ab3-b6d5-e8ee6d5c3bba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "197ca084-5fa6-453a-b81e-c9b3055fc775",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "87bd0883-3da9-40e0-af86-2462d7fff7b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f62a9a41-675d-44d7-8ecd-6cfcc6381176",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8bb8c139-d903-4485-99a3-f3dbc4ebb309"
            }
          }
        ]
      },
      {
        "id": "2d75efd3-6c3e-4b19-bfa7-3fafdf34c7c0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a50131f5-c61c-4d86-8f0c-648dd88b5977",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af080263-6ce6-47a9-9fc0-185662d3cc33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5540d0a3-ae97-48ba-b46e-ebbd8c940083",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d500283-2d0e-4158-bc79-221791d7e161",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "484bbf48-b5c6-475f-a3b0-9164eb9d2bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87247be2-3826-4c93-9b5f-2c3ec41d732b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "998df095-8625-46d9-9237-ca2531a5b1b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b234aab-6c00-49cc-bf48-ec18c9669693",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbce7022-fc13-4301-88ff-94a48a6c91bb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d20fd89-942d-46d0-8387-1d671dc11b02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19d4ff07-1459-4916-8db1-663a9f9bda49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "187e7712-9178-4198-874b-70e4c5b1fb60",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e8b18752-20bb-44aa-9d24-37a65abbe2bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95c41f4c-51fb-4f78-bf97-fdd017d8fe39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19f02b47-9778-482e-900d-eaaa71d2e26d"
            }
          }
        ]
      },
      {
        "id": "40e71b0e-1657-4ed1-8b57-af9283903689",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8ffda456-68a2-4fab-bf3d-12cf66794547",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13403035-ab78-4a77-b5aa-4c471b0514b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29b60d35-c027-45f7-a639-1b3797ec5088",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61f8b9f-529c-4d44-918c-70e522cf8b00",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f8d049a-06b2-4981-9271-b9d32e570f22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47963795-ab24-4cd4-b570-6edab9bfda1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d3526e9-ebdc-44ba-a35d-093aa7e6ebf8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54efc7f5-eb36-4e8d-85a5-c1245510068b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "651eb327-3276-4843-ba9b-84e9eba51319"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3a280ac-9a80-4e9c-9389-2cab274fb8aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1b11c38-40df-45c4-a6c1-572a821c0380"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7686f2a6-6d4d-42d4-ba9a-debbfe68c3da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b1f7a677-e1bd-4ded-b44e-f076ca217fd7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ce2e7b2-34e6-4e33-9435-8e83f8221231",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1cf72a4b-5529-4dcf-ad13-0a6f74dbbcd3"
            }
          }
        ]
      },
      {
        "id": "1c7e63e6-bedd-41c9-9c51-4ae040fbf39f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c8727dd7-33ce-4861-8a6a-1cbb306079fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61ea5400-5a4e-41c7-8c51-5784dd3c1455",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e8b4633-12d0-417c-8c9b-e7e15d2f1599",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74296a29-9b33-494e-be3f-0d04583e415c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "902fdb4b-c06c-4c68-9916-8784588fb9ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9375e577-15b0-4d43-a6c5-bf75003ebd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f09902f7-e02e-40cc-9432-3be68d3d467b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0de78470-fc66-4125-b07d-d9704185bbb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3106810a-19a7-467e-96da-2d7169dcc833"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b88f4bf-7a0e-4f00-ab95-8586b96f670a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76902b73-afcf-4b3a-95cc-694af78234ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aab376f2-0580-4336-96f9-33fa5eee1e27",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a0032efe-dda4-4d29-83e1-d645ed34ed7f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ea88728-8076-4e38-bd1e-f711f92a5354",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4309c52a-2bba-43f1-950a-c223901af5ac"
            }
          }
        ]
      },
      {
        "id": "1bd9b415-b248-45ba-8c77-0e6f79e79e94",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8de8a56f-500e-4700-a315-5ca2c5d4b415",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "befed32f-a3e4-45cd-bd3c-1c39eb11b8cc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8fa8fd11-d620-4073-b1be-2b432a961e5b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15f8b6b1-9377-47d1-9a94-3a7486caa42c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79f075d6-ddd8-4149-b334-4b7c1bb3aa30",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 106.3055555555556,
      "responseMin": 7,
      "responseMax": 742,
      "responseSd": 79.31586122681671,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1721781650263,
      "completed": 1721781685517
    },
    "executions": [
      {
        "id": "1a266888-f27c-4f43-9814-4794705bf6f0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9f91aa03-47de-46cf-9871-40e138e951a6",
          "httpRequestId": "bf357b04-a2a2-4892-8e3a-b8ed85c7b8cc"
        },
        "item": {
          "id": "1a266888-f27c-4f43-9814-4794705bf6f0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2c6ad802-5fa5-40e4-97ff-1b7472864db3",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "ab8619bd-0219-49e4-a2e5-7cdb6b29e179",
        "cursor": {
          "ref": "0e09e626-65e0-407f-9513-ef1ebe863016",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "79d198d5-2177-4b7a-93c2-ff7a40c05a2c"
        },
        "item": {
          "id": "ab8619bd-0219-49e4-a2e5-7cdb6b29e179",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b5e3bdd2-8425-48bd-bb76-c91de2dbc626",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "79d95959-1f49-4369-b29d-cbacd70e4fec",
        "cursor": {
          "ref": "06d8cf32-8ced-4274-9228-c1d5e0019b9f",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9d33b759-42a9-4dff-b190-258a179cab7c"
        },
        "item": {
          "id": "79d95959-1f49-4369-b29d-cbacd70e4fec",
          "name": "did_json"
        },
        "response": {
          "id": "b0609136-a7a4-4f77-b23d-fb5669c167cf",
          "status": "OK",
          "code": 200,
          "responseTime": 224,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106a5a55-3d49-406e-92a7-c26c9d81dc36",
        "cursor": {
          "ref": "4026ff63-636d-4c1a-9539-3d2c71a64fcd",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8fd5f9b0-c59d-44df-89a5-f44508695f60"
        },
        "item": {
          "id": "106a5a55-3d49-406e-92a7-c26c9d81dc36",
          "name": "did:invalid"
        },
        "response": {
          "id": "0d6cdc3a-c6d0-48a0-a2be-4f40bd960347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106a5a55-3d49-406e-92a7-c26c9d81dc36",
        "cursor": {
          "ref": "4026ff63-636d-4c1a-9539-3d2c71a64fcd",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8fd5f9b0-c59d-44df-89a5-f44508695f60"
        },
        "item": {
          "id": "106a5a55-3d49-406e-92a7-c26c9d81dc36",
          "name": "did:invalid"
        },
        "response": {
          "id": "0d6cdc3a-c6d0-48a0-a2be-4f40bd960347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee05987-9042-4538-825a-215cc6a62888",
        "cursor": {
          "ref": "5d3d6fe8-6cf5-4e5d-b270-9758d6f3b59b",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "55cf6c8f-8c26-4254-8522-0c28480c9daa"
        },
        "item": {
          "id": "1ee05987-9042-4538-825a-215cc6a62888",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1e586c12-7a9c-4804-98e9-c73dd21a8723",
          "status": "Not Found",
          "code": 404,
          "responseTime": 170,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44872c6f-85e9-4b29-8875-34c8eb0d7902",
        "cursor": {
          "ref": "2c9e55f0-2f2a-4b9c-a3f1-6b18f1cfe79e",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "434a9232-63ba-47db-a589-3c993ab9ad44"
        },
        "item": {
          "id": "44872c6f-85e9-4b29-8875-34c8eb0d7902",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "09f13668-72b9-4ac0-a338-2037153a64da",
          "status": "Not Found",
          "code": 404,
          "responseTime": 78,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c64ab74-c01c-45fe-96e7-686e6e1021a0",
        "cursor": {
          "ref": "ba63e4d5-a437-490a-9e67-a4b30a4f88ab",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1e575e01-3e3b-43d0-adec-ad3eb43271dd"
        },
        "item": {
          "id": "0c64ab74-c01c-45fe-96e7-686e6e1021a0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8f9f47d9-5f0a-4775-b619-78454b2e7ff0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11cc91d-e74c-4bb7-80f7-524d90f43a97",
        "cursor": {
          "ref": "83bdd486-67db-4fed-9fe1-d536c1bc2b49",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "58ad35e7-6afd-4ee2-bbe0-9009e3f95bb2"
        },
        "item": {
          "id": "f11cc91d-e74c-4bb7-80f7-524d90f43a97",
          "name": "identifiers"
        },
        "response": {
          "id": "4d5c39b7-4774-48f9-9189-fd7f214ffd7d",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49342d2f-be26-4dfa-93c2-b5793a9c8d90",
        "cursor": {
          "ref": "455d57dc-e4de-468f-a969-abae5eb07231",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b7eea4bb-d5e4-478e-b4e8-fb9448d9eed9"
        },
        "item": {
          "id": "49342d2f-be26-4dfa-93c2-b5793a9c8d90",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d1df06ef-4a1b-49a2-b98f-2d41ba5d9571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "94a74313-91a7-4e8b-a0b7-6e47972c8903",
        "cursor": {
          "ref": "96adebfc-ed95-42ed-969e-b2836c1475b3",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "db5fdee7-89d1-43d3-8cd6-a58e1e8d2579"
        },
        "item": {
          "id": "94a74313-91a7-4e8b-a0b7-6e47972c8903",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d183b77a-e237-44a8-b738-01bc99e44be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "549d7933-fff2-445a-a44c-c0d641fda608",
        "cursor": {
          "ref": "e9897683-b8c9-47e9-88a7-00c1635fe78a",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "50ae7ec3-f70c-4f84-a6c2-53f816483d71"
        },
        "item": {
          "id": "549d7933-fff2-445a-a44c-c0d641fda608",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "29380258-9166-4135-b75e-12db2a633077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "6893ceb2-5169-4ce7-b3a3-26839677510e",
        "cursor": {
          "ref": "41a4da10-c05a-445c-89a3-fbccbeac8641",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9a88dddd-4f00-43a2-8cdf-9c0d4f7406c5"
        },
        "item": {
          "id": "6893ceb2-5169-4ce7-b3a3-26839677510e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4d6d806f-a27f-4391-882a-e1f2296184c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "4fe843be-0631-4461-806c-148018410d5d",
        "cursor": {
          "ref": "af7eee0b-e699-4c0c-b720-f336b81afdde",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4edf6338-8d3f-4e4d-8c25-aec785a109a4"
        },
        "item": {
          "id": "4fe843be-0631-4461-806c-148018410d5d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2e29e001-3e87-412f-835a-d3d4cfbee83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "c00c7aca-669f-4a8b-8bd1-ddbd9112bdf8",
        "cursor": {
          "ref": "ae8c0dfb-0a41-4036-a417-f8f0a703d560",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9ac626ab-dd46-4821-b7b3-e6e5908a94df"
        },
        "item": {
          "id": "c00c7aca-669f-4a8b-8bd1-ddbd9112bdf8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0c27f54b-39fe-4ba8-946d-575c09fce997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "4433be2b-848b-4c8f-8e6e-e229a9a451f8",
        "cursor": {
          "ref": "32724d13-2aa4-48ff-81ad-b1f4cb619c0d",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ed3b537a-6a23-4dc6-8ef8-70f3c3e1981a"
        },
        "item": {
          "id": "4433be2b-848b-4c8f-8e6e-e229a9a451f8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "254c7280-c999-4b53-b66b-3b59aff9d000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "cb48a410-cf27-4b15-8ec9-3262ed98d3d1",
        "cursor": {
          "ref": "9c82a42d-cfcb-4034-868c-0d881eb6232c",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "eb1bbbf9-8e46-4102-957b-a73aee701243"
        },
        "item": {
          "id": "cb48a410-cf27-4b15-8ec9-3262ed98d3d1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9237de8c-a975-48eb-9c69-0d76d19895bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "38773dce-39f8-4954-bf88-1f08f4de9037",
        "cursor": {
          "ref": "cbb5393d-0b1c-47bd-bd42-e2f30cfac40d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "327fdd7a-09ec-402a-81ac-3cff352d6b32"
        },
        "item": {
          "id": "38773dce-39f8-4954-bf88-1f08f4de9037",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "97a670fe-b865-4f3a-b437-e03141cd5459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "73241cc9-41d3-4385-b3be-72156af46584",
        "cursor": {
          "ref": "3fd593ce-686c-4271-aeb4-63725fd26023",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9b79703c-40ad-48da-a34f-2c9399a7264f"
        },
        "item": {
          "id": "73241cc9-41d3-4385-b3be-72156af46584",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6edacfc1-9e78-429d-b0c8-3969112ee29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "7fc833ff-3ca8-441b-a2e0-a6cbc3f7d28c",
        "cursor": {
          "ref": "6a0b184b-aad0-4d97-a131-20a5d970b94d",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c9dc4457-be0f-4ea3-8a3f-d3c633ef0612"
        },
        "item": {
          "id": "7fc833ff-3ca8-441b-a2e0-a6cbc3f7d28c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b8034332-52e0-4b82-b620-88a63123d9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "4a0b0a68-7db9-4465-88ff-d08e746e24aa",
        "cursor": {
          "ref": "1f251b2c-017e-41ab-98fd-3c3167f68945",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "66a5e9c6-4ec8-4969-9d6e-b0f68b2b71f8"
        },
        "item": {
          "id": "4a0b0a68-7db9-4465-88ff-d08e746e24aa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1d46aa16-bad9-486c-9562-d70757010d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "8a197f0c-3019-4ef8-90fa-481708ab061e",
        "cursor": {
          "ref": "6de9e1b2-c177-4a68-b9b6-6fe627550acf",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "20dbc75b-0514-49fc-98ee-33ba33133166"
        },
        "item": {
          "id": "8a197f0c-3019-4ef8-90fa-481708ab061e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "df24bdab-5e06-4c84-9662-d3b62fc243c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f11e175f-c699-4ec8-a15a-c9176425e066",
        "cursor": {
          "ref": "5f1459e2-44c9-4798-9e03-a725f201c04e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "da120a63-eef9-42ee-b7a9-1ca0f0eb4128"
        },
        "item": {
          "id": "f11e175f-c699-4ec8-a15a-c9176425e066",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "78081c79-7cb5-493c-9f7f-2ea8458a763e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "5a1c0740-a978-486c-ba60-4e507d7ce901",
        "cursor": {
          "ref": "3f57285f-72e8-45a9-a60e-05ac13d410e3",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "95cd7519-c741-4873-8f52-f58e2225a380"
        },
        "item": {
          "id": "5a1c0740-a978-486c-ba60-4e507d7ce901",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "636738d8-31c7-49a3-a71b-d409b3510ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8000fa3a-9ff5-4f0a-9738-426d21145cfa",
        "cursor": {
          "ref": "fe0c9c1a-2dfa-409f-9e9c-eb8cb8661556",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "04565991-9a93-4443-8907-90f365a1bda5"
        },
        "item": {
          "id": "8000fa3a-9ff5-4f0a-9738-426d21145cfa",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e301f43d-6d74-4699-b7fc-b8457e9b09fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "973e298a-39f8-41a8-bb9e-57fb952d4571",
        "cursor": {
          "ref": "a54dbafb-2209-45c5-ab90-0de7eb7ad708",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cf6c9377-93ee-4c6d-9c29-f29302946d9b"
        },
        "item": {
          "id": "973e298a-39f8-41a8-bb9e-57fb952d4571",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0dc8ae0d-eb0f-4e76-885c-17e625d4fef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "7e7398b0-e70b-4dd8-b270-d076f73cec34",
        "cursor": {
          "ref": "4b4cb304-7b0b-4bf6-a582-fd39621d54d8",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0e8d3444-c9a0-4a4b-894b-8ceca836011c"
        },
        "item": {
          "id": "7e7398b0-e70b-4dd8-b270-d076f73cec34",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4c2917ee-5c94-425b-b6b7-23cba4fc75a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "90f32e51-8ad2-4f5a-ba8e-a1db59058b95",
        "cursor": {
          "ref": "e57229ab-e918-43c3-ac69-b57f7168ac9a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d7921fdf-064e-40ba-af5f-fcfd6ad89539"
        },
        "item": {
          "id": "90f32e51-8ad2-4f5a-ba8e-a1db59058b95",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "80fcf3a5-c7f7-4e29-8dc1-7eac7002b0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "a08e2555-3f0a-470d-9426-af294d65cff5",
        "cursor": {
          "ref": "8e78c33e-2306-48fe-83af-7c37b2d20c19",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e04676b9-e2cf-487e-95d0-bb36b97defc8"
        },
        "item": {
          "id": "a08e2555-3f0a-470d-9426-af294d65cff5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7b141344-e58f-47ef-b33a-3ff6be0a1003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "b0c740d8-73d5-4b44-99e4-1c9b3667abb0",
        "cursor": {
          "ref": "e50f1f84-d164-46fc-ad2d-062599597912",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2343b4be-c1cc-4116-b342-42e8ff9a3cae"
        },
        "item": {
          "id": "b0c740d8-73d5-4b44-99e4-1c9b3667abb0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e6b7760f-8700-4e30-a5b3-eed55b880113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "8a4919e0-2c72-45a4-8d44-490fcb35cc9c",
        "cursor": {
          "ref": "47faf593-1c65-420e-a00f-90f7f94fd650",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "725b88b8-5419-4403-911f-c7c5aa90bf4c"
        },
        "item": {
          "id": "8a4919e0-2c72-45a4-8d44-490fcb35cc9c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "53bc9a24-6a81-4616-9f30-25d34d59ee91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "cdac9910-bd3d-4a9d-b59a-e6903e596978",
        "cursor": {
          "ref": "774e50ac-6601-461e-9c4e-b067f32b07c9",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "97841891-26aa-4130-87ee-0c94f5a8853c"
        },
        "item": {
          "id": "cdac9910-bd3d-4a9d-b59a-e6903e596978",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d2eca0a1-0883-4f89-8b32-46ebbb2bf451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "89a487b0-3a9b-4333-b560-b484d9f45793",
        "cursor": {
          "ref": "c3768c15-3456-46f2-a33b-47c4f74c5a77",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7c262980-79f8-40e3-ad41-81f124ef4b75"
        },
        "item": {
          "id": "89a487b0-3a9b-4333-b560-b484d9f45793",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ca1c5d80-3d1c-47dc-ad4c-cef5bd626a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "eac4f07d-23fa-41da-992b-fc21ddd24e58",
        "cursor": {
          "ref": "5aed1268-61c9-4ba2-a85e-5bd99212cd2e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "690c9ef5-d0a5-4352-b391-69c7fd868426"
        },
        "item": {
          "id": "eac4f07d-23fa-41da-992b-fc21ddd24e58",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7dff0db1-4107-40f9-a947-af0639fc91f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "478d8cf8-6c03-4cc4-b20f-a9f0014af060",
        "cursor": {
          "ref": "f11c4e8a-c1dc-4c96-8acd-dccdc64fd676",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f5d23b2b-bc82-4d87-b402-48650fd4fad7"
        },
        "item": {
          "id": "478d8cf8-6c03-4cc4-b20f-a9f0014af060",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "395e461d-20ca-4854-8c65-3b8fb3db9afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e4a30e41-6a65-45af-b5bb-bd8a9ede12e8",
        "cursor": {
          "ref": "c3fbb81f-2c9c-4f16-89a2-d2f5d6bbdc8e",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d33e6079-99f9-4ebe-8c25-01ff09eadf05"
        },
        "item": {
          "id": "e4a30e41-6a65-45af-b5bb-bd8a9ede12e8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "88b84021-ac4f-474b-8b48-a6bbf7887b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "e0b5d823-8528-4af4-86d4-5c8b6e4372ce",
        "cursor": {
          "ref": "fccac627-167e-4985-8d90-3d228c2f4f14",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b5f7301e-5bc3-415e-bb8e-ab191f17cbe2"
        },
        "item": {
          "id": "e0b5d823-8528-4af4-86d4-5c8b6e4372ce",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7588e09c-8ffa-4491-90dd-85eb44e57cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "9665a328-10b7-479f-b680-5448f326edb8",
        "cursor": {
          "ref": "5b6c9792-653c-4893-80e3-48acf8814e44",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "54fdfb9f-46ff-42bf-842a-3611ccc43fa4"
        },
        "item": {
          "id": "9665a328-10b7-479f-b680-5448f326edb8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1429e298-00e8-4305-9840-8d96e311142a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "f0886e0a-dba4-45ba-8cf9-68574f954eb7",
        "cursor": {
          "ref": "ed7bc9cb-5b3f-487c-8e39-3c430b7250c6",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8e0b62d2-632b-4fa7-a5a2-380238ebfd63"
        },
        "item": {
          "id": "f0886e0a-dba4-45ba-8cf9-68574f954eb7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "daaecdd7-f697-4900-8953-2da198279bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "cc1979d9-17f6-4da5-a38a-f85a43dfbc39",
        "cursor": {
          "ref": "125bbf88-9705-41cf-a03c-8e1c66e2d25d",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "feabd33d-0da9-4f93-a2bc-71fa6dfc3345"
        },
        "item": {
          "id": "cc1979d9-17f6-4da5-a38a-f85a43dfbc39",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4ff3b91c-8d0f-4e10-b0ae-881c7f558815",
          "status": "Created",
          "code": 201,
          "responseTime": 742,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "97675a1d-e97f-4fd4-b032-ab7b8eeb78e5",
        "cursor": {
          "ref": "4d2712ec-c2e3-4117-be8c-b620f2ba0ea3",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0492a719-ef0f-4647-bdd4-103093b1ccdf"
        },
        "item": {
          "id": "97675a1d-e97f-4fd4-b032-ab7b8eeb78e5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "68e0080c-6d96-40c9-a46a-8d37f7743de2",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b891d283-7bd9-4dc8-adca-22978ef0cbd3",
        "cursor": {
          "ref": "4cc13d1d-f1d9-4964-9a3d-1c7b9669fcf3",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6647c5b0-5ff4-4378-8efd-7be5b7f87d87"
        },
        "item": {
          "id": "b891d283-7bd9-4dc8-adca-22978ef0cbd3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "04484ca0-0158-404e-aad8-1000b6728a4c",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "319e7fec-7502-485a-8ea8-facf316577b1",
        "cursor": {
          "ref": "69a3fc44-9025-4d14-ac89-205b09bc1458",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "07a66c97-0eb8-4da7-901c-f3ac35342f8b"
        },
        "item": {
          "id": "319e7fec-7502-485a-8ea8-facf316577b1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5d98dac8-3afa-4887-9292-f67fab12b69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "c1440ddb-2468-4329-9050-6d04739e7ce4",
        "cursor": {
          "ref": "980ce03e-5672-4d61-b092-133b62eb62f5",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c815c12b-8d93-46c7-b1ea-5457f1716b07"
        },
        "item": {
          "id": "c1440ddb-2468-4329-9050-6d04739e7ce4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e435f464-b87f-4111-b4da-25e679e80df1",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3cc029e9-9806-459c-8870-5f8924620f5c",
        "cursor": {
          "ref": "cc3a1c92-09be-4a6f-b978-4f2e2df44408",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8af0f754-9f10-4d71-b3ae-75e8e004e1fb"
        },
        "item": {
          "id": "3cc029e9-9806-459c-8870-5f8924620f5c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d47ff7e7-609d-4f99-95e3-ecfa706b02a7",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f4ffe168-570b-4299-948a-eb7734228990",
        "cursor": {
          "ref": "19bf50ea-1624-4b2b-acde-a9e8e6472366",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "62d9f04f-c7c9-41bb-8fdf-b0b6ae2ac9c0"
        },
        "item": {
          "id": "f4ffe168-570b-4299-948a-eb7734228990",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7dd37836-38ff-402d-82a4-02b804085fde",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "aca970ab-b3ca-49dd-8d5f-aef8ea501c8e",
        "cursor": {
          "ref": "e4c0af89-fa5b-4837-8b11-c1c56898695e",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7a03bbc1-129a-4c73-82be-0d2a98820835"
        },
        "item": {
          "id": "aca970ab-b3ca-49dd-8d5f-aef8ea501c8e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6dd13c20-c15d-4571-8118-7086244236ae",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "904c7edb-2912-464d-94af-e19f541c079f",
        "cursor": {
          "ref": "46f45ccd-8a5c-4bc0-9429-10148a3d7587",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bbf298b5-0916-47f5-9f4e-34bf51862103"
        },
        "item": {
          "id": "904c7edb-2912-464d-94af-e19f541c079f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6c274ca6-ab53-4f8b-9a62-002bf4319071",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f55bef35-0671-4228-ad7d-69d5373abca0",
        "cursor": {
          "ref": "fcf29552-c46c-4569-9d5e-0a6286a43215",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d7a78a1a-05d8-4924-ae07-fa3b853e52b7"
        },
        "item": {
          "id": "f55bef35-0671-4228-ad7d-69d5373abca0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "90e9e504-e000-4927-ac43-3b80ab520605",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "338a48a7-3695-40fb-a5f0-67033bdf761c",
        "cursor": {
          "ref": "e8cafefb-7fdf-4579-922b-a434d125af45",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6c2c0f81-1894-4de6-a9e4-9ae55b27bd18"
        },
        "item": {
          "id": "338a48a7-3695-40fb-a5f0-67033bdf761c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ccb9aa29-27b9-4a00-9638-feed0990cdce",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0ef11ee7-edb1-49ac-8106-cf8cee559c40",
        "cursor": {
          "ref": "6f754265-a552-4c86-ad71-2522dcddd97e",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fb2f0352-0211-40af-8051-053c0adca137"
        },
        "item": {
          "id": "0ef11ee7-edb1-49ac-8106-cf8cee559c40",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7fe52e9b-a649-4386-b07d-020c741134d2",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3f9d1324-99fa-4ea5-bd4c-427045caad0a",
        "cursor": {
          "ref": "eb6d5c13-2926-44d0-8251-83db814bc863",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "927d52f1-f442-4dd5-a3c0-233ca4249c4c"
        },
        "item": {
          "id": "3f9d1324-99fa-4ea5-bd4c-427045caad0a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "97542e41-2f7e-4ce3-8a5a-6a84a6e14534",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c62ccbef-2b65-4362-988b-cc82597b13c0",
        "cursor": {
          "ref": "ec1fc3d8-c298-4f83-b67a-e51640eb8e06",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "772b67ea-2754-4f30-9017-8f8b71984c49"
        },
        "item": {
          "id": "c62ccbef-2b65-4362-988b-cc82597b13c0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "028e187e-460c-4023-9450-00f56051c27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f9c3485c-d155-496c-a642-dc3ba4ce544a",
        "cursor": {
          "ref": "137aa826-b8ec-4676-9f44-95987fc62979",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2e269b72-2f2f-4e6b-a09a-e6cb0d896577"
        },
        "item": {
          "id": "f9c3485c-d155-496c-a642-dc3ba4ce544a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3bb1ddac-5a13-41ef-b947-6a2db66c21fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "704da9d4-7b04-4f0b-8b05-5c4ce0c983c4",
        "cursor": {
          "ref": "b9668d08-8d9c-4440-bed2-0d01340940ad",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "aea5e36f-d132-4cd1-a4f1-2e30503a53e7"
        },
        "item": {
          "id": "704da9d4-7b04-4f0b-8b05-5c4ce0c983c4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "db975139-5fff-473d-ae21-5b4382494a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "21fe8e39-7aef-4d41-b184-eb46382badba",
        "cursor": {
          "ref": "7f658209-58de-4d80-89a7-7523809bec79",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ab9f963e-e55e-4eda-b343-07119587ed39"
        },
        "item": {
          "id": "21fe8e39-7aef-4d41-b184-eb46382badba",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "63276ad1-fc11-4c99-be3a-7b663b63bc2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "1e33c298-c0f6-40e6-8306-927d743a3d46",
        "cursor": {
          "ref": "798b91da-cf20-4905-b84f-253c02d2f990",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d43de12f-3051-40a5-a3e8-d3cf6478f359"
        },
        "item": {
          "id": "1e33c298-c0f6-40e6-8306-927d743a3d46",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "49ec4fd4-75c9-4060-9805-8b3d850a0112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "4c717588-1181-4d07-af2a-733d5f2e81b4",
        "cursor": {
          "ref": "5df13ef0-e171-4b19-890f-a426487a79bb",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "08233ce3-b814-4f22-98b5-b7b74f42a93d"
        },
        "item": {
          "id": "4c717588-1181-4d07-af2a-733d5f2e81b4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "eb6d16de-3a3a-42ef-ad82-355103073d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "ee342c1f-c339-41ec-86e1-dd71b5375de2",
        "cursor": {
          "ref": "a9d4a299-378e-44a8-b362-7b6d608fd064",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1de7e853-e451-484c-91de-e9d56fb02850"
        },
        "item": {
          "id": "ee342c1f-c339-41ec-86e1-dd71b5375de2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "42adaa6f-13f5-491f-837c-3f158231ae16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "be1eaccd-0c8a-4d82-b08a-516b32a6375e",
        "cursor": {
          "ref": "cac8d864-d792-469b-ad61-5b226330361b",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "97bcd052-131f-4f08-8dec-1a594fe63739"
        },
        "item": {
          "id": "be1eaccd-0c8a-4d82-b08a-516b32a6375e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "10c8fcce-dfe5-4684-b9a5-85f32d9342b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "083e3695-7d2e-40d4-8166-7e8c3292b08e",
        "cursor": {
          "ref": "67537a39-6ee2-43aa-a364-623224741d79",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bb14a5e7-c9af-434c-81df-636dc697c9cf"
        },
        "item": {
          "id": "083e3695-7d2e-40d4-8166-7e8c3292b08e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2ce00a34-d88f-4f30-b40d-d2fea868a791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "5a29a0f6-839e-4f08-9bbf-9c54ad75e6cf",
        "cursor": {
          "ref": "72f3c898-9349-4d25-84e5-4314518d8c67",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c396af49-448d-4bd2-82eb-d21774327865"
        },
        "item": {
          "id": "5a29a0f6-839e-4f08-9bbf-9c54ad75e6cf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7e8fcedd-6345-454c-8ffb-408786eb212d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "929b72ad-f57b-4344-a861-efa024d92053",
        "cursor": {
          "ref": "4f9d1ba9-39cc-4b57-b63a-f6a7043613d2",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "144a6988-4899-41d6-b575-08ca35bac732"
        },
        "item": {
          "id": "929b72ad-f57b-4344-a861-efa024d92053",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1e7ba907-96ee-44da-a95f-300de82f61b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "3ddebf0e-62e6-4e86-a145-1771978d15c9",
        "cursor": {
          "ref": "5d4ac334-087e-4ac4-9ad4-ed22d40855c0",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "14852b05-b3cc-4e24-84ae-443ba8a23d92"
        },
        "item": {
          "id": "3ddebf0e-62e6-4e86-a145-1771978d15c9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e27f62cf-d9c2-469a-97da-c8990cee2f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "7316b584-d4ea-4c91-a8ef-3247961a114d",
        "cursor": {
          "ref": "4412e5e7-244c-4792-a7b7-c606266acb58",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2bc1ee45-f796-4497-bf68-9d9d9469f651"
        },
        "item": {
          "id": "7316b584-d4ea-4c91-a8ef-3247961a114d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ee60b99c-dd3a-40c9-a0d9-e1c5506ce506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "721fce45-48a3-4c1e-8cb6-7bdd7fddff96",
        "cursor": {
          "ref": "735a13a1-4901-4dc1-97df-9948c4f3e16c",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fa41e0e6-4ec6-4aca-a26b-f168deb9584b"
        },
        "item": {
          "id": "721fce45-48a3-4c1e-8cb6-7bdd7fddff96",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "bd1e3548-997c-44e4-a270-d4c903560e78",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7139258c-4c1e-4abe-be7c-97c60d11ba6c",
        "cursor": {
          "ref": "5e770f0a-b9ff-4655-b64b-d31ed4d2fa14",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2365fbcf-fbae-498a-bc35-537fb8137357"
        },
        "item": {
          "id": "7139258c-4c1e-4abe-be7c-97c60d11ba6c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b98acee3-a8ff-4487-943f-65e4c34eda49",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b4394ac2-2537-429d-a54f-44c2d644eaa3",
        "cursor": {
          "ref": "421a1bde-72f3-46a5-b5a3-6a6c9ad41bc0",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a088263e-3ff4-44b2-8b65-6761bec34cf4"
        },
        "item": {
          "id": "b4394ac2-2537-429d-a54f-44c2d644eaa3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "71e042bc-ecd4-41b0-8405-c0e93ae45c09",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5355869b-1d51-44f6-8c0c-413640f0b04f",
        "cursor": {
          "ref": "ae6d4222-5df1-4e43-87b2-ac82debf072f",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "82f5ca0e-c7c8-48ab-a2e2-3944a8aa83af"
        },
        "item": {
          "id": "5355869b-1d51-44f6-8c0c-413640f0b04f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "56915a6d-ecae-4c08-9599-5cc6da97528e",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c248c607-d899-4780-a6f5-408b7f5d9dd4",
        "cursor": {
          "ref": "6a9065b1-f33c-48ec-963c-7ee907fb1461",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cf4f16b8-d827-40e4-a598-cd16c3aecabb"
        },
        "item": {
          "id": "c248c607-d899-4780-a6f5-408b7f5d9dd4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6cf9beae-eb9d-4cb7-bbed-455522f39ccd",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ed4b4aa7-0c89-4663-a250-025e147e0879",
        "cursor": {
          "ref": "670940c7-97c3-48bb-b0c9-1b92cbb88dfd",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "87f69a56-48f0-4422-87a5-b76d85ac0946"
        },
        "item": {
          "id": "ed4b4aa7-0c89-4663-a250-025e147e0879",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c6c07421-517c-4d0e-8463-fcfffc783f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "1e24951a-7103-4237-acd4-6d454de542c4",
        "cursor": {
          "ref": "212d18cc-2bbb-4f00-8482-975f01496fbe",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7780a18d-48e7-4d79-bddc-2830a748207f"
        },
        "item": {
          "id": "1e24951a-7103-4237-acd4-6d454de542c4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c4aa9532-4d1d-4dbe-9918-393b204d0475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "e239a99e-87e2-4765-a5c0-de405b20358f",
        "cursor": {
          "ref": "591fca56-f2fd-4fef-a1f9-c76a1726c0c6",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a09e9693-b710-406f-b42d-511ac3d78516"
        },
        "item": {
          "id": "e239a99e-87e2-4765-a5c0-de405b20358f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "656d1a7b-90a7-4b61-8490-4de85a1427b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "4bbfa614-b16b-4633-97c0-cdd2b68d2b5b",
        "cursor": {
          "ref": "40c19593-e024-4223-883a-8d05ad11121c",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "de3a123e-39f6-4b9d-b223-7102a86e8ac2"
        },
        "item": {
          "id": "4bbfa614-b16b-4633-97c0-cdd2b68d2b5b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "695a2910-a5f1-4477-90a6-79ab44b68cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "d8f8ac01-e2b7-40fa-8bc7-515c51cc466e",
        "cursor": {
          "ref": "232ff337-ca9c-423c-ad64-8034899b5a77",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6bdd1373-7fcd-4202-95ef-8c8088914968"
        },
        "item": {
          "id": "d8f8ac01-e2b7-40fa-8bc7-515c51cc466e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "150ffcbb-e3e7-4662-9cb6-9d4c2edff5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "af2d4ca7-3ba1-4076-a8ee-4a3f9a212ee2",
        "cursor": {
          "ref": "df2360ae-62f7-4729-bcc9-76d76c6d78df",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "80adf884-0459-4414-bc5a-aad4ac5dc85e"
        },
        "item": {
          "id": "af2d4ca7-3ba1-4076-a8ee-4a3f9a212ee2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f0fd9e25-1b14-4359-bb30-1e342f81663a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "3ffeff09-5960-4eb5-9f1e-2f3396f1fbb2",
        "cursor": {
          "ref": "02348e5f-0efa-41b6-adb8-8f2a6da9523b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9f0dd308-26c1-4f0a-99ce-778b9cd3d050"
        },
        "item": {
          "id": "3ffeff09-5960-4eb5-9f1e-2f3396f1fbb2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "21f749c3-2b5e-4c27-97b9-c5db0e0d5e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "9eb216d6-f8bd-4a2b-a917-a27f72493bf3",
        "cursor": {
          "ref": "b521ca00-dc80-40d8-93cd-c74c1ee1060c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "54def7ff-7a98-45f1-8ed5-3f53e47e66e5"
        },
        "item": {
          "id": "9eb216d6-f8bd-4a2b-a917-a27f72493bf3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3f77cbfe-1c61-4203-b6df-ff3fb20df79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "21cc9dfe-0346-4b88-a483-141d3734c695",
        "cursor": {
          "ref": "cc913a92-a73c-4048-9670-3f122b82466c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "38769764-38ca-445b-8055-d2b3a9a6c2c2"
        },
        "item": {
          "id": "21cc9dfe-0346-4b88-a483-141d3734c695",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5cff2091-552b-4b72-b611-a18d7a924a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "9a8bab73-98c1-4472-8b49-66959cd46a78",
        "cursor": {
          "ref": "5b508a64-6ee6-4012-891c-61f553e76adf",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "737a564a-a1ba-4db6-923c-e3350c92a572"
        },
        "item": {
          "id": "9a8bab73-98c1-4472-8b49-66959cd46a78",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2cd358af-c435-4941-b6c8-d597d5e5e545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "8f63a979-7407-4a78-bce6-a3903c3b02ea",
        "cursor": {
          "ref": "15271961-8c4f-4708-89fb-c45377cf41c8",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f6a7a79e-0762-4794-acdd-fa54327b4622"
        },
        "item": {
          "id": "8f63a979-7407-4a78-bce6-a3903c3b02ea",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b0bb63ba-2fe1-4d52-9c06-8119e6b1f967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "a1703b84-e762-4ff6-949c-2a3db25d1351",
        "cursor": {
          "ref": "ede6819e-07ac-4eae-9dc7-9a8d93f676cd",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9ce8d460-c74b-4f84-9549-dbefd82e76f6"
        },
        "item": {
          "id": "a1703b84-e762-4ff6-949c-2a3db25d1351",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c89693c2-b655-4a78-b61c-bfd08279a675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "1f51c8b3-5c54-428f-89f0-28c1b2abbdf7",
        "cursor": {
          "ref": "b5f09439-c0e9-438d-aa18-990c2d3b65b0",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4494347d-b6a5-40c8-a40f-5483a27ca16f"
        },
        "item": {
          "id": "1f51c8b3-5c54-428f-89f0-28c1b2abbdf7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ee8445f8-7b48-4e43-b9fd-6ce35d27fa1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "61f41a81-c7dc-4e94-834f-2c981bb252c0",
        "cursor": {
          "ref": "cad76b62-5560-423e-b795-95a69cdd411d",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f0af691d-d16b-471e-bef9-de0450248bd4"
        },
        "item": {
          "id": "61f41a81-c7dc-4e94-834f-2c981bb252c0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a097f9fe-b454-42cb-b82b-6056b2166d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "7f9302e3-940f-4a87-b738-9060fc44e5bd",
        "cursor": {
          "ref": "7e777ea6-0ec6-441f-9134-5fec44fd9452",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "29429538-3bfa-49a0-af0e-60f39f41e6b5"
        },
        "item": {
          "id": "7f9302e3-940f-4a87-b738-9060fc44e5bd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8906a6cf-dad7-4d00-9436-7fc86af7c273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "58b7dfe1-dfb1-4ea5-9213-cce7a184160e",
        "cursor": {
          "ref": "3bf54c14-8b35-4c0d-a258-35679d3cbf49",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "18ee7cd7-71ba-4a04-81d4-913437b2cf36"
        },
        "item": {
          "id": "58b7dfe1-dfb1-4ea5-9213-cce7a184160e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ae8455b0-6818-429b-9078-66a2a015ddcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "5037b078-24bd-4229-9c11-0e4ee869fdc1",
        "cursor": {
          "ref": "15585c07-0151-43bf-baf9-3960ed076e22",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e8542520-efb5-4ad7-b9d2-8169c70ccc0f"
        },
        "item": {
          "id": "5037b078-24bd-4229-9c11-0e4ee869fdc1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5f2fca9e-14df-45a6-8192-419e9aa62851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "5d123d27-cd67-4e72-bd32-cd4901452e7e",
        "cursor": {
          "ref": "98e9797a-a2a1-4ae5-b505-d1708de58ab9",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0c6aac0f-f2d2-4efa-bd68-000255518946"
        },
        "item": {
          "id": "5d123d27-cd67-4e72-bd32-cd4901452e7e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a1b24ef8-6231-4f65-819a-60617479a150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "2baaabb8-da45-472a-9388-d46c0a745c70",
        "cursor": {
          "ref": "327e4b88-3707-49c6-a644-8c0f7744f8b8",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1f72d9db-88f9-4af2-a1c6-d6649c54788b"
        },
        "item": {
          "id": "2baaabb8-da45-472a-9388-d46c0a745c70",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "183d1498-c0f5-4252-a5c2-a896c5d44863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "b73984c6-e877-4378-b986-bf61195ff451",
        "cursor": {
          "ref": "3016d858-2481-4093-a787-a0fed41e77dc",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "22e5b67e-4f43-42b6-ad10-0b3ac6b5f54e"
        },
        "item": {
          "id": "b73984c6-e877-4378-b986-bf61195ff451",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b2118bd3-5e4c-43fa-878e-2eafb10e4d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "4fe68b93-c1fb-4a2d-b4e7-e06a37f60c2c",
        "cursor": {
          "ref": "25e33920-7218-4494-bb4b-94f5984f68af",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7be27203-5553-41ad-9d3b-cb768242cd79"
        },
        "item": {
          "id": "4fe68b93-c1fb-4a2d-b4e7-e06a37f60c2c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "615cf6db-8f15-4823-86f1-717fb806571e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "93c5a169-f91f-43a9-a0f2-c97d7e85f277",
        "cursor": {
          "ref": "621d5dda-9174-4bff-b9e1-6fa735226a22",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4c8c90fc-0e7e-421e-a4f7-774e5c2a90f8"
        },
        "item": {
          "id": "93c5a169-f91f-43a9-a0f2-c97d7e85f277",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fb0de0d9-b008-4259-aa90-95a959f349b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "a8d2a8ff-83af-4787-91e6-480b4d38df34",
        "cursor": {
          "ref": "acc1b4be-fbe2-4a5b-8ada-d5a972b27cea",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "51b6c74d-4777-46ed-bc79-6d9b95bf3dfe"
        },
        "item": {
          "id": "a8d2a8ff-83af-4787-91e6-480b4d38df34",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6201ed7e-e755-4362-823d-ac2c77b84b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "805d70ae-a6fd-4503-b828-07e435d36067",
        "cursor": {
          "ref": "469cbf23-840b-40a0-9879-f0a2b2f5c0a0",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8f1eda1c-0994-4c51-9175-81cf433797d8"
        },
        "item": {
          "id": "805d70ae-a6fd-4503-b828-07e435d36067",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "db9e3f0f-2d91-4ef9-9a3b-0dc607cbb97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "9ae505c0-34ee-4d18-8a2a-5792b4dd4b36",
        "cursor": {
          "ref": "a8ecbf3e-bd16-4ab3-8fcc-932fd13b8b69",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ee61cc2a-f104-42f0-a33d-bd6b7e91faf7"
        },
        "item": {
          "id": "9ae505c0-34ee-4d18-8a2a-5792b4dd4b36",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7a9174d5-ee47-41b2-8ff8-b998c225d909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "2c1d03ad-239c-4250-87e1-302dd0e4c9b6",
        "cursor": {
          "ref": "a146daca-f446-412c-9059-8baf3ed89e0a",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "bd53c1e8-9be6-4c0e-b2a9-4cf34cbdc33c"
        },
        "item": {
          "id": "2c1d03ad-239c-4250-87e1-302dd0e4c9b6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b8f168c0-7dcb-4fca-9c6b-825816264692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "6ea8df11-e017-4de3-909f-974946cdd558",
        "cursor": {
          "ref": "c4b7022e-3d9c-414b-bf7b-f69d75f3bac7",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8ba35f93-4833-424c-bd2a-3ad9d7ed7135"
        },
        "item": {
          "id": "6ea8df11-e017-4de3-909f-974946cdd558",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c8dac43b-1f57-4597-94be-e7f63f8d9039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "bdcf7e86-b94c-47fc-a7f5-d37f96009037",
        "cursor": {
          "ref": "b5b97874-815a-4abd-9cd4-ed25b34ba214",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a91c812b-e03f-4f77-ada0-8e4240833047"
        },
        "item": {
          "id": "bdcf7e86-b94c-47fc-a7f5-d37f96009037",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "46040434-4a7b-4c3b-9c90-f811afb95ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "d75f1642-7e34-47b1-945d-9d7cc7644b32",
        "cursor": {
          "ref": "e65ee9bd-54d9-4e7a-b793-78781e8e63eb",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b079fa14-364c-4c12-a8ac-8601e5ef62ee"
        },
        "item": {
          "id": "d75f1642-7e34-47b1-945d-9d7cc7644b32",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "98e95c9a-482a-4771-baec-9168fce3dc14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "5103d0b3-94e5-442f-8ace-61b130155187",
        "cursor": {
          "ref": "b186de79-4b13-4a44-9d3a-7d773bc3d07a",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "75a6a087-3acd-4c9b-90f0-3531028577cd"
        },
        "item": {
          "id": "5103d0b3-94e5-442f-8ace-61b130155187",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8a80c00a-469c-461c-9b7f-635202721787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "b29d6fb4-12be-4d09-82b0-12bf998b7ae2",
        "cursor": {
          "ref": "d4bec3dd-f689-4b8f-bda6-d6762b780697",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "aec4a115-ffd7-4eb3-84b7-be1427f84dd5"
        },
        "item": {
          "id": "b29d6fb4-12be-4d09-82b0-12bf998b7ae2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "258304bc-7944-4e8d-bcb4-9d538d81797a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "fbe14614-469a-4aab-9141-77cd585e944a",
        "cursor": {
          "ref": "3181e3a6-aacc-43a5-8775-769daad29ff4",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "918a5d7b-06c8-4345-944f-69f6a62ceffb"
        },
        "item": {
          "id": "fbe14614-469a-4aab-9141-77cd585e944a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "325b3217-5266-4da4-aeb9-e69a03cb5e9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d565a02-3726-4248-bd29-0f63b32ddc99",
        "cursor": {
          "ref": "635bbb18-d463-4ccb-aa09-a303b091027e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d95c802a-c44f-49cf-ae5a-78400d6341c1"
        },
        "item": {
          "id": "9d565a02-3726-4248-bd29-0f63b32ddc99",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f0ac952e-34c2-4802-8266-090f7ce47c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b1493b6f-5c36-4e42-b41c-e65201ba6188",
        "cursor": {
          "ref": "69523250-5006-45f4-ac02-f30967e2cb91",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "467f9088-b1be-4063-901c-794e7b29d6a5"
        },
        "item": {
          "id": "b1493b6f-5c36-4e42-b41c-e65201ba6188",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4ce01cfd-5eb3-42f5-8254-e4f5ad0b066b",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3bc7b7-74df-48c8-a2ff-9a2be705020c",
        "cursor": {
          "ref": "91b47f58-dafb-4e7c-986b-b0e06c124de2",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7d538fb0-f34b-47ec-9976-c193ee248a5f"
        },
        "item": {
          "id": "bf3bc7b7-74df-48c8-a2ff-9a2be705020c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0532852b-8dde-4857-89a9-69c2a5b57787",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cce211a-49e7-45e6-bc8e-4119d67aba2b",
        "cursor": {
          "ref": "ecd9757f-03a0-47e9-bcf7-b472c52f2c4a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3506c9fd-028d-4cbd-ae8f-a7ec80eacdd0"
        },
        "item": {
          "id": "6cce211a-49e7-45e6-bc8e-4119d67aba2b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0192d450-c232-469e-a79a-9245dfb2f442",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adb982a-1b4f-4600-afc7-01a3824b86a4",
        "cursor": {
          "ref": "c47086a9-f73f-4a40-969a-bcf7152d58a5",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9000a3b9-d88e-4853-abc2-a38c2f83751f"
        },
        "item": {
          "id": "9adb982a-1b4f-4600-afc7-01a3824b86a4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "83e5bf63-7b1e-44c0-bb3c-06ae629fee12",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba0c7c9-b74e-477a-b5c7-f9d9c02d464a",
        "cursor": {
          "ref": "df1d0063-e679-4213-9d27-da31ba33eccd",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8e26b742-6041-47ea-9ef1-abc02cf136b9"
        },
        "item": {
          "id": "0ba0c7c9-b74e-477a-b5c7-f9d9c02d464a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d13eca69-e5f3-40f5-a1db-4a7adf1b63ff",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-07-24T00:41:08.474Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-07-24T00:41:08.474Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b001f028-bc00-4161-b56e-ed23503dc600",
        "cursor": {
          "ref": "c9842ee7-b121-44e5-bd35-bec4328ee48b",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2db41660-21e4-474f-82a9-78335b0bc131"
        },
        "item": {
          "id": "b001f028-bc00-4161-b56e-ed23503dc600",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a6a84ab7-7a76-4b4e-ab8f-c84ed5c6dca2",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43498ad-5564-4da3-ac10-c9f159bb60a4",
        "cursor": {
          "ref": "99d72cd7-3d24-497b-a2c4-093b8976b909",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b2f9e2fe-d2e7-4102-9055-e13a58f778e7"
        },
        "item": {
          "id": "a43498ad-5564-4da3-ac10-c9f159bb60a4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9ade7a7e-ce99-4c50-b0c2-3d465134b039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "0266ac73-3513-4f5d-a4d3-2d88a815d8bc",
        "cursor": {
          "ref": "b431eb70-2913-4fc8-89ed-59e014385b4f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fa324d37-0563-4697-8765-2f11c9cb743d"
        },
        "item": {
          "id": "0266ac73-3513-4f5d-a4d3-2d88a815d8bc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c50e95d6-f939-4abd-b0bf-de896fefb3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "dfb3bea1-d1ae-456d-b133-dffbed62eaf0",
        "cursor": {
          "ref": "810003db-b9f0-477e-8fde-b6449788c7f7",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1bc5831d-20e8-4e34-aaca-83871ba987a1"
        },
        "item": {
          "id": "dfb3bea1-d1ae-456d-b133-dffbed62eaf0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "943fcfec-b073-4d8f-b990-e70f5c2aa316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "bf524aca-6af7-4f68-92c2-b1c90869ee7e",
        "cursor": {
          "ref": "3697bf14-1100-4311-9a52-3596f25caad8",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8097787a-dbc0-49ca-be55-a59dc0d13bdf"
        },
        "item": {
          "id": "bf524aca-6af7-4f68-92c2-b1c90869ee7e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "61938c69-8aa4-4bd9-abf9-1509155e9e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "7ee7ba30-80ea-4ac9-9a7b-0661127a6b22",
        "cursor": {
          "ref": "7e541a6b-2aad-4990-ab8f-39fd86645105",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "11df2446-8f25-429a-94ee-38fb9f9d97b0"
        },
        "item": {
          "id": "7ee7ba30-80ea-4ac9-9a7b-0661127a6b22",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "380737c6-0ffc-44f2-82a7-276ee51cb31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "cb74c982-7636-484e-a8de-4628ddc146ac",
        "cursor": {
          "ref": "46ae9106-1772-4b6d-b978-f885577df916",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "87323b58-f62e-4281-bc2d-f47dfa82c78e"
        },
        "item": {
          "id": "cb74c982-7636-484e-a8de-4628ddc146ac",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4c8471f9-2da3-413e-81af-9ce22577965f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "03dc71dc-104e-4a6d-a65a-128bc48f94ab",
        "cursor": {
          "ref": "1d5c7a37-cf5f-473c-8f9e-4e9b94c4cd39",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4c76a71a-295a-4ed5-9f4a-5004a65f78c0"
        },
        "item": {
          "id": "03dc71dc-104e-4a6d-a65a-128bc48f94ab",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6ded9fcd-25be-4abc-93ee-dc0edd6d9d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "0cfd09e6-c290-4306-a023-8f044a5a9092",
        "cursor": {
          "ref": "2aae0ae0-9a5f-4d4f-a277-029229ed8a31",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "79b90689-de8c-4bfb-8526-7ae923335797"
        },
        "item": {
          "id": "0cfd09e6-c290-4306-a023-8f044a5a9092",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2d3cdf90-3802-4826-b683-e85b39766821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "5ce9d219-882b-4de9-a817-53bd826deaa4",
        "cursor": {
          "ref": "dbef0d8a-91e0-43b2-ba96-837d27480fb7",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f5993ee7-f804-48ea-a450-40940bb22026"
        },
        "item": {
          "id": "5ce9d219-882b-4de9-a817-53bd826deaa4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dd7049f8-dfb6-432b-a1e8-54b749307b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "dcb6622a-548a-4c73-af97-3c8374dd5561",
        "cursor": {
          "ref": "aa156c16-90f3-43cc-a62c-658f5a21efa7",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "afa89e9a-a07e-488f-9a3c-7ee2e8e5c37c"
        },
        "item": {
          "id": "dcb6622a-548a-4c73-af97-3c8374dd5561",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aad2d4d5-a6fa-424a-a083-1aa1e7232923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "d1aba4c0-ee87-4416-81af-8076b071b5a0",
        "cursor": {
          "ref": "25e4be97-a40e-463f-81b2-d0f880d4fe80",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1082f4cb-6a90-436a-a2a0-855056ee526b"
        },
        "item": {
          "id": "d1aba4c0-ee87-4416-81af-8076b071b5a0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "86204c17-3cc8-4b65-95a2-59f469f011f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "1464ba94-14bc-4b23-8955-494bdac3eafc",
        "cursor": {
          "ref": "35135b9f-0c8c-46f4-8a31-8854b04d37f6",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a548e666-4bfc-4042-8359-d672a0357d11"
        },
        "item": {
          "id": "1464ba94-14bc-4b23-8955-494bdac3eafc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3008f669-05a5-4817-a9d2-679c7d019628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "dd0fd7d9-71f3-40af-b455-5fbe8fd424ac",
        "cursor": {
          "ref": "80239508-ea4a-4658-92e9-536f1cdbf68e",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9dc251ff-1586-4686-9a9e-307b4239eb6c"
        },
        "item": {
          "id": "dd0fd7d9-71f3-40af-b455-5fbe8fd424ac",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3d166dcb-de05-4ad3-8fbd-7223822f0864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "16911718-d34c-48bf-a235-40c47a570fef",
        "cursor": {
          "ref": "fa692ae2-cb82-4f7e-8886-15cde9d9c008",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3a2b2e47-18c2-449a-9509-334f488525a2"
        },
        "item": {
          "id": "16911718-d34c-48bf-a235-40c47a570fef",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "21341533-d857-435c-b983-74ec8a9b5e31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 110,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "df7654dc-ef0e-4998-8fb2-c487582d8102",
        "cursor": {
          "ref": "78c25407-055d-4320-9ca0-54330580ec60",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "41dfd0e6-25f3-4617-94e6-b30ca985b000"
        },
        "item": {
          "id": "df7654dc-ef0e-4998-8fb2-c487582d8102",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "25c1fb99-06cf-4982-88bc-45547587ab95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "bfa6e776-e669-466b-8e75-cef8c06854fe",
        "cursor": {
          "ref": "aa7689f3-3c4a-47dd-bf6a-311491bc7de4",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f0996d3f-eee8-474e-bd7e-b2ff5c07cc7f"
        },
        "item": {
          "id": "bfa6e776-e669-466b-8e75-cef8c06854fe",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3f263342-a7c9-4f98-963b-520744955d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "adb01562-5b56-4e28-aa87-f444218bbc25",
        "cursor": {
          "ref": "1479f5b0-7bf2-4855-a9f1-86c4a2c5dd99",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "769c794c-8006-48fd-b5a7-5070451b5332"
        },
        "item": {
          "id": "adb01562-5b56-4e28-aa87-f444218bbc25",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "49ae1b2d-502a-46bc-8f70-01a981313d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "11899942-3560-46fd-acf8-b23b583c929b",
        "cursor": {
          "ref": "f1794256-f9b0-4696-bec9-7212456b7f6a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "855437be-cadd-4aa8-9925-fd904238fbe5"
        },
        "item": {
          "id": "11899942-3560-46fd-acf8-b23b583c929b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b1f0ca9c-cb98-4f36-b628-3c00311217e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "710ea1b4-4ece-4d6d-b2c3-704c24e9d61c",
        "cursor": {
          "ref": "b4fb78d0-3d10-484a-a73d-48a90c42775e",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9354c4f3-7afb-4d21-ad22-57ae1c85db3c"
        },
        "item": {
          "id": "710ea1b4-4ece-4d6d-b2c3-704c24e9d61c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "03305c6f-5e6f-4706-ad06-748b6e6f51f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "18cf6e3c-cc2b-44e3-974a-8c76901544fd",
        "cursor": {
          "ref": "cec00102-a577-4ad7-b5f0-df9a42051166",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "42462dbe-16d7-4a33-a0dc-548837b8c5ac"
        },
        "item": {
          "id": "18cf6e3c-cc2b-44e3-974a-8c76901544fd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e7c12df9-67e8-4ccd-85d7-0921ac497447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "bfa9f3e4-0656-4ebb-8318-10908769d4f7",
        "cursor": {
          "ref": "879943aa-0505-4062-bc82-a4473453e726",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cf66c6fe-78f8-4a56-83df-c716968ce545"
        },
        "item": {
          "id": "bfa9f3e4-0656-4ebb-8318-10908769d4f7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "315d755c-65b1-4dc5-a94b-e7ea780f8baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "42f96433-1595-43ab-adb8-259440750ab9",
        "cursor": {
          "ref": "dc59a0eb-ff4d-4ca9-957f-9dcb31b24722",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3f386cc5-6615-459a-87f8-9b1ccfbdad37"
        },
        "item": {
          "id": "42f96433-1595-43ab-adb8-259440750ab9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cdee8f42-87b1-47f5-baaa-698fe4c638d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c77baa6d-bf57-426c-9c0d-3fad87b5fedd",
        "cursor": {
          "ref": "a998ddb4-052e-49f1-abc1-0e348b96a7f8",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0802643d-0566-4dbf-89e0-3a7d5a7618e2"
        },
        "item": {
          "id": "c77baa6d-bf57-426c-9c0d-3fad87b5fedd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "71921337-f0c9-43d6-9dd7-199556c56f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "dc86a96c-e778-465d-adfb-d78a7c1032f6",
        "cursor": {
          "ref": "4ef8b583-6cff-4601-9df2-822b6c25d37f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "18b1a8f4-1e24-4fd9-92d6-2c5ca194b11b"
        },
        "item": {
          "id": "dc86a96c-e778-465d-adfb-d78a7c1032f6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "24904de5-70c0-4843-b765-271cd98f8e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8fe468e5-5d9b-4285-8f09-afe6fdc84d85",
        "cursor": {
          "ref": "88ee64f6-5f37-4edc-9e78-ffcd5cd1931e",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fd4ec328-afff-4987-86ee-0f57b9436e10"
        },
        "item": {
          "id": "8fe468e5-5d9b-4285-8f09-afe6fdc84d85",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e97da5d9-11a1-439b-b62b-071d16312842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "413e5063-2a99-4c71-9bd6-675b09783a09",
        "cursor": {
          "ref": "7e2dc571-50ce-46eb-9c1d-4ff8b6f365e5",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a5d410d8-a1e9-4097-9793-d893055439fd"
        },
        "item": {
          "id": "413e5063-2a99-4c71-9bd6-675b09783a09",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9e23a6ec-a8ea-46e0-983d-58ef39b3a163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "cce373d0-ef6d-4ffd-82e3-7e6764c63cb7",
        "cursor": {
          "ref": "9014360e-60bc-41bc-a784-22eb6ecf2c57",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fdfc638e-d2f8-415d-8be9-054dad8ac805"
        },
        "item": {
          "id": "cce373d0-ef6d-4ffd-82e3-7e6764c63cb7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "99a3d5a0-a6f4-4831-b7be-d636b3c1eaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "7fdf69f6-49b1-4093-8713-6f2b7d2fb41e",
        "cursor": {
          "ref": "1d23b6d4-8923-452a-99aa-3bb9640a3040",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7f384053-66c8-4184-a0dd-49669c375259"
        },
        "item": {
          "id": "7fdf69f6-49b1-4093-8713-6f2b7d2fb41e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "28739edc-6863-412a-afeb-edc7cbe3330b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "dbe0d37e-82c2-418d-87c6-839dbdec0070",
        "cursor": {
          "ref": "074548fd-a87c-491c-814f-0659a0b0d40d",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7b4d9f3c-e1d4-43e8-bb13-3b7d397702b6"
        },
        "item": {
          "id": "dbe0d37e-82c2-418d-87c6-839dbdec0070",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e39bab85-c045-4f44-b7c2-9c67a01fbdd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "22e871c1-7a3c-4850-bbaf-4adea5055d4e",
        "cursor": {
          "ref": "f71a5583-96d1-4bf4-9f18-edce2fed3873",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "68dc930b-d139-4008-a513-22706f5fed99"
        },
        "item": {
          "id": "22e871c1-7a3c-4850-bbaf-4adea5055d4e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ce619fcc-6eb8-4cc8-9f41-7ccffc687272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "f632239c-2380-486b-8d62-c1be4b0ac731",
        "cursor": {
          "ref": "1c5726bf-8575-4e45-a0e7-d478c7a5f32b",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "252ca336-06de-4584-b6f6-e857c0389c95"
        },
        "item": {
          "id": "f632239c-2380-486b-8d62-c1be4b0ac731",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ddfa76b4-354f-4d3e-be0d-34ab674c746d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "d3ea9914-4e59-461d-91be-fdf4f728b6e5",
        "cursor": {
          "ref": "08e5f4fa-f481-4f85-aad0-f23b8d6cfbcb",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7e288402-8562-496d-985c-31e9d9ab62d5"
        },
        "item": {
          "id": "d3ea9914-4e59-461d-91be-fdf4f728b6e5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b63e46a2-2c36-481c-a4af-0d64f406b154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "2223d560-f91d-487d-9bf1-23ab6481fe0e",
        "cursor": {
          "ref": "cdda6217-8bdc-434e-9f6d-db90f5b30ec4",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "941bf731-5600-4006-991a-aff45bc28fe8"
        },
        "item": {
          "id": "2223d560-f91d-487d-9bf1-23ab6481fe0e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e471ac0c-442a-459a-8b13-5c1b88ed0e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "af0b6582-7c19-4624-b827-9c8054d61523",
        "cursor": {
          "ref": "1783106a-3d67-4020-8b41-4cc05c33a539",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cbae98e8-0134-46ab-b7ab-51eef501cdc3"
        },
        "item": {
          "id": "af0b6582-7c19-4624-b827-9c8054d61523",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a2a7e999-3481-4335-a7dd-2bafdddef0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "55dab688-8005-40d3-8bc1-d85c0746f201",
        "cursor": {
          "ref": "b2217986-94a4-479a-a063-c491493ec232",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "14cf83f2-b5af-4ef1-9f1c-ccd36e55b42f"
        },
        "item": {
          "id": "55dab688-8005-40d3-8bc1-d85c0746f201",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a52fe15a-d926-42a5-b82b-387853eafa11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6d488732-ccc8-47eb-b35b-c4309476a5bd",
        "cursor": {
          "ref": "4f4c0db0-b673-4b71-a7f1-10bd7758975a",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8034d8a5-c6f2-4cd1-af6a-6f82870c2cd3"
        },
        "item": {
          "id": "6d488732-ccc8-47eb-b35b-c4309476a5bd",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2e6a6cb8-14aa-4699-84e3-e8605ea96b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "275b7891-fde9-4d60-aa01-6ccad27255e6",
        "cursor": {
          "ref": "8d084859-0cdd-46a3-aa58-fd3f08a471a2",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "dafa8541-42d5-4173-b292-053ac953cc99"
        },
        "item": {
          "id": "275b7891-fde9-4d60-aa01-6ccad27255e6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7d03baa5-bca7-4bec-b9f2-35ff6d7975ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "30ed1746-88ee-4f51-82cb-1110ec2d5ca7",
        "cursor": {
          "ref": "b808bd6f-1e5e-4470-a9d2-f5c89a428000",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4967c998-cb6f-487b-aaa7-8527d9b953d3"
        },
        "item": {
          "id": "30ed1746-88ee-4f51-82cb-1110ec2d5ca7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "55686807-dc81-4acf-8ae6-77ae8aa9c92e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d10bac-dd9c-4694-8d0c-4e4d81d0caf8",
        "cursor": {
          "ref": "a7dfe4fd-dc59-46fb-944f-10120dd136ac",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c33ae1cd-c770-456a-9c4c-54f1a25f7b33"
        },
        "item": {
          "id": "53d10bac-dd9c-4694-8d0c-4e4d81d0caf8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0d5e9a50-d087-4164-8e1a-4538c696e759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "0d462181-f023-49f5-bc79-655302f967e5",
        "cursor": {
          "ref": "b42847ad-4876-459e-b419-44fc7d963df7",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8c0bc569-3d39-47b9-b6c3-166ed7714d4d"
        },
        "item": {
          "id": "0d462181-f023-49f5-bc79-655302f967e5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2e38e9a6-d09c-4934-b75a-cd5c52195fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "d230fcde-7c5f-48bd-bb6e-2c35ccf0a706",
        "cursor": {
          "ref": "e0c68a82-40e8-4125-98dc-3fcaeb4faf95",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6326d0ac-9537-4b96-ba80-8a57a0304bec"
        },
        "item": {
          "id": "d230fcde-7c5f-48bd-bb6e-2c35ccf0a706",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9181f365-e084-4f90-a43c-05dd2dd3171c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "549ef651-e65d-42d0-b82b-faa5b78e7993",
        "cursor": {
          "ref": "8df5e95d-499e-4e6e-b61c-56d13c52900d",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e93d6d16-cfdf-4a73-b208-b8d2515c9cc9"
        },
        "item": {
          "id": "549ef651-e65d-42d0-b82b-faa5b78e7993",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "62ddea95-8f8f-47d2-a618-d594aee7a20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "3225a420-49ec-4345-9e5c-07a7e14c381f",
        "cursor": {
          "ref": "93335495-0777-4598-be9d-c8c8195c3b17",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cea54918-b48c-4e41-9509-6d1f7a1fe8fa"
        },
        "item": {
          "id": "3225a420-49ec-4345-9e5c-07a7e14c381f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c86560e6-e5cd-458f-baa4-4161e1726ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "ef12847c-4438-4a3e-8b0d-52e09c3bb479",
        "cursor": {
          "ref": "5d6a407d-c308-4b2a-96f0-5c4527372fa3",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bf832a83-0f15-48fa-b990-868a601a1bab"
        },
        "item": {
          "id": "ef12847c-4438-4a3e-8b0d-52e09c3bb479",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d54a89d7-2099-47c9-a821-acba909eeabf",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "fbd62927-7e01-42d2-9ff6-6bae551091a4",
        "cursor": {
          "ref": "55c8ee79-2868-49ec-855b-36280f1027aa",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "707b2fe1-b0b9-4362-bb6a-9b9a03c8c17b"
        },
        "item": {
          "id": "fbd62927-7e01-42d2-9ff6-6bae551091a4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7ce40e24-6d1b-437c-a8d2-eb2474e0ada4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "ad7a8a73-da41-4ec4-8c0c-40499fdafa05",
        "cursor": {
          "ref": "3d3a32d7-de72-4417-8b2e-cac5ade72ba4",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "639ae53d-e1e9-4ea9-a5cb-fdf5f7c5da01"
        },
        "item": {
          "id": "ad7a8a73-da41-4ec4-8c0c-40499fdafa05",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4ca72747-c664-4c4f-b549-9c83621798e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "6670de60-7125-4e88-9d7f-d9b0175aebc2",
        "cursor": {
          "ref": "6f040077-a916-4213-93fa-7c2716d0b82c",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ff6857ff-2e07-466b-85ba-61b1ccc0f789"
        },
        "item": {
          "id": "6670de60-7125-4e88-9d7f-d9b0175aebc2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "80bb1307-9e04-4552-af59-4372e21ef636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "74df38d7-9331-4d32-aa44-457eb047a78c",
        "cursor": {
          "ref": "97d9c5b7-7f8a-4252-831a-b11691d2b182",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "56f901b9-7e68-4f38-a480-2826f5fb1af4"
        },
        "item": {
          "id": "74df38d7-9331-4d32-aa44-457eb047a78c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9f2f342a-1fce-439e-aa41-e3f414b8ee15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1e3d3532-144f-46bd-9b0e-1388ce83da91",
        "cursor": {
          "ref": "1873993f-5eaa-4577-bf09-aecddc7b36a7",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9247e726-516e-4df3-b777-60d56e637c44"
        },
        "item": {
          "id": "1e3d3532-144f-46bd-9b0e-1388ce83da91",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "af58051e-b63d-4b37-a09e-1222201be542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "99050480-d933-42c9-a22c-c882a01d220c",
        "cursor": {
          "ref": "0d13c692-c956-4a67-9d6e-7d9bbfe5b1f0",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e9f0843a-3565-49c3-8bc2-375159cacde6"
        },
        "item": {
          "id": "99050480-d933-42c9-a22c-c882a01d220c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "eb39c910-caf7-4243-83dd-fa574b181b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "5c52ad96-94c5-45de-9395-3321815e597f",
        "cursor": {
          "ref": "7c3f7c18-515a-4645-b2b3-33b94094baa5",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a7c5055b-dfa2-456f-808f-9e3442c3aceb"
        },
        "item": {
          "id": "5c52ad96-94c5-45de-9395-3321815e597f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "129cdf89-cdf6-4cf9-99e9-b2c12e13b46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "743b3961-5f8d-47dd-aa34-7f6029821ab7",
        "cursor": {
          "ref": "22b4490f-3161-4be0-aacf-51b11bfa0cba",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0cf4a650-7ca5-4fce-914f-1dffec9a736b"
        },
        "item": {
          "id": "743b3961-5f8d-47dd-aa34-7f6029821ab7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b86a0f3e-560f-4ff2-abd0-caa6141f9701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "5ef4738d-2c46-4f2c-b5fe-1c0ad16780b6",
        "cursor": {
          "ref": "10d55fc0-acf7-422a-9166-692b46c083cf",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f014154b-b162-45b4-a312-fe4087b37129"
        },
        "item": {
          "id": "5ef4738d-2c46-4f2c-b5fe-1c0ad16780b6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "32b66112-2c01-4fa2-ae99-a1cd647ab2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "d5813c19-6316-4645-977e-53387a4f549b",
        "cursor": {
          "ref": "d0924012-0f13-4546-933a-ebcf8bbd35fc",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "962c43ec-1c96-4ff7-9749-e0d4e32467c0"
        },
        "item": {
          "id": "d5813c19-6316-4645-977e-53387a4f549b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e98bd323-75bf-42e1-b8a6-ad1b513af27f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "efd05f4f-f495-4136-a2de-72068e55cd98",
        "cursor": {
          "ref": "d5eff313-1c4a-49ea-8167-2c00e44c225e",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3081ae33-5bb5-4d02-b2be-4c026fe58495"
        },
        "item": {
          "id": "efd05f4f-f495-4136-a2de-72068e55cd98",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2a4eb6fc-684c-4fa0-a4f3-30320a64e485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "f197dc75-e5f3-4759-941f-aaccf217976b",
        "cursor": {
          "ref": "59abb3ec-1df4-40c0-8d02-a027a973e98a",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1589b74e-9b26-48e8-879c-0c05460eafcb"
        },
        "item": {
          "id": "f197dc75-e5f3-4759-941f-aaccf217976b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "97f8422a-333a-4569-8901-b48f5cccf749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "af8403de-cc51-489a-8488-b7221a7392c2",
        "cursor": {
          "ref": "942c5cba-af34-437d-8375-4edde55606c7",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fa10b2c2-93b2-4f02-a740-b129ca5b9f9c"
        },
        "item": {
          "id": "af8403de-cc51-489a-8488-b7221a7392c2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f3ca1683-7b1d-48ad-a828-7c3679fda9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "4c754479-995d-4789-a77e-896daf13c47d",
        "cursor": {
          "ref": "d6571d58-0d55-4572-97bc-c27cc5d9ffcd",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ab663f4c-79d2-4bd1-ab9e-eda03ad8c91e"
        },
        "item": {
          "id": "4c754479-995d-4789-a77e-896daf13c47d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "99c0b911-b431-42bf-9dc0-8a6d8fb35e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "6714a4f0-66f0-4bb3-983c-d5d9264d442d",
        "cursor": {
          "ref": "199a8b85-916b-48c7-86b9-66ebb26874fd",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d7e07f4e-8c0f-49bc-8409-e1f0228e5834"
        },
        "item": {
          "id": "6714a4f0-66f0-4bb3-983c-d5d9264d442d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f57dda33-34aa-4bb6-9219-7517754434fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "95ce4dae-ea97-4d40-855f-16204d8c71b6",
        "cursor": {
          "ref": "502a285d-980c-4095-9e12-15d49a8aa44a",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8e55ded0-97f1-41c4-a295-2fae2713ab17"
        },
        "item": {
          "id": "95ce4dae-ea97-4d40-855f-16204d8c71b6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "25fa4cbd-3510-4605-a795-9c71d374d836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "0c4f73ba-1e5c-4be4-a3b1-0f233057fa02",
        "cursor": {
          "ref": "893a9088-391e-4f36-b060-a6e8a3cb943e",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d9f9b54a-11fe-4395-87b8-7c5aaea6865b"
        },
        "item": {
          "id": "0c4f73ba-1e5c-4be4-a3b1-0f233057fa02",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f6ad0d07-2f35-4d21-8248-2cd6a280e6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "c61457cc-fbf1-4c8a-b7bb-64d5bc0c735e",
        "cursor": {
          "ref": "d0dafedc-fb99-4192-b78c-b8e02d2ffcf8",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4b39ce92-a3c9-4974-adcf-94fbc4ed8e25"
        },
        "item": {
          "id": "c61457cc-fbf1-4c8a-b7bb-64d5bc0c735e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7229d4c1-2996-40a2-a9b7-44ba14d66227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "fd4a9f4f-6fb0-4f68-be89-9e6814ed0760",
        "cursor": {
          "ref": "7d64ac08-977a-4582-ab1c-536f143d1d3c",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "546d8961-daf7-4c76-a18a-d1c668b38564"
        },
        "item": {
          "id": "fd4a9f4f-6fb0-4f68-be89-9e6814ed0760",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "81c51a43-ed1a-418c-b963-2b99ee137b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "9a439c3a-4425-4f08-9b49-2b7d215e34de",
        "cursor": {
          "ref": "14275a2d-6d68-4291-8375-1ddb14ccc31f",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "14dd33de-9cad-4cb8-850d-405a74054c9a"
        },
        "item": {
          "id": "9a439c3a-4425-4f08-9b49-2b7d215e34de",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "796cba73-1a04-437a-8a6d-a9e84a2a6749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "9968b11f-1611-4310-82c9-92bb62b14a32",
        "cursor": {
          "ref": "857e863b-2658-4c37-bb3e-87baf3776e36",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "eb408da1-b3e3-4246-93f0-64fd3401f66e"
        },
        "item": {
          "id": "9968b11f-1611-4310-82c9-92bb62b14a32",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1e4c87db-4c1b-4591-bca8-2faa8add921c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "9cd40fc8-2389-49e4-bdf8-382f813d4694",
        "cursor": {
          "ref": "e56297d6-4764-4d7f-89c9-0b84a2a7d2e4",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7a6f3c13-76f9-4f13-aaa9-fd33cb97f52f"
        },
        "item": {
          "id": "9cd40fc8-2389-49e4-bdf8-382f813d4694",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b2f39d69-5084-4418-b3a0-73c0e9d9fac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "25565784-aa08-45b9-91e2-7c6b441fd42a",
        "cursor": {
          "ref": "d4194c0c-8fcf-4560-8f69-fd8359c0b2cd",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0011cdb0-5232-4c78-88dd-b0d5c035897b"
        },
        "item": {
          "id": "25565784-aa08-45b9-91e2-7c6b441fd42a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a2964bd3-e017-40c1-9200-9872ebdcf17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "71c54c6b-0341-457b-8490-034a8fbd1051",
        "cursor": {
          "ref": "8545202c-216a-4324-8580-d3a26f850998",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "41dc7dbd-64ae-4a3f-9a84-2ed92a46b98d"
        },
        "item": {
          "id": "71c54c6b-0341-457b-8490-034a8fbd1051",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "376eeada-b706-4c90-bac8-296273d25f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "e0a7ed15-a60d-4b2f-a388-25a950772010",
        "cursor": {
          "ref": "7a674ac2-1a6b-4c6a-835c-7c48157a0729",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "aa7b2e8b-b635-4eab-a810-f2249559aba7"
        },
        "item": {
          "id": "e0a7ed15-a60d-4b2f-a388-25a950772010",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0fb6e325-ae7c-432f-8a97-e4391aa328db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "5eca81ea-f793-49b9-9f54-3847799ca746",
        "cursor": {
          "ref": "6bf897dd-16be-40cf-81ae-6073213283f1",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0daa372d-f232-4d7f-9c30-3f9298cc8aef"
        },
        "item": {
          "id": "5eca81ea-f793-49b9-9f54-3847799ca746",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3b3e6085-439d-43b3-b4de-91c281a8054c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "ebdca263-ab5f-4a70-b6f2-adf364b9dbfd",
        "cursor": {
          "ref": "00319a8e-1da9-485f-bcaa-8f60bdf8b3f7",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "55aeaf97-137a-4d24-a667-9c7f08fb2691"
        },
        "item": {
          "id": "ebdca263-ab5f-4a70-b6f2-adf364b9dbfd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d3c61e53-5e6d-4537-8b87-491a89f331d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "6db57931-5c03-47f5-8b00-0613049136b9",
        "cursor": {
          "ref": "c5e01fe8-db07-428c-9399-481504c5d022",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ed626c98-6961-402f-9ef1-888dd15cd8fc"
        },
        "item": {
          "id": "6db57931-5c03-47f5-8b00-0613049136b9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e6f798cc-21d9-40e0-9644-fbf04a6acf2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "e24da349-357d-42ec-aa53-2e77116cb7c7",
        "cursor": {
          "ref": "5a9f7e05-3822-4b54-88fd-7ae4ea9ed9e0",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3f2ed6f4-3356-4fbc-8000-5c88481dadab"
        },
        "item": {
          "id": "e24da349-357d-42ec-aa53-2e77116cb7c7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "46de4e56-a758-41da-ada6-3e6e297e83e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "f27a998e-9193-47d8-97cb-a922fdeccb88",
        "cursor": {
          "ref": "b52d177f-30df-4855-90b6-b275102846b4",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "205f3ed8-ba73-4874-829e-4bf991350614"
        },
        "item": {
          "id": "f27a998e-9193-47d8-97cb-a922fdeccb88",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f4623209-d8b9-4920-8ddb-82c2361acd29",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "671f6c78-3520-4c5d-9120-8fe385cacc68",
        "cursor": {
          "ref": "5dcf6d05-75f2-4ec4-a9dd-934a68fd88e2",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0e4fffc8-1a3a-4b5f-8cc2-391acdf4a9aa"
        },
        "item": {
          "id": "671f6c78-3520-4c5d-9120-8fe385cacc68",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3ba4063b-afcc-48c1-b678-fab5889c504f",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "93344e14-4b68-47cd-bd6c-888128e39d36",
        "cursor": {
          "ref": "03577ddf-5f0a-426d-a896-e62598d0126a",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f2dcbc18-219b-496a-b5e4-cc32c895338e"
        },
        "item": {
          "id": "93344e14-4b68-47cd-bd6c-888128e39d36",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a2f981f1-7115-4b02-bb5c-8bfbdc4631c0",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c170a79e-8fab-4312-ab70-19733ae015e8",
        "cursor": {
          "ref": "4f0c70d5-389b-4ced-9dec-8ec644451b7c",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5cdb4aaf-cda7-4ce8-8748-78846d46c7d2"
        },
        "item": {
          "id": "c170a79e-8fab-4312-ab70-19733ae015e8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c4946141-37bc-4293-950d-5ea1fe24f242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a4b386c2-93ea-44f4-b2f0-0e959ffe73c8",
        "cursor": {
          "ref": "9ac64063-41fa-4d7c-b5fb-9cff7585b845",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ff83361e-67b8-41eb-8e88-0c31869339b3"
        },
        "item": {
          "id": "a4b386c2-93ea-44f4-b2f0-0e959ffe73c8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4edb68f3-169b-4fd0-85b5-de0ecb02ab91",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "a77426fb-4681-4616-ac55-1c4ecea336ec",
        "cursor": {
          "ref": "edca1a2c-cb4e-4e02-b887-f785142f84d2",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c735cbdb-0077-4e11-ae36-b72d51fc960c"
        },
        "item": {
          "id": "a77426fb-4681-4616-ac55-1c4ecea336ec",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f3eef86d-8ce9-4ba3-811f-f2f2e0cb23c7",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "9cf18775-5dd2-4967-9d23-a95d5e0547be",
        "cursor": {
          "ref": "dfb6b7ef-31fb-4514-a524-1e35cbd379bb",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ee6c0baa-820c-4b01-b133-61fda08631d0"
        },
        "item": {
          "id": "9cf18775-5dd2-4967-9d23-a95d5e0547be",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "46ca7356-83cb-44d1-a1e8-fb405405ab4a",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "ace1be81-ff5a-4334-92d4-957b56235678",
        "cursor": {
          "ref": "0020f80a-b4a3-4bf1-8cb2-fccf38b9a409",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "24c35159-1813-4175-b5ff-a3847922c49d"
        },
        "item": {
          "id": "ace1be81-ff5a-4334-92d4-957b56235678",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "34ed9394-9731-4237-9d42-39f42dcbef39",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "8b0f055b-b2b3-4a0d-8170-e6463211e24c",
        "cursor": {
          "ref": "c775c212-fe46-40e0-a569-51ca05e8cc89",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "790aee1d-0bc4-4212-a3ce-fb3fbcf0c67c"
        },
        "item": {
          "id": "8b0f055b-b2b3-4a0d-8170-e6463211e24c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "31a3516d-be40-453d-abc3-c38e17633f80",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "4e17d9a6-f114-423f-89f8-375118f7b9ab",
        "cursor": {
          "ref": "f01c5eb9-6509-412d-b4f3-d5bec1c14e74",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6364d64e-7025-495a-8b4b-ef90d409480f"
        },
        "item": {
          "id": "4e17d9a6-f114-423f-89f8-375118f7b9ab",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8d3800d5-0dae-4cce-a6a0-82a317480e35",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "7ce66fd7-b3f9-4bbf-8348-11d750560268",
        "cursor": {
          "ref": "cb4527dd-f374-4976-865f-07377db1fe41",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ec7c7fa7-0cc2-403d-951e-fce34e39c668"
        },
        "item": {
          "id": "7ce66fd7-b3f9-4bbf-8348-11d750560268",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "99c0972a-b2ad-4ab1-9938-e2e22a1ff325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "eaaa0003-45a3-48bc-a379-404ed0e2b55c",
        "cursor": {
          "ref": "754aac55-458b-4014-9c5d-1c384305b2ec",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "eafe88d3-50fa-42d5-b3b7-60866ec3fb0c"
        },
        "item": {
          "id": "eaaa0003-45a3-48bc-a379-404ed0e2b55c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4de868d7-6a09-40ec-9eb2-e58d54d9da0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "eb0edbd3-16d1-4fa5-8513-d86171c01c6c",
        "cursor": {
          "ref": "dda40986-4c99-4214-ac1a-3dc01f0209fe",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "353f956e-f83b-451f-ba87-bb58884dc030"
        },
        "item": {
          "id": "eb0edbd3-16d1-4fa5-8513-d86171c01c6c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ca54eeb2-fc7f-4547-a800-0353c64562a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "4ba1bce9-60f3-427f-ad79-4beccde29470",
        "cursor": {
          "ref": "8c5c41a4-9fa4-46aa-b644-24054536e15e",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4a11aafe-4a62-4096-860a-ac4d1e336a66"
        },
        "item": {
          "id": "4ba1bce9-60f3-427f-ad79-4beccde29470",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "97a03488-04f2-4802-8025-13c7acd3cd66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "6445b6a4-15ea-4ca4-93f5-09726c9da331",
        "cursor": {
          "ref": "354992a7-48c8-4933-b1dd-82fe0f8c2265",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3b57893f-ef36-463d-a3b1-308bf6054ab7"
        },
        "item": {
          "id": "6445b6a4-15ea-4ca4-93f5-09726c9da331",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "881c348e-b3d2-4f3f-bd14-0aaab6231488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "b2ab2af0-2543-49ec-b82d-72a585e3ce44",
        "cursor": {
          "ref": "136c9a1e-4116-4764-a457-a2a5d9884863",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "88f8ec6e-aea3-4f56-9641-cbdc5ecc0422"
        },
        "item": {
          "id": "b2ab2af0-2543-49ec-b82d-72a585e3ce44",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3d7dce10-442c-4d4a-ae1c-d9b7b959d623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "f67a294e-f70b-4845-a8f5-6b3f4612812b",
        "cursor": {
          "ref": "13f573fa-76a6-46d5-967f-f4a3dd4f781b",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1726ccce-3dc1-46ea-93b2-a2d4ac566975"
        },
        "item": {
          "id": "f67a294e-f70b-4845-a8f5-6b3f4612812b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "43b32f16-0f68-4222-8f84-fa9129e8ed8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "f97dfbe1-901c-4050-87f9-dc5523f68cfd",
        "cursor": {
          "ref": "8519846d-77c6-4752-9e01-850e199cd109",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "69209be6-a68b-457e-88d9-333bcd5daa2f"
        },
        "item": {
          "id": "f97dfbe1-901c-4050-87f9-dc5523f68cfd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "736861b4-0e79-46b2-be90-69d8f915008f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "a9be42fb-a6e7-441c-881f-893aaf604429",
        "cursor": {
          "ref": "915e9f7d-15ef-4024-a62a-6b9d2dd3d0bd",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e8b39de5-42f9-436a-b1ef-5bf498704d9c"
        },
        "item": {
          "id": "a9be42fb-a6e7-441c-881f-893aaf604429",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f1441924-0e95-40a7-8c5b-87a1eb4f7e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "3b82a152-05a5-4c06-867d-c14be27590da",
        "cursor": {
          "ref": "cb2af391-cfd8-409e-b57a-d603e481ce1c",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3e50de3c-f9a5-400c-b788-22481de1962a"
        },
        "item": {
          "id": "3b82a152-05a5-4c06-867d-c14be27590da",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "05fb4b97-a3f3-4998-b1d3-d8a4ce5f0319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "33868826-b14a-4db7-baf6-05f0ac92b85b",
        "cursor": {
          "ref": "6c6be2c9-c009-435e-a3f2-404c44cf3275",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "91fbe6a0-0778-4cd9-8900-2aaac2889548"
        },
        "item": {
          "id": "33868826-b14a-4db7-baf6-05f0ac92b85b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d8f51ebe-6d68-4ea2-8981-0658f8c12654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "f1460fff-1a49-4f9e-b2db-cb6d26880649",
        "cursor": {
          "ref": "2075f42f-e08a-49d5-b20a-8d7052025c85",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "967acfa7-d5eb-4296-96de-25c8a57357ff"
        },
        "item": {
          "id": "f1460fff-1a49-4f9e-b2db-cb6d26880649",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d91cc0d3-57bb-4f54-8914-864a25cd78ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "060e3dd6-af71-4265-852d-ee382b198084",
        "cursor": {
          "ref": "9645bb6c-b9b8-4ff4-bf83-56898b50544b",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8a9ae429-9eb7-4851-8671-577b2536be0f"
        },
        "item": {
          "id": "060e3dd6-af71-4265-852d-ee382b198084",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5daf57c1-a386-4508-a13c-396c78f376fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "fbf156a1-49f3-4702-8a7f-079b19bb5cd2",
        "cursor": {
          "ref": "fc6a4982-5c58-4387-ad1a-4978d849503f",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "979001ae-84e8-49fc-a4e9-474f7519f5c2"
        },
        "item": {
          "id": "fbf156a1-49f3-4702-8a7f-079b19bb5cd2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f515fb3d-d187-4275-b21d-3d2c26db74e9",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "2b5c8fb0-e043-4eeb-8b06-a4065e186207",
        "cursor": {
          "ref": "c947a882-bb89-4b0f-8d71-57939277eeae",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "38c0aa43-6739-4e9a-8789-0b1ad73529b7"
        },
        "item": {
          "id": "2b5c8fb0-e043-4eeb-8b06-a4065e186207",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "61268ab9-86e0-41cf-a7c2-06306a5b416f",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "3a0e5ffd-bf7d-4438-88ab-13e125ad058c",
        "cursor": {
          "ref": "9d1fc15a-5247-4d6e-a2c2-983525238ec7",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7753fe2a-41a6-457b-9edc-30b09df3bc41"
        },
        "item": {
          "id": "3a0e5ffd-bf7d-4438-88ab-13e125ad058c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "35cb0261-1cb3-444c-9980-731cf494935e",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "efe6eff9-e744-401b-acae-c1c20668515f",
        "cursor": {
          "ref": "f15ddef4-7aa2-43f3-9eec-8f0056461d80",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1107ae2f-33e5-43c9-b1a5-295997653d3b"
        },
        "item": {
          "id": "efe6eff9-e744-401b-acae-c1c20668515f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "010bf562-eecc-44b9-9287-fb50583da02b",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "71379bd7-e1e4-4cdd-87a5-9140f47bec79",
        "cursor": {
          "ref": "94590914-dd25-4887-9577-2f0b528fdc1b",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "093a11b3-e85f-4b1f-9755-ae23fcf6c817"
        },
        "item": {
          "id": "71379bd7-e1e4-4cdd-87a5-9140f47bec79",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9b42d969-4670-45f9-85fe-cb84d1cec3e3",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "2c41f75f-688c-46f3-a4be-5151b3e22592",
        "cursor": {
          "ref": "f3ff2970-e564-44bf-bdb4-788763d0e5b6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "86a0fa53-38ce-423d-ada3-2ae1ee0a7124"
        },
        "item": {
          "id": "2c41f75f-688c-46f3-a4be-5151b3e22592",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "96ff4630-773a-4d18-ade5-e3b752c648cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "3d116163-0bfc-46f8-857f-05a2bdd31193",
        "cursor": {
          "ref": "6999fee1-1227-4032-ab3f-b5c6e9940170",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "15d09044-ee71-4d3a-802a-570acca9a4c4"
        },
        "item": {
          "id": "3d116163-0bfc-46f8-857f-05a2bdd31193",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "91e63680-4bbd-4f3d-b96e-ba63800c38ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "6ccfd7bb-bab5-4d00-8ce6-c665746b6b8b",
        "cursor": {
          "ref": "ba26e803-c36d-4c62-b2a6-c0bcdbb73643",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "847be322-1aa6-4883-909c-590e73acf388"
        },
        "item": {
          "id": "6ccfd7bb-bab5-4d00-8ce6-c665746b6b8b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b4e2790d-2321-46f0-b031-868c6a28dae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "5fe6853a-6577-498b-add1-6525698b51e4",
        "cursor": {
          "ref": "d4e6ef70-bf56-4deb-883b-6632a8450bb0",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "60cb00a5-4e79-463f-8f0f-9c44d942981e"
        },
        "item": {
          "id": "5fe6853a-6577-498b-add1-6525698b51e4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8d0a45fc-9125-4d3c-a69b-e7328be6115a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "05ba25e3-157b-499d-8d65-a1b474ec43b7",
        "cursor": {
          "ref": "0512479f-904f-4966-bf5d-aca10685ee59",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f5a86f18-90e1-4572-8e3b-058861afe733"
        },
        "item": {
          "id": "05ba25e3-157b-499d-8d65-a1b474ec43b7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d36bece5-628a-4ae8-9e40-a52310989196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "482c19ab-4911-4f4d-ae81-8368db6c40b9",
        "cursor": {
          "ref": "b9a734d0-bee6-4e70-a0a9-e0ad485f2aff",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "540fcf40-4122-4c12-b051-cd9df9bd5b50"
        },
        "item": {
          "id": "482c19ab-4911-4f4d-ae81-8368db6c40b9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6c3d7fac-4412-4cda-b0cf-452239abccdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "257b08c9-aa4b-4535-ae11-247f0e0783bc",
        "cursor": {
          "ref": "6065c620-542a-4280-b3ad-539bf0a21fe4",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4c33afd5-2073-4255-a033-93c363489470"
        },
        "item": {
          "id": "257b08c9-aa4b-4535-ae11-247f0e0783bc",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d7f7d595-a2b3-4f30-a20d-879226f9fa79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "bc16e402-d43c-43c0-8387-a04e34c8fe82",
        "cursor": {
          "ref": "6e10a609-031f-4f90-bcc9-75cdaa7e9380",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8fd5660b-df13-45ae-a175-19c16d55dc28"
        },
        "item": {
          "id": "bc16e402-d43c-43c0-8387-a04e34c8fe82",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7e0e665f-d08b-4acb-847b-57f4e2b281dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "264e4d7e-d430-407a-aa8e-2fc2a0853896",
        "cursor": {
          "ref": "1d7dc9e9-73e3-4501-a3a6-bb242bc2f370",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "981f6e15-c001-44f6-9344-53d87a9d1dbd"
        },
        "item": {
          "id": "264e4d7e-d430-407a-aa8e-2fc2a0853896",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a4f99061-6f6c-479f-adec-456d1126de90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "c9b7c153-bcdd-4822-81c1-275472f9a2f9",
        "cursor": {
          "ref": "862130e5-9f06-4d7b-9c1a-9a576e1610df",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "80fbaad2-c143-4452-817c-8d34c4f94c57"
        },
        "item": {
          "id": "c9b7c153-bcdd-4822-81c1-275472f9a2f9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "666f6b36-98ec-4b3d-89ae-1e56d306a08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "abb986fa-cd05-49d9-87be-733dc0d933f7",
        "cursor": {
          "ref": "85abe8d0-5d76-428c-8674-48347dfa30ec",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "040fef86-902b-40b9-a158-4c8358ac51a9"
        },
        "item": {
          "id": "abb986fa-cd05-49d9-87be-733dc0d933f7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8b2ae8c0-bced-42b7-8f28-d57c07a40747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "48a5fd6c-6366-4e31-9909-a683b6b14cec",
        "cursor": {
          "ref": "a68a8f72-c49b-4dbb-9b40-18192850e12c",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5ec5b76a-2ede-4934-87b6-6b0f7b41e3b7"
        },
        "item": {
          "id": "48a5fd6c-6366-4e31-9909-a683b6b14cec",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0afb02d4-ea54-46b4-9076-5db741b89901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "35cde92f-42c7-49b9-bf2f-c2300f05136e",
        "cursor": {
          "ref": "52c10fd4-5ccb-4dce-8ec9-42e9f5898a39",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4ac51e68-8765-4546-bb06-b956b3073e35"
        },
        "item": {
          "id": "35cde92f-42c7-49b9-bf2f-c2300f05136e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "35c02f59-e5f5-44fc-9780-17bf71bd81ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "deb6f0b7-a889-4591-a0ed-098ce8fb9243",
        "cursor": {
          "ref": "9e142742-6e0d-4f11-9968-79462e2ab97c",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c745f397-4123-4890-8211-2b6856238a4e"
        },
        "item": {
          "id": "deb6f0b7-a889-4591-a0ed-098ce8fb9243",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ed5e2f6e-9716-4e67-bcc8-bbd717e626ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d536c5d4-cb9c-4cc3-b81a-d0d8dc334115",
        "cursor": {
          "ref": "096b4a41-ed4a-48b3-87ca-bb47e8e43c82",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4fccb641-eeec-4a54-a085-8d4c0639f634"
        },
        "item": {
          "id": "d536c5d4-cb9c-4cc3-b81a-d0d8dc334115",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6d824f38-b669-45d9-a74d-c66c6e98f818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "5d80954a-0a7f-4ea2-9cee-3a9962385dde",
        "cursor": {
          "ref": "b858f5e1-2cde-4867-99f8-ed2973353976",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "87e485d1-f498-44a9-aa1e-67f29886ffb8"
        },
        "item": {
          "id": "5d80954a-0a7f-4ea2-9cee-3a9962385dde",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "17e8c4a7-97c9-4689-9342-8007d7f18694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "fa550f48-059d-43c7-82c5-b01b3de69e2e",
        "cursor": {
          "ref": "edc430c4-2dea-48bf-a098-3b37f3795521",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d46f3bd2-0b16-4b0d-a4b0-4d1829911059"
        },
        "item": {
          "id": "fa550f48-059d-43c7-82c5-b01b3de69e2e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9aa5c72f-f986-4912-899d-ea1b1f5e35e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "92ebc29f-fe54-4359-87bf-793148d69214",
        "cursor": {
          "ref": "935d5c25-5bdc-410b-b346-109010dde277",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "51bfc1a8-9b55-453e-8729-215581d24747"
        },
        "item": {
          "id": "92ebc29f-fe54-4359-87bf-793148d69214",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1e62ab38-88d1-4118-b876-503c0bb44757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "72e65412-8826-4e06-aa9d-1fccbb605410",
        "cursor": {
          "ref": "809909a7-89f7-4639-8e90-21f7acf3a3d7",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "41ec68db-4c76-4aa2-8520-1b58a04a89c4"
        },
        "item": {
          "id": "72e65412-8826-4e06-aa9d-1fccbb605410",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3bdcb197-b1ba-4317-beb2-0a7bfe048aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "bf4fafca-0534-4e94-bb2a-93fea759ae44",
        "cursor": {
          "ref": "41ca112f-f07e-4ad6-9773-4c0321662b31",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e22a6d5c-9584-4fa0-8fab-92b518a8d54d"
        },
        "item": {
          "id": "bf4fafca-0534-4e94-bb2a-93fea759ae44",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "070e47b8-f370-436d-b184-92e3e0370037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "51684cc7-656b-4eb0-aad1-fb96b381cd76",
        "cursor": {
          "ref": "8cf709b4-1bf1-4672-b0a1-8c20d5ac7c15",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2c32e3fd-9ace-4cd6-9140-c65d44827219"
        },
        "item": {
          "id": "51684cc7-656b-4eb0-aad1-fb96b381cd76",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ff4b0e92-8586-4452-9e99-540abdb1b64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "aac52431-a011-479a-8586-644023a95aaa",
        "cursor": {
          "ref": "630419bc-b517-41a5-8416-6140849ae686",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4cb490b9-c164-434f-af75-83fd3958f8dd"
        },
        "item": {
          "id": "aac52431-a011-479a-8586-644023a95aaa",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fc51e9dd-57d9-4179-a680-8c579a65825b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "bd6186bd-02e5-459f-9887-83f3f3b8e92f",
        "cursor": {
          "ref": "1d1697fb-1e07-468d-88fb-8f48855011c1",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7863eb98-e854-4f9e-8edc-b4073f77b312"
        },
        "item": {
          "id": "bd6186bd-02e5-459f-9887-83f3f3b8e92f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fa7df566-ace5-4fe1-9d6b-3ad437ba9fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "c3601094-0a86-4bcc-8ea8-553a2e3a761c",
        "cursor": {
          "ref": "ebc35314-af8c-43bc-be82-8f1a71162063",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0c12758f-941b-4253-a15d-7eef692081ee"
        },
        "item": {
          "id": "c3601094-0a86-4bcc-8ea8-553a2e3a761c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c2ebff99-2096-436b-bc57-afd05a9d2ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "74f5f8e3-d7f9-4d68-bf11-dc890c7dfe64",
        "cursor": {
          "ref": "8b8bcb15-0efa-45a0-bd9c-c64ca04d85ea",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1f4d7416-5f21-47ac-b8ed-02255429eff6"
        },
        "item": {
          "id": "74f5f8e3-d7f9-4d68-bf11-dc890c7dfe64",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "53867155-06e9-4246-a9c4-4dc40a639bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "7158c3cc-4c37-44d1-8301-73865d3167b2",
        "cursor": {
          "ref": "6b7080ed-22b9-43d7-a3be-8696a0ef5275",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "989ff4b3-2fd8-4673-b470-4b101e228e05"
        },
        "item": {
          "id": "7158c3cc-4c37-44d1-8301-73865d3167b2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6511b20b-cef7-400f-a59d-535468bf3153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "e58664e4-0b46-4d53-b508-f44a3207b35b",
        "cursor": {
          "ref": "06d355fc-c900-47fb-847a-8a1d2cf91741",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "af27e409-4933-44b4-a6b1-724e5b7bf853"
        },
        "item": {
          "id": "e58664e4-0b46-4d53-b508-f44a3207b35b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a35f043e-46a3-4da2-b860-090c56664bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "55a53585-e949-4b74-a85c-ac3b36e59898",
        "cursor": {
          "ref": "7784ac54-d580-4f60-bca7-81ac140e9884",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e72d779b-7726-40f4-9717-c5c12262ff90"
        },
        "item": {
          "id": "55a53585-e949-4b74-a85c-ac3b36e59898",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c6096b13-d7bb-487b-bfd6-ba0aca556c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "5e7c7d5b-2738-4781-bedd-f2405c016113",
        "cursor": {
          "ref": "ae081eb2-c69c-4f28-ade2-c4e6feeba713",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d60db6d6-bed1-4e20-982f-06d49f87236c"
        },
        "item": {
          "id": "5e7c7d5b-2738-4781-bedd-f2405c016113",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1f795b82-dd5a-4fde-a90b-9756adfce33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c0ed856f-9969-41cb-abb7-5dd9a6d833f7",
        "cursor": {
          "ref": "a4380677-1021-48b5-a307-0928b44da47a",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6d664f90-d07f-4730-b3c2-f412ffa8b2b6"
        },
        "item": {
          "id": "c0ed856f-9969-41cb-abb7-5dd9a6d833f7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "12420c0d-e801-422a-95c0-ecd91e121f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1f8d60b9-a55d-4090-9ea9-1d6e72c9e61f",
        "cursor": {
          "ref": "81dedb93-1105-467f-a7be-f31e0e1cf860",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "18c39a96-4ce6-4ddc-ace7-15815db6911f"
        },
        "item": {
          "id": "1f8d60b9-a55d-4090-9ea9-1d6e72c9e61f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7eef9eb3-275e-4825-a80f-6c170a138bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c4cdb2c3-bf9c-4c50-be28-60620d7c83ea",
        "cursor": {
          "ref": "72204ec2-61d8-4118-bce7-a3ac47ca4cce",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6c681406-d6d0-4b20-b1aa-98e15ef8a2a1"
        },
        "item": {
          "id": "c4cdb2c3-bf9c-4c50-be28-60620d7c83ea",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8a0d8780-9d81-47b3-bc74-78b8a3e0bd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "571e242a-4f2b-4a2d-912f-37cc5eea35d6",
        "cursor": {
          "ref": "3eb38591-6fc9-42e2-9380-f6baa3262e33",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "02f5086c-ca5b-4ca8-94a4-9d1dc9f1b66d"
        },
        "item": {
          "id": "571e242a-4f2b-4a2d-912f-37cc5eea35d6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ee50160c-9aea-45ac-8895-aa4386eaf4fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a48a71b7-2d24-496f-9632-e70b0bd97943",
        "cursor": {
          "ref": "c3906909-3440-488b-ac73-237dec77812d",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "15be3a26-d28a-42fd-b787-127dc8ab3c64"
        },
        "item": {
          "id": "a48a71b7-2d24-496f-9632-e70b0bd97943",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0e913bfa-8943-46f7-9918-57ac975a6d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "e7ba2512-c5d1-472b-a182-54b19de3f9b7",
        "cursor": {
          "ref": "d4ebb249-d4c1-4738-8492-547751295b15",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "157080a2-fa6f-442f-9ee6-ed58fade3fcc"
        },
        "item": {
          "id": "e7ba2512-c5d1-472b-a182-54b19de3f9b7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b995055b-ede1-489c-8c19-728727c3cff5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b999456e-7b57-497a-8b9d-5d2a1455643a",
        "cursor": {
          "ref": "cc920835-7394-4ed5-ac5a-33af066b4ab7",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c83b7d97-c596-40ed-a5ba-22acf15b39e0"
        },
        "item": {
          "id": "b999456e-7b57-497a-8b9d-5d2a1455643a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d7ed4225-b15e-4e88-8cf6-8e7f65645782",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "af9dbbd7-ec4b-40fd-a201-1e05fdf7c97d",
        "cursor": {
          "ref": "73a81917-00c6-4095-878f-d18cd67500d7",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2f403672-b922-4340-aba6-6d5ac6d8d35b"
        },
        "item": {
          "id": "af9dbbd7-ec4b-40fd-a201-1e05fdf7c97d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3069654e-db41-4464-93ef-0e664ee35daf",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "84546ecc-50b1-4a02-bb41-3e666fa7dcb8",
        "cursor": {
          "ref": "5ff81f5c-7243-4fa9-b9f3-4c1839d09845",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "88d08420-e1bf-43be-adc0-02a42529060b"
        },
        "item": {
          "id": "84546ecc-50b1-4a02-bb41-3e666fa7dcb8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "04a539a4-1495-4b60-a1d0-8e3d67ff6faf",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5540d0a3-ae97-48ba-b46e-ebbd8c940083",
        "cursor": {
          "ref": "a6697447-312d-4844-9270-0f0a5194f3b5",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1b61c65d-9a4b-45cd-aa30-83347cce763c"
        },
        "item": {
          "id": "5540d0a3-ae97-48ba-b46e-ebbd8c940083",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c2b12869-55f3-424c-b8ad-3ccaa989e20f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5540d0a3-ae97-48ba-b46e-ebbd8c940083",
        "cursor": {
          "ref": "a6697447-312d-4844-9270-0f0a5194f3b5",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1b61c65d-9a4b-45cd-aa30-83347cce763c"
        },
        "item": {
          "id": "5540d0a3-ae97-48ba-b46e-ebbd8c940083",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c2b12869-55f3-424c-b8ad-3ccaa989e20f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b60d35-c027-45f7-a639-1b3797ec5088",
        "cursor": {
          "ref": "a6513847-6b31-4153-a984-04149fcdc129",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e65e7a97-bbea-4ed6-9e96-e3b48597747b"
        },
        "item": {
          "id": "29b60d35-c027-45f7-a639-1b3797ec5088",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "079aaec4-cfa3-431e-834d-559ad0f0846b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8b4633-12d0-417c-8c9b-e7e15d2f1599",
        "cursor": {
          "ref": "662a3735-2eb2-49f4-b731-f3722906fccf",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "48e0efcb-6cbd-4b36-be4b-a417bbe4e40d"
        },
        "item": {
          "id": "7e8b4633-12d0-417c-8c9b-e7e15d2f1599",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "dba1f73d-4a77-4067-a629-daea695240e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}