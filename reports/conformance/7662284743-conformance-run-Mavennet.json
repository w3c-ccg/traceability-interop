{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4c231d4d-7245-4d7b-b133-2716f8080817",
        "name": "Clear Cache",
        "item": [
          {
            "id": "cc3fa452-9437-4816-8215-3a80000ae43b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12cdd908-00e5-45b2-9e3b-6310c2bbb0a5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4962f4f9-2683-452b-afee-29a881c2f7e2"
                }
              }
            ]
          },
          {
            "id": "418b0cdb-b8cd-45f3-aabf-b1cd4b2652c5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18790e38-511f-446c-923b-87a1504c1af7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "deeacc3d-f62b-4e03-bc06-fa7951ea8bb7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "23d2069e-c7b0-415d-a3b0-e2e58b2812ef",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d7be4053-f4c0-4ad8-82dd-fccb9a86ed84",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f0c3cef5-e55d-4ec8-aa93-d5a98d86f39b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edc1236a-46f6-4327-b605-babf81b7590d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "503a5293-d1be-4687-a3f5-03c35a0b52f1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6d3f606-2d95-4ea0-b5db-0eeb6ce6d2fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b921dd5-e8a1-4a52-967f-7bee3cb34f29"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7f9eeb1-e0a4-48fa-b906-b5f1cfc0c752",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c751095d-1312-4b89-bada-36dcc37090c7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f96258c7-1a7d-4cda-95fa-078e142a82c3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f1d9a474-849b-4e7e-a747-5fafbb44b445"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e87ed9f2-e8c8-456e-86cc-8fcbfbc6fb18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b16b6ac-1911-4da5-a804-044161f6f78a"
            }
          }
        ]
      },
      {
        "id": "d874ef16-50a8-4c7d-90b5-3cba4cb4210b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c769b1d9-8c79-432b-8d25-95449d84889b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f97adef9-4575-4255-97ad-bda4f878e3d8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "336dd2db-a34d-4f65-b375-5a76c4bb9c7b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adbc174-b6e6-4f0e-94e4-782e19231505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f85f42e-f203-4b70-9320-6cf76262cc2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e438f98-8271-4c98-b915-114f87739f18",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "530a5342-2289-47b5-b876-d86b1d8ccf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98f53c82-e6a5-4fed-8021-e2cf67dc3646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134f250c-b9c1-4e7a-91c2-c6cf70ed2a6d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e934b2-9c2b-479f-b833-0939c447b009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c78563ca-c636-443b-b000-87521baf9aed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3a802256-1414-4199-a2d2-611114a614f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c18915ea-e7e3-47e5-865f-585c37db1065",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ba6286-335c-4637-a3d7-44c6e139daa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62190b66-8668-4536-8491-b9fa0d254ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c18786d-2e13-40be-9034-98094cbc726a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f91c781-2c67-40ed-9d0c-d42db8a6a6bb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "95f28663-3bb6-49db-96e2-ef4f884276da",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e76e13be-3b3c-4f7f-902b-a82f286febc4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e169e16-450e-4f04-96ce-df6ad6a4d7aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7d06f9fe-80ab-461f-9489-9c1bef3aa8e5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90ef10bd-5e59-4bed-b13c-0dc164d5cb07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6115002c-bd2c-4d6a-b4d0-028e6e2a7f9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4299fc5-bcdb-4028-ba54-6a5d41d3f5f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62bc0ee4-fd06-41e4-8baf-9e61f5ff638d"
            }
          }
        ]
      },
      {
        "id": "a780dbef-80d7-43fa-b145-a207acfa03e2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3ca7b2fc-22b3-4734-ab0b-dcf0d1f1d869",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0467d2d6-09ef-42e8-867f-dfdd9c96842e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4814cd1b-fa49-41a4-a908-4b1fcf287633",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5b0b63-84a9-4b30-b997-dd1dc105c4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042e5226-af6a-4790-8ba0-09a6e50e2f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52272b59-9f33-44c6-b8fe-fbf209e455f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "053b14b8-8de1-4445-ae7a-1a83a41623dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8458039f-d3c8-49ba-8ffb-8acddf4e065b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d805482d-e22a-4102-b699-2b982c3e11ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a02bd1-4362-4246-a9d1-aee7ec2f3623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb4faa5-3a12-4ea4-a367-9309e701671f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f29f7f9b-c03a-4039-b4bb-f691083440f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f31f4f9-9ad9-4306-83e7-4377315a19e3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca238ef-d822-4177-b5a8-df1c887fc37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a5e5fc-ecf6-4121-baf2-6cc18b029db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16f3557-c3a9-4ecc-9a84-6258ad9062c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b04b7ab8-af41-4dbd-85a0-50e4ee724cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ce7159-d430-4595-84b7-009dbae8a966",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e5c444-06f7-49a6-91e9-b7799673897b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81427a51-c487-477b-a902-dfcc8b72fe48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658ac2b8-d46a-4d59-bcea-309e1ce2fcdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd5bf7c1-4e4b-4cc7-a49f-d9c4276071f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf646713-c6a1-4259-8aa2-0c425f33d7c1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e453ba5-4b90-4910-a467-07ddb3329460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d272d5e-89d2-43b5-bae5-f24f1b29d59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab12cfce-806b-4940-8e07-e7824a5dae24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf7e95eb-1762-4a71-8e40-182e97bb949b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02f409e-3720-4272-8dd1-9911e9248bbf",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8216a716-911e-4555-acd4-130bdb01441f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b57452d6-3931-464a-a6ae-84643e0738ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110158e4-5bf1-4689-87c8-a0b5729fe72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bd5ee9f-bab8-4c5c-8d55-62a6f1ec55f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29fd75d2-30f4-44e3-addd-e3e380d1ac38",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829e46f0-893d-4535-98df-4f9c5664392e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56c11be-1039-4ccd-b69a-df78fb5cbfe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afee5f08-4fee-482d-ba24-6ac3e7e274b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "158c701b-c91c-4073-bec3-1e3449c1a233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c04d5a-8c9d-4d5a-96bf-0097ebb5e353",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6039c76c-097d-4a9c-8df0-beb79d3f4ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953cfe17-85a0-4209-bcb2-74e151ee81da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661f9c45-19dd-4acf-985e-76754e8143d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73a7a750-61af-42ac-bcfb-0ccccceec379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d95870-cb73-401f-8d07-d1075ec0d304",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c900e1-5475-4a71-b513-f6452bf651e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00f8fab-df02-4a85-8496-6daa37ca3848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59484d69-9773-4b26-983a-877a47574d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f0004e3-46a2-43a8-baf0-e5dabb3b9b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0446aefe-56b6-44f2-b38c-8cb12c056c5f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f127d8-0381-4abb-9598-b7092398e57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b091f7e5-d960-4814-b141-d7475faf3424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff46b7de-0ac5-416a-b80c-3c171a1fc752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a644374-701b-4644-b27e-89c24cd8073b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a44c7dd-b1da-4552-8227-f5ee62b46cef",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ad4ae9-6aa2-442a-b7fb-606ef9d7c830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d07521-cdc6-4239-b7f7-3367585c3781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c301ee-08a1-4656-bfd8-236364f35c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "579d7b64-d348-4910-8656-3f8c2cad0ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7494aa-ca1d-4465-8eca-6eb6a71211cf",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774aeb77-790f-4cd0-8b23-8abc47270e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56b3b9b-efbe-474a-84b7-da8f3f99a647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671a9823-b9a6-46c3-93cf-15100a5cd358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "060f5d91-60ea-470e-b88b-2cc7af2790e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993bc3ac-19c9-4574-9ad9-88b3324c59ac",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382dc34e-0d71-49d0-8359-6c30356d8379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2474027a-4b92-4de4-bbdf-fd64037c7528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a54d2e-140b-4684-9462-7cccfd68d724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2dd0e25-5ca8-41bf-b2fb-ddd2b26d5fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbbe4a2-2e66-4250-91da-6134dec37f07",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "449038e2-986a-4067-b4f0-7e8a078f3a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f839df3-e073-4e6c-9c4d-0cfef3012e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022bcae1-4f68-4396-9fe6-9f92e6639f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2659458-0689-4624-b684-dce3f57f7f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3362621-76d5-47ea-b166-c044cc968690",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d5e100-8765-427d-a2a2-6cd0cca1431f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85778a92-0556-4729-9335-198d6c48eaa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e204c5be-1b4f-4777-b4c5-ce6ef686bc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48d1978f-2ebe-4244-989d-caf6444d9522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46da6477-57b3-44de-af8d-896f66fd46db",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f30728a-63a2-4264-b879-7a4b8c1cce2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e69c61-e84f-4cc0-abba-ad3e93e15250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644d7f0c-86a5-497b-bf32-928ca7819ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac4bae4c-a074-40e7-9b4e-f4c49410623a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adb680c-9063-4c67-aa36-339980925f9f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8eafcc5-96cf-4e3b-ac5b-cbef31e974b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69673097-fe32-4b07-80b0-3160cbeb7f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730de176-22e6-42fe-893c-c15318927821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5c5837b-be10-41fe-81c1-1381170629e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6fe201-6710-4c14-8896-d7790768b15a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7604abc-3006-472c-8ada-54e8150fa01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cf82f2-44b6-4396-9854-5c5404728c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b131214-74c5-4373-9ee0-5c22257a23dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7122f05-6d10-4a20-b69d-43fd6c67cef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b68039-534e-492b-a60a-4546ed864178",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df72240-cc88-4bf4-9d14-75275bf5c18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3bfdfe-c7d8-43d0-8a98-8749d19cda84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c584a3ee-63b4-41bf-b882-52e4991c875f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd74bec-9f20-4d08-aaba-b41a5782c5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35e548c-5e7d-42b2-8813-bd9e4d3579b1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec58b07-1117-4aaf-866f-2c744fc8c085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2320f351-508a-4103-985f-1d21f667cb44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99306c6-be0d-410a-8e85-60edb702347e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18d01f17-4a14-4517-8813-195ce04a2b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa36ae2-a264-4512-96a8-773016c92e60",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4191b6e7-98b3-459f-9da0-aafd51c9a9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "201c473c-2208-4d7b-9ecb-6432f22b258e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7503eaa-4424-4177-b1a4-35ae2eb86c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c141c7-356b-47da-8588-62a4dde9e42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ff8026-9320-419d-be53-d332eecf12b4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05783f2e-8227-4291-929c-f33cf6f8cf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94d84b6-54f5-45d1-83e0-d0d303dd4a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230da77f-ea35-4069-ad18-6d068452637b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "be6c79e4-065c-42fd-8d3c-f91144bc82ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f48aa8f-f9c8-416e-9849-e9b7f930041b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8251ff-234a-4c76-9bbb-f89b841e2cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ee90512-ff88-4346-a524-b23d8e052b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ed18ff-539b-4d8a-9db0-761d5821a898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "53090311-0f22-4825-8bb6-9dcb6fc0560f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645e8461-cc71-4597-a4ed-085717bf1728",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8430d60f-32f9-4b19-a9a2-eabdfa436401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7d8692-ae1d-4a6e-a7fb-5d83b6b0a6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82628ec-52a5-49f5-b93e-33216dffd374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "15069c03-c0c6-46c5-9043-1e7d45a8bbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dda460c-22e1-44a8-b61f-0a8cf7442e46",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbb6442-d3e1-4bef-99a8-9f0ce1a33912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0fb0ec-2b4c-4936-8622-d018a08f6d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1bc303d-24ed-4f5c-ab39-1819d7b819b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70cd2e05-0132-4076-bcb3-cca5049b7e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889ed132-106a-499e-93f2-14871b538c69",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c3b4f5-4f5e-446c-9c34-18f7d36f18c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbd2e22-59d5-4972-b5bd-e786ed1ad712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd25dc1f-03c7-463b-9220-0412eed44634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7becf8-14da-436b-b53a-c32d2505e5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7a2679-29ae-458a-b286-869a7ef9a771",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c631cd3c-851c-43c3-a522-97b7f287fb99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b35581-9492-4b4b-90a7-05cc6df9af5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e9f35f-c576-47e1-b80b-0b3608d753ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c0df35-4700-4140-9062-df6e9a3ff2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a265e3-a85d-46c4-82e3-661ec6f4175e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29d9927-1a55-44b2-9e4e-eca0ce1a5f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa7997e-7dbc-42c2-8f6b-4412e15a4e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee36128-71b8-4175-9f1f-b26d6035da31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a686fe-c7f4-40a6-884c-a758895b000a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825d4767-6565-491d-9faf-7fa638abee3b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9590d3a0-d204-4624-9629-4734ec0dbcff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e25759-48a0-46bd-99a1-c4f4a98f14e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3db381c-aaa1-430c-ad77-bd027b3773de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "984e111c-a913-457b-8fff-374a57e3c998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7550787-bd45-4abd-bc3c-a2371458a81b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8d2893-a0d1-4d74-9198-31cbfe8fcb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db893088-4510-425b-8838-b4f2ebe6b344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7cbbf8-61da-40b1-b4e1-b42fdcd11b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c56f1b9c-ec7b-46c5-878e-e507b26d9b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a00ec9b-e0ee-4e55-af60-692c8b0d4827",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ebc65f-4dce-46c6-9cc8-4a063a3310d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e6ed4c3-5104-4d15-9dde-6e111ad0cbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3078d869-7f73-44ab-9883-794c35ab2bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4471782b-93f1-429b-9f09-6bbcf60f27cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87f9d01-00b3-448d-9489-3f357baf6d8a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f243f2a-70a9-4439-84dd-d185b141265a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7076444-f59c-4c6c-91c5-d790eed4f638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d12cbda-52ec-49bb-9405-a06aad770417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "411e03b4-4c1d-4257-ac44-5f212f4401d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c673cec-50bd-421a-adcb-002b04b990ce",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54fbf303-c430-48ad-be42-862a6402c277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c478fddd-61cc-4f3c-934f-92abf0f69222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42f60ef-4451-4c1e-8fc0-c3a7616db46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04da9562-bb69-4c73-8ab7-9d3bb50e769b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3841afb-a496-4c09-888b-4a727eeb3172",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df1d19f-32ee-499a-9d9a-21843b27a938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421b2956-befd-4fc3-9197-f72c098f67f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b177a9-e900-4c70-a482-3e0cb3bd5cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19224dcf-0bc9-488f-bd9b-0c17cd950ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648b20e8-93d7-437a-ac21-549de8669c11",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5ec1ea-ad64-488d-b508-c42ec97bbca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fe1287-63f0-45f5-8b4d-4fb4419dd629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5205cb1-6374-424a-9233-6eec41427624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab208a6-375d-40de-b7c8-4530cdb96136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08556909-2f11-4608-a253-b142e495e640",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17171b2-92b1-4155-a637-fc5447474e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4512e23a-b586-4862-af1f-5a4e3d0bd8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc3823c-978a-45bc-804a-4a6bf889bbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d12dcb4-f15f-448a-bfc3-0b1396f4454a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa92a2f0-583f-41b9-9bca-9252aa397fad",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8376ba04-2a80-43c1-a2d1-14f1ac8067e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e689585c-3225-4d5e-be96-5364386280ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a1e7d2-e311-4dec-8a5d-3a845f8c2cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b789f5f4-7d76-454f-a1f8-a8ae99b86372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0768dc-774b-4898-863b-2343f894cc7b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e98266-8a4f-4c7a-b182-55967be30046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be575c8-0a59-46c5-8c23-11c3eef6ca3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47980aae-4823-4aa2-9df4-35814776b9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d11c9b61-cab5-4051-a380-6aee07b9fa81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febf6d54-83e7-435b-afa2-fc19cb5fd795",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6fea9e-21f5-4d9a-b333-45500ba8ab81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf3f6e6-6b14-404e-b42f-e8603826fd79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437b4cca-6e97-4373-b1da-6e52b19705e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a190a24-41e1-431d-9f6e-034f0f6c268c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33195a5-ccd8-44a7-8e34-24470a57fe64",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc97295-051e-4a9a-94fc-2016cba40f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7efd77a7-8ef4-4537-ab08-048c8b474724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506a7380-1e8f-45c8-bf23-062a6ba23d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6aa067-3f52-4306-8985-fa66425c5bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4aeeef8-89c6-46f0-90d8-124dc71695c8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1125e8-e7c6-4070-b33c-92d6dc38b269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e6f312-15b3-4241-8fa3-638fbaa0a601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efd591a-bf5a-4197-978b-d50634ec1810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "71759680-fac4-4d9e-ac94-f1d1412ca594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834e00de-f8e3-4564-9c26-a7b2db8a983f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f879f7db-638b-4625-9d8c-10e495e33824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ebc49d6-b25e-4720-8969-ef9c109a1322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d67ead-3c7e-4b8c-992a-63420a243385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b9827a0b-f512-4b76-890b-546d386a0eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf2573a-815d-4423-9182-640ac96d87dd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7758b70f-dedc-4f08-9eee-79bbf99265dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abaeb669-667f-4a77-b6a9-d0bfc1c75169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78418705-e7bf-420c-a37e-ba2c997ab9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f9d991-9f59-4a04-a0f6-d7f25099e324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0d3700-75b8-4c7b-9df8-6e57e25dc73a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a15d0d-16e9-4527-983c-38054214ce0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af44ee3f-62d1-4f92-993f-190aa53a85de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a018bb1-5838-42f8-8a50-8a54a519a37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f602e21-17f4-400a-b799-91729e6fe670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a377b7-e8fa-4b20-a18a-6d01540c5981",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d21b3b6-dc2e-495f-ac71-961a5c87cfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0507a6-280a-46a1-b804-33675b6258e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cb8b78-4bf0-48fa-a6fd-d06ce36c8dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "91437b80-b49c-46ed-82ba-00089319b96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bf6b49-7faf-4c95-8a45-3542e6a3df1b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd67f08c-ff9e-4a0b-ad6d-eea611d6951a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7847436a-33ca-4970-914f-7d2e6988f784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8082a68-c877-4cda-bc6a-500e42eb421a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42181502-b5d4-465f-a48a-4cc2f99ed3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c882a5d-cdaa-45dc-8ab2-b478962e2914",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e995b4-52a0-48a9-ab74-70127f1e18b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e95f84-e49e-4c7d-b4b3-0df34280f160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfdb453-c847-4cde-9921-25827cd21f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1176f618-1d81-47a6-9b74-502d1f51ff3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5e4feb-b21e-4d9d-968e-e1ce092de66d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad00717-b12f-4e6c-bddf-c30123f32698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7836734-6db5-454b-9809-761e6de2edeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4c5975-e7c6-4a04-82bd-0536587823b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "788ceccc-e805-46af-b8fa-51b384b8b908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d801e9d8-fddc-40fe-99f5-344cd797c73f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8810a701-9f24-4da1-9e63-87115270bed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "807544ce-7ccc-49b5-8b2f-46510f97bda5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5682e3-53ae-4b08-9a31-8576304d1379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "08cbb0e6-280b-4f4d-a7e8-32dc72451f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e4a29a-771c-43cd-b0ed-d5fbe0b9514f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a0048b-cb3c-4afc-a01f-36f2be36c7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34239cff-9fad-430b-adfd-9db12d6c6ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fae794-3174-4d4f-a66e-6938f710d609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55deb77c-693b-458e-ab63-95dea58f63b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a4978a-2760-4c83-9165-06ad68fccb91",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56500491-df92-4dbc-a158-1c117e4e4152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1fbfee-d55e-477c-970a-7b191afc723e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbf643b-141d-4786-a6da-926c8559ce72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "10317260-e869-4096-b36f-a07514249018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdf8559-2ec4-4715-bbca-2c351a47c9c5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e84aa9-de30-4d26-9b5b-8a3993b58776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc155c2-b01a-420c-87ae-f2b455df45d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc5f7a3-3284-4fcc-8e7e-0530f8bc958e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb517300-48b3-4144-b7dd-94fd6eb6c758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1344c25d-1d45-4083-a850-a6fb198730ba",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05106767-e4ac-4fc6-9160-edae2ee63d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090cff56-d3de-4bf2-914b-5e2bdbe5b611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20830bb-bb92-419a-be37-afecb50a0462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1e3dd0-fef4-4248-9233-3dbb84e708b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72749113-47eb-4d9f-a751-29550f1dbb0d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc7e38a-d7a0-4ca6-bd07-43680c74a8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d43c9e-5010-46e3-a03e-b9129f31c419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7235624d-70b9-4822-8a2a-5de7fde93718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d929646-f7ac-498d-bbaa-981daa1337b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460e8dfa-d1f5-45aa-8030-a60bfef61c89",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d8fca9-1046-4921-a10e-f76785669fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4422200-bbdb-473c-ad7c-352758520366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d128594a-8522-436e-b329-0f6ed13a856f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5682e8-f4ca-45b3-b595-b43ea2c59b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170946c2-4619-4257-9209-0b063de6e969",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecd0f5c-57ef-459c-8697-8d5606ba34a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3afe9271-71a7-4bce-9d66-36125a6706d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64af4166-23e5-49b1-b51e-0f5e28ffad30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9a2b3664-ffd7-46df-8495-88d4d3f31d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8efd164-2eb7-4db4-ba01-c6ca735a6575",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc850e2-0dd5-4270-8440-d4d500193e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ce3704-9c71-46fd-8211-46834842543c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863c623f-7c87-46e4-8c00-5c0ffbd4c25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "80086e8d-5a3a-439e-99b4-863456ca2443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89f814b-4b7f-4db7-a452-1e1737fbad55",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbeaaf1-479a-46fb-82e0-0ebc1e6d3eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29eb8c8d-42ef-4895-9b43-1167d5abb0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0aa0eb-3686-4f9e-a7d6-4b5cd0edfa13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "96ee65c4-f897-4a50-89b5-2c64da34057a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869ae852-54b9-4781-ad0c-6a6dd87d3991",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3479b3ee-5a12-4029-939c-8cc78a0dc12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5431ce44-af2e-46bd-9822-17c73ef326e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc34f883-5269-43b4-8fa6-279110640168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "83be340a-77ad-4dbd-a978-e23dc36dbeb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395e17ca-5dd7-4f33-b906-59ee1ef86d86",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d838c8b3-81f4-4baa-a598-1d3b44b4e517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4371b00-4a4d-40fa-b232-b06f06531fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a229ad8b-e3d0-436f-a8dc-4219c45d8bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a275d5-ea96-48fd-bf6b-5eb16c41c90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c70c8b-75e4-48b8-8c82-c0939b890703",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64c1624-fa05-46da-b1e6-4085521e8417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23917646-f56b-4c17-8ec7-239863bc79b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db24eb47-85ca-4739-a5ec-dc4993be222c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f364059-8c1e-4610-b701-40b7417e6525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d20eaa-4009-4d27-aedf-09700d99a551",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425f6648-33f8-4776-8fae-3c8974b2af1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fc361c7-58e5-4443-803c-96e56e6f071a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c9bf47-b899-4d8c-a291-662dae66cb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a037bd9-cada-457c-a6fd-53344228067e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d887271-9b53-4cbf-a097-7545d773fc8d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ccfd47-320f-4f59-9ce6-dde1b916869c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c73537-0207-4caf-96ea-de26b10e43a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f931a28-8b12-4401-944b-9e4087ca13ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9caf7b7f-63da-4ffa-a340-0f864c3174cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85fa7c0-5f6f-47f9-b816-2e85684c8d3f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5568aecf-f851-4fc2-bb14-1a635009af4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12a3488-9fec-428a-951a-b06491c865ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615aecfc-327c-4c12-9e73-bd1da70dab74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f026e75-442a-4365-9ade-d021d19e2b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ae729c-ea28-49f3-aeb5-05553f886b84",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96ac464-2c62-4feb-8c88-6b57f4880c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47671be4-57d2-4c85-806f-3c791f4e3f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87113b2-8fbd-4ba2-ab7e-4b460e7b3afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbae1120-5ffc-451c-8612-89139be04682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da33c6d-30d3-4a93-83f5-e4fde544fea3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93c0767-a73b-455e-b60f-87f9ba6056df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95e7295-7808-409f-9e8c-01e3d3366a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ade99d1-e928-456f-9486-d08df75cedd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "054c92c3-39a3-493a-9c66-6fee1b06b039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8a0087-f172-46c0-9c85-719875f8e872",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511d5c22-8c9b-485b-8f74-ab702f404b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785097b6-9922-485c-ac8b-5dbd06ee20de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45de4255-0060-4c79-a4c1-cacacc76b53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb3768d-5c62-48a5-b0f9-0fd837d6d768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58278d85-6940-4059-bbdb-7938ba0cb9b4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1429d3cb-23a4-4ff5-b184-0ea8a68dc281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264a382a-888f-4d3a-afd3-2e5ff32a7f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c836bfe3-a493-4d1f-bb17-363777112893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "43faa5e4-e0b7-433d-b36f-ce19945c17f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ddfa7f-fdbc-4a9b-b69e-76ba055c5fe0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72392d85-d28d-455d-a59f-323119d804e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cb3734-ff12-406c-a4cc-73d6e4a6fe05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa020a6-bd9c-4baa-a2b7-628ce733ff1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "51ec0340-f2a7-46dc-8cf7-e1c571e7fc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ce45dd-f20c-428a-8438-a4c5ba5efd4a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43ee5a8-5958-4398-bfd9-e19fd2158076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6cfecd-a689-4560-8891-1f8c11541eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e3d395-d327-4deb-b5df-e7d43a5de259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42d27d29-1702-4786-bd38-f58d21c49b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c297b0-add0-43ab-b54f-27a5950b06af",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbfd716-9747-4007-891c-162c92c4103a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2841a9ee-95c4-4864-a3dc-639b3707c4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e13648c-851d-48ae-98c6-1dc376c52bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a507e4a4-8854-49e4-9f1b-8f1e2ed82e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ffccf7-a18c-4e39-ac80-48f486203be2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c98068-02d0-4084-b6ef-1d06a70bdbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00df978a-30e3-401d-8236-e809e6f125a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63faf70a-5a8a-4bc1-b63a-06b797629d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "275fcd74-49a9-43d5-85f3-3fcde8be8504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50710009-9373-494e-844a-f82ca256d7f1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0538c72a-3564-460f-a1ac-84a3fc193326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f46bdea-fa8a-4e2d-9952-21127d51a73b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c03967-bb07-4496-9a14-e534b41c0303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aee5510f-5664-4570-ac43-7e5a670d358d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb39b2f6-5606-4de6-be9f-98dc63599f0b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69950b6-9f66-47ff-af1b-18cdd76dcab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55359e49-6d6a-4a46-8d7d-7f2f69307f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6018f438-2314-4584-97e3-a0e16b298297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "099f6875-62bc-493c-9399-efa94a9f349e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68155b0-8e9e-4c33-b54a-edf095cba6e3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c24d5e-07d9-4ffc-9094-a3b10a22d366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753d5907-f71c-4619-acd3-af44b9842509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192f8c6c-0ad5-42ee-8e20-917dff0c1bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f4285d1-ff6d-4728-83c6-698c937deb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff7d208-68e6-482b-9806-bed1ad14f9d1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b833f4c-4621-4ef5-a2d2-9267d40ca219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66aa2c69-593e-4bc6-8b51-51d9a32658b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f3bb82-527f-4fa9-a9d1-e18c4069607b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf82af20-0977-4af7-be21-53b57479f7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a1825b-ceac-43ae-88c5-3f8d1b8f59b0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88194239-10b8-4de3-bb75-6fff9a6e3209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4474dbc3-a324-441c-87ba-4dd36533aabe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6527f4f-11fb-47a5-af01-bf5f95c63be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e12b2127-cd5b-4801-853b-531fa689eda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5b87c1-37ba-44a2-abcb-50815e0ce7f8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6238f556-5319-4385-8498-d3d0b422c01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27aaf46a-f48e-4e36-b3dc-c990d86a5a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216ecbd8-df80-4e45-b5ec-936ed001ba82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5eed4a-1855-4ab3-b3f3-c7c43d5fb2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0671c9-8ea6-425d-99e9-74732a96c734",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e882ad78-e0a0-43c0-aa07-edbf7f3c5925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf84a0b-8b62-4e1d-9ac0-50b20a6c61d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb0dfd9-efe5-4afe-9bb6-b2cfde6ab9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfdd0767-3d3d-4571-a8d4-afb42f90d1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb6a603-1169-4d08-be5a-3cabc113c30a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bdb0f4-abf7-4b85-8719-d7247803eccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3b7c18-09f6-4271-9db1-0e9625a780d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f036bb-5476-4994-b5d1-b93a84d762af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dab3cd09-9c4d-4c50-99f3-29021f39b11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92e8bda-735a-47e5-ba2f-b66fa1c972bb",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72386b0e-8f28-4735-b605-1bbee8b7c243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd97f4f0-aceb-4466-8914-82b7597a2863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7d3d9b-7502-4088-a317-b540cc57be94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "222effe8-9759-40dc-b079-4c1b224cdb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787e847d-77e8-480d-835f-05943596a1a4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18dced3-a8eb-49db-a4aa-42e412ccca9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357881dd-f92a-47d7-a031-21331ab1fe7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad0b956-b162-4977-8f09-f78ec0d32ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5465655-46d3-49f5-a5f9-7a217f8099dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac1f7e0-7e2a-4b04-912e-1546567743e2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f397f62-79ad-4be0-96c4-68dccccab5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8c43d0-528b-438d-a002-3642a30fcf84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70bb006-84c9-48f8-984c-d686e8b347aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e93187-b25b-4766-ba06-2d594824ee8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8943fc4a-46d7-4c63-b56c-d8507905c45c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f82d47-5b7f-4016-a480-1db559d0ae10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac669b8a-15e0-4941-b012-dabf45ee9c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60faa286-3274-41d2-98bf-db9b689cc714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b6c3f8-6926-4582-a87f-e9a70dec9247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1599385-4347-4d20-b72e-18533d5ef27e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358f3705-2103-461f-8ca3-98025ec1135c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2744c7f-68d9-4f85-bff6-f36481a46927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16412257-aa80-4ad1-b7c4-cedda4f9d3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cee67ada-1f68-455b-a276-7133b899d0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdc5a15-eadf-4d58-a0be-c58ff8c36a95",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de94859-f1a8-40c6-9038-4a9a6d185440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f51367-4374-4c66-8fc8-f3680442a0a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2fc230b-8c2e-4a15-9605-22816780561d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9589870-c02d-4efc-b8b0-6e7f0e628105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f754ef7-1dcb-43d8-8ebb-9b195ce04177",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ee7d2c-a2cc-400e-992a-529956538d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c85679-969e-48f9-8173-f7b866aa31f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4f9a8a-a28e-4910-a07d-4a6d4edecfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f59bcc71-deb8-4380-b653-10e2ab8d0ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aced3a18-ca48-4287-9931-ffc1fdc2bb4e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557ef502-9fcd-41c3-9804-b13e99192807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3b8b72-4430-4361-9cf6-2083a26a8be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22578cd-9680-4abe-9389-20bb17d97069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "80c37980-8e20-4e05-afd1-15ba78ade490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f565f79-c670-44be-9344-014b6d7f94b7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30751147-9abe-4fab-895b-9ea3cd5b80b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8734d081-b1fd-4c7b-ae3b-4bb4b53cae06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb9df7c-c326-43fa-be79-ed6734d048b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "47742715-650e-4f73-92d1-7fd33c683cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6e0892-437e-4faf-aa8e-8988146cc520",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9652c26e-ef75-4622-aacc-591365558a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89150068-35d8-4b7d-b5e7-b4f2d24c767e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9e1f78-23f5-46ca-b374-37497ee32992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "875d2dc0-62c3-4df8-b9c1-0d905a5748fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c7e45a-880b-4dc9-8245-fb48b4587677",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f76f4d-226a-4fff-b39d-06833fefb8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890f9695-c0ca-417e-9b30-3bf62e71563c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a8a52e-0566-4f07-af25-f09a51d51b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a988f928-36d9-413e-b5fa-7562acce8ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73148563-d30f-430b-9581-8dddcd0866c6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e47f90b-f891-4b30-b503-ebe446d868df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7eb07e90-2af9-4ad6-917f-6a5ca2e697b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b156748a-4cd3-4824-bd1d-d41be7ba2f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0eaf779b-0329-42d8-9367-e1f2544713f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "737b62ba-3192-45a9-acb0-5ee2d20b2e04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f8371b8-8c6f-408b-82f1-a0275189054f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672bc99b-9a56-4c3c-8d83-fe7155053971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9872aa75-a25f-4bb7-af8d-b9d4bc629aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a23f0a-4a57-482d-80dd-7db889b4af4d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6bc7b03-8fab-4c82-bcba-964e41365bcc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "728e1062-e42f-4366-881c-98226c669f89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8a9310d-192f-463e-a442-971353587b2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52e1e17c-4540-419a-ade7-ddde8df4ea3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48bb8809-367c-451b-bf98-8e4a924d1a8a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c08f2161-1130-484e-a70e-758a8727c87e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55845804-7076-46a8-a0da-e426bf604853"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "33a1cf6f-ae45-47c8-a0f9-496cd60d681c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c852e974-c942-4079-affe-77415dea0a87"
                }
              }
            ]
          },
          {
            "id": "223161ae-926d-4a29-986f-3d885c9347dd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7b9189cd-0e89-4be2-9b31-8ba81c884370",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "0b8e0453-8174-46fe-a52f-011226632b1c",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141718cf-f414-4740-b8ed-e02f563d89d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fdc8e886-c282-4504-add3-af9c6d33eed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c23726-558a-449f-aea0-18def89395fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c0c9cd-f563-4fd0-a7e5-a44e70f138ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "adcd4303-153d-41aa-88e9-66d226cc6977",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d403464e-a9d2-4740-871a-1a7abb5a3830",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "44ef9869-4e14-44df-846d-0f2eb64cd3d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f52f248-de36-4690-aa1a-f7dc1a643077",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d77d3966-a11f-4fcb-a464-9caf43d33564"
                    }
                  }
                ]
              },
              {
                "id": "04911dd9-eaf4-4eb3-bf74-47f0928872c7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "641bdb5d-4b10-42d1-a6f3-ee93c939bc93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e61ae326-fc97-4710-91c1-45a1e27a8f77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f1c2a1e-dc18-4893-867e-dcc651b7da73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d9b0dcc-40b9-4aa0-8ff8-9b062f6bfaf9"
                    }
                  }
                ]
              },
              {
                "id": "db10a5df-12a7-41af-8a06-7453d964597c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b8cd238-a1d5-44f8-9134-766e3d17ea9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4cfd6920-8c2f-465f-b722-537ec0f89406"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d3c01af-4549-4112-b701-dbd52ceff558",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aacf1de1-eb60-4525-afd6-35447c3f5a3e"
                    }
                  }
                ]
              },
              {
                "id": "7f542c60-95b4-4296-b99d-d1e48ca6a550",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e2ef840-d8cd-417e-9f75-ec9966a7146e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aab1bcac-602f-45ac-b516-1efd7ee1c1e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "588b306e-7885-4c2d-8af7-b79887844a5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "40d44d1e-3024-435f-bc73-2328b9171598"
                    }
                  }
                ]
              },
              {
                "id": "93d6188f-1755-4588-8e80-509c98fcf2a4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8752b88-a5d2-46bd-a0fc-de84806c03ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23e3e748-be2a-4729-a695-203aff9fde04"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0173d49f-bf16-4347-b148-d99dcac4644a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f1a6f7de-1a52-4e20-ad2b-92aad2b03fa9"
                    }
                  }
                ]
              },
              {
                "id": "94d7780f-3bc6-4bc7-aa1d-176635494f39",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed89f26a-0502-4d90-9aae-2f49cab8dee0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a491908e-78e2-4ab4-b45c-0eef3414ae08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa3fe904-8e56-4f41-b92e-b0db9bbe7eaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8f0bceb4-7b4e-4559-831c-bd103fbe9b70"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "49ce20f1-97b8-478e-9fcc-9886df048ded",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c44b8ad8-f049-4fad-9105-39967b4b74e4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "468717de-9be6-45b7-9d94-da5ead7c777e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e952556c-79a7-4b8a-9380-7a3751c5a383"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31d9c67f-0282-4df9-b495-bd6fd8b80f00",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "564f5624-6b9b-4ffe-8888-92901b917bca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d3d4420-ee09-4fe7-83d6-1a5f0d4ea063",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5db7081c-0329-4319-ac63-642e2f0b5771"
            }
          }
        ]
      },
      {
        "id": "81a3dd0f-d630-4b2d-976f-9bef3bb576d3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bda73ca9-144f-4e97-8266-52cdf6160b36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a83cc14a-d377-4e7e-b7bd-84f89e40dd39",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3c89d018-8150-4873-9bd7-0121a94b1a8a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c390890-5a81-41cd-af6a-88875ec5869d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8fac357-fcaa-4f9e-896c-aefd132eb35d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59aaad60-edf4-40e9-b8a0-3ccb9d8bd769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfaac6bf-1479-4693-9d7f-26fbeeecb9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fd8d61-293a-4734-bb4e-81d6b92d8f9e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8571836-5de4-4026-839d-4649b44a5801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e1d5ad-4a03-4f21-93c8-449f6d26f28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943addd9-4af4-4698-ac67-d4fe50f5afeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe959c9-c976-4d9f-af70-a81b248812c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0d2ecf-061d-4c58-b946-d8de41dad164",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d4df0f-8e07-456b-bc4d-451205bd5f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1cfeb84-dd01-4860-ad88-76e8ef451079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aece0691-9ea7-4762-b056-3bb0ff5e7876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74cf86e6-f83b-46db-b9d7-076148b95637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42380f1-d8ea-497b-abcb-0890c934a558",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88501f6b-d00d-46a5-bf44-43b2487e1974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8552732-44d8-4415-a2f0-ff5ae7aa6d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2342f032-e683-40c4-adfa-f0f1124faf04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e39b40b4-b4f8-47d0-b85e-485b2656ba33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a01109f-0973-46ff-ae22-23709cb02229",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71734a11-669c-45d2-9652-38b2a61f7505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d078cb-b907-41d4-a73e-0c30782c6e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ad0f06-6d19-4abb-bed6-76ff4826c27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec17afb2-6888-479e-b49b-781afef8eedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93498578-5958-4cac-9d9b-b7e4eb740627",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee26230-c59e-4824-bac5-cecac7ccc589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc2e204-aac0-43f5-aab8-c00bb834e3a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4e8f92-bcdf-4ab4-9128-78b7e0b4b371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "353d8950-e94f-428c-ba86-0893ebb4e530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826f96a5-992a-4b9b-86e4-b9be628e0da1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a21f3a-51be-4dd4-b8cb-e13f45e0c8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00d9d71-ac9f-49a7-8a82-97fc76e3a254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8dc1ac3-f41a-451b-b655-5775fa5566dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "192156a8-4699-420c-ad80-a27cb39aeda5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c64c20a-2b6d-47c1-ae0d-a47d87d8c3cf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfff0b23-d424-47f7-9384-ac0a8cf85790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558247e9-fd06-4267-9d02-429b2309ca17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b570c4-695f-4252-95e8-9df032d2b018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13ef402d-1ef5-47ad-b175-513dbe81e286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc25f390-3064-476a-b7e9-dd26809823f0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1f905a-f4b9-448d-b6f9-f8f71fc35cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785f41a3-f142-4884-b232-8e0e79aa65a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9880828b-6901-46fc-98b5-002856e2f6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8950473b-4be2-4dc6-835b-fd6646e3e5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b033cea1-add0-4909-9399-00df25549e70",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cfe001-43c0-4a29-b532-2432ddc9020f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100be780-0aa3-446a-9e48-3be0a8fe6ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bba3d00-d9ea-49ce-92cb-8e2b9cd7c491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "841dd1f0-717d-4c57-8496-2c9dcdd004c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422718e7-a88b-4ed4-877b-af54efc3bd01",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951023a1-f007-4a46-9455-80ea56adef88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9840748d-9b06-4f11-982b-779e5a0bec8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b257345-6f39-48e8-bb83-862f06e24a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e5480d96-fee9-451d-912a-8916a03a0f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cc6324-54cd-4752-81cb-657caa1bccad",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f902ed74-9881-41ae-b1b2-6f4750477f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95590470-cfa1-4484-aa3f-2458a7572b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdaba8b-bdc9-4715-9450-2d2c54d00afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "735994f5-e021-4f93-a762-4bb306916199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c365c2a1-8dc4-4445-8c7d-89a8e8fdc381",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683147b5-8ff4-48c0-9ec4-ec5741003198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383a337a-c328-4a1a-90ba-08b438813682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2790f2-7a21-40e5-a98c-416010fdb4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dc2d42b-3814-4f32-9ed2-2b31106ff51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76aa3d69-98d9-446f-8d02-cf077b28f0ac",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d379cd3e-cae5-4ff8-aeeb-c52008d7e924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5099dfd4-13ff-4a22-940c-0ceb1216fa56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a05265f-de6f-40f7-ad57-573344646ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8856a718-b619-465e-8f5f-da194cb830c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b697541-9f83-4ea3-a30d-c50b4857a7e9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520bd45c-0295-4446-821b-99b51077d463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdac9d5e-5198-42d8-8e9b-24f1dad8654d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4792e377-5935-4e63-ab6b-f5fae9324155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4311d964-7651-489e-955f-86d731d84af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60239533-7716-411c-a922-f265036eb51a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfb68ac-a8a6-4008-99cc-a21681138faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfae8a1-3f63-40f2-b039-e6309c72e4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20b72ed-0928-489c-9ec5-499dafe0c11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3f6d3c-9378-4051-8113-fbcd90425351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b49209-a15f-41ee-8294-5a3a75296377",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b4925c-2853-4d72-a177-ec3e290a8f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f8c31a-a984-4cab-98d9-3d76dc20438b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e4b8b5-2bec-422c-ac4b-dfb62469b744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "aceec3ec-2cf8-4877-91ab-35da07a6cff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a88505-3745-42cb-8f7d-e75e63c84e4f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4b0a65-a18e-4265-b25a-d95f38272e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322fb288-8d9c-4125-b85a-2c35a78d1bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6c119e-12d0-4465-8036-5c937e588951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d817fa7a-82e0-4f01-b88d-922c0ee283a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9129eaf6-ddf7-4e02-bfe3-7bd8e2240851",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800465ee-2755-4433-8582-db9466752636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a91c7a-507f-41d6-a93c-98731c5ffdba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac7e295-fa65-4044-9125-6803314ad547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "623e1d15-9ed9-4fa1-bdbd-36080fd70b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f512d1a7-bd2e-4f32-9bb1-ae43f07c0847",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18f79fa-6fcc-42f1-a7cc-7d5cf8870db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1625d834-3d6e-4ed8-a920-d653c7386f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42071b1-4b5a-4f74-a13d-3c840d55e889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31edf04f-8242-4b64-9da7-d9e2eae60fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa5fd23-3741-43cc-a3ce-fefb8c50f0b1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533ba759-29e3-4d41-97d9-78aa7f8cd45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c3ffcf8-6385-4ec8-abee-c8a318ba1c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b6b082-9e8a-4238-a7bd-435aa28e014a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b55fd1-3b1d-4b27-9fe7-0c355e1f00d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565d7b46-57bd-4346-9815-8560c6432a70",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2708a4-5751-4f58-b47a-baf35c5731c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858013ef-3b5b-401c-9c5f-df91cd901d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982a9765-1848-44d9-b197-a13ca1b6368c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a72a56d3-5480-4d89-8544-ac6b274f814d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3115f768-2296-437d-a12c-b18ffc2aabae",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6f850b-918a-47ab-a544-4cef32c6b501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3dccf88-e4dc-46cd-9923-4e052615b9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f739cb7-470e-4905-bd18-012d1ae775aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "244053e7-dff2-4f6a-9a76-9aabb47356d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08cb086-3370-482a-82a8-3db6545d148e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53eacf28-d3ed-4ab9-9c2b-9a14da6c4599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b4abf3-a49d-440c-9156-314c143b36e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafead9d-8495-42f0-a082-d501d5339a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ce2838-fb55-495b-826f-ea74336b86d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b982ef5-809c-430b-a214-6bc3751b7950",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be93cd2b-66b3-4911-b600-fad240fbe7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99c069f-1ac1-4199-b048-6b22f6acece5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d71f17-4884-4fe0-bb33-d1ea430ad00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0770fd-f8d8-42c9-8b3a-8e231c863697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fa3727-8711-420f-bdd1-6661ad004cfc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ac89c8-c44e-414a-acc7-deaa9bc75252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a670111-691c-4a24-9b47-421692f950d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52ca4a2-729a-4529-85f5-e66fd2c9de24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0965414-85ac-4e5d-b176-2fcb0f80e841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e6317b-54a5-4bdc-9695-32ed483aceb4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8867660-437e-4892-9a1e-05da0dddb084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89dc8d2a-7901-4bff-a531-9fe9ea0b5dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7790b71b-6cee-4cf0-91e9-b0dc267b7c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c28ecaa-fda7-4fd2-bd5f-bbcc5e953d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57167d67-4fc2-4b6a-895b-99313d68df9a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e76db2-dff7-42fd-8f17-de0f9a3815cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0cd2ddc-06cb-4191-949f-a7ab91b4bf3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df83a381-26ba-4480-89c4-59e44032ddf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eba91ca2-027a-43a3-9802-fc9c9b2d2ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71bbe00-81d0-46d3-9c54-1940f942f8b9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75ca391-8565-4256-b9f9-d0ea5a6973eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e24ba4b-fc9e-4884-b860-8d4fa8958a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763805bd-7ac7-4d7e-89c0-10f508821dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75ef4329-671e-410d-8240-510bf7934382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8c43e7-63b4-41d7-83ce-32a46f590c57",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fc2279-b66b-48a6-8b0b-a02251e1d833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa233f53-d6e1-4379-a626-bc502dc65ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5575fff-bd79-4660-b3ee-9a7a49db057c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6942636e-2ae5-43ab-87f4-a8f984709013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec15989-e9b5-4294-b0d6-770a568fa4c1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b12526-efcc-4137-a8c5-152c3804de3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725f109f-874f-4a2d-94b4-2366825fe0ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eaf912f-5cbb-49a2-baf0-484b218af32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69509ae4-7c1b-4dac-ada4-be9ab3f66c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190e77f5-b43e-49cd-a641-8cf019536947",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c30e0a-4229-4db2-9b80-fea58c264e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ee6fbe-d8e6-4bfa-93ae-c5663590464f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08949eb-df17-4dc0-81ef-323b519f895f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cbb0122-1645-4458-8cd3-9df3f51f0fcd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c648d0c5-8280-4351-bf73-2443ebdc54e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c70f8762-a4bf-4329-a51a-89cc61b90edf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe706f33-ffc6-4568-b732-9800032bc6a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3faae6-9faa-42d0-8948-633c7464a834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d345e2b-3e94-4425-bcca-b9a8f702cccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "297ea2b9-81d2-4d79-b221-129b8e94e216"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c457f3f-891a-4a04-8845-4693fef385d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bafd1af-8f8a-46e2-b1f3-d4ef71b7a8db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce64c3ba-3f67-4e57-ac3f-729eb89a3cf0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5848292b-9057-4816-bc80-0fcb589168f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c050018-a5fb-4be9-8b70-2e7faf8f3027",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bcc5f8b5-2f5a-4527-aa80-746bdc01e47f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53c9be7e-5042-4cd4-b6d1-9f20630aad14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34e59798-cd98-4b35-8e46-11800066002c"
            }
          }
        ]
      },
      {
        "id": "fc1e4060-15b5-476b-9615-37ee3b0453ff",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "35cf9ea5-768b-4701-b77a-87dfd1dc74b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db1fa030-b3bd-4d8d-9db8-338a149102e2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "02999572-7dd7-49ae-8f51-91b4be199258",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8b9c5f-c37b-4e41-ab29-fa972b65f6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05dcbc3-168a-403c-b153-ccb0bed6f7e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29344572-e927-43de-8c3c-1cf6dc57e282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6436f19d-cc26-41f8-9f1d-ecea609a6e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a596bae-2385-45c7-818b-d553b265c9e8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7987209-6575-47e0-8afe-b24f22357014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f814b41-23cb-4f69-842c-37cb6a9e9206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49e69e6-26c0-4099-ba79-e45425838f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b26a6275-b979-4e45-9460-fd6321648f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f258800-1f5b-46c1-93ff-93ae205c67f7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1583603f-dbab-4d7f-adba-74343fd43749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a4dd27-0560-426b-a53a-3b7006425652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26ceefe-3d0e-497e-8cdb-9297889aa5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87efe87d-d9d2-46c6-811d-1a08b56d4490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b04466-40c3-4cb2-901d-be520a2b149b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba0a45a-7a67-424b-a84c-68ecaca9d561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8bed2db-1d0a-46ee-9e46-f9541c2727ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383c1c4a-d143-4113-a13f-9218f41da24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abc90163-32b2-4249-856b-793173c469c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62600eed-733d-4de2-b347-30e8ed05e8e8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b4d78c-67b0-4f6a-8a1a-5c5ab668178f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccea9eb-1382-46fa-bcf5-c0e192e68f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638a7d82-1809-461b-9656-eced980eee67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b32275-3f1e-46b4-a48c-165200f40ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf5205f-6b02-4fe0-8455-b886034d0192",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162231a4-c524-4e29-a099-db3b997fc0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88149ac4-4efe-4a66-8ca1-ae3315164b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb70bc9b-3b25-4e3e-824d-d3a86d4dad48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c53045-035b-4d73-9049-3e74ce557b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3b228e-99da-40b5-af94-c11762a83163",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c756572-772a-4f0a-8d93-aa1474d25709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a614f81-cb1f-4709-b738-b3c3e9974aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2559ea1e-f4aa-42e2-8966-804f805f8b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "55ef123f-8b36-4fae-8cce-a132a5471ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519d99cd-4403-4019-9cf5-b25a9fbbc390",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb86c00a-2cf8-40ad-b441-5261387c2c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e24534-47cb-439b-9e03-d8488ec3f285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0799727d-82ac-41e2-8723-8b5e79f102c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73ab628a-58ff-4dfe-b264-cd13a4742149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d4a5c1-560c-4aba-be30-931db4958c8a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0fb7f5b-25d0-4790-8afc-c5003c1062d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17b13d1-5ec6-4308-9c61-05b3ef0e3819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb8a182-4a77-4fd2-86e6-bf5ee2cdd856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de5a01e2-c656-4256-b09f-74027ce2bf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5679383-c58c-4d08-872f-a8b7b020df6d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec6487f-f09e-47d6-8f60-7e52790c2382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2800b96-7271-4b65-83f7-2aa3ac1d1a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ef0849-e931-487b-950b-a2756edede15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1966890c-2d31-45d3-b7e9-95da0b622b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3d10ce-b541-48e2-b28a-37014aafda40",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e94deeb-3af6-4a38-8f54-f1bb4223d4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f9fa5d-11d6-44eb-a05c-4b48156f4aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86b5059-1765-4bee-afdc-aacb706f6f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b2dfdfc5-3a65-4e6b-a737-5a843aabebe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781f5fd7-3572-4753-a697-42b38cc8029b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cc884e-47ff-4d2e-8372-2feb4f2847c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "772865a4-bdf7-4ded-b2ed-b854956aca9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f414543d-a3f8-4dfc-b6b0-39a468a2ca9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6029b9db-f3bd-478e-ae7e-c68a152ea6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbfb6c6-e913-4247-8232-aaa82d2cbcb1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b73a37-dd94-4405-87a9-5393b0163726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237c5dd8-a6a5-436e-a0d1-f060b0a7be90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab74165-d87f-4827-a6c1-7c6e7ecb917c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dfc775d-f9dc-4a46-9dc9-b247d54a4ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41ab933-6400-434e-8420-13d8c3ad9c22",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e409937-91ab-4659-83a4-3e3e611f18e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec26f03-fe85-4d37-be2c-fff11fae4a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a183d4b6-ad89-4e76-b161-f5a9d91d4e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "00c47c3c-2741-4755-a441-6b1a2f4b220d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f323567-7ee9-4ab4-a0f2-f534a69d48ed",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1f10c6-008e-4556-be6b-e6ec806f4cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed6d69f4-7f53-451f-9413-a7ce5beb150e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3f5ff1-86dc-4452-8e1b-219431ecc5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "db61143c-d5f7-45b2-bcf1-6d2c6e055501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c6312a-586a-4984-bd1a-9be13da813ab",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd175546-b091-41c8-8ee9-8eb28170ef22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbeaaed1-0dc9-420e-af04-67d58f2aba68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58933e3c-4a2a-43bc-8043-c8784c0203ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d7a816b-9476-4338-9a19-1235180d829f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb73948-e427-4608-992e-9c2b86013a34",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659fd15d-b10e-4f7f-a1f6-c7c0f84c266e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc983c15-52b5-4d8d-948c-d6f8057fdea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443d2591-9b14-44cb-9808-dd9f77269c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "274446da-e0dc-41e2-ba4d-24b01f85a03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f78289-f900-4c35-bf29-32ef9cf5495e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7702d6f1-2c62-4cb6-a522-ea459a8e5c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f25c31-df47-49c4-bc0b-5d36e65967cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f5022a-50de-4395-9e8c-77beb3c1cdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "35975e72-8f91-4099-a0fb-6cc0ebf760b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d383c063-373f-4d2a-8484-d7fa47beb156",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f638be31-1228-4628-b8bd-127e83525e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86afabbb-5b95-475e-8817-daf4f2386b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb2f50f-981c-44e7-a8f2-d59d55aef9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db2e2d6f-df45-4228-aee9-06f3081e37a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e527fcc8-70d9-4dcc-96fa-bb430fb33147",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33011e13-e61c-4cd3-84d4-478fb6541e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d0c657b-b877-4a37-a321-347ae1798e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc822a88-b145-4907-bb1e-e79d4eaf54ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "773f3ccc-bd80-4383-b806-52f2e026448c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a34270a-1459-4456-b4c8-0a3b4a8e8f10",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f63ec5c-667f-418f-9291-fa2ca95ea957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640ab67f-1c19-4a84-9129-3135db2d88c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911c613d-c2de-4a6f-875d-0b12f6ec2e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d047e63-01f9-4070-bdfb-3849823a52ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc725a9-78e8-46b9-bfc9-f11621a32153",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "727dabc3-0a2d-4164-aea6-7e88d5985985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436e8516-6153-4819-bb6a-ede6d05e00c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670842d7-3f69-43f4-9870-0bb58b1d4016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08d862a5-09d4-43d9-bc18-712367813739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e5b137-252b-43b9-bb33-5d21f0afb831",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7fdace-05ef-4829-a3e4-8bc293ecb660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f13f1ebd-b074-42f4-9c53-7dee8ae87d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0665d433-55f1-4228-a525-838c56b9500a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b328f143-89ce-4f68-9417-a971e52f9d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60ac428-77f7-488b-95e6-f5ea898e1761",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d93c382-c7a8-41a4-9572-e635b045d3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c11763-507f-47a3-a83f-c47d5f08a4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53929ca3-4a64-4fed-b341-cf1b5f920c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b3e02f-4d98-485d-a6ef-b87b1773c256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f828537e-30dc-45b0-8cca-182f781eb87f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6555d65-ce33-4e9a-97a3-8e5f400ac215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b7b242-b646-4d01-8cf0-548ae0f2c0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d88a1d-8a1d-4034-a165-66c321a13c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "add7527a-53a5-47c6-b08f-9e15cc517ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c50d05-425d-4f6f-afb7-eecfe386a178",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458ffe0f-f260-4c5e-b90e-3802dabf20b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8504dd1d-70ab-4f82-9fc2-02bd62b6e7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87563099-2c59-45a5-9a09-8c5e6b149fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51866a3e-5de3-4805-966e-f581ce0b5ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad77948-6c13-419a-9b3b-dcf5310589ae",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc29d485-886d-4c33-ad65-8e46ebae5537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b4cb9d-f8ab-4fc3-865c-dadc297a3a2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c55c18b-643e-4684-866f-591253cc75ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed7bcb0-c622-4b3b-984f-8fa393f41082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0599614b-7e4d-4ce5-81d3-30fd01ba2ad5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28dde638-ce1b-45b2-a139-5b73774df8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d1dc6b-74e9-43a7-9c3b-fa15bab2e737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c83d84-927d-44a6-a468-3bfd0c251588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47798068-147f-4be8-a0cb-aebadbcb42e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3b587f-0b30-4c07-a9f4-948a8c92d08a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b81831-a00a-43a5-a3e2-9fcd4cb5348b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d00102f-1341-43ff-a072-0da142155a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255ebbb7-eea1-40ae-b972-64c224f5fbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e804c2b-75d8-4082-a4de-6ef1cdb68a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd80e50-d742-4f33-9606-b2ebf737bea5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def15389-9ecd-4549-85b3-3de58a097f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314638da-6893-4491-a9dc-9ef4c49e0ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdac7f6-05c3-4870-99ce-9161be73559d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10a9b02f-f147-48fe-9194-ccb08f1d4844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44545c7f-b2c8-4737-90a6-eeb693fe5912",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e95d4ab-5576-4c75-ae30-d2cd15ef287f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d5647b-ebaf-46ef-bbe5-fd3c287113bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256fa856-7762-444b-b622-3c12e14b762f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5403de-1f2e-4871-a675-7cba01eb5ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5ad293-2724-4f5e-9def-9f2afc565d68",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc05c77-3c4c-4792-854f-10c1ab4baadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141e8cac-2d05-4ce1-b5b5-221e64c2cd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4124d984-9fd4-4624-ae60-34672ae87f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca84cc95-46eb-40f3-89b2-14138de27221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b920ba2-bfdb-49b0-8ea4-3c408cd83729",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a41ef0f-4738-417b-b718-4f6bb5053eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c1006e-6b7c-4c57-bd51-cb482f9c25a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8045df90-4289-430f-beb1-b4a221fa890f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6bc2bdb-557c-49fd-a890-6e64a4ea24e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f27011e-0df1-49fa-9136-98382a831ba0",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "777feee5-e20e-4538-9b11-c4fbf733e3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6932bc10-1cc3-4f07-8a4f-5ea779320fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448eb4af-a188-420c-886a-113ca07041da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2984595e-fa71-4e44-a627-8a44e2f67404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a40da0-a9c3-4cbd-ba90-91208bacc6bd",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf27129-ee1b-437c-8b1d-d9e34af12eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0763af-d144-476b-a33f-74fe1df1d46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa642fe1-8801-4209-8f3d-7b3279d4ddf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b2221a2-4fda-4382-a31a-a7fa2cf4764e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2beb1b-741d-414d-a260-13789d24baab",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dc95ab-9a05-42e7-954d-84acfbeb7b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff470b5-f070-460f-bd20-3ce7ac88b165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b580b8-5394-42da-ac24-31b149f5ede2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3184bca2-5c2e-4fff-a8e8-3b86994df355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c14221f-23ab-41a5-87bd-746ffaaae8b8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55940510-be53-4f83-a43e-3c4931844ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef073d78-dab4-4f79-9fef-2ad0de0d7dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4710ed-b708-4a4e-8a3f-583525b598c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d01056-1df5-4b0b-8098-daf0ac6c12b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "da3f3fda-2d8d-484d-9dd8-7e0e3bbb9d92",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46cfe0e9-ace1-40d0-bf9f-e6cd3a56dc0e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58c3830-eb39-4243-87a6-912ddafb5a42",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "92f4186d-8afe-4b02-a320-eaedd8198b34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e2fe3a-38b3-44e5-92fd-d2b93a87e7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ccf72ae-d491-48b3-b491-568b72871fcf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9e1234d-91a4-4144-9386-39b3422518fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a4b0710-2a1e-4f2e-a659-fab2437d6fb1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ecacb19-5058-4dee-9fc6-e1fb4e98e790",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79d24f70-437f-4863-b5da-ab3047e9b8c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17f2a753-0177-4faa-9948-03156582afae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4a9c7658-6e60-4ee5-9aaa-8833c69ec25f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b39527c9-2055-4eef-bf0d-452017f9a8a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de44363a-d33b-471c-a0a3-a8b4a807b090"
            }
          }
        ]
      },
      {
        "id": "545a0ae6-284f-4028-ad35-9f27d613f584",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7c1c3702-c665-4a21-9d2b-0d7db642e3ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "181447a2-b9ad-43be-999a-1203327567ad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "271a2390-e9b9-4404-a258-ef303074ddd9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d086f2bf-eae1-42de-a369-9da23ee99b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1378e55e-d60c-4e04-b236-19c61d4df251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13684c53-db8e-4159-bb8f-378b05f94c44",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62730287-d5c3-4098-860c-0a9864dd7061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb60065-c6ab-46e0-8b6a-237cd48121a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf6a7c7-ceae-4b5d-a91a-a73841c1362d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20788b8c-b67b-4faa-b6bb-4fbd4e208cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d86e76-9573-47df-96ed-68fb22056b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2c4033-f40a-4327-82f2-0738b48ba590",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa054d6-3a18-49a5-aafd-bb3fc13275de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d790df-9776-4358-977e-8b6259e4173e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8302b6-c990-4a0d-a494-348d925172c1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d014ea51-2485-42d0-9f20-5411cbf8dcab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3aae3b-8d1a-45a6-91c8-a0f53efca457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d07690a-9508-44a5-adc9-831d03df098c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0f3c94-ea74-404d-b048-2d056a49fa08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2e7c7c-feff-42ef-9b92-7ab1a58ae6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf9b24c-6f2c-4616-b02f-7666afefe88b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc616076-67b0-4735-ad6d-fa30ad56c68c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6dfb76-dd75-4abe-ba25-4330b0e081ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7bb9a1-9769-4a8b-88be-227a362843f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de3c736-741f-44e9-91fd-71911038f825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2dd44c2-8220-4cd8-a580-f535e377267d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c3fa78-8724-4f84-9af0-82d4f303c299",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f0351a1-a09d-476b-90f4-b2c70f265be8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6273439-c8b8-4932-8656-7cd0e867157f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e0ad0de-722f-4658-b36a-3f75bb3a9633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d340e9f-c5aa-4ec6-ae58-d4d096d206c2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0887225b-9464-4d14-a9d7-793629cd8009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f7bdc79-30f3-4fef-84ac-f82a83a5fe72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6423ad-4aa3-47bb-9a55-c562de2d7637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc9027fc-9cbe-4dce-a00a-f13cee43edc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef9a8b5-2c12-4340-87c9-65238bd0450f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44a944c-ac7f-4e05-a328-84552b6bdaf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db7a663f-febb-43b9-a283-0005b0943322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba754876-67c8-4c96-b6a6-c085ffa75ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1520310-6612-49e5-9464-5c6aa3a680d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82075abc-158c-4c7e-a522-7ac339e8f4db",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f219ed57-d20a-4e3a-b1d4-9f22c1fc1eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d53e1d9-62e7-4a97-8de2-cd86b4405720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d833e5-40ff-457e-a967-e1afa879a2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf526f8-aedb-4e39-aa68-2c4d91e18879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dced26ea-893c-4c43-9bd5-1f531f09181f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc407ad-5a0c-4dfd-9068-f33f55e830e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65374b55-0601-4b94-8ca1-6c9b0b98b31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba25dfa-bbed-4c15-9dff-c7b5b0dc777d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284e64bd-dde8-4ed9-bcf2-efa9e2686689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ae3761-6c14-40eb-9fcc-e661dc2c7692",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5116b629-f702-48fa-a782-7b6b95e3a1a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78d42bee-c5ea-4797-a792-3b1115fa013d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f1c3db-dbff-4b8c-a0c0-0c9f0e5d5e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "910935c9-54d6-4d6c-a6fb-9b2eaaf5ab51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c816fc4-5549-4ace-a1f4-1d98c4ad87bd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb59425b-91e6-4732-840d-e6ec261a6bda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25807162-3387-43fd-9707-a6a65bb46141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91814b68-7cc9-40d4-9304-b7e3b257a1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a6daf1-b3f4-4362-8132-bd9cd6940456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9099f03e-28a4-4622-b9b0-d3c2139403a4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a9dd95-fe08-44aa-b662-fcb234aef262",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9591d5c-7eb8-4203-8b18-b8eb8db55733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7681df2-876c-4465-b2bb-9424ad0ebcc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d55820-c6b5-4a46-a445-d4f46105d3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9279cd8-3a79-48e7-8290-3b894fdc5a33",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a62095c-e03a-42c4-b697-0e49b10f5f41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "533a31bb-f9d4-4224-b911-4b2621e05efd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7406b13-c520-4003-acdb-567f91453dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22231eb2-8f49-4161-8500-8a5dfd22dc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a2159b-8d1e-466c-a4dd-3928286da0ab",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e421086-21e4-41c2-b9ba-8996d57098bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be538cc-9d5e-4e2e-bcff-fe3f227833c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "143c5aad-50d1-40fe-8551-392a94c42207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a99253-2fc3-48bc-9b57-34acef1ce92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46cb610-60ac-4d04-8804-0d224ee7d906",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a153f6b2-76ed-4772-bba3-7ba1dc8d080e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397f7a1e-ff23-47b3-8eea-bacace49d2d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e053ce4-52cc-468e-b411-f80d88132139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2dfde2-9def-4908-8835-cd6342365d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9af6a0-11e7-4963-b440-bf88e703322b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80e2bad-5c5b-4b49-8ea6-cf4f097c9417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64ef741-3945-439a-a080-b38e1602f114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77a5937-d617-4892-b1bf-e29f462dd1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07db3b44-5dc2-4c72-bbba-f39594964255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a921d4-5972-40da-b101-d5b725cf0c00",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91bb58d-f8d5-4d6f-916c-25b27a732476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0fbba0-57f0-45d7-94b5-7728a0b8d85f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a44dda-bce7-429b-a77f-5ca2d4160d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baecb540-44d5-4be5-a460-c2df7bb508bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecbbe70-baf4-4775-b6de-434078897536",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b9fea4-c3c7-401b-81de-afc4c2fdc7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e935e2c-8642-434f-a8c5-53d8e72d1178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d891d90-ebe7-462f-a325-c0d75b66d364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b19748-2634-4d74-940c-129b97823f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7285a803-c3a2-448c-9651-db1ba039868a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbbec56-18c0-4df8-b79e-5d5af3de7490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3139d249-fb38-4dcb-bb0f-9544d5d11889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7343348f-f772-486a-9f1f-8016b2706b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c4e2606-4eef-4f5e-9a37-7e115c2421c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fe514a-c790-4d40-96b9-78445b2c4bd3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ac0133-0771-4201-956c-b9109d8089c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae1e162-fd03-4acf-ba4a-8a9578f6b3cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be0e352-2355-42e2-ab09-80a410752627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edea9c3e-80e0-41af-8bea-4a5f42e7c4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a663e3c-6aaa-4838-a434-c714b8b4c9a3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0aa5f7-544f-4d1b-99fd-58a807b1b9e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a0941d3-6cd4-4c03-abe4-43f4b2fdfcac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3565803e-fbaf-42a2-84ad-4f0584769ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6398c6f7-c5d1-4ac0-8aac-dbde0f620321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230172fd-ba21-4fbd-adc8-bac256c833a0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a0a239-3d5b-4381-a2dc-99fc4ec18ba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a1b41b1-27ce-4f86-9576-cdce3b044036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e032159-d559-464b-b8de-4e5e1da60a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc81e01-9e91-44f3-8feb-300115ea435d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa33f9d-73c5-49de-9cbf-ce1d06bc6266",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c40f9cd-b011-4b4a-876f-5a8d220c5563",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fca8d135-01c9-462a-86c4-2e120bf4c295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "318d1cd3-e9ee-4e71-97a9-540d4c3f0e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87d2850c-d2b3-46e6-8d30-d01876d0bdda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effc4931-59a9-4395-912a-8cc1f27ccdb9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0876fce-bca4-4001-8172-0da6eb921255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd63ebd0-793f-474d-822c-142fa93e0413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11085587-a1d3-4223-9732-05eba4bcdd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5639cb29-5609-4d15-816a-ac088924c421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad909091-626c-45cb-b61e-cb632131cb44",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b7c4b8-1e04-46c6-a0be-8e427959ad8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b602d0-b07c-4cc7-9fe9-91abcdb82c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4996aff6-324a-4b08-b766-2064226730a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea7e60f-f108-4b87-9f14-55b429c58a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb74727a-7f45-4f21-a267-e25487ffb908",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8df812d-a231-4b77-84cf-92d8fd78f225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9266faaa-65dc-46a5-ae7e-9e44622bcac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c215705a-addb-4a0a-b0a3-e9306f2af119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d6386e-96c0-43f5-9d8a-6bb036869795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18e9af3-dbb1-4ec1-8fd0-0cd0b627186b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a213c638-648b-4cd9-bfc4-275a652b5af7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aaab0d6-e7a0-40ed-9042-1c6bba1c2754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c489a0a-4304-4b04-b204-4de1d883bd72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac5433b-e86a-4c33-a25d-dc3d132a93e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d14ec6c-4e27-45ee-9103-2514e7523740",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef98d804-0c16-4e39-bd34-8b0bbb13bff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38665d70-c2df-4f0c-98cf-f7405713fe4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4278298d-8088-4e15-a6dd-05333e99148f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb06a577-7987-4430-85fe-15b37311cf89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fdec54-8dce-46a4-aeb0-48f5095d0810",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ac7adb-7f9d-48bc-a456-0d29589052f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f12078-6363-4e49-b5a8-fd93a43b17d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c3cfb8-7fd9-4f55-9da7-1aca0fcd29ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62ffbe6-0aae-460e-b7e4-8283e601966e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a4886f-b8e2-41bf-872c-0ee35797b6b3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5876e0-b016-4eb1-bc02-faec0bd74a79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "403705c4-8913-4d9e-a218-31800e555a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40e48d5-f796-4d67-a7a9-876f5520e146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f90409-2732-42f3-9822-320b95a5bfe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8298ef3f-2eaa-4818-b1cf-4dff1994aadb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc068e6a-e398-485b-ab57-a4901a32bcb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fda5b369-8111-4fb8-a7e9-d3e7a4cb08f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "503be70f-5b61-4a59-9146-a87b5d6279ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd68353-1ce6-4b53-94a9-ab51e20c880b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311a9045-326e-4d1c-8444-9a2ba81b8d78",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3cddf0-9030-414f-ab95-75df610340b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a69c60-79f2-4ac7-a949-025e988f223b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44fffb7-255b-4699-93d0-539c14b23f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebe8086-c347-4366-ae5b-b7fa6690c29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247bc618-eddc-4b02-b204-7951ffec4059",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29afed5-82fd-44ca-a78b-08190fb84790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07dbfbd8-9076-48cb-8760-029451862ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af917057-b97e-41b7-b9a6-0d5c7d0fffbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7077006e-ff48-442c-ba3d-e8837873d9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc47e50d-b82b-4098-913f-66275673595f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a81f6d-2b1d-47dd-80c2-12af0be6b731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47389134-69ee-41bf-a0c0-44d692009b79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93457ff-f959-4cfc-8971-c072e8805aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bbc463-a5e3-4db9-b7bd-ba4ebb719c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e37389c-2fe8-48f1-8aeb-3fc87c0ce2c2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88dc00a2-0a86-4dcd-9223-eb343bf22202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1fd5d72-70eb-44e1-8487-ca40c77021e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1f9f11-1601-4f4a-a126-baf9e9579445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d442b53-9f04-4eb9-993f-576dcf434f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3004a5fa-7c98-4b7d-bc95-122dfa293e73",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011134af-a667-4f48-ba42-c213fe8200f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf163095-75d2-4b2e-9a7f-d0285dd304ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "104b0ebc-54b4-4d86-8687-43f0eabfe30c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e8a86d-61de-4e46-a9d8-301481d948b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b6bb31-600f-4945-a423-46b4cd13da31",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025f7d2b-31e6-4734-8cb6-800b46c5fb22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28be5bbd-eace-47eb-bdbf-7d982a4fa3a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5db65e9-150a-459d-b426-81c2a4af59be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff5b14c8-990e-4cbd-8e0a-2a608a45ff69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e25452d-a125-46b4-b355-042a51d6b628",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7cd9de-777c-4357-a07f-ff183043677f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcd41e5-9402-42a3-8b6e-cc0a6c255890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f969a3d-0fe8-4832-9618-ca1cadcd1c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f75407-60b4-4fc9-bf21-3e333cb9859c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84ac538-1c37-4aed-b1ca-f41b6f3b3df7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9353432a-5428-41c6-b44c-ac274a5a5584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449d0952-3e7c-442d-a760-79646ced6555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bde646-ea6d-4eab-9491-48b062f6ed11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e512b462-5128-46da-9ed5-465b40a61e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e2ec4b-a6d5-42e0-a8b3-3e0e1ffe2825",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c74aaf-3e79-4bc8-be67-950015bf7181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90a5822-af73-415e-b5f4-8165f3a165c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c3dbf3-ad5d-477f-9bb4-ebf755170a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccdc3d19-c460-409d-a07c-3f5b66e37816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ac7223-6567-49d9-91e6-b88213c786ea",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67977d6c-c17a-42c0-97c9-08f1602b69fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3001acca-cb8c-4fc2-b3bd-34c51b83ef74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26edc79-e2cd-44e2-9970-bb2cd13c4945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035eea22-c754-430e-9d8e-b86e81ecd649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ca9de3-ca33-4d6f-a023-e8492caf496f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73856e6f-0efa-46f3-af5a-8f583f8b7d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf648d5-511e-412a-8add-b4860f63dc9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7810b067-a103-42ce-ab98-be7388ffc9b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a46088-2a4b-4547-bdd8-2d4b6347802f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3519b00-8ef5-4d4f-8aea-3590e46855d1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cb1784-30df-4ba4-aa02-66bf49b6fb51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d42515f-b966-4591-9b0f-fb19b0df74ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d6519b-fe04-4c6d-9412-b3673cab0575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efee3c98-38ce-4d5e-86a9-edac60939941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6606f510-a0f2-4dbe-9395-a650632216cd",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e16c227-3190-44d8-85f7-02ad37cc2b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c5f561-e3b0-45ef-a299-8be02dd2b04b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d739643-d5ad-4c30-a736-088a810e2091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ed71ff-0b77-4c0c-a4db-5a00104bd0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1717926f-c4bf-4f81-a692-18dad08a407e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ef95c2-7b12-479b-8dcb-bb7e27a781fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a844b80-b237-4c01-9b4d-bbb8009c8d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7153d250-66ea-4264-b00e-27e349faf950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8b1c2b-c108-486c-87c1-8f85a144712d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70af9b4a-3691-4a31-a2ef-aa43855adad5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ca23d7-16c3-4741-a493-c27eeed166cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bffa26b-2144-4afc-a756-8f5230b7ae66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e18fa3-5aad-411e-a7d0-e65c2ce8656a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f694198-cce3-4929-a542-a794fa180bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ae4dfb-6f0e-45c4-a44f-5fe113f46714",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3bd3dd-dec2-46cd-8e47-e2005ddb3d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf236be2-62d5-4e4c-80c6-8e169bbd7977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d867641-d8e6-4327-aa67-41bcfa7c6ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90cf0539-3cd0-4fae-8b4c-1f73fabb6835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51a4db3-4153-422f-84f5-a57558ab8226",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe4e9e6-4f34-42e3-824b-cc118cae5afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81ae912-bee8-49fb-86c3-b364dc72f04b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f70da5-ea8f-4253-8313-d5ca8c4f5a6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3f96dd-dc51-4807-9d1d-c057e6cd3d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d58f14c-ce0f-4ad2-9ff1-dff85b87941f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02011f16-9329-47ab-a939-380d29cb4323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b42865b-6113-4f88-a0b7-b7de8102f009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac1ce52-f50c-401c-a467-1480d2cb3fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d41f30a4-5f11-458e-936a-4ddc1aa597ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff79c1e-15da-4da7-9171-9d4c653d1c70",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3275196e-2dd1-4674-b994-83250b000dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af928fc-2c21-4f27-8fba-f860e4e55406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ca5135-3965-449e-b4ca-671a283a3227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1984cf-4f83-49bf-a637-c34777620354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfa973b-034d-404d-8a29-6043ce77aa6a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b6bcec-6df8-4a9d-920c-86009d8c1dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffe1ad3-4193-43ee-9f63-cd61b06a66a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4324aa3f-43df-4021-b75a-70cec4266f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b09af3c-4076-483a-a8e4-b0b7604aa22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce4bf82-bd0f-4317-a6d0-0548eef61ca8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028657bd-80ee-441f-8c1b-65ca8ff255ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4d2271-1fbd-4f73-84cb-b5f2a73208c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b76925-3b2f-4635-a881-22d5dd0b71ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a84a1fe-e8d8-4c82-a03a-edb4240f75c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8b53f5-fd4f-46ee-b3d4-90758ece2826",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e98fe3-eeb8-4b28-8aab-75f04a375f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4f3fcb-7a09-435e-abb2-ca211109dccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004a2f8f-c576-4ca5-a5a5-f354af1bea16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a767eb8a-34c0-4875-a700-4d9c762bf4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99eff01e-eb0b-422b-977f-b8a7c6a5e2f9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d1d952-00f8-4979-8ef2-19aa97e58ba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea86c73a-f023-438e-8c79-2f3aba78faea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16c9d7d-1c83-4df3-8c95-3a8cd149b808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bed8c0f-f3b3-4796-90c2-6a3ccda8ea7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08974244-a2ec-469b-bf74-84ce3a7a5779",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd6dfca-68ea-4fc8-a20a-1e1f9c071499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b4fce7-5df4-405c-9a38-a23ea3658c84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3537e136-58cc-432b-beb7-4ab44c6513e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4721ef-87fe-464f-81f4-9be528016b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4201b242-a9c8-4248-81ae-18e944ff730b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6350bc3-4683-47c9-91ca-cb02aef96b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512856f5-a299-4672-aba3-f85ed563a10c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da735075-03db-4fbc-9dde-4eef583a453f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63681f14-e940-4849-aa04-8b6d63f1d4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa33848-6747-43ff-bd63-875338f573aa",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83aeae3b-9a18-4a6d-b42a-a2c0945bc34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9268ba97-a20c-4a39-bb6a-4e393108fae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f016cde7-125b-4d3b-940f-fb7fa73e7db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f71fb3-a5a8-4c98-a113-9733a70f2d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aacce13-3e4c-4866-aad4-ce0ed958be85",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a5672d-790b-44a5-b48d-552247a6b781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56fe49f-0c2e-44b1-a2ff-894808010beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b16e8c-a2a9-442c-83ab-6d13342fb834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42ac435-8990-4016-8a7a-34ae74f94a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45446027-61c0-4fef-8e07-0c1d66bb81e6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9ffbb6-ece6-49e5-a5be-3f48d790244b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c853bf08-79f4-47df-8e72-96feab8fd3b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccdb93d-5ec0-44cd-8f67-73098452b7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e432c7c4-73a1-41f1-b1b9-cedf5ab8ce23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5472302b-6bb6-4dc0-a2f2-8353c7270fbc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bfebf0-c34d-4cb9-a672-4cf83110926b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c7c545-a05b-4483-8699-16efdfb38302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01f2b14-63a3-429a-8fc6-57d3ac588fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7daa7068-9579-4bc0-89ba-15aed8d41357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3938a42-c7bc-427f-855b-c9650f014bf5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2924fb-f6b4-41d8-83de-09950241fb82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e01edf19-c381-45e3-924e-65a5f6a6abfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8131bc41-bcf7-4380-a085-c3e9a1ccb3f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c217ce50-9753-4ab3-a14e-d05b4d12db1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69ee9bc-6337-4663-9d81-a2a87dbc3056",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d3f0d2-7fbc-4818-bd06-f349c10749dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4183913b-ccbe-4645-8028-cb129484c33f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7121b6-bdb5-42ba-b704-4c32fbc18aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db17514-699f-4218-803b-6a009699657c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afff21f9-799e-4490-b77f-e508cd4133c8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d19144-713a-4492-9b6c-aa3d7074779f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7bb3bb9-a515-47f0-a53a-bdb94c33b0c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621612fa-2f9c-4b14-9091-f2c5538db32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abdbdac9-14ac-475a-a33b-db2299831904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623ec8e8-5a0f-49fa-b861-828ebb0880c8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d90ffd0-d67c-4176-8904-e76bbd8e149e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22aac973-b27c-4671-b74d-88e2cb5c5bff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc87a9dc-0896-47c6-8384-7dff7c0ed08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096ee4f6-d915-43f9-ba92-c6a02f28658c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2869af9-1134-4ca4-a9ff-9a44db6a982e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5c2292-9187-4fd2-a613-d1977bcb5490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "401b8efa-7b65-4cee-96a3-ac4b25e442ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c769f7e2-9bac-437d-87aa-d28d84ad2aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b7eec4-98fa-487d-8822-f35ed032c7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45810a34-d061-4d01-94d4-6066315c8c41",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06960c7d-bd68-4841-b969-e1de56bf40ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea6c7f9e-5b8b-4160-9fb5-b5287dc99bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412e3020-f190-4014-9f73-ebcfa2ec6713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b03907c-4a3d-491d-9344-c69ab97065e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154b2ce7-7b28-4a2e-90a4-a20ed4940dab",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1fd8e1-f952-41dc-bdb1-ca0e3f70218f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba18a22-4863-4bba-8329-f0c01fac0d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4500d795-cb07-429c-80cf-e10de5477da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba52435-8b23-41dd-b11f-22e13eebe9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473fc478-306c-4cb8-9e6e-6335fd14ff1c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67fe74b6-5835-4764-9eaa-550477509248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4281a58a-ff28-4b02-a236-61b5eb35d075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7784c4bb-229b-4706-92ae-0d27b2c1c99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77b3921-b348-4d31-9873-f56fc96707c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7577f6c7-a534-413f-8889-4c218a5fd623",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dac5ac-e7fd-4747-9984-fcef3298cab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c26ac5-4f0c-4a5d-91ec-d402c93d0a30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda99c58-735c-4d8d-8f79-eade1daf91cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5511994e-74f0-4e62-ba1f-2a514fee9423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc77fcdd-908c-40c8-93bd-20919e2f868d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480303ba-c557-45b9-93a5-4269c60664fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a074ca85-596f-4db6-891e-d2808352e85e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9830b4ac-7800-4d55-a2b1-5c04b2b725c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4480d5ed-8774-4a69-8660-f23ace7e485c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574f561f-96eb-49d0-87ea-006bc2424d0c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73d45c7-7e44-4f47-9188-1f1217357122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d72341a-4822-4044-ae7e-a9a49785d43e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbc1168-76ab-4f53-8dc2-b87fb8f7079c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39dd391f-b481-432a-a03b-809e537f292c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03957c5-a118-40b1-846f-db23e5936e23",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b476ef-ce13-41f8-ba6e-991e4137312b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5409829-fcf1-4b23-8791-29f8b4f58856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3b5ada-b72c-4304-8fa9-372e6161f6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5d7ef6-b17a-4cec-bc4b-a995c01090a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c41459-847a-474f-bca7-af1f01d77d89",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38399eda-48f3-4c66-9c8d-21cab8d8e4f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "008437e6-62ca-4b83-818d-4d94d4d95cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "063326cd-1ced-4e29-a2dd-fd6896379287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056c1883-c2c2-41f4-a8f1-7c2f2e81b874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49087e3-d1fc-4ca6-a09a-f90fe0caec3b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e415008-79a9-4526-9cc8-018ac470f3b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45558b18-0da4-43fe-a006-9fb378d002ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd9ef50-e842-47b0-ba9c-803395f70c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b029365f-c960-4ab8-888e-77db4b9dc1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063a98f6-3d6c-4235-9291-37385b4ea1cb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a0842a-29c9-4210-a7d2-8457ed36c37e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8022b9d0-e962-44cf-a3b2-7d321bd49c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49098a2d-4ca8-4773-8b0c-127ea92a00e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "578cdc27-4855-491c-b5fd-14839c5f4877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1eb159-1491-4c80-b102-8f5869ae79b7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532ee80f-9462-470a-818b-996ae65fcb00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c444d0-5d90-480c-82b8-b0ebe3277fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f16e287-906b-47dc-99cf-6e51f34a9cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d6dc20-9032-4e77-8984-feb13575ee4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8c22a6-7484-458f-b86d-f72af0a6c4b4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd06fa8-ea23-4856-afc2-dcd44e33adc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "092d2b48-a670-4676-abb6-8e14629340c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cbd694-8a97-43b2-8b29-ffdd9aa1226e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567a3bee-b998-40c6-b790-f9338ef5ecbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b3fa35-bb0e-4737-aa5f-278b4f3cf274",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adad4748-1428-4d37-9653-d615441ab6e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "472d3dfe-d4a0-4f8c-80b3-6cd2f43afb95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c542de-6406-4bf2-8ff3-79a9b35bfa4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3dbe07-e106-4da3-a664-713ddba254b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72253b70-1255-47d9-9bce-f28d36a98632",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9142912c-c025-4049-accf-ff38cf5c8ae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43874b16-fcdc-46fa-80b7-e94a85008919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7e056b-382e-4a95-8c6e-4041cf1845ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d53e38d-73da-4486-a6c2-be6222917614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212cddfc-4f7a-4cb5-9542-aea2b0f8523f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279c0b7f-b911-4a07-ac11-9685b40f572c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fbc61d9-71f0-4394-87ce-79101e71a9d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac91486f-5c2d-43ad-8fa6-b38a2e1bdbd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849eafc7-839a-47d8-9074-1d6bed910f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9ee181-ec34-4ef1-a32d-d4b3ea8c7a39",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46dd9db-0146-4eef-8272-d63d5584f6d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "633a70d5-1ac7-4cd9-ae65-d102e3aa5c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15633b5-ac5c-4b9c-844e-2e76d511ebef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0177c636-1b09-4f37-b9df-41cd7012835d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b05e69-96b8-4354-adb9-397d89e942b0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597ce2a7-91fb-449f-86ac-993686843992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d37c84c8-f583-4d72-b5d6-7f18d6d8f6eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8337bd-a3c3-4aa9-b451-6ae345420465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a7f26f-cbdf-4c3d-a378-78ae8827b388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9332c45b-04e7-4593-ac2e-0940791e09d9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81113c9-48f3-4fdd-a894-ec33d07b7bef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3589ec82-8adb-491f-a032-9f2d398ed293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a1725c-ecd0-48db-a764-5e0b10fd6945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5adfcbcf-17b7-4a6c-802d-ff5bd6cdd5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51485135-e656-4460-bf6f-cd97d4f60bce",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feee711b-dbfb-40fc-a573-582a30e8b23d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "931e1b2c-01d5-4473-9377-98f9612fc546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd97d74-9308-4221-89c2-dee07220debd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b53c337-3e7b-4be8-967a-482f19279d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85094a22-e883-4a65-8b51-91b9e694b43b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c76e5a8-ae69-476b-bc11-a35d71c94d84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c5d7cfe-86b9-4ef4-9f6b-b911659186d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a86a98-201b-46fc-88df-54813026df6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbe9e24-760e-4191-9686-b06f658f9ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3298791-2cde-499f-ad3b-a6e5e5bc0418",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad371f5-95f1-4d46-b789-7d1894aacad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3592a6a-9e57-4b35-a20b-619e52b27f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffbac1e-ec14-410f-835a-5a0db2ee74d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0cc198-51c9-4612-97c1-45ebe83d5104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c76108e-0755-486a-a71d-fb6d6c872088",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7803c5d8-3fb5-45c3-ad5b-97733c2deb7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "124e797a-19cf-49e2-aa8a-e7888540461a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fe72a8-491e-4c58-aa3a-2a995e7a5e2b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6447414-fbb7-48f1-9a24-a342a812abb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ede6c4-c549-4bc0-bfce-d628088c5b24",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260c8e86-16ae-4937-a242-6fd1833fd85b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d1ed5d-d552-411c-84f4-30ef6bd7bb8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a55b84-0271-4af9-8689-371c0d89ef4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e272d4fb-5c74-45b3-a421-9d9612a1a8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6248bfd5-1fb3-45a4-8485-fcdd3812b3c4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3da9b6-18d4-4acd-8d04-e3b0e8f62411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc68d28f-1c9e-48c5-acee-90dad56adff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f655378-d5d9-4cc1-af44-3be2d9298bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe688ba3-11a4-48ee-bcc9-37ea0d926752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5411117a-7e06-42b5-a4b3-90db82affa11",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d0bfe3-d284-4fab-9abe-4c08685a2239",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc476fd3-077e-41ec-a965-3584f258cdf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30aeff7-f461-414e-91fa-732bee272c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d4276a-74eb-4cc2-8c0d-4ab44364a2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58926b9-b8d4-48cb-a895-f6b306e969be",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006cf4d0-eee3-45ff-bffe-d9617a6e2394",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4edfa71b-cff1-4243-9869-0431c6a69732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40dc7e44-0a9d-4a9a-aff3-c204fc2ab62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46ee682-046b-4016-8d18-4533a3c7cca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8775f7e4-392b-459c-b84a-2dac746bc072",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074b0d39-c0ec-4091-a88a-db601e90db44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d17f3450-dd86-4dd2-a2b6-95edc09a01f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9859b771-00a5-4308-8f81-cacf702ab38d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a4c384-f948-420f-8ca3-a7ea560927fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df51d55-4f88-4459-84bc-c02112a75bda",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36d5634-1395-4eb4-8921-9508bdadcbff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7db01c68-9656-4525-bdaf-814c3caceb9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be95e2f6-c54b-4531-91f6-94b2c615c466",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d962da-6ebe-4989-bcbc-ed5bbbaaaae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6e0307-0f19-4d4a-be23-8dde971dfbdd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36f5ecd-fba7-41bc-8118-a35f0d33d438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccd71a45-4310-43b1-ae65-ea3d988df445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a78889-2441-4f91-a27d-054b634b9f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25994aee-ac1e-46fb-82b9-f2270e00dc31"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2714754e-22c0-45e9-bdf3-3ecdd72a2505",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5011936-de15-41ba-ac6f-3164e27fd055"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28b3fc66-a693-4eb4-8955-83bf3dd9b626",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10214d3e-3a66-4227-a8ff-7e808f9b860d"
                    }
                  }
                ]
              },
              {
                "id": "9c26e01e-8622-4425-aafc-b25be4f45ff9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0bff9eec-5764-4f2a-acb7-ba8720be1c2f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6da3fc-e6f0-4167-b1aa-fdb6e899016a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ecf9058f-92c0-4179-bede-09c2ea939ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b6124a-03fd-4926-918a-da9e6fe053fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "488bf98d-27c5-436c-be1b-a7cf6c139981"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cfc36c6-8121-49c4-9b6f-2b67f269bc3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99662220-f7c1-4513-b190-725e27da7021"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8421494-ab3d-4303-ae10-1f1217f24622",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abb142f5-abd1-4621-b9fb-58493721c9fa"
                    }
                  }
                ]
              },
              {
                "id": "219f38cf-fdb3-4461-8b42-06db088d0b64",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4b11d914-9e39-41f6-ad98-bc884465a010",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446f3461-e384-4b53-b3a9-d27c860f66eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d8b6be67-9c7d-426d-b9ea-02da4b9c27ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cabc0f6-8ee3-4331-9c62-d2b6d36d9d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58443b3b-d6b6-4e65-bd45-907b03d0a0bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "20310700-e27b-4891-acb9-350687e968c1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a28ecb73-a582-4baa-aeb1-a16746b05323",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bad66f21-57d6-4eba-a7c7-9b2756a60359",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "78f0b0a9-91b3-48d0-8f71-910c8ec35b60"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d75b5b58-5cea-4ca3-93b0-90dc931a092e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f0e037f-7a87-4c7b-9979-e397da9148aa"
                    }
                  }
                ]
              },
              {
                "id": "7c31f2e4-7620-4acf-9bb5-eab91d1c87ba",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64b8d271-ddae-4560-acac-7a58bb6dc7e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d9fe6638-5458-4477-aef7-aa46cbecd88b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15ec9c54-ee44-48ce-b430-6130e0219e1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "662f5771-086b-44ca-bd50-519849e99ad2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09a20895-b60c-4187-b4b5-7a5f0ea667d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "69fa6ab7-665d-4542-bb36-dee875119268"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94e2eb0f-ec5c-4e62-a601-aa7a3e6d8d34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef421c19-3bd0-4315-b89d-6276400dcf77"
            }
          }
        ]
      },
      {
        "id": "3ca49fc7-0b60-414f-8444-d57f9466123d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "524e9154-3eae-4917-8c0f-7a55dbb49785",
            "name": "Negative Testing",
            "item": [
              {
                "id": "215fcaff-8811-4653-a611-1fee5a9e75dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0b789bf-5346-483d-846d-9a64d19c79c4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e48493-683d-406b-9957-a481bd9821f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fb88b18f-40b2-4f52-892e-9b272155850d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aaa93dc-4a41-4ddd-b5d6-f7417165323b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b92c4aa-2c78-4ed6-98f2-7dca0cf1b63a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff4af85a-d45c-4888-86b8-64bf87deb051",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a1f30e9-878b-46e0-83d0-ced32fe01070"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9843c1b2-a4f8-46f1-8d83-6402e4413d3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46a3737d-dfd2-4d97-8660-fd2ffb855de1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ecc61aa3-5687-43ef-aa95-2c54d7dae32a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b751f81d-b197-48e9-b9b4-f4acb5de167d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "067104fa-e91e-459a-b19b-3a4f12728f27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9628492a-1cdf-499e-8bdc-65b258ab240b"
            }
          }
        ]
      },
      {
        "id": "7f7b3d97-33a3-488c-bf9b-293416f30690",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "12c2be0c-a3ad-45bb-a4f5-8fd0e1ee9b2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1e4945f1-c653-4db9-b434-52b6be17c195",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34a1d614-e892-4f54-80db-dde3bb8e9aa1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9db578d-631f-4ac9-9a75-d5a4e430363f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ca17361-5dd1-4050-baae-2b62ce4cd360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1680afe-3f07-408b-b171-9476b7a962e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d642a70f-2136-4b45-884d-fad3a9602b25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2a8ca69-a6a2-4f6e-a2f3-d3f0ba758049",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6568af8-3ba0-43ec-8648-763cbb2836b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7a053d4-441c-4590-9ecf-232e9bbaa964",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "139cbc98-0e30-4570-9524-b213b53d63b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d00dae50-7119-4309-9d6f-ef9ac829bec7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6a1bbb07-2d04-4f02-8172-99ff306ff427"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7df0f758-fdbe-48b3-8ded-cb53b88238c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c06f0d84-af6e-4b16-993d-a8e5ccaa354f"
            }
          }
        ]
      },
      {
        "id": "aa72e193-1d66-4679-b1f0-c4f5686145e4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "67cad208-e319-447f-aa22-c3ab1767daff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a671f34b-9bd0-4bfc-9808-c77e8ef8b542",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aee5e7bd-3e53-4bc5-a2a3-3cefcc8ed919",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8a810b-d509-4ae4-81f7-7ac1ee96b255",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b98d6719-beea-460c-ba95-c3f569471ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ee58da-7516-4ee8-8287-e1484858abae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8460080d-cd2a-4702-8735-75a4cf782b19"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77b3711d-4165-4e0c-a735-005ebdc7b61f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61121eb0-3098-41b3-93eb-653f491ea829"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3ba6ec0-06c4-4ba3-bf2a-586510d0a390",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75d62341-6774-4de4-ba22-9c2c30d8932d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "863b5321-29b4-4fe7-a8bc-acf34e50b7d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "777f7adb-495e-4d13-9502-e64f0182234b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8551584a-3f6b-4ae5-b0a7-c45fe77d1cfb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13a930e7-3a3a-4259-aa5e-85531e1916ea"
            }
          }
        ]
      },
      {
        "id": "88e37413-baab-4dba-bf3c-9dbbd4a7b4ce",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83bce824-5b61-4587-a217-3dfd00aa5c39",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c1e61d4-9a96-4164-9209-a842c4138fad",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "11ae1c3b-6690-47b2-b3ed-a82c2f70236c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9f8e2b7-c27d-4d6b-af2e-8076fb2dd4ae",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8a75517-686e-4f6a-941c-f22d568eae56",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.53684210526318,
      "responseMin": 9,
      "responseMax": 730,
      "responseSd": 77.71705006450942,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706229266576,
      "completed": 1706229294666
    },
    "executions": [
      {
        "id": "cc3fa452-9437-4816-8215-3a80000ae43b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f87906ba-ed73-4634-a899-5d274e916cb6",
          "httpRequestId": "3d8332e9-add6-4fad-a1ac-00d8598f647e"
        },
        "item": {
          "id": "cc3fa452-9437-4816-8215-3a80000ae43b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9b663726-7de8-411d-8e16-d8f44910cbc3",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "418b0cdb-b8cd-45f3-aabf-b1cd4b2652c5",
        "cursor": {
          "ref": "a08a70c7-7a77-4552-860f-4abea0e4b483",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "52971409-e08d-42f3-abb9-89fe2572bb37"
        },
        "item": {
          "id": "418b0cdb-b8cd-45f3-aabf-b1cd4b2652c5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2aa23d39-7ebc-4d4d-97be-cee83b16b889",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "f0c3cef5-e55d-4ec8-aa93-d5a98d86f39b",
        "cursor": {
          "ref": "8ffec7f4-0be3-4529-b5e3-a5f609b48cc4",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "60e6d8f8-0c96-4ed5-9a09-840c7abefe13"
        },
        "item": {
          "id": "f0c3cef5-e55d-4ec8-aa93-d5a98d86f39b",
          "name": "did_json"
        },
        "response": {
          "id": "74a79739-8fe8-4140-961b-4d1a5f962aaa",
          "status": "OK",
          "code": 200,
          "responseTime": 353,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336dd2db-a34d-4f65-b375-5a76c4bb9c7b",
        "cursor": {
          "ref": "4ca32dd8-ee31-4c4e-bb55-67b0cb9c4510",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f733c354-cd3a-4e82-bb1c-49f9d42bd60c"
        },
        "item": {
          "id": "336dd2db-a34d-4f65-b375-5a76c4bb9c7b",
          "name": "did:invalid"
        },
        "response": {
          "id": "41bd2834-112f-43e5-9967-b1582c0ce468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336dd2db-a34d-4f65-b375-5a76c4bb9c7b",
        "cursor": {
          "ref": "4ca32dd8-ee31-4c4e-bb55-67b0cb9c4510",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f733c354-cd3a-4e82-bb1c-49f9d42bd60c"
        },
        "item": {
          "id": "336dd2db-a34d-4f65-b375-5a76c4bb9c7b",
          "name": "did:invalid"
        },
        "response": {
          "id": "41bd2834-112f-43e5-9967-b1582c0ce468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e438f98-8271-4c98-b915-114f87739f18",
        "cursor": {
          "ref": "9ffdcbd5-3089-486c-ac81-ba6ca953c32c",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "12fa6d7c-b32b-4355-824b-61c34cc382a0"
        },
        "item": {
          "id": "0e438f98-8271-4c98-b915-114f87739f18",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a71a7589-e543-46fe-be7d-ae3d2d9be2bb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 310,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134f250c-b9c1-4e7a-91c2-c6cf70ed2a6d",
        "cursor": {
          "ref": "e23a5c38-a636-4113-85bf-534d561781e9",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "299c494f-1af0-4703-9a66-f70ace4d3fda"
        },
        "item": {
          "id": "134f250c-b9c1-4e7a-91c2-c6cf70ed2a6d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "302fb779-5959-489b-9c26-d411d916f747",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18915ea-e7e3-47e5-865f-585c37db1065",
        "cursor": {
          "ref": "564e3666-1dfc-47a4-9d52-dd6fa4c21730",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e8433091-17be-4735-b2a2-f66ec1fef922"
        },
        "item": {
          "id": "c18915ea-e7e3-47e5-865f-585c37db1065",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f0eabfdb-9894-4e7a-940e-ef715a8191e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76e13be-3b3c-4f7f-902b-a82f286febc4",
        "cursor": {
          "ref": "f024dfc7-9e1e-4aea-a1d7-d51251b27484",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0777372c-bd0e-4a49-892a-ef3f09bf011b"
        },
        "item": {
          "id": "e76e13be-3b3c-4f7f-902b-a82f286febc4",
          "name": "identifiers"
        },
        "response": {
          "id": "b7250cb8-cc50-4129-92b0-b2cada1c5b6f",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4814cd1b-fa49-41a4-a908-4b1fcf287633",
        "cursor": {
          "ref": "a442da91-8586-4214-8fed-9a1cb9eb149c",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f6ae343d-9dff-4e95-8885-78aeb4566905"
        },
        "item": {
          "id": "4814cd1b-fa49-41a4-a908-4b1fcf287633",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "adc1f0b4-5578-4639-95a0-665a26f74bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8458039f-d3c8-49ba-8ffb-8acddf4e065b",
        "cursor": {
          "ref": "ff679887-77ec-4f38-aa92-38f7f35a07ad",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "69e3dd03-030d-4b80-bd37-751f88d20c9d"
        },
        "item": {
          "id": "8458039f-d3c8-49ba-8ffb-8acddf4e065b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f124f72e-5c1c-444f-885a-74d864ff21f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f31f4f9-9ad9-4306-83e7-4377315a19e3",
        "cursor": {
          "ref": "bfa3ffe0-d23f-4aaa-a319-d31cf6a0e995",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b292dedc-83ab-4e92-966f-1a5497aa7e55"
        },
        "item": {
          "id": "6f31f4f9-9ad9-4306-83e7-4377315a19e3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "390060df-b1cc-4f6b-8a71-2ef8fcf6d19c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ce7159-d430-4595-84b7-009dbae8a966",
        "cursor": {
          "ref": "bb83726d-5392-4674-82d2-fb22764b4214",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8e1d5422-1f4f-42f7-b78d-224e89002dff"
        },
        "item": {
          "id": "94ce7159-d430-4595-84b7-009dbae8a966",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ec35de8a-1792-45b3-a09b-eb89533b9de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf646713-c6a1-4259-8aa2-0c425f33d7c1",
        "cursor": {
          "ref": "9f2c3272-8783-49bd-867c-253427b3ad85",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5cf1a13f-2b3d-459b-9bdc-aca4110e2251"
        },
        "item": {
          "id": "bf646713-c6a1-4259-8aa2-0c425f33d7c1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "526dc157-39db-423d-8c81-222a8d1932ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02f409e-3720-4272-8dd1-9911e9248bbf",
        "cursor": {
          "ref": "59795a5d-2a7e-47ce-9fc0-209741b17aa9",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3e5eec94-2d1d-4a25-ab97-04a6c966c429"
        },
        "item": {
          "id": "d02f409e-3720-4272-8dd1-9911e9248bbf",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5173566a-8abb-4dea-82d7-45b8f0be277a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fd75d2-30f4-44e3-addd-e3e380d1ac38",
        "cursor": {
          "ref": "05c5d651-5b1f-4f9b-9d43-1d5c77532d16",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "caa4df1b-426a-4e51-a1f5-001c86a8b2a7"
        },
        "item": {
          "id": "29fd75d2-30f4-44e3-addd-e3e380d1ac38",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "30b5bd93-2759-4a9f-878e-b8ffc0887096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c04d5a-8c9d-4d5a-96bf-0097ebb5e353",
        "cursor": {
          "ref": "0143d061-883e-44b3-bb87-be088847c890",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "76ba1e64-7b93-4040-9f54-299c9811d5c2"
        },
        "item": {
          "id": "a3c04d5a-8c9d-4d5a-96bf-0097ebb5e353",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "836856da-ff0e-4763-93ee-86c552debd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d95870-cb73-401f-8d07-d1075ec0d304",
        "cursor": {
          "ref": "2d09ab6d-900d-4e55-b94d-185f71d1f627",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2803bd9e-d6d7-4580-b894-e18cfe99e667"
        },
        "item": {
          "id": "c9d95870-cb73-401f-8d07-d1075ec0d304",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fd0813a3-c132-43e9-beb5-aad18b09bfdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0446aefe-56b6-44f2-b38c-8cb12c056c5f",
        "cursor": {
          "ref": "965ffa63-9e5a-4762-bd55-07c08d326950",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "74b0b671-345b-49b4-9613-a27c8683ab03"
        },
        "item": {
          "id": "0446aefe-56b6-44f2-b38c-8cb12c056c5f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a3237474-8149-4a3d-a764-d46583f8301a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a44c7dd-b1da-4552-8227-f5ee62b46cef",
        "cursor": {
          "ref": "355a81b6-5d44-463d-bd47-ab7955c8f800",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "258c288e-6df8-44a5-9e52-c3e8404375f8"
        },
        "item": {
          "id": "5a44c7dd-b1da-4552-8227-f5ee62b46cef",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7fe5d248-b4d6-4263-90aa-fde27c5a039b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7494aa-ca1d-4465-8eca-6eb6a71211cf",
        "cursor": {
          "ref": "dfc01995-f8d9-4cb3-ba14-7c003f112685",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3f71ab8e-039c-43db-9117-1d5d04f86e7b"
        },
        "item": {
          "id": "0d7494aa-ca1d-4465-8eca-6eb6a71211cf",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2119738c-868d-4fc2-8146-36c3cc1aa88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993bc3ac-19c9-4574-9ad9-88b3324c59ac",
        "cursor": {
          "ref": "a501dca8-9938-4122-82e4-07caa52b76d4",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5d51a166-9b80-4480-8b8e-6c3e2cbca398"
        },
        "item": {
          "id": "993bc3ac-19c9-4574-9ad9-88b3324c59ac",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1f29e385-fac1-436f-bd34-50573e4545bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbbe4a2-2e66-4250-91da-6134dec37f07",
        "cursor": {
          "ref": "22bf1feb-f075-4036-a4a0-171626ebd2ca",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "28bc2f7b-c579-4b2e-b9ea-be3969e9c43b"
        },
        "item": {
          "id": "6cbbe4a2-2e66-4250-91da-6134dec37f07",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "699edc9b-a499-4a30-860d-9e7b1507222f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3362621-76d5-47ea-b166-c044cc968690",
        "cursor": {
          "ref": "efec6a2c-124c-4817-bef3-352c121d95b2",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4178d144-8e35-4f47-9eee-cefd687410e8"
        },
        "item": {
          "id": "d3362621-76d5-47ea-b166-c044cc968690",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b9d6c180-c7f7-4a08-ae91-81780bdf2cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46da6477-57b3-44de-af8d-896f66fd46db",
        "cursor": {
          "ref": "e7fe88c3-4018-4684-9e47-dbd6f687ec80",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "446b4663-bed5-4759-ad46-bcec392192de"
        },
        "item": {
          "id": "46da6477-57b3-44de-af8d-896f66fd46db",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0fd0469f-cfb9-49d7-b3c6-6c94ec587220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6adb680c-9063-4c67-aa36-339980925f9f",
        "cursor": {
          "ref": "cb0d54d6-08d0-4e7a-ab64-1a4fcbbe40db",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "324e7916-6539-4b7f-aa1e-a37371563500"
        },
        "item": {
          "id": "6adb680c-9063-4c67-aa36-339980925f9f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d016c9d5-c933-41bd-8b62-a55799cf5883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6fe201-6710-4c14-8896-d7790768b15a",
        "cursor": {
          "ref": "26b61098-a203-4a3e-943b-f7aee9effa0d",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "62fb56d1-5122-4355-9961-238a9c651729"
        },
        "item": {
          "id": "2d6fe201-6710-4c14-8896-d7790768b15a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "af92090e-b0dc-4eb4-8ec0-ee97ada14676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b68039-534e-492b-a60a-4546ed864178",
        "cursor": {
          "ref": "f82cd068-a580-4107-87fd-a21d68e24cd7",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6ce8628e-3cd1-461a-b273-8e6fad3bad31"
        },
        "item": {
          "id": "36b68039-534e-492b-a60a-4546ed864178",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "998e2e80-b88a-4ac1-9398-0f985247887a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35e548c-5e7d-42b2-8813-bd9e4d3579b1",
        "cursor": {
          "ref": "f7014f95-82af-46b5-9814-d4dc47ab70b3",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4658d3d6-9c59-4854-81bc-5031e32f318d"
        },
        "item": {
          "id": "e35e548c-5e7d-42b2-8813-bd9e4d3579b1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2722417f-1996-440c-9042-4469a283bb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa36ae2-a264-4512-96a8-773016c92e60",
        "cursor": {
          "ref": "29edf46c-7202-4f5b-b5a1-f4b87af9f87d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0b6bea01-98e2-4685-a23e-4e09c0dce666"
        },
        "item": {
          "id": "daa36ae2-a264-4512-96a8-773016c92e60",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b360c7a2-b44d-4d86-ba1e-0ee67d0f9f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ff8026-9320-419d-be53-d332eecf12b4",
        "cursor": {
          "ref": "2dd768c5-f87c-4b08-a116-0fee22628f25",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4e6cfbe7-1349-49a3-b273-5a1f59087af8"
        },
        "item": {
          "id": "10ff8026-9320-419d-be53-d332eecf12b4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7aaf93cd-3fd9-4207-8c45-fa07d1f8d3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f48aa8f-f9c8-416e-9849-e9b7f930041b",
        "cursor": {
          "ref": "2577e432-1580-4c55-b46a-4279af359e9a",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "458a12c0-9c2d-4930-8277-cc24b29c1c67"
        },
        "item": {
          "id": "3f48aa8f-f9c8-416e-9849-e9b7f930041b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e20d3c7a-6fa9-423f-95f8-e82ad4b419c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645e8461-cc71-4597-a4ed-085717bf1728",
        "cursor": {
          "ref": "0248caf4-aebd-41b5-8c0b-e836df129d47",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "66f36569-3867-4315-aed5-841b4ffc8a69"
        },
        "item": {
          "id": "645e8461-cc71-4597-a4ed-085717bf1728",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d1840c63-0dd3-49d1-94bb-178bed8f4411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dda460c-22e1-44a8-b61f-0a8cf7442e46",
        "cursor": {
          "ref": "d0ec7163-ca02-4548-8219-e4c4a4416c92",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8f2983f8-9d9d-4f29-b138-c610614ebabf"
        },
        "item": {
          "id": "3dda460c-22e1-44a8-b61f-0a8cf7442e46",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "41a08cb9-6dfb-4c92-a676-97ad91173422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889ed132-106a-499e-93f2-14871b538c69",
        "cursor": {
          "ref": "4113fecb-bae6-4406-b792-67b763e827b6",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7bd578f4-36c8-4ccd-bd4c-c50d9687b97e"
        },
        "item": {
          "id": "889ed132-106a-499e-93f2-14871b538c69",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e5753e4c-5830-4512-a783-520a15cbad64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7a2679-29ae-458a-b286-869a7ef9a771",
        "cursor": {
          "ref": "82b9e01f-f715-4ad8-90a2-fd700a44273e",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "df714b19-d9b5-4c07-ba51-e4f510b810e4"
        },
        "item": {
          "id": "6d7a2679-29ae-458a-b286-869a7ef9a771",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5c54b8d0-6c5f-440f-9153-ee200e48fcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a265e3-a85d-46c4-82e3-661ec6f4175e",
        "cursor": {
          "ref": "a094385a-0a41-4e51-8d98-40826975ef5f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f67c1eaa-cdd6-4c24-b1f0-19958b93ee23"
        },
        "item": {
          "id": "92a265e3-a85d-46c4-82e3-661ec6f4175e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b759114c-62d4-4365-9fab-d899c40cb2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825d4767-6565-491d-9faf-7fa638abee3b",
        "cursor": {
          "ref": "3a7bed4b-a0e6-4e13-bf34-9645983f3694",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a670c4eb-778b-4f3a-9b8e-90304db8cdf3"
        },
        "item": {
          "id": "825d4767-6565-491d-9faf-7fa638abee3b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b7f21d7e-0c8a-4dcd-95d1-81acf5198b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7550787-bd45-4abd-bc3c-a2371458a81b",
        "cursor": {
          "ref": "20515959-fec3-45f8-934a-21facd4cfa30",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6cca53a5-7a7d-4063-b5f9-e4764107fcd4"
        },
        "item": {
          "id": "b7550787-bd45-4abd-bc3c-a2371458a81b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3f374701-f849-49ad-9126-f3c34ac05e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a00ec9b-e0ee-4e55-af60-692c8b0d4827",
        "cursor": {
          "ref": "73978594-96af-42c5-a92f-b07a40b24a3a",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1414003c-d68e-41d1-a742-9213ef986763"
        },
        "item": {
          "id": "2a00ec9b-e0ee-4e55-af60-692c8b0d4827",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a80d21cf-5a69-4028-a9ca-531b7dc6cc06",
          "status": "Created",
          "code": 201,
          "responseTime": 730,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d87f9d01-00b3-448d-9489-3f357baf6d8a",
        "cursor": {
          "ref": "2956d028-1163-4a31-94e7-bbd327cfd50a",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9bf97f15-f4ee-43e3-8462-dfcf11bde927"
        },
        "item": {
          "id": "d87f9d01-00b3-448d-9489-3f357baf6d8a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "060fe6ed-e4dd-4b31-b4b0-0348a9b36444",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3c673cec-50bd-421a-adcb-002b04b990ce",
        "cursor": {
          "ref": "bb0c66e7-9634-473d-a2d5-f335d703acb0",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1aed47d5-b929-4e51-abae-2f7ea7d710c2"
        },
        "item": {
          "id": "3c673cec-50bd-421a-adcb-002b04b990ce",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3ae16920-2f0a-4441-8f9d-c2f827749872",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c3841afb-a496-4c09-888b-4a727eeb3172",
        "cursor": {
          "ref": "1951a63d-2dac-4e9f-84ed-83e829cc9697",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5b8ce86f-d16b-411f-8c17-d2c3e3e882c2"
        },
        "item": {
          "id": "c3841afb-a496-4c09-888b-4a727eeb3172",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "dd60a675-bbf5-4393-b527-a206ba9b3f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648b20e8-93d7-437a-ac21-549de8669c11",
        "cursor": {
          "ref": "0bf19991-874b-49d9-b3d2-7a54b2036b87",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a91fa5ab-7fce-497d-b0a3-291dfdead083"
        },
        "item": {
          "id": "648b20e8-93d7-437a-ac21-549de8669c11",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "839fe53f-faec-4724-b416-9627a4ceb185",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "08556909-2f11-4608-a253-b142e495e640",
        "cursor": {
          "ref": "6d1023db-de88-4df9-9235-9e044703816b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e111dc21-ec3d-4edf-ba39-e88d0dbb4c43"
        },
        "item": {
          "id": "08556909-2f11-4608-a253-b142e495e640",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bc32f86b-b00e-4bd0-aa9b-f1a46002a1ec",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "fa92a2f0-583f-41b9-9bca-9252aa397fad",
        "cursor": {
          "ref": "4cfe003c-0dc2-4032-96d6-059d22a640d4",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5818560b-406a-4269-84ca-7edf21209fbd"
        },
        "item": {
          "id": "fa92a2f0-583f-41b9-9bca-9252aa397fad",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a2270f1f-c0b0-424d-b716-f3599f262231",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "da0768dc-774b-4898-863b-2343f894cc7b",
        "cursor": {
          "ref": "bd9e1978-5475-43ab-bbf0-19a27ad786f0",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a9b7a702-b941-4634-a0ad-9d0223f9357d"
        },
        "item": {
          "id": "da0768dc-774b-4898-863b-2343f894cc7b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a6d463e6-33f7-49dc-ba6f-4ae54cc9090e",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "febf6d54-83e7-435b-afa2-fc19cb5fd795",
        "cursor": {
          "ref": "0279e93d-06e3-4e0b-805c-a11928070212",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c1b33b8a-aa64-498d-9984-2e1ab9fff195"
        },
        "item": {
          "id": "febf6d54-83e7-435b-afa2-fc19cb5fd795",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8ae590e1-b48e-46a4-b1e5-e70ceb8ea3a7",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d33195a5-ccd8-44a7-8e34-24470a57fe64",
        "cursor": {
          "ref": "d3a9695c-82c1-4483-aeb1-85cf13f8681a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "30da032c-1b0a-42c7-8ec9-bd2396fd8f44"
        },
        "item": {
          "id": "d33195a5-ccd8-44a7-8e34-24470a57fe64",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "29791a1d-a0e1-48ce-8139-47be9fa64e30",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e4aeeef8-89c6-46f0-90d8-124dc71695c8",
        "cursor": {
          "ref": "5df0a6fe-b6cd-45a4-a264-ede252e48184",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7bde0c8a-ccce-4677-990f-b6c45580c5b4"
        },
        "item": {
          "id": "e4aeeef8-89c6-46f0-90d8-124dc71695c8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b743bdc8-7fa3-45fa-9200-ead5cc08590a",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "834e00de-f8e3-4564-9c26-a7b2db8a983f",
        "cursor": {
          "ref": "8c725674-7762-4cb0-90ac-ff9de4d17de9",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5050a538-d75e-45c7-b431-6c222542534c"
        },
        "item": {
          "id": "834e00de-f8e3-4564-9c26-a7b2db8a983f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ea1a9abf-0cb9-4461-843c-165d30fa09b8",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0bf2573a-815d-4423-9182-640ac96d87dd",
        "cursor": {
          "ref": "0ef4b506-ae72-4f79-9a93-2197f4a02760",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "07d5bbb2-eda2-470b-8653-9ed6630bdaf9"
        },
        "item": {
          "id": "0bf2573a-815d-4423-9182-640ac96d87dd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "abd19a0b-74ce-426e-83c6-7492c4c402be",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6a0d3700-75b8-4c7b-9df8-6e57e25dc73a",
        "cursor": {
          "ref": "ccf8ee04-a6b3-4fa0-ae62-0e425abf2ac9",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f476fa1f-6b32-4864-b6d6-03905e6d06ed"
        },
        "item": {
          "id": "6a0d3700-75b8-4c7b-9df8-6e57e25dc73a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f4fa758b-48c5-42d6-8d1b-8c558b8ea087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a377b7-e8fa-4b20-a18a-6d01540c5981",
        "cursor": {
          "ref": "d4d035e5-2605-4fa1-8b47-99b5219712bf",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d78bc1bb-117e-4163-866a-64c56f799fdf"
        },
        "item": {
          "id": "84a377b7-e8fa-4b20-a18a-6d01540c5981",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "08300986-7904-4d23-948d-e9b59f2b7381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65bf6b49-7faf-4c95-8a45-3542e6a3df1b",
        "cursor": {
          "ref": "33a8d2ec-d855-4863-a33b-e5973fd6ddee",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "53c1db8b-7e87-4e87-bc09-08e61bf2a00d"
        },
        "item": {
          "id": "65bf6b49-7faf-4c95-8a45-3542e6a3df1b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0bf69d19-6d3c-4a85-9aa6-38760db41635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c882a5d-cdaa-45dc-8ab2-b478962e2914",
        "cursor": {
          "ref": "28317675-309e-4fa6-8ee2-e06cb2d9c4a2",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e6eda8b1-a229-4474-b7ae-d68e166c3184"
        },
        "item": {
          "id": "9c882a5d-cdaa-45dc-8ab2-b478962e2914",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a14da5c2-d909-4c20-8e54-602b95456b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5e4feb-b21e-4d9d-968e-e1ce092de66d",
        "cursor": {
          "ref": "db059f84-0b56-4ee7-b1ff-1bdaad1fb4ed",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1a15f097-6472-4d68-8e81-06115d04cab9"
        },
        "item": {
          "id": "bf5e4feb-b21e-4d9d-968e-e1ce092de66d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "51de95b4-68ab-416d-b13d-63cc29e282b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d801e9d8-fddc-40fe-99f5-344cd797c73f",
        "cursor": {
          "ref": "2d394eac-8fc0-4069-8fd7-8539b1d74e1b",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2a33801a-7700-4feb-a2cc-e3e809610ee4"
        },
        "item": {
          "id": "d801e9d8-fddc-40fe-99f5-344cd797c73f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f60e8494-d895-4360-88b8-05bca0612470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e4a29a-771c-43cd-b0ed-d5fbe0b9514f",
        "cursor": {
          "ref": "c08a65e9-6524-4d7f-8ec1-e8031a02db40",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d5ab6b1b-2e3e-4421-b031-96e3598f62f4"
        },
        "item": {
          "id": "25e4a29a-771c-43cd-b0ed-d5fbe0b9514f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fa4d39e9-96ee-4ef5-b3c0-4fea0f891c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a4978a-2760-4c83-9165-06ad68fccb91",
        "cursor": {
          "ref": "25c83738-9ed1-4a9c-bcf0-bd60cafa634f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8eb31a1f-dfc6-47d2-bb7f-3c52d71aac7b"
        },
        "item": {
          "id": "d6a4978a-2760-4c83-9165-06ad68fccb91",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "70d49cb7-78d3-4d19-8199-a62ce5d4250c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdf8559-2ec4-4715-bbca-2c351a47c9c5",
        "cursor": {
          "ref": "10f1e3ff-29c2-44e9-a690-1e809348f0fc",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "259da360-af7d-46ee-ac72-24df0edea337"
        },
        "item": {
          "id": "5fdf8559-2ec4-4715-bbca-2c351a47c9c5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8b42b2ca-7625-43f3-a359-1bea6cbc08d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1344c25d-1d45-4083-a850-a6fb198730ba",
        "cursor": {
          "ref": "de460e63-26c4-4742-bd1b-d19fcf168600",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e7a465b5-3f5f-4a76-b8a9-8e7507195e94"
        },
        "item": {
          "id": "1344c25d-1d45-4083-a850-a6fb198730ba",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0f101699-7138-48e7-906f-5f0e5216b16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72749113-47eb-4d9f-a751-29550f1dbb0d",
        "cursor": {
          "ref": "d75feb19-a975-4608-9233-bdd4dc6d5f7d",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "27f4ae7a-b02e-4920-8b2c-7f9c1a4123b5"
        },
        "item": {
          "id": "72749113-47eb-4d9f-a751-29550f1dbb0d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a4eb3c20-f3e6-4489-9848-a16b6c773475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460e8dfa-d1f5-45aa-8030-a60bfef61c89",
        "cursor": {
          "ref": "5dc52122-21e1-4c04-98a5-b21c54711028",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "57276d3b-961c-4a19-a8b6-407ed89972b1"
        },
        "item": {
          "id": "460e8dfa-d1f5-45aa-8030-a60bfef61c89",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5da746bb-7485-426f-bf98-d5e4d1686883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170946c2-4619-4257-9209-0b063de6e969",
        "cursor": {
          "ref": "e824bea5-197a-414c-aa84-083c9b700ae3",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fdc7bd91-8547-43d0-9b02-ab91c60eaa45"
        },
        "item": {
          "id": "170946c2-4619-4257-9209-0b063de6e969",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8e99642a-d36a-4ba2-9391-4dbb3751930c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8efd164-2eb7-4db4-ba01-c6ca735a6575",
        "cursor": {
          "ref": "1b355d63-21d0-4e37-960c-d4948de651c4",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f3915758-423f-4aad-9396-12326260419a"
        },
        "item": {
          "id": "d8efd164-2eb7-4db4-ba01-c6ca735a6575",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6cb723d6-9e13-46b0-b346-eeeba770a5a8",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a89f814b-4b7f-4db7-a452-1e1737fbad55",
        "cursor": {
          "ref": "794c56c9-8705-4fd0-b645-a2ffb422959f",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b997d132-2ed5-4e8a-a9ab-ac1e0f196959"
        },
        "item": {
          "id": "a89f814b-4b7f-4db7-a452-1e1737fbad55",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "18ec8f98-ca66-4bb4-99ed-4fdaf1a57565",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "869ae852-54b9-4781-ad0c-6a6dd87d3991",
        "cursor": {
          "ref": "bd36c2d7-3e30-4c0d-b4cb-a9aed1f8858b",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d02fcef8-de77-41aa-a08f-9ef411a5bb0f"
        },
        "item": {
          "id": "869ae852-54b9-4781-ad0c-6a6dd87d3991",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "43f97e28-64a3-4763-82ea-d8dcbde5497f",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "395e17ca-5dd7-4f33-b906-59ee1ef86d86",
        "cursor": {
          "ref": "87078b81-eb1b-4af9-af67-147ad984ddde",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0bd942e5-5c4c-4e0f-9dc6-b31fe42420e0"
        },
        "item": {
          "id": "395e17ca-5dd7-4f33-b906-59ee1ef86d86",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "901a5a54-3183-4364-b5c1-0528d7be88a2",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "01c70c8b-75e4-48b8-8c82-c0939b890703",
        "cursor": {
          "ref": "5fbc8f79-028d-4d71-a3e5-b1b90da5d176",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3bdde5df-ee80-470a-885f-e57daa1ad2f7"
        },
        "item": {
          "id": "01c70c8b-75e4-48b8-8c82-c0939b890703",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a5eaf37c-773a-4b28-a050-3ac6639d8673",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "09d20eaa-4009-4d27-aedf-09700d99a551",
        "cursor": {
          "ref": "cc21f99e-21cf-4118-9f88-a81ef16711a2",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1b90461b-5170-4dad-a765-e511e93c0c6c"
        },
        "item": {
          "id": "09d20eaa-4009-4d27-aedf-09700d99a551",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8553f9da-8823-44e8-94d9-21a71a096799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d887271-9b53-4cbf-a097-7545d773fc8d",
        "cursor": {
          "ref": "591e7731-721b-41f6-b45a-af0334e81f04",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7df6ecd1-0f1a-46f4-b3c2-dbad4ccdf787"
        },
        "item": {
          "id": "5d887271-9b53-4cbf-a097-7545d773fc8d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4efac9d9-078b-4cbb-95eb-9df48120503b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85fa7c0-5f6f-47f9-b816-2e85684c8d3f",
        "cursor": {
          "ref": "a61c4300-371a-4dd9-aeec-c83e9b37f1df",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ac0b08c6-dfca-4c06-9b4c-87db1080aaef"
        },
        "item": {
          "id": "d85fa7c0-5f6f-47f9-b816-2e85684c8d3f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f99fc8d2-8133-4bde-91ae-5831ab807d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ae729c-ea28-49f3-aeb5-05553f886b84",
        "cursor": {
          "ref": "52147f42-064a-44a3-9a85-e6ebf4aec04d",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cf22c79f-6729-42f8-827b-023bac80167b"
        },
        "item": {
          "id": "13ae729c-ea28-49f3-aeb5-05553f886b84",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "248763c2-0dd5-4cc8-9f1e-7bce40e3d8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da33c6d-30d3-4a93-83f5-e4fde544fea3",
        "cursor": {
          "ref": "2714af27-370d-4c49-9363-6ff499159317",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d0821d11-6353-4b83-b4c7-e4a5cf288eca"
        },
        "item": {
          "id": "0da33c6d-30d3-4a93-83f5-e4fde544fea3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c9669c8d-155a-4dd0-848e-a9d7f13b9f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8a0087-f172-46c0-9c85-719875f8e872",
        "cursor": {
          "ref": "ae6e77f8-30f9-4070-a138-6d7b9cb454e3",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7e4ce500-5872-4308-94be-c9b37ca21c57"
        },
        "item": {
          "id": "6f8a0087-f172-46c0-9c85-719875f8e872",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "485fc545-8556-4bdb-87a8-2fb279043901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58278d85-6940-4059-bbdb-7938ba0cb9b4",
        "cursor": {
          "ref": "1438b59c-2a66-4a08-85a7-a47a419e36a6",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c6c18647-b806-4119-ae61-cacd9fa85a25"
        },
        "item": {
          "id": "58278d85-6940-4059-bbdb-7938ba0cb9b4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1e2e8365-a00f-4a35-b92e-8f91ac0df448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ddfa7f-fdbc-4a9b-b69e-76ba055c5fe0",
        "cursor": {
          "ref": "87c3e2b2-d30d-45c1-a3cd-472be4bd139b",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7539f0cc-bf64-4cb7-98ea-f1281f035a01"
        },
        "item": {
          "id": "c3ddfa7f-fdbc-4a9b-b69e-76ba055c5fe0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2db1e662-4d7f-4717-85eb-ab22a9181e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ce45dd-f20c-428a-8438-a4c5ba5efd4a",
        "cursor": {
          "ref": "6bf438b1-b6fd-48ed-af77-ba7c15ffabc6",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "29921c5d-e498-4c24-b361-d324bf5fbc3f"
        },
        "item": {
          "id": "a4ce45dd-f20c-428a-8438-a4c5ba5efd4a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4f55e431-32c2-4838-91d6-2de604a4b7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c297b0-add0-43ab-b54f-27a5950b06af",
        "cursor": {
          "ref": "6abae368-e779-4f1a-b894-bc4857cb1027",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "22eb442d-d820-4584-a2b1-4b73c5022e2a"
        },
        "item": {
          "id": "d4c297b0-add0-43ab-b54f-27a5950b06af",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d182e30a-0458-46d5-952f-c2480fad6bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ffccf7-a18c-4e39-ac80-48f486203be2",
        "cursor": {
          "ref": "dcdecc29-6f7f-49f8-a289-52aa87acc080",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5fe9ed24-16d5-44d2-9b91-77cc92cb3c69"
        },
        "item": {
          "id": "b5ffccf7-a18c-4e39-ac80-48f486203be2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3bbde264-4757-4917-a3df-ec7c9e8f18fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50710009-9373-494e-844a-f82ca256d7f1",
        "cursor": {
          "ref": "f7241f80-989f-4c93-9774-5d2f03faf0ef",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "40bdfb42-b783-457d-a226-cd0babba89a4"
        },
        "item": {
          "id": "50710009-9373-494e-844a-f82ca256d7f1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d3614202-59ed-4675-b0dc-b748b22c22b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb39b2f6-5606-4de6-be9f-98dc63599f0b",
        "cursor": {
          "ref": "e14bca00-2c45-48f1-9bce-90bc06b1020c",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "766557c4-159b-4832-b169-248553c0bee9"
        },
        "item": {
          "id": "eb39b2f6-5606-4de6-be9f-98dc63599f0b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "93127f7d-8451-4e13-b6f6-30af023bc8f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68155b0-8e9e-4c33-b54a-edf095cba6e3",
        "cursor": {
          "ref": "1d93b046-b9fa-471c-9519-99d6737dd198",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "32214902-3359-4d3e-9b17-3f7f3006c39b"
        },
        "item": {
          "id": "d68155b0-8e9e-4c33-b54a-edf095cba6e3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "676e4e10-09b2-45cc-8d05-d8be84faf920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff7d208-68e6-482b-9806-bed1ad14f9d1",
        "cursor": {
          "ref": "8a84a19a-7b34-4e0b-90e9-393b27947773",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f7f580ef-c50b-44e5-82fa-c60e7eb77932"
        },
        "item": {
          "id": "2ff7d208-68e6-482b-9806-bed1ad14f9d1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ca757f4f-1292-477b-9402-6d654ea195d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a1825b-ceac-43ae-88c5-3f8d1b8f59b0",
        "cursor": {
          "ref": "65e0e3fd-13a6-4185-b778-deb7961d77ba",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "584f2385-d463-4deb-82c8-b476059c3f68"
        },
        "item": {
          "id": "29a1825b-ceac-43ae-88c5-3f8d1b8f59b0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a78f9677-164c-4383-8435-2ec5f43409e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5b87c1-37ba-44a2-abcb-50815e0ce7f8",
        "cursor": {
          "ref": "25222f67-c526-40d5-ab35-80d756730b50",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "82b11481-dc9b-4421-a6e6-b98c38031cb9"
        },
        "item": {
          "id": "2a5b87c1-37ba-44a2-abcb-50815e0ce7f8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "dc501c41-4ce7-4bde-ac64-b65e103e9311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0671c9-8ea6-425d-99e9-74732a96c734",
        "cursor": {
          "ref": "3d671fb7-ff14-400a-9dce-045f0ec6f053",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "66b28e46-ed5c-428c-9f7a-b85ee577e2d5"
        },
        "item": {
          "id": "0a0671c9-8ea6-425d-99e9-74732a96c734",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1aaa9147-0eb8-4920-9c61-fc9cdeff332e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb6a603-1169-4d08-be5a-3cabc113c30a",
        "cursor": {
          "ref": "07b7e830-918b-4eb8-86d6-0cfbef22f68d",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9d186bb5-d9ff-4467-bc38-6697a61071d5"
        },
        "item": {
          "id": "9cb6a603-1169-4d08-be5a-3cabc113c30a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "20b5b24e-c476-47cb-b12d-8b9e261627a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92e8bda-735a-47e5-ba2f-b66fa1c972bb",
        "cursor": {
          "ref": "d57aa870-295e-430a-8591-adc8b6103b9e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "17c160f7-453e-4878-95c8-98074191f2ba"
        },
        "item": {
          "id": "c92e8bda-735a-47e5-ba2f-b66fa1c972bb",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "80f8a611-a5dc-4112-9668-2ef3b79da32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787e847d-77e8-480d-835f-05943596a1a4",
        "cursor": {
          "ref": "f5bed271-78cf-4e99-87c7-8a78ee13832d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d10aba6a-fcad-4618-9662-f59147cb93ed"
        },
        "item": {
          "id": "787e847d-77e8-480d-835f-05943596a1a4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "08c92792-00d5-4ab5-88d0-873c9565a1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac1f7e0-7e2a-4b04-912e-1546567743e2",
        "cursor": {
          "ref": "d8670b04-90bf-42fa-bd11-802351a216fa",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2c93cd98-30b5-4e55-80e3-3620bead0b02"
        },
        "item": {
          "id": "4ac1f7e0-7e2a-4b04-912e-1546567743e2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "22de5cac-800b-4f4c-95aa-ef2d82f58d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8943fc4a-46d7-4c63-b56c-d8507905c45c",
        "cursor": {
          "ref": "f21f5228-21e8-4c35-bfc8-213850aa8373",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3e61a3ad-0630-4ad7-bfe8-cfc4fb779262"
        },
        "item": {
          "id": "8943fc4a-46d7-4c63-b56c-d8507905c45c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f62b4688-6d28-40b3-ba80-e7be290b7503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1599385-4347-4d20-b72e-18533d5ef27e",
        "cursor": {
          "ref": "3df77c22-36c8-4aae-847f-d0196e43abe0",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c1544423-c774-439c-ba9a-8454b0964c66"
        },
        "item": {
          "id": "b1599385-4347-4d20-b72e-18533d5ef27e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ab92a1e2-47e6-40c0-8f0f-28db5ae48924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdc5a15-eadf-4d58-a0be-c58ff8c36a95",
        "cursor": {
          "ref": "1e4a54af-8202-4778-9025-81e612d1382f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4f1f5a6b-ab99-4e42-8dc4-841fa8e02f13"
        },
        "item": {
          "id": "1fdc5a15-eadf-4d58-a0be-c58ff8c36a95",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "831e972b-ff73-4cba-af19-daee12f98db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f754ef7-1dcb-43d8-8ebb-9b195ce04177",
        "cursor": {
          "ref": "e1db784e-d02b-40ae-8b2d-4c31c9fadf26",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "dd6278ff-548b-48aa-a5f2-ebc0326fdf2b"
        },
        "item": {
          "id": "0f754ef7-1dcb-43d8-8ebb-9b195ce04177",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b366570e-ecf2-4d00-a92a-1efef035c34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aced3a18-ca48-4287-9931-ffc1fdc2bb4e",
        "cursor": {
          "ref": "7c9acfd4-a0f5-4e19-9ebe-4e0186949082",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "31d7ae1e-a842-4806-8eb3-ea3c1479fc45"
        },
        "item": {
          "id": "aced3a18-ca48-4287-9931-ffc1fdc2bb4e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9100e013-8967-4efb-9833-1a5bdf196dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f565f79-c670-44be-9344-014b6d7f94b7",
        "cursor": {
          "ref": "e1a82576-ca38-4945-a321-0a93534b73f7",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a21db883-6545-4b6b-a2c7-bf699047bd64"
        },
        "item": {
          "id": "5f565f79-c670-44be-9344-014b6d7f94b7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b6a77149-5f96-4b15-ac07-707817fe3cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6e0892-437e-4faf-aa8e-8988146cc520",
        "cursor": {
          "ref": "ded96b11-286a-4f5b-8948-8378cca973be",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "efabe7e3-44f2-4bea-a90c-eedf735b9638"
        },
        "item": {
          "id": "eb6e0892-437e-4faf-aa8e-8988146cc520",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d8ad6804-bd3b-4099-8dcc-3c0173b83d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c7e45a-880b-4dc9-8245-fb48b4587677",
        "cursor": {
          "ref": "f6a6f043-d650-48b0-930a-209f9aba91f1",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0400450a-f82d-4e00-b6bc-796e4b2f0f44"
        },
        "item": {
          "id": "66c7e45a-880b-4dc9-8245-fb48b4587677",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7d2f2f09-b1ac-4d4f-a069-cd55cd577a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73148563-d30f-430b-9581-8dddcd0866c6",
        "cursor": {
          "ref": "035f102d-85c5-4121-adc9-2192900a972d",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d9f6b131-e4d0-452f-8830-e4443eef5759"
        },
        "item": {
          "id": "73148563-d30f-430b-9581-8dddcd0866c6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "22dcd614-c0b6-4a4c-a4da-f155e50ef8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8371b8-8c6f-408b-82f1-a0275189054f",
        "cursor": {
          "ref": "1c258580-8004-4d91-bf4e-5ee882fdd468",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "30ed11f4-c157-4a33-a538-65077359dfe3"
        },
        "item": {
          "id": "7f8371b8-8c6f-408b-82f1-a0275189054f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "10759d1b-b4ff-46ff-978a-a8b0b326e8eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8e0453-8174-46fe-a52f-011226632b1c",
        "cursor": {
          "ref": "845a4f89-3649-4743-a4d8-4907b41c198a",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bbf429ca-7ebb-4115-b850-0a55482d0f37"
        },
        "item": {
          "id": "0b8e0453-8174-46fe-a52f-011226632b1c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "2e569cd3-c0b8-4907-b8a3-eef4e0188d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "adcd4303-153d-41aa-88e9-66d226cc6977",
        "cursor": {
          "ref": "f12ce26d-ea04-4713-89b5-900cda074dab",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d8ea7c2c-2ee7-4450-a3a4-eff1213d2c99"
        },
        "item": {
          "id": "adcd4303-153d-41aa-88e9-66d226cc6977",
          "name": "credentials_issue"
        },
        "response": {
          "id": "aae1755c-517f-4f12-80f4-9dcb438340fa",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "04911dd9-eaf4-4eb3-bf74-47f0928872c7",
        "cursor": {
          "ref": "24516787-9ab9-42d7-9f1c-bd2fc72bcdd6",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b5b08980-782f-499a-8114-b8bf6ccb7e91"
        },
        "item": {
          "id": "04911dd9-eaf4-4eb3-bf74-47f0928872c7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "58e72bdd-067f-4759-8f3f-f34167cc0328",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "db10a5df-12a7-41af-8a06-7453d964597c",
        "cursor": {
          "ref": "3e69e570-19ea-44c8-add9-27c7ee0a4db9",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "052302b7-b725-4949-8603-8220b695931a"
        },
        "item": {
          "id": "db10a5df-12a7-41af-8a06-7453d964597c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8ec34818-f9a0-457b-83be-2572abf7102f",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f542c60-95b4-4296-b99d-d1e48ca6a550",
        "cursor": {
          "ref": "cb37ebcf-beca-46a5-a359-0e5ff2fbe267",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0d2a8e52-68b1-4f55-ae2b-3fcd769bf673"
        },
        "item": {
          "id": "7f542c60-95b4-4296-b99d-d1e48ca6a550",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f35b61d9-e747-423b-8c8c-e7c40284bb63",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d6188f-1755-4588-8e80-509c98fcf2a4",
        "cursor": {
          "ref": "b9bce306-2fd4-4d4b-8430-792df2d00022",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "327554df-7646-4d5f-bf1c-eddb0da0c034"
        },
        "item": {
          "id": "93d6188f-1755-4588-8e80-509c98fcf2a4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f24ef859-69fd-4aa3-b692-a14ae67b1bdc",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-26T00:34:40.884Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-26T00:34:40.884Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "94d7780f-3bc6-4bc7-aa1d-176635494f39",
        "cursor": {
          "ref": "8cb1c282-7cb3-4e0f-adc5-b2c44391c46f",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "79082502-413f-4845-aabe-3e5fa4a668ef"
        },
        "item": {
          "id": "94d7780f-3bc6-4bc7-aa1d-176635494f39",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "574baa6f-95cc-4008-9f09-1e9f204e6c92",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c89d018-8150-4873-9bd7-0121a94b1a8a",
        "cursor": {
          "ref": "165d9ad1-3d39-4a7a-a264-ae6cb5072ba5",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7dac8df2-3482-4998-b7a8-81daec8f619b"
        },
        "item": {
          "id": "3c89d018-8150-4873-9bd7-0121a94b1a8a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0eed6b7b-0022-4025-b4ca-88cddffa20c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fd8d61-293a-4734-bb4e-81d6b92d8f9e",
        "cursor": {
          "ref": "81e76d02-dd7c-4d35-8923-5e6a1857c969",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "88956dc4-4b0c-4fac-9d8b-47a7d1f787d1"
        },
        "item": {
          "id": "d2fd8d61-293a-4734-bb4e-81d6b92d8f9e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "83c21dfb-7ca6-4aa8-bd63-94d9b57a5c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0d2ecf-061d-4c58-b946-d8de41dad164",
        "cursor": {
          "ref": "d78fb202-e3f4-4a76-ab46-749c07b0712b",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "58f948bf-2dd6-4f8e-9c75-cdc0b8f4b484"
        },
        "item": {
          "id": "3b0d2ecf-061d-4c58-b946-d8de41dad164",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "20f58b42-45ce-4a86-986e-7d210a8aeed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42380f1-d8ea-497b-abcb-0890c934a558",
        "cursor": {
          "ref": "4dd874f3-2aae-4c0b-9160-ff979cbaf47d",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "10764ea6-334e-4618-9e4c-aa82ea92e9cb"
        },
        "item": {
          "id": "e42380f1-d8ea-497b-abcb-0890c934a558",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3bca26a9-5033-4cf4-ac09-87258cd778b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a01109f-0973-46ff-ae22-23709cb02229",
        "cursor": {
          "ref": "983181c0-f588-4e24-a91a-f315c654ed01",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "be6f2dc1-d5a5-4e94-8d1e-fca4d83ea29e"
        },
        "item": {
          "id": "3a01109f-0973-46ff-ae22-23709cb02229",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6166ec47-c169-47d1-89d5-81e3dfa6d95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93498578-5958-4cac-9d9b-b7e4eb740627",
        "cursor": {
          "ref": "a3c53b71-f257-497b-9390-6b8c519c7965",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5f32e134-a258-4648-847a-59d818281aef"
        },
        "item": {
          "id": "93498578-5958-4cac-9d9b-b7e4eb740627",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "48a423a6-59fc-486c-aaa7-d18cd349f3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826f96a5-992a-4b9b-86e4-b9be628e0da1",
        "cursor": {
          "ref": "a26aa1f1-976f-4a1b-aae1-e14164dc9803",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5cd0e9bf-8d83-4c6a-b896-e04d5c58d231"
        },
        "item": {
          "id": "826f96a5-992a-4b9b-86e4-b9be628e0da1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "44053f00-91f5-4b53-bd9a-5fadf64e4317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c64c20a-2b6d-47c1-ae0d-a47d87d8c3cf",
        "cursor": {
          "ref": "430e481b-329f-40c9-95f5-84de352faaaf",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "feca6ed3-e112-4b68-b88e-ba62b6e94226"
        },
        "item": {
          "id": "0c64c20a-2b6d-47c1-ae0d-a47d87d8c3cf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5118d2bf-4bce-4465-8c4c-025958785f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc25f390-3064-476a-b7e9-dd26809823f0",
        "cursor": {
          "ref": "d783fd5a-cffe-4613-a39a-4f20f7ce1a59",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "323b1162-c600-4c1c-b268-f9d4fc1cc98c"
        },
        "item": {
          "id": "bc25f390-3064-476a-b7e9-dd26809823f0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "96fa02f2-61ac-45a2-89a9-4e61087b8b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b033cea1-add0-4909-9399-00df25549e70",
        "cursor": {
          "ref": "7af135d2-eccd-4857-9cf4-3a927cb68a20",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f0188152-d0c4-420d-88e1-31ad6c5a8480"
        },
        "item": {
          "id": "b033cea1-add0-4909-9399-00df25549e70",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "578a935a-1c3a-433f-8042-8826429456de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422718e7-a88b-4ed4-877b-af54efc3bd01",
        "cursor": {
          "ref": "fa64264c-e0bc-4a4f-98e2-fa6b9c49f76e",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "847f4ea4-e456-4399-adf0-2609e6aca66e"
        },
        "item": {
          "id": "422718e7-a88b-4ed4-877b-af54efc3bd01",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a1a34bba-3ac5-41e1-ada2-a6976b894ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86cc6324-54cd-4752-81cb-657caa1bccad",
        "cursor": {
          "ref": "6a2bfdf8-6fc3-4252-a362-c20f3203f097",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4443c6db-5e63-47fc-966e-216db2c7290e"
        },
        "item": {
          "id": "86cc6324-54cd-4752-81cb-657caa1bccad",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ca9f7890-4b80-4b4e-88b1-aaf80c6e247f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c365c2a1-8dc4-4445-8c7d-89a8e8fdc381",
        "cursor": {
          "ref": "85f2ad62-20ec-422b-a7ad-964ffcb7e4cc",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c42cb85f-0d1d-406e-a145-e23277bd2d28"
        },
        "item": {
          "id": "c365c2a1-8dc4-4445-8c7d-89a8e8fdc381",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "42bdb505-85dd-40d7-9bc9-59f2d5fd881c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "76aa3d69-98d9-446f-8d02-cf077b28f0ac",
        "cursor": {
          "ref": "6be99215-8982-4f6b-a148-c6c8a0d5f88d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0c7b5c12-733d-42cc-b819-2112e588e537"
        },
        "item": {
          "id": "76aa3d69-98d9-446f-8d02-cf077b28f0ac",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7f0c065e-7c46-4aa0-9242-b62fb81d8874",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0b697541-9f83-4ea3-a30d-c50b4857a7e9",
        "cursor": {
          "ref": "3f983e67-ed32-4f68-8983-4f52af910539",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a6c1c6ae-3b29-49cf-8f90-6ec9569f7e38"
        },
        "item": {
          "id": "0b697541-9f83-4ea3-a30d-c50b4857a7e9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "99100e82-7fc7-45dc-b5d3-1dc14c052b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60239533-7716-411c-a922-f265036eb51a",
        "cursor": {
          "ref": "59d48a44-4dca-40e7-94b7-8a5993fbf343",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0cd6931c-6313-4faf-8942-9743cc8b86bf"
        },
        "item": {
          "id": "60239533-7716-411c-a922-f265036eb51a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bf215150-596b-4106-a5d2-e508730e2828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b49209-a15f-41ee-8294-5a3a75296377",
        "cursor": {
          "ref": "e4be5699-dacb-4b20-844b-0737757ae47b",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4e70e847-5bbf-4b92-a585-8264af2138d7"
        },
        "item": {
          "id": "78b49209-a15f-41ee-8294-5a3a75296377",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bec76c36-2100-4d24-8107-7de1bbe438a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a88505-3745-42cb-8f7d-e75e63c84e4f",
        "cursor": {
          "ref": "5ad0349e-0a88-4b6d-b583-00f498d46160",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0f929a08-f79a-4d57-9448-371c48cecc7f"
        },
        "item": {
          "id": "66a88505-3745-42cb-8f7d-e75e63c84e4f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a714417a-969f-49f6-ba46-e8719ebd1e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9129eaf6-ddf7-4e02-bfe3-7bd8e2240851",
        "cursor": {
          "ref": "e393311a-9b0d-4551-9be3-1004355b8e55",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f4ce8c86-6af3-43f0-8bc5-2fae86a16fc6"
        },
        "item": {
          "id": "9129eaf6-ddf7-4e02-bfe3-7bd8e2240851",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a5460b90-38f8-4563-9e8d-11191a3fa8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f512d1a7-bd2e-4f32-9bb1-ae43f07c0847",
        "cursor": {
          "ref": "17a01fe3-5e64-4e71-97f0-a3234b61c1ed",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "84e9115a-b644-4d27-b6f6-7457bccd0dbe"
        },
        "item": {
          "id": "f512d1a7-bd2e-4f32-9bb1-ae43f07c0847",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "32450c2d-dd6d-4449-83c0-06c4909eaa08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa5fd23-3741-43cc-a3ce-fefb8c50f0b1",
        "cursor": {
          "ref": "2e34916a-3ccc-4229-8c3a-9ca3a5900fce",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c7b8e184-72cd-4e90-91e8-0b02b5928993"
        },
        "item": {
          "id": "1fa5fd23-3741-43cc-a3ce-fefb8c50f0b1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c688474a-1c07-4728-86b7-ef23153dab0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565d7b46-57bd-4346-9815-8560c6432a70",
        "cursor": {
          "ref": "4fb66ddb-6aaa-4c34-9957-2f4caa46fdeb",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "61830cb7-c4ca-4435-ada7-690f88a98c8a"
        },
        "item": {
          "id": "565d7b46-57bd-4346-9815-8560c6432a70",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1afc79ab-b64d-43d9-8436-6707cd2387f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3115f768-2296-437d-a12c-b18ffc2aabae",
        "cursor": {
          "ref": "1833c8ab-dcff-4699-99f3-3803b6163b94",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "282be7d3-fe66-4769-a189-8935a7b1af95"
        },
        "item": {
          "id": "3115f768-2296-437d-a12c-b18ffc2aabae",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bb93cefb-c145-43d2-8fa7-8a8c8241201d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08cb086-3370-482a-82a8-3db6545d148e",
        "cursor": {
          "ref": "d8fd08b2-1676-4c31-bbb5-a35f2c42bf9f",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8a62d79c-3621-4eeb-8acc-75abaa468f7f"
        },
        "item": {
          "id": "d08cb086-3370-482a-82a8-3db6545d148e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b7496705-e8e5-4ace-94f9-b0cfc1434e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b982ef5-809c-430b-a214-6bc3751b7950",
        "cursor": {
          "ref": "2f21d091-ae42-4e7e-8365-7293f8b8196f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5ef2bb22-66ba-4ac6-9058-4e959644a1e1"
        },
        "item": {
          "id": "0b982ef5-809c-430b-a214-6bc3751b7950",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d9bf4d20-7314-468a-8ce7-bce29f776cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8fa3727-8711-420f-bdd1-6661ad004cfc",
        "cursor": {
          "ref": "d52394d4-8058-4f5c-982d-4b7335269ad1",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3fee3354-b93d-4325-84a2-716d24e4b6dd"
        },
        "item": {
          "id": "a8fa3727-8711-420f-bdd1-6661ad004cfc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c2733909-b2f6-498d-84f9-8f9b50fc7fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e6317b-54a5-4bdc-9695-32ed483aceb4",
        "cursor": {
          "ref": "f899f185-e746-46d2-960a-95cd3c43e153",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "34eac978-cff6-45bc-a6dc-ff6b824d1114"
        },
        "item": {
          "id": "c2e6317b-54a5-4bdc-9695-32ed483aceb4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d89dd865-5a16-4a11-ab8b-7486c57fa3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57167d67-4fc2-4b6a-895b-99313d68df9a",
        "cursor": {
          "ref": "48652937-5096-47d4-a92b-99eeb8fb9201",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ee7e5e9b-1d30-415a-9148-3493aead1b19"
        },
        "item": {
          "id": "57167d67-4fc2-4b6a-895b-99313d68df9a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9bf35efb-a332-46f1-8524-e15bc6e4bfdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71bbe00-81d0-46d3-9c54-1940f942f8b9",
        "cursor": {
          "ref": "b41e68f5-7565-4e76-9aa6-d1223f1355c6",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9221c6f0-5856-4e60-add8-ac7dbc52074c"
        },
        "item": {
          "id": "f71bbe00-81d0-46d3-9c54-1940f942f8b9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "764b8007-12be-4328-a4f2-2e89f5e2e05b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8c43e7-63b4-41d7-83ce-32a46f590c57",
        "cursor": {
          "ref": "d1671d71-2a0f-4065-bed2-412daf451f6a",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c0dd184a-adbf-4fcc-8976-e676580c62cd"
        },
        "item": {
          "id": "3c8c43e7-63b4-41d7-83ce-32a46f590c57",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b5b42a2b-d691-4ae8-b341-5fd880d7ef17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec15989-e9b5-4294-b0d6-770a568fa4c1",
        "cursor": {
          "ref": "b2ffafd8-f9c5-4ab9-9dbf-6d6dc43181d9",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "113e8d59-8aa5-4adb-8843-bab467b92fba"
        },
        "item": {
          "id": "aec15989-e9b5-4294-b0d6-770a568fa4c1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "15fd35ef-4acb-4315-9b2d-eb5065944eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190e77f5-b43e-49cd-a641-8cf019536947",
        "cursor": {
          "ref": "4650bd7c-f2b8-428b-8ee8-15c440296fcd",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "97c74ca3-4ed9-4c8a-afce-ad4a1260baa2"
        },
        "item": {
          "id": "190e77f5-b43e-49cd-a641-8cf019536947",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0d838408-c17e-4d87-b007-b624d927b918",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c70f8762-a4bf-4329-a51a-89cc61b90edf",
        "cursor": {
          "ref": "40302973-993c-4e3e-9fa3-925e918e37d1",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2ce98bf0-1768-49fe-b973-d8eaf9b5abff"
        },
        "item": {
          "id": "c70f8762-a4bf-4329-a51a-89cc61b90edf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5964842f-d944-4159-8c33-0dbfcaa6896a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02999572-7dd7-49ae-8f51-91b4be199258",
        "cursor": {
          "ref": "198e1dec-0ec7-4752-ab9a-216667da6998",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9cebc7ac-b8ef-4af9-a82f-fc4be4f495d3"
        },
        "item": {
          "id": "02999572-7dd7-49ae-8f51-91b4be199258",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4c66ea86-d323-4686-ae7d-2e8dbea0a894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a596bae-2385-45c7-818b-d553b265c9e8",
        "cursor": {
          "ref": "393b0c27-0a28-44c9-9cd0-d7140eebb1dc",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6eade745-6680-44a6-b0dd-532e7e334726"
        },
        "item": {
          "id": "7a596bae-2385-45c7-818b-d553b265c9e8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "aeb52ff3-9656-4ea0-b40f-906157101a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f258800-1f5b-46c1-93ff-93ae205c67f7",
        "cursor": {
          "ref": "086fa5a7-556b-4657-8985-f9f459d15816",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "17a5c6c6-c8bf-46fc-9eb6-9706dff8e6d7"
        },
        "item": {
          "id": "2f258800-1f5b-46c1-93ff-93ae205c67f7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3939fe86-59d9-4c1d-b3d8-226c0d7419fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b04466-40c3-4cb2-901d-be520a2b149b",
        "cursor": {
          "ref": "5ecd4346-efa2-4306-b3cc-3c89f241cad9",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d17f098a-ecf1-46cd-834f-fe13d79a37a5"
        },
        "item": {
          "id": "76b04466-40c3-4cb2-901d-be520a2b149b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a2ca2270-5ce9-4d02-a6e5-ee1690615abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62600eed-733d-4de2-b347-30e8ed05e8e8",
        "cursor": {
          "ref": "39943115-d467-4335-a62a-f1b62322d0fc",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "33a7325a-6ed7-4332-b88f-ca4375377d36"
        },
        "item": {
          "id": "62600eed-733d-4de2-b347-30e8ed05e8e8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3bbf95a8-d2a3-460a-8d4e-36e17baacecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf5205f-6b02-4fe0-8455-b886034d0192",
        "cursor": {
          "ref": "d0f7a9f4-6cfc-4e26-931a-db21d5a6f90e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "905b7c8d-506b-40b6-98f3-9ff508f48cdb"
        },
        "item": {
          "id": "0bf5205f-6b02-4fe0-8455-b886034d0192",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5f336d43-e1b0-46c8-8e09-16b1ea033a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3b228e-99da-40b5-af94-c11762a83163",
        "cursor": {
          "ref": "b7afdb1a-4a88-40ca-9020-77144636433c",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "32a4b5da-8f7a-409f-8dc3-c08876d88cc6"
        },
        "item": {
          "id": "3c3b228e-99da-40b5-af94-c11762a83163",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ca1e83dd-37cd-49a5-a965-a1142910b823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519d99cd-4403-4019-9cf5-b25a9fbbc390",
        "cursor": {
          "ref": "7577bfcd-90fc-477a-a9fe-57b8c31db7b4",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bbba50b2-7cc0-43c4-a545-08e0a8149eba"
        },
        "item": {
          "id": "519d99cd-4403-4019-9cf5-b25a9fbbc390",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7c59aa05-b415-4afe-b18a-a25b3c51980c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d4a5c1-560c-4aba-be30-931db4958c8a",
        "cursor": {
          "ref": "31826716-ddc6-45dd-9b0b-15a391c3619a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bf5b006b-9eed-4f71-99fa-b67f81ca585b"
        },
        "item": {
          "id": "17d4a5c1-560c-4aba-be30-931db4958c8a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c5327cb9-42ad-488b-aa29-ed6fc200f905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5679383-c58c-4d08-872f-a8b7b020df6d",
        "cursor": {
          "ref": "b5fe4358-8d87-45b8-8483-ea349369e49a",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "18a12f9f-2cfb-4525-8847-594262835f4f"
        },
        "item": {
          "id": "a5679383-c58c-4d08-872f-a8b7b020df6d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "87f952b0-c0c0-402c-9254-057ea88b16cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3d10ce-b541-48e2-b28a-37014aafda40",
        "cursor": {
          "ref": "1b25067d-05d2-41cd-afb4-52d8b2ad8a32",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "78fb2515-431e-475f-bebd-de13c0c392d7"
        },
        "item": {
          "id": "3a3d10ce-b541-48e2-b28a-37014aafda40",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "129f94ef-e4ef-404b-9c89-82f053f07e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781f5fd7-3572-4753-a697-42b38cc8029b",
        "cursor": {
          "ref": "bf8503b4-044f-4ccd-bd06-41af49a94fd6",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2899a8aa-570a-4744-9533-695e7ac227b3"
        },
        "item": {
          "id": "781f5fd7-3572-4753-a697-42b38cc8029b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4b96bd75-6082-462f-acf7-e62530ae30da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbfb6c6-e913-4247-8232-aaa82d2cbcb1",
        "cursor": {
          "ref": "1ca5fc7c-e613-410f-8c86-f4057af6f1b0",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "68245e46-d34f-457e-980f-4c5f4b826d72"
        },
        "item": {
          "id": "6cbfb6c6-e913-4247-8232-aaa82d2cbcb1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fb60f3fe-2dbf-464e-82da-9bd99c323dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41ab933-6400-434e-8420-13d8c3ad9c22",
        "cursor": {
          "ref": "92c5d529-ebed-4734-9934-163be93cb03e",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b6916153-000b-4c36-8691-32f65973652b"
        },
        "item": {
          "id": "b41ab933-6400-434e-8420-13d8c3ad9c22",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3b964de9-02cc-4868-b2f5-57680fa99722",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "4f323567-7ee9-4ab4-a0f2-f534a69d48ed",
        "cursor": {
          "ref": "b4d25c32-e65d-4579-8605-46f054c3a768",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "fdc69d0f-6489-4c76-9130-79e28a0a5157"
        },
        "item": {
          "id": "4f323567-7ee9-4ab4-a0f2-f534a69d48ed",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9b4a9353-4ada-45ca-82d7-4b2da8c1f6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c6312a-586a-4984-bd1a-9be13da813ab",
        "cursor": {
          "ref": "a1c5ecb8-07be-4495-b707-9922e368c142",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "56da3797-94d8-4521-83a2-bdf285055957"
        },
        "item": {
          "id": "76c6312a-586a-4984-bd1a-9be13da813ab",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1219728e-fef2-4802-9093-4961b9d970fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb73948-e427-4608-992e-9c2b86013a34",
        "cursor": {
          "ref": "411eb997-00ac-46c8-931d-6cf76bc9161e",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "10504462-86ca-48c6-b995-0ce56b106579"
        },
        "item": {
          "id": "ceb73948-e427-4608-992e-9c2b86013a34",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "295a5771-6336-4922-b1b4-ecb2044accc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f78289-f900-4c35-bf29-32ef9cf5495e",
        "cursor": {
          "ref": "7757f63d-b11a-4e36-8094-b0c31ea050b2",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "36b4a9ab-e656-445c-9f8c-8f9064f1e029"
        },
        "item": {
          "id": "04f78289-f900-4c35-bf29-32ef9cf5495e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1c2f28f9-be5f-43ef-b367-96fa9dba78b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d383c063-373f-4d2a-8484-d7fa47beb156",
        "cursor": {
          "ref": "d078dd0b-6546-4f53-93af-771aa2dc9a25",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0f668487-8632-402f-81e8-305d624ba1ad"
        },
        "item": {
          "id": "d383c063-373f-4d2a-8484-d7fa47beb156",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "33a98ca2-1316-4fab-b401-a15f089a6f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e527fcc8-70d9-4dcc-96fa-bb430fb33147",
        "cursor": {
          "ref": "ffaa8c89-ded8-4952-ad27-789cba4ff3ff",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "567d2d1e-5773-4238-8645-1dba75e2faef"
        },
        "item": {
          "id": "e527fcc8-70d9-4dcc-96fa-bb430fb33147",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c2546af4-ee3e-425e-8871-a72dda61da23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a34270a-1459-4456-b4c8-0a3b4a8e8f10",
        "cursor": {
          "ref": "f72e4ce6-3f29-47f7-9cb0-8f4002afe690",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "66b1cca6-4394-4ab3-9f70-7fe6280e90bd"
        },
        "item": {
          "id": "4a34270a-1459-4456-b4c8-0a3b4a8e8f10",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c191cb54-d922-442f-8ba5-ae82e1ff34e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc725a9-78e8-46b9-bfc9-f11621a32153",
        "cursor": {
          "ref": "024b8552-1935-479d-82ff-23f3db39a343",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "245a2eda-690e-4951-b006-0b8ea631cd43"
        },
        "item": {
          "id": "ffc725a9-78e8-46b9-bfc9-f11621a32153",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ced97381-b514-42de-9875-9433cb9260f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e5b137-252b-43b9-bb33-5d21f0afb831",
        "cursor": {
          "ref": "5dafca21-1c58-4b5f-84b7-1ab525a4b18f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "04859353-3520-4c8c-aa83-39206d2bbffd"
        },
        "item": {
          "id": "69e5b137-252b-43b9-bb33-5d21f0afb831",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "16b3a04f-ef16-4829-a4a5-59eb0840d5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60ac428-77f7-488b-95e6-f5ea898e1761",
        "cursor": {
          "ref": "0aac61da-e074-4beb-9709-c8b7d46ff51f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "205d6e78-4472-4f7e-849f-46df76c097df"
        },
        "item": {
          "id": "e60ac428-77f7-488b-95e6-f5ea898e1761",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c13a7532-9396-485f-aa0b-a4967099b2fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f828537e-30dc-45b0-8cca-182f781eb87f",
        "cursor": {
          "ref": "c65a125c-98e5-4e10-ace3-a698288612e2",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "89350e10-b293-4470-875f-13f31d1fcbd9"
        },
        "item": {
          "id": "f828537e-30dc-45b0-8cca-182f781eb87f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1d0a21f5-723b-47d9-96b4-9f453d4533ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c50d05-425d-4f6f-afb7-eecfe386a178",
        "cursor": {
          "ref": "93ab148f-4fa5-4f26-9429-56ca4d871e9d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0df5eb48-d682-4574-ae11-ffb8299866d7"
        },
        "item": {
          "id": "d2c50d05-425d-4f6f-afb7-eecfe386a178",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4b15e856-3c4a-4017-8e64-d6a515ef3f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad77948-6c13-419a-9b3b-dcf5310589ae",
        "cursor": {
          "ref": "a97cac5a-7cce-4822-ba92-4659b33ca56e",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6e71cc1e-b9c8-494c-a66f-d6f7bdca9eeb"
        },
        "item": {
          "id": "aad77948-6c13-419a-9b3b-dcf5310589ae",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a25467bf-fd7d-4751-8995-5ba9c410ca95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0599614b-7e4d-4ce5-81d3-30fd01ba2ad5",
        "cursor": {
          "ref": "cc6320ec-b6fe-4a40-9afd-d6bb01500ad9",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b1ef6010-f1a5-4425-a0e7-5499fe6c024f"
        },
        "item": {
          "id": "0599614b-7e4d-4ce5-81d3-30fd01ba2ad5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e941b8c7-432c-46ce-b2a5-d2b7bf9d670f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3b587f-0b30-4c07-a9f4-948a8c92d08a",
        "cursor": {
          "ref": "2e3884a7-0349-4e06-8d36-86962a3aa499",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8ee131dc-61e2-4a08-89c4-e6edb0824a5d"
        },
        "item": {
          "id": "3e3b587f-0b30-4c07-a9f4-948a8c92d08a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b7e2dd1a-59d4-4511-a2cd-651b37635232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd80e50-d742-4f33-9606-b2ebf737bea5",
        "cursor": {
          "ref": "3d4de332-96d9-4a74-bff3-eeb578848cd9",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0269ef22-bd98-4a69-a9d6-b8b8db83be35"
        },
        "item": {
          "id": "cdd80e50-d742-4f33-9606-b2ebf737bea5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a970d812-79ec-4440-b9b6-681192cf8f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44545c7f-b2c8-4737-90a6-eeb693fe5912",
        "cursor": {
          "ref": "c7aaba2c-48c4-49f2-8b25-474e3eb0c0c6",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d4ac17b4-93f4-4b9e-9586-89f70b7df643"
        },
        "item": {
          "id": "44545c7f-b2c8-4737-90a6-eeb693fe5912",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b9825cd7-d490-4e83-a283-c57b3aa253cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5ad293-2724-4f5e-9def-9f2afc565d68",
        "cursor": {
          "ref": "87977d76-b2fa-45b9-b8d4-97c16a309ed0",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7a1e5c7d-cff3-4e0f-8b54-17482970679a"
        },
        "item": {
          "id": "df5ad293-2724-4f5e-9def-9f2afc565d68",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ab2ce1b9-8f39-47da-b72d-c4d624942df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b920ba2-bfdb-49b0-8ea4-3c408cd83729",
        "cursor": {
          "ref": "42b4e526-eca7-4dad-8504-db0f3f3e2b07",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a8829523-4096-42f2-a7da-bbf55a3ff977"
        },
        "item": {
          "id": "9b920ba2-bfdb-49b0-8ea4-3c408cd83729",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "bc8f7ea1-4a9c-4c99-808f-a13afe6ec2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f27011e-0df1-49fa-9136-98382a831ba0",
        "cursor": {
          "ref": "dbd07993-14d0-4c00-bc3d-a96323f1479f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "73c11957-4e16-45e3-90db-cdcc3b2c03db"
        },
        "item": {
          "id": "1f27011e-0df1-49fa-9136-98382a831ba0",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c6544aa9-a11f-4fd8-a88d-d3ae2cad7aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a40da0-a9c3-4cbd-ba90-91208bacc6bd",
        "cursor": {
          "ref": "16c08caa-e22a-47fc-9536-5bbbb3ce24b6",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3844a23f-61e6-4be3-81ba-9d38409c3d7d"
        },
        "item": {
          "id": "62a40da0-a9c3-4cbd-ba90-91208bacc6bd",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5baa42aa-2b5a-487d-8852-141f252efc57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2beb1b-741d-414d-a260-13789d24baab",
        "cursor": {
          "ref": "823accf6-e1a0-4cef-bd90-1ed679fa5f36",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "764c06a0-662d-4d62-8e60-939eb8be42b3"
        },
        "item": {
          "id": "7e2beb1b-741d-414d-a260-13789d24baab",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4e387dc2-24a0-40f6-bffc-b8caae31025b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c14221f-23ab-41a5-87bd-746ffaaae8b8",
        "cursor": {
          "ref": "5077172d-071a-4f1c-9af3-15346a1e30c6",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fc6d0a57-5e51-424b-915f-62a54359db33"
        },
        "item": {
          "id": "0c14221f-23ab-41a5-87bd-746ffaaae8b8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "82af2032-4a7e-486e-8623-b6986f0f6a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cfe0e9-ace1-40d0-bf9f-e6cd3a56dc0e",
        "cursor": {
          "ref": "19b1aee9-14a6-4351-9152-61c6456ad0bf",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f77a01ae-9414-4bd1-8cc0-4f8524578c9f"
        },
        "item": {
          "id": "46cfe0e9-ace1-40d0-bf9f-e6cd3a56dc0e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fad70df4-0b9a-458c-a4a1-15d39bcea8c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271a2390-e9b9-4404-a258-ef303074ddd9",
        "cursor": {
          "ref": "7628a67d-ca6c-42f5-a635-4321f6503479",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e9abb95f-178b-49d9-9e0f-0d5cd80a7831"
        },
        "item": {
          "id": "271a2390-e9b9-4404-a258-ef303074ddd9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "14393083-2a4f-4ecc-8abc-1bf78fa9b74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13684c53-db8e-4159-bb8f-378b05f94c44",
        "cursor": {
          "ref": "9c8625e2-b9bc-4d1e-9f95-a3baa48c0479",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0f0e31cb-a9b2-43ac-8347-cfd3cd16140f"
        },
        "item": {
          "id": "13684c53-db8e-4159-bb8f-378b05f94c44",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8c6c06c5-292f-401c-a5e4-2e776102f83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf6a7c7-ceae-4b5d-a91a-a73841c1362d",
        "cursor": {
          "ref": "3f451150-8894-4688-a72d-19a446dcc180",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "732cdc31-a198-4c23-b349-1de9aee48453"
        },
        "item": {
          "id": "baf6a7c7-ceae-4b5d-a91a-a73841c1362d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6ea04bed-10ad-43ec-964c-e436b41c75ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2c4033-f40a-4327-82f2-0738b48ba590",
        "cursor": {
          "ref": "6e5485fd-49fd-4a7c-8532-71af1939ea4b",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4c0ae787-854c-4331-b4ac-025e388db6ea"
        },
        "item": {
          "id": "dd2c4033-f40a-4327-82f2-0738b48ba590",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2178dd58-5169-4698-bc44-f9a3558ce536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8302b6-c990-4a0d-a494-348d925172c1",
        "cursor": {
          "ref": "18d714c2-7812-4e97-a5ab-1a835853f083",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6d1312da-3afa-4910-a180-ba013efdeb96"
        },
        "item": {
          "id": "7b8302b6-c990-4a0d-a494-348d925172c1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "75dccc28-5bba-49a7-8b15-36a7386f20a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d07690a-9508-44a5-adc9-831d03df098c",
        "cursor": {
          "ref": "b7353e88-cc23-47db-b4b1-02690f4d4662",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "20a332ce-48cf-4abb-9a12-ac6a49f82db3"
        },
        "item": {
          "id": "4d07690a-9508-44a5-adc9-831d03df098c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "81c060fc-c88c-4fdd-b2da-1948d0403636",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "5bf9b24c-6f2c-4616-b02f-7666afefe88b",
        "cursor": {
          "ref": "91b71352-837a-44cc-b14d-9736b42cc237",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "af0190d9-cf08-453e-bf48-c76f59567755"
        },
        "item": {
          "id": "5bf9b24c-6f2c-4616-b02f-7666afefe88b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "773642d1-74f3-4c4b-8de8-82cbe1d990a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2dd44c2-8220-4cd8-a580-f535e377267d",
        "cursor": {
          "ref": "d8e9e71a-77fc-4e04-9c8a-2432f5866e31",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "be17e445-5188-4569-88f7-1c829bdbf738"
        },
        "item": {
          "id": "b2dd44c2-8220-4cd8-a580-f535e377267d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0a44563b-3f13-4c6c-8e0a-5c0a572d04d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d340e9f-c5aa-4ec6-ae58-d4d096d206c2",
        "cursor": {
          "ref": "1e8743e8-afee-44d0-8f58-5ee12471742f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0075803f-1e85-47e7-9f62-b70e10a462a8"
        },
        "item": {
          "id": "8d340e9f-c5aa-4ec6-ae58-d4d096d206c2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c3cae57b-21c9-45a2-8c9c-61e3bada2bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef9a8b5-2c12-4340-87c9-65238bd0450f",
        "cursor": {
          "ref": "ca81a576-ea6e-412b-b627-4741abff1410",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e88ddf7e-76da-4b22-aa8e-01779fa8628d"
        },
        "item": {
          "id": "8ef9a8b5-2c12-4340-87c9-65238bd0450f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "24db326c-a261-4875-9b8d-fbec317bdbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82075abc-158c-4c7e-a522-7ac339e8f4db",
        "cursor": {
          "ref": "7f3e46dc-f46c-483b-847c-6d7f3ce13eb6",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "344a41c2-92fa-447f-9dec-12118e1243e5"
        },
        "item": {
          "id": "82075abc-158c-4c7e-a522-7ac339e8f4db",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8fb34ebb-3582-4914-8d16-3f45d733276a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dced26ea-893c-4c43-9bd5-1f531f09181f",
        "cursor": {
          "ref": "dcd82baf-56e3-4095-99f2-b0bbe0c6adf4",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fbcc1b95-6fb8-4ce1-a0c8-b6638da535d5"
        },
        "item": {
          "id": "dced26ea-893c-4c43-9bd5-1f531f09181f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "36d32bee-066e-49e6-8a10-ef58cd93a08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ae3761-6c14-40eb-9fcc-e661dc2c7692",
        "cursor": {
          "ref": "648ccc6a-62e1-4bca-8218-0f880f885dae",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5ec4b3f1-e2e7-479e-b262-05980f45adad"
        },
        "item": {
          "id": "b3ae3761-6c14-40eb-9fcc-e661dc2c7692",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e68d85f7-929a-421f-a691-d32aa774f766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c816fc4-5549-4ace-a1f4-1d98c4ad87bd",
        "cursor": {
          "ref": "09985268-6f44-4f66-b79c-1fd823bcd74d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7f509fb3-2146-46c8-9e84-2eb1e987ee1b"
        },
        "item": {
          "id": "6c816fc4-5549-4ace-a1f4-1d98c4ad87bd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ab86a45f-8adc-4fee-8e04-f83b610264fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9099f03e-28a4-4622-b9b0-d3c2139403a4",
        "cursor": {
          "ref": "3c7eb4b9-ff15-4ea2-904a-49ce44c97d2b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "896843b9-3b58-4780-831f-8200d0312db7"
        },
        "item": {
          "id": "9099f03e-28a4-4622-b9b0-d3c2139403a4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2e056334-eb0d-4ceb-b610-34d877476cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9279cd8-3a79-48e7-8290-3b894fdc5a33",
        "cursor": {
          "ref": "91ab26a1-b2ad-4b3c-a873-95fc77ede856",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9f514bd5-2239-47d6-93f9-f75eb64cdb8f"
        },
        "item": {
          "id": "d9279cd8-3a79-48e7-8290-3b894fdc5a33",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fd50b4b1-9e3f-42a8-bdb9-a136b336cb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a2159b-8d1e-466c-a4dd-3928286da0ab",
        "cursor": {
          "ref": "88afe661-0e89-4892-a49e-0d9773bda15f",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b8f30a71-5d95-469d-b217-cdcb87722ac9"
        },
        "item": {
          "id": "48a2159b-8d1e-466c-a4dd-3928286da0ab",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "362ed78b-11ce-4fc2-8264-b3206b540f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46cb610-60ac-4d04-8804-0d224ee7d906",
        "cursor": {
          "ref": "cbe71505-6158-4fdd-8772-91b02d43d422",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8dcccfb7-8d91-4785-a408-210c55debc34"
        },
        "item": {
          "id": "d46cb610-60ac-4d04-8804-0d224ee7d906",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d5b4f2c5-9601-47b4-8f9e-5c5da5e1e8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9af6a0-11e7-4963-b440-bf88e703322b",
        "cursor": {
          "ref": "3119dcfc-456f-447e-bc8e-42c7562972bd",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7ca5dcd1-d2a0-4ac4-9d7e-a2478389d65a"
        },
        "item": {
          "id": "df9af6a0-11e7-4963-b440-bf88e703322b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1ed01b69-951a-4ddb-8760-320bde69cc36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a921d4-5972-40da-b101-d5b725cf0c00",
        "cursor": {
          "ref": "dcba9145-713a-494c-81dc-44c84f19de67",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c3fd4374-06b2-4d43-8c1b-5fcb9bf37f37"
        },
        "item": {
          "id": "c3a921d4-5972-40da-b101-d5b725cf0c00",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8440b5ff-5ee0-411b-b31b-4018723ec35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecbbe70-baf4-4775-b6de-434078897536",
        "cursor": {
          "ref": "1fd1013f-f1c6-4b9d-a4cf-60a44b0c5bc7",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8e0d58ce-dadc-47bd-9f95-be9069c315c6"
        },
        "item": {
          "id": "7ecbbe70-baf4-4775-b6de-434078897536",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9b2c7174-4f09-42de-aeaa-ed5aecbdb54a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7285a803-c3a2-448c-9651-db1ba039868a",
        "cursor": {
          "ref": "aba98921-3cdd-4a13-9308-194b1b02d7b5",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cd72dce2-adbf-4183-be9e-3fac6fd52601"
        },
        "item": {
          "id": "7285a803-c3a2-448c-9651-db1ba039868a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a5bdcec2-a53f-403f-a37e-9f274228d68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1fe514a-c790-4d40-96b9-78445b2c4bd3",
        "cursor": {
          "ref": "01ba153d-5bf8-4146-82ba-1d372feec9cf",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bf30284a-fbc4-4b3c-a8a6-1e0e39517612"
        },
        "item": {
          "id": "f1fe514a-c790-4d40-96b9-78445b2c4bd3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "88c1df26-6971-454a-8795-16bfc48131f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a663e3c-6aaa-4838-a434-c714b8b4c9a3",
        "cursor": {
          "ref": "aa394e1f-330a-4ba5-8a1a-801f2c501bde",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a2e7cee7-79b1-4905-9437-3dd872af92c1"
        },
        "item": {
          "id": "8a663e3c-6aaa-4838-a434-c714b8b4c9a3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f1e09fc8-d706-4461-9d32-a6e6b1c6f339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230172fd-ba21-4fbd-adc8-bac256c833a0",
        "cursor": {
          "ref": "071489e9-d543-4751-b35a-e309c072e824",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8c97003d-a7a8-4acb-8776-019bc941515e"
        },
        "item": {
          "id": "230172fd-ba21-4fbd-adc8-bac256c833a0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d278906a-01cb-4554-a78e-f13c9778dbd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa33f9d-73c5-49de-9cbf-ce1d06bc6266",
        "cursor": {
          "ref": "64289f22-dd68-4dd3-a43a-468b29a88791",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1c44f3ae-4cea-48ac-8309-96054bfa98ae"
        },
        "item": {
          "id": "8fa33f9d-73c5-49de-9cbf-ce1d06bc6266",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b8eb7868-f7e4-48c1-9ce0-18cd565271c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effc4931-59a9-4395-912a-8cc1f27ccdb9",
        "cursor": {
          "ref": "a5e3a648-33eb-467c-968e-a6268a7187aa",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4a8daba7-8195-48ee-b91b-ee2b8eae5eba"
        },
        "item": {
          "id": "effc4931-59a9-4395-912a-8cc1f27ccdb9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5f617d2b-6d52-481a-b700-0e43bb49f41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad909091-626c-45cb-b61e-cb632131cb44",
        "cursor": {
          "ref": "176a13a9-6bb7-4150-829d-4fcd538e3de8",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a8eca090-8e6b-4482-b9be-7462ad3f9189"
        },
        "item": {
          "id": "ad909091-626c-45cb-b61e-cb632131cb44",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c50c4412-1d55-451d-9457-63b02165e3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb74727a-7f45-4f21-a267-e25487ffb908",
        "cursor": {
          "ref": "f453341d-b7e2-4cdd-8e6c-0b85315c3ba3",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2bc729c0-72a9-4988-ada2-1f9b073eb17d"
        },
        "item": {
          "id": "cb74727a-7f45-4f21-a267-e25487ffb908",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0b1c93b6-10dc-47aa-99f9-771e03a51d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18e9af3-dbb1-4ec1-8fd0-0cd0b627186b",
        "cursor": {
          "ref": "67103469-a148-4d50-a3fd-86c3ca530565",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4f9ad4e5-7daf-4f9d-a2dc-42227338d5ba"
        },
        "item": {
          "id": "e18e9af3-dbb1-4ec1-8fd0-0cd0b627186b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cc51eab2-8d78-4f81-bbdf-79f793d6140e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d14ec6c-4e27-45ee-9103-2514e7523740",
        "cursor": {
          "ref": "b9884b3c-9941-4b35-843d-999ef929c601",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "addc3d3f-ee5d-495b-be9f-8de8749b1877"
        },
        "item": {
          "id": "6d14ec6c-4e27-45ee-9103-2514e7523740",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f916db95-dd3f-452f-a647-aba705fa3332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fdec54-8dce-46a4-aeb0-48f5095d0810",
        "cursor": {
          "ref": "af4fe232-3e28-474d-a238-df0cd9f24646",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8b1a252e-63a1-4efe-b310-05d78e26848f"
        },
        "item": {
          "id": "66fdec54-8dce-46a4-aeb0-48f5095d0810",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "69bdbd98-1945-4f2e-86cf-3ebbe6539e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a4886f-b8e2-41bf-872c-0ee35797b6b3",
        "cursor": {
          "ref": "8b6e9934-30bc-4898-bbb9-6c9777f418ff",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2195ee3c-aaed-487b-a0fc-3f35d269da37"
        },
        "item": {
          "id": "d9a4886f-b8e2-41bf-872c-0ee35797b6b3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f0fd1c8a-f56a-430a-b43b-ab52c9161e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8298ef3f-2eaa-4818-b1cf-4dff1994aadb",
        "cursor": {
          "ref": "c5358d42-ff79-4a63-ab00-9ca6d1fe9ad4",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "581bffa8-a3c2-4d77-930c-53a008c6dc83"
        },
        "item": {
          "id": "8298ef3f-2eaa-4818-b1cf-4dff1994aadb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5fac89d7-ec94-46b8-88b7-eb449090ef55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311a9045-326e-4d1c-8444-9a2ba81b8d78",
        "cursor": {
          "ref": "aabc0688-9d2f-4bac-a46d-0b447d5bd921",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e2e8117b-1ac0-4f14-ae07-325dc3ea0d67"
        },
        "item": {
          "id": "311a9045-326e-4d1c-8444-9a2ba81b8d78",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1601a34c-0081-4706-a949-f7aa4c1117ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247bc618-eddc-4b02-b204-7951ffec4059",
        "cursor": {
          "ref": "ba7cedb7-2461-41bf-a78f-aed90111dbaa",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "993b5ed4-4ffe-401b-86f2-19d59877bbb5"
        },
        "item": {
          "id": "247bc618-eddc-4b02-b204-7951ffec4059",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "99537644-d59b-4f4d-914b-18a59e4352ea",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "dc47e50d-b82b-4098-913f-66275673595f",
        "cursor": {
          "ref": "43776a5d-af4a-4e4a-928a-9e4e4758c30e",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d8755eeb-f4ad-43a0-ad86-3e14717a6867"
        },
        "item": {
          "id": "dc47e50d-b82b-4098-913f-66275673595f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ab3d76b6-417e-4740-be9c-67a0ef1dda4f",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "1e37389c-2fe8-48f1-8aeb-3fc87c0ce2c2",
        "cursor": {
          "ref": "385e0175-6382-4624-b5d1-39405bbc56f9",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "835beaeb-a127-4206-afda-74d689f6f948"
        },
        "item": {
          "id": "1e37389c-2fe8-48f1-8aeb-3fc87c0ce2c2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fdb171af-9187-47bd-ac53-3fac670a4ee3",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "3004a5fa-7c98-4b7d-bc95-122dfa293e73",
        "cursor": {
          "ref": "9d023954-ca25-4bba-aca3-e7acfff0d77c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "29ec6093-c455-48dd-963b-83c0fe9b6d85"
        },
        "item": {
          "id": "3004a5fa-7c98-4b7d-bc95-122dfa293e73",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "51052d74-345d-4fd5-82d6-c8ee99129c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b6bb31-600f-4945-a423-46b4cd13da31",
        "cursor": {
          "ref": "0c10fef1-e5d1-4afc-9385-7e85f8ea5f53",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ea291bce-6e61-4c6b-a360-c7e82eb2e3cc"
        },
        "item": {
          "id": "38b6bb31-600f-4945-a423-46b4cd13da31",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0bde9a58-9d96-4052-ba1c-226b58ec0e8c",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "5e25452d-a125-46b4-b355-042a51d6b628",
        "cursor": {
          "ref": "7d8270b2-dde1-47be-94a6-c38889dac989",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "75488e26-d137-4889-8981-cb7eef6417fa"
        },
        "item": {
          "id": "5e25452d-a125-46b4-b355-042a51d6b628",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ec8e151d-d62e-4210-8995-70418d3c6c2f",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d84ac538-1c37-4aed-b1ca-f41b6f3b3df7",
        "cursor": {
          "ref": "b911f864-4158-4a46-8063-33f0c8d411ad",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f15b4018-a27b-462d-bcb4-3418ce6af1c9"
        },
        "item": {
          "id": "d84ac538-1c37-4aed-b1ca-f41b6f3b3df7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d9216012-0d20-4513-b969-4e3870909941",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "51e2ec4b-a6d5-42e0-a8b3-3e0e1ffe2825",
        "cursor": {
          "ref": "e216c080-0375-4205-af37-c778cd3db22b",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7aeadd8a-df74-4f66-b87f-4ef584785535"
        },
        "item": {
          "id": "51e2ec4b-a6d5-42e0-a8b3-3e0e1ffe2825",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "03c0c899-85d9-465b-97bf-bba9647ed30b",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a6ac7223-6567-49d9-91e6-b88213c786ea",
        "cursor": {
          "ref": "0c1ef94b-f151-400f-9b17-c4c201a0149f",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7301fc72-51bd-49ad-8eb4-85b9e2971e33"
        },
        "item": {
          "id": "a6ac7223-6567-49d9-91e6-b88213c786ea",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "decc1abf-2d43-42f3-8a5a-170e4f2f179a",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "13ca9de3-ca33-4d6f-a023-e8492caf496f",
        "cursor": {
          "ref": "60a61bc8-e82e-4152-b99b-2015483ed5ac",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4cb4da93-1261-46c1-84d0-3bc4bb102164"
        },
        "item": {
          "id": "13ca9de3-ca33-4d6f-a023-e8492caf496f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cd2f28db-1ee5-4e04-89b7-17a5bb0c1b3e",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e3519b00-8ef5-4d4f-8aea-3590e46855d1",
        "cursor": {
          "ref": "207ea9e6-8659-4245-afae-d9eadc90f32b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "381eb2cc-8dd1-4ac8-a9df-3495aec54e5f"
        },
        "item": {
          "id": "e3519b00-8ef5-4d4f-8aea-3590e46855d1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1bc40c2c-f9d4-461b-a39e-1c2734a12987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6606f510-a0f2-4dbe-9395-a650632216cd",
        "cursor": {
          "ref": "3f36e5d0-af09-49ff-a292-407fdec132e1",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f8ff3e00-8600-4984-b707-987928228f74"
        },
        "item": {
          "id": "6606f510-a0f2-4dbe-9395-a650632216cd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "037b7a82-9807-411d-8652-881238f05c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1717926f-c4bf-4f81-a692-18dad08a407e",
        "cursor": {
          "ref": "0e235bb7-219b-4234-9fa1-46b3733e046c",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ad593318-4cfc-48dd-9b78-b81f649923b7"
        },
        "item": {
          "id": "1717926f-c4bf-4f81-a692-18dad08a407e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "76de8a32-2296-450f-857e-c07f859e642c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70af9b4a-3691-4a31-a2ef-aa43855adad5",
        "cursor": {
          "ref": "ec3e8e77-34ad-45f6-9218-f4bcf7d7f8bd",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6286e56c-020b-4df9-9063-4a68e833c2b7"
        },
        "item": {
          "id": "70af9b4a-3691-4a31-a2ef-aa43855adad5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fb11217c-6305-4cb3-8420-7b2efe95d477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ae4dfb-6f0e-45c4-a44f-5fe113f46714",
        "cursor": {
          "ref": "9d04881a-d2be-4797-8ec7-3fba083cfed7",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b62f8887-f0e7-4b79-8182-dc0a3e891535"
        },
        "item": {
          "id": "b9ae4dfb-6f0e-45c4-a44f-5fe113f46714",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "52cb9322-41db-4bb9-ab4b-0443c1458472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51a4db3-4153-422f-84f5-a57558ab8226",
        "cursor": {
          "ref": "c43384dd-2243-4cb5-9732-53f686185bd2",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "400dcc9c-1578-494a-ab43-589f861fdcd8"
        },
        "item": {
          "id": "b51a4db3-4153-422f-84f5-a57558ab8226",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b375a9be-4291-4f90-b726-eeb17ef1bbfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d58f14c-ce0f-4ad2-9ff1-dff85b87941f",
        "cursor": {
          "ref": "a0fdf15b-6111-45f0-ad8e-e8598565958f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0cde1e71-c1bb-4b20-a3c2-81c35739cdaa"
        },
        "item": {
          "id": "5d58f14c-ce0f-4ad2-9ff1-dff85b87941f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7ac3e7ad-ca13-4887-bb8a-730da87f95ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff79c1e-15da-4da7-9171-9d4c653d1c70",
        "cursor": {
          "ref": "c32ee7fc-e42e-4e8c-8d9a-c9ce2417abc6",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1417018b-e7e4-4604-a704-7650e50ed19c"
        },
        "item": {
          "id": "6ff79c1e-15da-4da7-9171-9d4c653d1c70",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "061d8ed0-0582-4e5a-821f-fb09696c9f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfa973b-034d-404d-8a29-6043ce77aa6a",
        "cursor": {
          "ref": "15e71248-ae20-4586-bc0e-c70ad5624a76",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3b0c89a3-7852-45da-bc2f-c03c2bf0f673"
        },
        "item": {
          "id": "3dfa973b-034d-404d-8a29-6043ce77aa6a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0f53a1d5-c26a-4608-bf3f-5e125bf456cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce4bf82-bd0f-4317-a6d0-0548eef61ca8",
        "cursor": {
          "ref": "7d3a85f0-8763-4012-ba69-1995179c9ab2",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "099e31f7-776b-4bb1-a116-ae8265c13f5b"
        },
        "item": {
          "id": "2ce4bf82-bd0f-4317-a6d0-0548eef61ca8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "545f77e6-d903-4be7-a668-35eb20718d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8b53f5-fd4f-46ee-b3d4-90758ece2826",
        "cursor": {
          "ref": "8850ce90-f2ff-4ae1-a70a-a4b2a1f33949",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3389402c-d63d-476e-92f8-aded96991a7a"
        },
        "item": {
          "id": "5f8b53f5-fd4f-46ee-b3d4-90758ece2826",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bbc8678a-9209-46b8-94a9-17d60845f8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99eff01e-eb0b-422b-977f-b8a7c6a5e2f9",
        "cursor": {
          "ref": "a3f03c18-4bd9-47c5-8216-1d06565863f6",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "616cb2b2-6683-4bb1-bdb4-b1cff5a6a19b"
        },
        "item": {
          "id": "99eff01e-eb0b-422b-977f-b8a7c6a5e2f9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "33cabe81-498f-478f-b555-276bf67d2db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08974244-a2ec-469b-bf74-84ce3a7a5779",
        "cursor": {
          "ref": "cca42045-dc5c-4e8d-b474-413cb2834407",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9d29dcc6-5e87-4efd-80a8-f0bf5722169d"
        },
        "item": {
          "id": "08974244-a2ec-469b-bf74-84ce3a7a5779",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "632150a8-f6ab-4282-9028-d67a4b661f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4201b242-a9c8-4248-81ae-18e944ff730b",
        "cursor": {
          "ref": "0224f124-0b1c-40e9-9ab1-7d6043ed5602",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ff0b5101-95fc-44db-9a40-3cbce1e81901"
        },
        "item": {
          "id": "4201b242-a9c8-4248-81ae-18e944ff730b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "712e8f9a-7264-447b-a3bc-fe6c96073d13",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "9aa33848-6747-43ff-bd63-875338f573aa",
        "cursor": {
          "ref": "9544da2b-641c-46e0-8760-8ce243322519",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fc27a4a6-91aa-4d00-9c4e-3d0cc8a3a4c1"
        },
        "item": {
          "id": "9aa33848-6747-43ff-bd63-875338f573aa",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "221dfe5d-23db-4f4a-a0ae-0ebfed0c9f6f",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2aacce13-3e4c-4866-aad4-ce0ed958be85",
        "cursor": {
          "ref": "07a04533-ef66-40eb-b9eb-7218c98e1f09",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9091dd69-39e2-4f64-8b0d-ba300d0ddd7e"
        },
        "item": {
          "id": "2aacce13-3e4c-4866-aad4-ce0ed958be85",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "14f6031b-4298-47a6-a5e7-66e6e5988278",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "45446027-61c0-4fef-8e07-0c1d66bb81e6",
        "cursor": {
          "ref": "520a113a-5076-4119-ab7b-055b37987f55",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b9178c3f-2e8e-4be3-9ef2-493ef124a8b1"
        },
        "item": {
          "id": "45446027-61c0-4fef-8e07-0c1d66bb81e6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9c6250f6-f51e-4d23-9571-cbe21b320bf2",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5472302b-6bb6-4dc0-a2f2-8353c7270fbc",
        "cursor": {
          "ref": "3c3e3418-9115-40f2-be5a-539d206a070c",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "565fa350-5875-454f-af5c-30a1a81823cb"
        },
        "item": {
          "id": "5472302b-6bb6-4dc0-a2f2-8353c7270fbc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "736b5344-3046-4395-bdb2-02ba12a34e00",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b3938a42-c7bc-427f-855b-c9650f014bf5",
        "cursor": {
          "ref": "51b2f3a2-c631-43ae-80a6-15c29e29dd7c",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7e60ec0d-056f-4471-8338-091610b76611"
        },
        "item": {
          "id": "b3938a42-c7bc-427f-855b-c9650f014bf5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "78a6a0bd-bb2b-4205-bf4c-60a49ce93092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69ee9bc-6337-4663-9d81-a2a87dbc3056",
        "cursor": {
          "ref": "dd14272f-8658-4413-9e33-adc920f4837c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "80d37297-7b15-4dd5-97a4-405b15cdff02"
        },
        "item": {
          "id": "a69ee9bc-6337-4663-9d81-a2a87dbc3056",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c60c7833-49f4-4e03-a4ba-818f5e71585d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afff21f9-799e-4490-b77f-e508cd4133c8",
        "cursor": {
          "ref": "35234e7d-6f67-465d-b90d-be7a74194766",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "25e66ccb-cfb7-4889-80e9-f94f48f01d12"
        },
        "item": {
          "id": "afff21f9-799e-4490-b77f-e508cd4133c8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6ccb4636-0f1b-451d-8ae1-bee0736c2371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623ec8e8-5a0f-49fa-b861-828ebb0880c8",
        "cursor": {
          "ref": "b05d1c83-2642-4d3b-beb6-e5b0245eff9b",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f222a3c3-fd43-48c3-8170-1a171f88e7ee"
        },
        "item": {
          "id": "623ec8e8-5a0f-49fa-b861-828ebb0880c8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1c20fcd3-f897-43cc-ad94-2374fde28fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2869af9-1134-4ca4-a9ff-9a44db6a982e",
        "cursor": {
          "ref": "f78a0c9b-1a62-4094-b099-2aa5d4c14cfa",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3ec43bda-52fb-4c8e-96b7-cdb427343bc9"
        },
        "item": {
          "id": "b2869af9-1134-4ca4-a9ff-9a44db6a982e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8b2a3830-09dc-4c1b-b478-760f626b7535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45810a34-d061-4d01-94d4-6066315c8c41",
        "cursor": {
          "ref": "090a0454-0f67-45d8-9fac-09b7a737ded8",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bc68aa05-ac5a-41e8-91b8-252bccc28b76"
        },
        "item": {
          "id": "45810a34-d061-4d01-94d4-6066315c8c41",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0df8cdd1-fc44-4545-9567-976c22f8b715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154b2ce7-7b28-4a2e-90a4-a20ed4940dab",
        "cursor": {
          "ref": "96dbf9b1-aba0-4390-9465-79eb9307f896",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "22dc68e8-ce0d-422c-a334-7c927309fe98"
        },
        "item": {
          "id": "154b2ce7-7b28-4a2e-90a4-a20ed4940dab",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8d713673-f3db-4f61-8e89-bc4f7ebacd69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473fc478-306c-4cb8-9e6e-6335fd14ff1c",
        "cursor": {
          "ref": "f72f535d-5be4-45eb-991f-3f125371fef1",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c0d7e523-703d-4d48-b48e-c78071fb111b"
        },
        "item": {
          "id": "473fc478-306c-4cb8-9e6e-6335fd14ff1c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f8e67e4e-6d6b-4ec8-8ccc-6b0eafe0209c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7577f6c7-a534-413f-8889-4c218a5fd623",
        "cursor": {
          "ref": "78706515-c33c-44af-98ac-30ec00a2be3e",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c4c49791-8da4-4995-a085-842dd4764417"
        },
        "item": {
          "id": "7577f6c7-a534-413f-8889-4c218a5fd623",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7b8f242f-1ba4-46fd-94e0-0654e799283b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc77fcdd-908c-40c8-93bd-20919e2f868d",
        "cursor": {
          "ref": "892a1c9a-e4ce-4e89-897d-0ebd93cfab26",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c229e724-05a2-461c-a559-d784f3477e84"
        },
        "item": {
          "id": "fc77fcdd-908c-40c8-93bd-20919e2f868d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "625c7fce-89a9-472e-a6dd-49101afca8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574f561f-96eb-49d0-87ea-006bc2424d0c",
        "cursor": {
          "ref": "f1bc7420-93a2-41f4-8787-1f6b5eb86bef",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1ec77d49-1eeb-4266-ab9a-80bd85a5bcc1"
        },
        "item": {
          "id": "574f561f-96eb-49d0-87ea-006bc2424d0c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f63d5686-b1f8-4e34-8854-16055ba7aa8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03957c5-a118-40b1-846f-db23e5936e23",
        "cursor": {
          "ref": "97e7bf13-1fe0-4b4c-b9b7-f56281d5dce9",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9e907269-c087-487e-831c-5e3b6e91eb08"
        },
        "item": {
          "id": "e03957c5-a118-40b1-846f-db23e5936e23",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6dd77d63-cb8d-46dc-b2da-dbb89fe44b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c41459-847a-474f-bca7-af1f01d77d89",
        "cursor": {
          "ref": "27789d11-f995-4aa7-8424-fe89bed1388b",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "aa3eeb3a-9845-4263-af40-0493a6d98cac"
        },
        "item": {
          "id": "a0c41459-847a-474f-bca7-af1f01d77d89",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6aaaa099-b880-41e8-8622-23caad495c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49087e3-d1fc-4ca6-a09a-f90fe0caec3b",
        "cursor": {
          "ref": "331e74be-c5ad-499d-9581-699bd69a88f3",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "20394f72-dd82-410b-a8f5-fb10319a94d6"
        },
        "item": {
          "id": "f49087e3-d1fc-4ca6-a09a-f90fe0caec3b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9790543a-b85b-43b3-b5f5-7235faebcd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063a98f6-3d6c-4235-9291-37385b4ea1cb",
        "cursor": {
          "ref": "18f258c1-a2e2-4cc7-9f9e-7c27f6406df6",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "87fb0c34-1715-45cd-a270-b7079be88c6c"
        },
        "item": {
          "id": "063a98f6-3d6c-4235-9291-37385b4ea1cb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b5b46a6e-a699-4418-a5da-f96f84f8653c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1eb159-1491-4c80-b102-8f5869ae79b7",
        "cursor": {
          "ref": "383c4006-c382-4c3d-beb2-3a7c418d9282",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f20ee298-1cfa-42ba-a5b5-11c7fd811d33"
        },
        "item": {
          "id": "3b1eb159-1491-4c80-b102-8f5869ae79b7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f2bae1c5-e2c5-4c35-8b23-eaf303650cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8c22a6-7484-458f-b86d-f72af0a6c4b4",
        "cursor": {
          "ref": "c62a2a8c-f970-417e-a727-d2b14f7b61d9",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8ab48376-f45c-4e7c-8790-fe0b6a8f8ddd"
        },
        "item": {
          "id": "2b8c22a6-7484-458f-b86d-f72af0a6c4b4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8d3fc4a1-841e-4189-beb9-86aff17cccf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b3fa35-bb0e-4737-aa5f-278b4f3cf274",
        "cursor": {
          "ref": "d280ae53-1067-471d-9efc-a76b9ad667a6",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "9be1794a-ef91-4b66-b0bf-bef2dfcd634d"
        },
        "item": {
          "id": "d9b3fa35-bb0e-4737-aa5f-278b4f3cf274",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d8f228b4-2dd3-4750-aa0e-59ca9ed30705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72253b70-1255-47d9-9bce-f28d36a98632",
        "cursor": {
          "ref": "07e1abea-b2f2-4e1f-8573-ed199d38b599",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "2a76da9a-ed1b-4fed-ba82-cb59a6ba5bb6"
        },
        "item": {
          "id": "72253b70-1255-47d9-9bce-f28d36a98632",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fbf8958b-1958-4a13-9206-c4a02e6e5ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212cddfc-4f7a-4cb5-9542-aea2b0f8523f",
        "cursor": {
          "ref": "49c0a554-81bd-4ca9-aeed-4d210c87abec",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3e4b7867-a165-4cfb-80e4-837c3b155931"
        },
        "item": {
          "id": "212cddfc-4f7a-4cb5-9542-aea2b0f8523f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "90a29465-43a0-44ba-a6e5-6142f4ea3045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9ee181-ec34-4ef1-a32d-d4b3ea8c7a39",
        "cursor": {
          "ref": "b3174b45-325b-4729-a27d-dc0d6eefaf78",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ed274b91-690e-4809-985f-5edb96d11337"
        },
        "item": {
          "id": "9b9ee181-ec34-4ef1-a32d-d4b3ea8c7a39",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "da6c9d23-01a8-40b6-98e0-f64166935031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b05e69-96b8-4354-adb9-397d89e942b0",
        "cursor": {
          "ref": "5033684d-8443-4534-8b37-8d93c3fbf941",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "08025dd3-af8e-4bd2-b7e3-cb9710c3813a"
        },
        "item": {
          "id": "79b05e69-96b8-4354-adb9-397d89e942b0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ff0dbf85-2c43-498d-8b5f-64e45e023065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9332c45b-04e7-4593-ac2e-0940791e09d9",
        "cursor": {
          "ref": "d6fa27c7-6bf4-4cab-bec6-68a9c2313e26",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "faa3c2c8-e428-44a9-a57b-9bf3f8a73613"
        },
        "item": {
          "id": "9332c45b-04e7-4593-ac2e-0940791e09d9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fee5153d-d37e-483b-9b02-bba4c3a8ccc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51485135-e656-4460-bf6f-cd97d4f60bce",
        "cursor": {
          "ref": "b8660d26-a0c6-408f-8fa1-5b40eefb31f8",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f6515197-2573-47a1-9a09-c208ceda2a41"
        },
        "item": {
          "id": "51485135-e656-4460-bf6f-cd97d4f60bce",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1ccaeac6-e472-4831-865c-ca8073ef515b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85094a22-e883-4a65-8b51-91b9e694b43b",
        "cursor": {
          "ref": "a690003c-f798-48d4-86ff-12b59e4f2b74",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "625238e7-5b6e-4730-a2d7-d7b1c4e39e52"
        },
        "item": {
          "id": "85094a22-e883-4a65-8b51-91b9e694b43b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f816451a-d0dc-4d3e-92ba-d433838b4d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3298791-2cde-499f-ad3b-a6e5e5bc0418",
        "cursor": {
          "ref": "971d24f0-0e34-4e31-ac77-55a203bf5b1e",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5f655140-d42b-4d67-a3ef-b0bf26f6c655"
        },
        "item": {
          "id": "d3298791-2cde-499f-ad3b-a6e5e5bc0418",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e0429cc9-45c1-4ff7-9c2f-e7469b0aeba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c76108e-0755-486a-a71d-fb6d6c872088",
        "cursor": {
          "ref": "e6670e27-3455-45b3-ba2d-5ad7df8762c1",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "e5c48e96-c137-485c-98e1-ed094c65f214"
        },
        "item": {
          "id": "1c76108e-0755-486a-a71d-fb6d6c872088",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7c43d5b4-781b-46f6-9559-f70ba59761fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ede6c4-c549-4bc0-bfce-d628088c5b24",
        "cursor": {
          "ref": "2322245d-b5f5-4ee5-8fcc-ce9a0bd03884",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4132d291-43eb-48a3-9862-473535c95743"
        },
        "item": {
          "id": "90ede6c4-c549-4bc0-bfce-d628088c5b24",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f2115587-d174-4e9d-85fa-8a5695895891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6248bfd5-1fb3-45a4-8485-fcdd3812b3c4",
        "cursor": {
          "ref": "b0370fd0-42b4-4a44-a986-1f85f1e785f1",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4d97e452-fb89-49be-bb1b-17e64ecbe085"
        },
        "item": {
          "id": "6248bfd5-1fb3-45a4-8485-fcdd3812b3c4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a4fc04c7-691a-40aa-824d-06e5f8bdcbe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5411117a-7e06-42b5-a4b3-90db82affa11",
        "cursor": {
          "ref": "c08e6d11-6d0c-46ce-b374-4fe6c9d1cdcb",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "0c5af047-6973-4f00-850c-f2d74f3ce9bf"
        },
        "item": {
          "id": "5411117a-7e06-42b5-a4b3-90db82affa11",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "31fb0267-753f-48df-8566-1cf4874fe0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58926b9-b8d4-48cb-a895-f6b306e969be",
        "cursor": {
          "ref": "975afd5a-71da-4552-b69a-3b0c0636e99c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7ad375ae-1f66-46f7-b1ef-b65e7e6332dd"
        },
        "item": {
          "id": "b58926b9-b8d4-48cb-a895-f6b306e969be",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fc255dbe-f57a-4cd0-9841-216d6d197f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8775f7e4-392b-459c-b84a-2dac746bc072",
        "cursor": {
          "ref": "5c14f148-f316-4f3b-82a1-d2f6a77333ff",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "68d66380-103e-47aa-836d-697900cf1667"
        },
        "item": {
          "id": "8775f7e4-392b-459c-b84a-2dac746bc072",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f22c8228-e4b8-447c-86ea-c9a6679c38e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df51d55-4f88-4459-84bc-c02112a75bda",
        "cursor": {
          "ref": "0f7f8332-8152-4226-a662-f06d4d9ee193",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "18807381-d916-43f1-9142-15a3ae162fc9"
        },
        "item": {
          "id": "6df51d55-4f88-4459-84bc-c02112a75bda",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fc7e9445-9570-4535-a1de-fec794c2e67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6e0307-0f19-4d4a-be23-8dde971dfbdd",
        "cursor": {
          "ref": "08846c5e-2b9c-43ae-abac-6c42d3891d2a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f71497d3-4fd5-4c17-a609-1de40584a175"
        },
        "item": {
          "id": "3d6e0307-0f19-4d4a-be23-8dde971dfbdd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0ffd3f05-e590-488f-9671-54ba56c8656a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bff9eec-5764-4f2a-acb7-ba8720be1c2f",
        "cursor": {
          "ref": "43c7985f-0614-49f9-8fac-e34046bfaf8d",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "252465ad-2bd2-4c8e-bca4-3d4796f77e1c"
        },
        "item": {
          "id": "0bff9eec-5764-4f2a-acb7-ba8720be1c2f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1f5ecc34-89ef-43b9-b935-154c5fe1108d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b11d914-9e39-41f6-ad98-bc884465a010",
        "cursor": {
          "ref": "5619baa3-1666-4cd0-bff2-ec109eade93d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "9565223a-9b49-4353-a61f-30fd21e5048f"
        },
        "item": {
          "id": "4b11d914-9e39-41f6-ad98-bc884465a010",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4a713a10-821a-4f05-939f-feb391dffb5b",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a28ecb73-a582-4baa-aeb1-a16746b05323",
        "cursor": {
          "ref": "891783a3-205c-4190-924d-cbd020d1e785",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b7f03bd6-cb20-4fe7-b60c-c01b4e602b5d"
        },
        "item": {
          "id": "a28ecb73-a582-4baa-aeb1-a16746b05323",
          "name": "credentials_verify"
        },
        "response": {
          "id": "16f91d6f-9c5e-406f-a14e-a6f98994e9ed",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c31f2e4-7620-4acf-9bb5-eab91d1c87ba",
        "cursor": {
          "ref": "b1712cdf-de02-42f9-9c96-1ebac5f0307f",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ccb33d61-5cc7-44d5-8618-f35e9cec313a"
        },
        "item": {
          "id": "7c31f2e4-7620-4acf-9bb5-eab91d1c87ba",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d0ceb2c6-eb62-467a-8c50-0f992015031c",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b789bf-5346-483d-846d-9a64d19c79c4",
        "cursor": {
          "ref": "f9804007-1967-4bf7-9999-fa677a67e98d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6eaff2a3-424a-4ab2-8836-1b6df19cd865"
        },
        "item": {
          "id": "b0b789bf-5346-483d-846d-9a64d19c79c4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "66331f59-2110-4e6e-9908-ce1c66c3e152",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b789bf-5346-483d-846d-9a64d19c79c4",
        "cursor": {
          "ref": "f9804007-1967-4bf7-9999-fa677a67e98d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6eaff2a3-424a-4ab2-8836-1b6df19cd865"
        },
        "item": {
          "id": "b0b789bf-5346-483d-846d-9a64d19c79c4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "66331f59-2110-4e6e-9908-ce1c66c3e152",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a1d614-e892-4f54-80db-dde3bb8e9aa1",
        "cursor": {
          "ref": "bc800575-cf90-4131-9437-cb5bbc96f79c",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e3793353-ae9f-4919-a0f3-864f5e651464"
        },
        "item": {
          "id": "34a1d614-e892-4f54-80db-dde3bb8e9aa1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1c53f9ec-8353-4ba6-9b05-9c079d62b308",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee5e7bd-3e53-4bc5-a2a3-3cefcc8ed919",
        "cursor": {
          "ref": "d354f94e-9a6e-4df9-ab23-4e1b7a99e110",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "bf1db661-6e92-4fce-b841-b890a76fa6d0"
        },
        "item": {
          "id": "aee5e7bd-3e53-4bc5-a2a3-3cefcc8ed919",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "66c0ce15-f574-46e9-8b3e-7c0268e8db95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}