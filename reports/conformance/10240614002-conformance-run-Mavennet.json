{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "41f9306c-538b-4b3c-83fb-136248e36d98",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7026f1ba-b9fd-4eff-86fa-5a20f862bf5c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8259e90e-f900-45fe-bda1-b9045b1e76bd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f5d86836-8685-4981-aea3-f262842633ba"
                }
              }
            ]
          },
          {
            "id": "0681a008-873f-44f5-8ecd-10f635bdfe3c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b1d14fc1-7e0d-4885-8838-b54e09f79c14",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d0311be5-f4d3-4032-87d2-3fdef1850d6f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3fcdb824-c5c9-4bbb-ad90-8937894979c3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8cd88670-3bed-49e9-90db-548c5607f060",
            "name": "Positive Testing",
            "item": [
              {
                "id": "99dcbce0-768a-4029-a05d-c4cb14ce7b9c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc2e0012-9ffc-44af-b7b4-5e12889abf6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9aba3864-b135-4165-bea6-d558861f3bfd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2162d589-c0dd-475a-be50-a7e2e6f2daa7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "32a7d411-11f6-4f35-9511-f4f3d54943ad"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c8c58d2e-3f14-43f5-8522-b9cfa31fbffe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f1cdeed8-20e8-4c68-8c61-dd15d1d6aadc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8bb124fd-246c-4c11-9921-2b8d8616fd87",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0b84fd84-a8bd-4203-b81c-836b193703cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c50b9de-17d4-4820-b400-711505269cbe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48954049-9af0-46e1-8cbf-f7aa05ff899d"
            }
          }
        ]
      },
      {
        "id": "64997263-a8b2-4fde-bbde-7685b3628727",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e2b6cf29-2754-4f12-a1fb-a65d8928962c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c317abc-3ad2-4254-9b13-25998c9043a9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "15532015-9729-4727-ac4d-75e80671beac",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cacc12-2893-4381-acaa-8214be6c21f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60aef93b-6b6d-4d47-bd04-ce6eea509275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2346a5-a023-47f2-bdfc-d1209d7af32b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12f45a4-deba-4f0c-9ea4-986ea232b035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc6abeea-c1ff-49a9-8646-9f1d41db072b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a772b975-620b-4183-931f-340bc5b35cbf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d4f6b1-3b73-4093-9973-82ce6dcdaab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12c671bb-ebea-4500-87d2-9670eb93837e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "35f04ef4-f621-4286-acef-c409c6c16fe7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62e915f5-dc33-4c4d-a529-1365ef0f53c7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8618e01-b4a1-48af-b12b-d5911d5ffd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d110c6f-a118-4f70-a2f2-cb0e7b3684db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76abb932-c7f4-4dc0-8d3b-9847b41d68dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b138fc-88de-4d0d-b8fd-c36df5e5369d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b14e0607-3055-4f8b-a5ea-452dd9c4c69a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "28ded50e-7b7d-4449-b99c-a3aa4605ef68",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fe7d894-c5a1-4722-a93f-61936ad85eda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9b32a853-c17f-45df-a97b-908b8423564a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43367406-0241-41ec-b9af-432db490dd59",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ca7baaf1-d18b-41b6-bf5a-68feeab4408f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d0e4d35-6399-4929-b704-fc09c9d2ae24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b4d5f75-2af9-4f18-a675-77f4c1a597a0"
            }
          }
        ]
      },
      {
        "id": "851c098f-c1c8-46ed-a410-63b90af28a86",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "771619c7-b73e-434c-83ae-0d2933ad0d0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d51cd22b-10ec-4129-951a-1b31452fc5b8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3509790b-5a0e-4fe2-a84d-9f1471a39d2e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08af5f44-2702-46dd-b040-3532c375dc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e19a39bc-7903-403d-8473-1d191f166785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cba74ec-a9b3-449d-b61b-ef037b9436f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6985ba83-7491-47e4-8667-046999e6f12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bfbf66-2254-420d-b238-a648554207ef",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fbda99-ec69-462b-8d59-b44bbd36dd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff00f571-5d4a-43d0-a8f0-9c8020895243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d80b426-4f45-438d-affe-772e16b1745e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b674f2a6-d399-4802-ac15-688a9fd40713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ef8f89-0b16-4867-9766-a51f923bd1b9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b830b646-c2d5-4623-ba9a-379883548963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a59329-a8da-4327-a4d3-c8238244a915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d65a4c3-ce3b-46f3-b08f-91c8c2553b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c07dbbe-0f9e-4f98-96a3-e65c93ac264a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f289971a-fc14-4d91-9f09-b29275774ee2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d86ba2-6958-4ca9-b197-06758911db54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae756d68-e0f0-4002-b07d-cc9f7f8898e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1e12d1-df0c-46c0-92d8-042b4d568c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25d245b2-34f6-40dc-b453-a4d6db4ec7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5def648c-0074-4042-8d28-9c3389b5495a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3663533-72ec-41af-ad98-f9035b16aab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aedb520f-ce27-4028-9940-16cf4027678d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59655249-0e46-4a8a-9b13-0386ff95c1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c4a2312-2eed-4cde-986d-4d96c85eedd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec8d3a9-5bac-4dc3-9742-4a10101ff215",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246640ae-38b8-483e-aab8-d5b9b71515a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e08ced57-9f18-44d3-afd5-889e77ddf4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04de408-a6ee-488f-a2d7-680dc6d4a7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61b77ab6-0f5e-4cb9-80ed-d5d429130ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6be6e6-4a5c-4237-9dd5-2f5912f451ea",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ae09cf-809d-4e46-9438-9700ba9c91c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d514bb6-52c1-4261-922a-e582a4fb3880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10e4d03-26a0-4f1e-ac65-2f2192d7f8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12866279-cac4-4fdc-8df9-2e6c64e7f39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235976c5-16f3-4b98-9ada-2d2676b690df",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6d467f-4a50-4351-8007-d5c2e4553492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8430de0f-a242-4f65-828f-4fe032e767d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2da782-a02f-4ed0-a1d4-ca9df983dee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a79a214b-9fbd-4b40-8933-ce9885367d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d5457f-14e1-4b06-b3f9-5c8629fee636",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1af2844-4be6-45f8-9bc1-52b588203d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e09b1f8-3775-4696-b5be-da178850831a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b0f2bc-41b9-4c68-8809-af4ecc896149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cb84b5a-d286-4129-9403-f4c207349f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7660ad4-81dc-4d45-972f-38699ef3ba84",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1312eb4a-1559-497c-9595-6a8befb415ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0289d2e-bc55-47b4-a649-d87612d75812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e96dbae-1606-45b8-a10f-7d8e4e9c6c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "500ea552-73c6-4949-85be-4368acdd9f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee96417c-1c3b-4bc9-ad30-608ab0eaf53b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77338ad4-e871-477a-b3a4-175bbe738c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0804744-2e04-48ae-a7c2-f07f669f10fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799c3008-0ea6-4b5e-9472-83834d597636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "335d83a8-2eba-4af2-ab4e-fa47f1a3b640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19dc510-f2e9-4b71-9f2c-d34641f1aef5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1becc73-f246-428c-ac43-526ecf922036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19749a4f-f7d4-4e3f-905d-1c100401d792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3d3d40-a2fb-4bb5-a285-7988f933e38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d634e549-e552-4b40-800b-064dc214222f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2af5d92-7000-4983-a33d-b4ad4e7ac5cf",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f70555-060a-4a29-a1c1-0bc3b0bdfbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b345dbae-ba59-4d50-bc3e-da6a3e9b6bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ccc04d-a944-4253-8e81-51e80d78a6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "346402ca-3b82-4b28-b577-43d5339cb7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ca7b8b-bb28-403b-8408-86d7b0a8b2dc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c26689b-ba58-4b87-80f5-305fe6f93083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e1cd15-2b68-4e49-ab63-7fa14c37a025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9262d19f-5f6a-4671-adc9-7a892d1758b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42e76368-5075-459a-b756-f327273089b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d72238-9006-42c9-ab18-a8908e500f3b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b975ae3d-eb33-4d15-a3fc-be1757eec794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d05a034-abd1-4a31-9bf9-36dfde830a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27ff754-fbf0-4d70-9442-49ec2a6383ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "252aaf88-ed17-49f0-b44b-1744f1ad3428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344c176b-bd7e-4142-b66d-b107a1567ee0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6e2c34-4938-45eb-996f-a6c7c4d744c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37890c20-364a-4451-9af2-7fe2d60e8056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb9c79e-88a8-4389-81d9-00cd411128d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa4f75a8-f6d6-4b4f-ae21-540de97a9a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa3e2e9-037a-459e-a540-695985655b76",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdb91dd-778e-489c-8327-c3a8771f08ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88fdfe51-2bc8-41b3-bbd0-41fcc586ef88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c5107d-ad9c-434d-b90f-8d265e7e4d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c026033e-15f3-48a0-b9b0-0520472e6e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2588762a-da63-4864-9c86-839c6aa7f4f6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eefe761-daa3-4389-b655-61fe504fd471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b45fb1-180d-47e0-916f-5cb0eca6c5f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5b38ac-f581-4d02-84f9-f381f2446c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "007aa5e3-b6aa-459b-8c9d-713d793be589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265ccce0-9c72-4a4c-8bec-72c6449ddc9f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75f4796-5f00-4123-ac0a-b7da63ad9078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cefab93a-2406-4f93-b6df-87d68ef3f6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a7e03d-e329-49e4-a879-861f5ba88a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab42314e-e2fe-4382-b9b7-a1ec4911c44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a9a115-7cd1-4e65-8694-5f1b725a86a6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b42f9d-9be2-4fd8-95d0-2ce2bb54b5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa7def2-fba2-490e-b34a-1be73f63cfa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a17f6d-6b7a-43b9-a6c3-fb5e8a9db0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb04bce-015d-425c-9464-12a8ea99dd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c138274-bdb9-45cd-9f73-cef8bd14296a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b0342f-3fc9-49b3-ba38-561a55976ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d691bb1-25e3-4a89-b783-a98aaf8f1ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeceab0a-8f77-4c58-91f0-d308a6bd39e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "999062ab-d220-4de6-b0c8-821a6dae71ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4944e0ee-d8f6-476b-9a15-56810b0037db",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c2a71e-08bd-4fb2-a83e-dfa0d54bd18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c70a8e1-ead4-4fec-bfb9-1767394b8499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94aeeb3-761e-43fe-9bb0-559a42d61a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa450dd2-f573-4c30-a430-11cbe852fd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fb28bc-996e-48cd-8997-9eddf79c5d69",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0879920d-ba17-4bbe-bb91-eb238abddccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf86dd0d-fdd9-4642-a2af-b144b9d2079b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cb36f7-a161-4b29-80ea-d0d22036b8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a33e519-73d6-4a84-980b-3f04619f7f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043c445f-78ff-4ae5-a817-c6dd7e4e402f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f75d80-8513-41b5-b7cd-6e965ac7be61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6242a358-61bf-4b7e-9094-d3240eb06e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8e79c3-fd69-4bb5-a2d5-0a8716d99adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c45aa761-b491-4dbc-8e4a-2afe61b0c37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8773dd3a-538b-418d-9982-7b9fef072a7b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4448c0-94fe-4028-8c97-a683f5f3df38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d149b9-4971-4d79-aa0a-ae22d0848938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7a11f0-cd89-4acd-b6ad-ca0f8eadbd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccab02b1-b867-49b7-b4b5-e7905a9f9e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a011a15-3327-4918-a042-747cfda5025c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960a23ff-90c4-45d4-925c-58a0311c9a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a46da2-0777-4819-805c-5806a3fb5609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3353832-f62a-46fe-8d38-f463eb26e283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "311271b4-15aa-4dc3-8a7a-033ae3c97b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53c0b4c-eadd-486b-a11e-dc63aa1d25bd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429a1edc-9162-4eb0-b23d-4011d2c57b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966f46c9-7b5f-445c-aef1-bf93f2bf3cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689d97d3-4991-4dfb-8ee2-50ecd5b3ff97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c96a21c-5f83-4134-bcce-46f5ff31e9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b656ddc4-fef6-4970-898b-d59087e7cebd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884c14e0-7b7f-415c-9c69-5e7a9b0d1e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59be7b39-18c4-4b4f-80ae-15374b819814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceed0f9e-1ca0-44ea-9d0e-f6e430c11055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e2721d-4973-4ff1-a538-60813ba434ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c833f1-7ce1-4b51-9334-4b4677bda4ca",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf0845a-f5eb-4bef-a416-ca5beb9ecce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357fc89b-fb1d-40e1-90fe-791d90819f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb88fe0-82b7-49a2-ac8f-34f2e9e8be46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf160d3f-a7ff-4336-a4d0-f64e66358ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adabe97-9bc9-47ba-8fcf-86b25ddcc1b4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19966fb-43db-401e-a0be-04b8ba3d3a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e7fe02-eee6-4252-a4e5-6f7571ea58dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fe0952-d380-4c3e-b20d-d474843f4e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd272e0-3947-468f-9c51-552229bf376f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db6c30b-911d-4bff-be11-919c595fa69d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596f30e7-9224-4c93-bf35-cd9a37f11050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26ec73a-51d4-48be-8d14-44964900a793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a389af-1e91-447a-920d-f6463037be25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f270cdd6-0562-4db8-a2e0-074c57a56e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da1a1f0-8df3-4090-ae4e-7f4ceb7c0a03",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df85615c-4079-489b-9e9b-bdabaf56f17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2199ab-d0d9-41c6-ab24-c1391cd9a26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c379b363-06a8-4a79-b621-d55aad65f53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d740b84-51c0-4653-b945-8e2f53b8d89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614ed7a4-b87a-4ae9-b946-edc0f9bd8bcd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d40618-0c70-4aff-ac11-c3a1fad5f426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6120178-e00b-412e-801b-252312af8d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9451628f-ce35-4898-8a1a-b8e2299e7945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb256dc7-7135-48a4-99af-e725215a992e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3204897b-ffa9-4baa-95f4-979e58cf998d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a751a8-e615-4bdd-b70d-447d3de98bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4abcaa-d5d5-42b8-96fd-62c2c4e5dc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fce7dea-8508-4e10-84ff-03d2ba078897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92652657-9d3a-4c2f-b4ea-c68cf1e33eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe36edf-747b-4340-8277-afd9f069b3c3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9352017-e92a-4c79-a22f-90fc9b7db9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7dbbce1-880d-4fd1-8b87-dbd4d188fd2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a492cd2-fe27-4bca-8684-622cc13bd842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "28cc5452-f233-4970-b635-550c5255091f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277b4082-1f56-4e37-b2cb-5aab08ba7cdf",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dd3cf5-9efa-46f1-b4e1-a236d7ff0ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daa24a3e-a7d3-4094-9c81-8ac0a6aa8542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838d053e-6a65-4436-9104-20ebde250753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe988077-79c7-40a1-a9b0-22c0ec051827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb663e9-95a6-46ed-9f8e-44d9eec27b05",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dd17c0-f0d7-4f58-a36e-c556eec6fd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e506579-cfaf-4e92-a82c-17b2e56018f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a208b8ed-c408-40a1-9fdc-6f4e3f51089c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07916c73-f843-4b36-8daa-833df0de749f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d6e0c2-9556-4f40-9c8a-79ab065c4dc3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6700d05-637d-4f5f-8af8-069d35f78301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b8acbb-ad5f-4f88-bc62-7cbff628d8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876c05de-fe4a-4442-a987-f3db6ec92b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "722b2a4a-3863-4f76-9330-246042fb1c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a9dd66-7475-4086-a46f-7c1cc36d8704",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75923a7d-99db-4a41-ada1-4048880627d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ae1315-5b22-450e-803a-54a7df62e3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb743e90-cc76-4984-8d1e-e75d97ef6149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "963f7ebf-20c7-49c9-8e86-3b4eedbc3c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d45e5b-21e6-4cc3-92d6-4a99b803452f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e27e892-6344-4cd0-93cd-ff8ca11df234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7a7f95-8243-4415-824a-9ac1e265578c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddd9d01-d7af-40e0-ac94-a059d91fee9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "427dd286-5882-4a4a-870e-e19b6a8f3098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81943522-087b-4d03-9a9a-00452a8da289",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d321f3-eb3d-4d13-af1d-faf0186fb5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3a4e6b-d38a-4aef-9e91-ff379de08d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5aaade5-6782-4e9a-ba5f-078cf82f70f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "77e189ae-66e2-4eb0-a379-a463fc53869c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d4efcf-1417-40ba-b2af-96962b962ec9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12332ad-2644-4f8d-bb59-8aac5929a205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca956b4-87f7-4257-a79e-ffdb5202ae46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c426ed-c4a2-4ed3-9708-0032081ab5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9b45c02e-7a0c-468e-bde1-0191435bfd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad2aafe-1427-4e07-aa41-34eac20a6198",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d8bc2a-a036-4bd6-a177-60c8487d26ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8224b3-e6f0-43e4-bb2a-749375ede592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0c3077-f230-4620-9660-8caf60a313d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9c4544-88a3-41cf-b9fb-683c87a16839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd37b0a5-00b7-4cf9-9c5d-6152229cac01",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29a49cb-de6c-43f5-b578-775468fc1f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a9d87e-7527-4218-8305-5e756ee1d5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aaaa24a-eedf-42dc-bd98-c7bc3b12dc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c77dd86-b3a6-443a-9028-c09bd6a540a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5166409c-8a2c-4974-8082-44cf279fc1e4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1aff713-a854-4c96-bd1f-9002aa083488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ea6792-c083-4bea-84e7-15038e773f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60fea58d-21b2-449b-b8a3-35e2ee1a04f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3c7b76-44d8-4c09-9a2f-7cb35448e6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cf7451-8d55-4337-ab06-be3f894d9496",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b6bb85-cc8c-4cdc-9229-f312035dde40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ede2b33-41e2-442e-a104-52462fd6a0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3d0ebb-5381-4569-9de4-ef119a61b862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dba9aa9b-515c-482f-9777-0648c51f67f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bbaf3a-aaa7-42b1-b805-859b5eb15ade",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c18ccd7-b887-4822-aeb2-69ef811c77a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19c5cdb-86dd-41bf-9d34-ca5daaa790e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9531480-835d-4f40-8106-7000dc06c8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf488b01-4735-4826-a6ec-dc2c67aa0562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a66eed-2dc5-4b58-a6cc-ad160e8972a4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fa8076-8261-459a-b007-4fdc28a57d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c644613-5702-4a35-b8b4-a34617c8ae18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f9ea5d-f8d6-4501-8460-184ae6be5714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e23cb84-2a83-4e29-8c32-420aae2692fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f557bb83-d1e3-4b42-aa59-cc3a4048504d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7de1a6e-5628-400e-b61c-84a41f54245e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa28b9e-addf-4335-8c69-df2d6bc33c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5776f162-d573-45b2-bcc1-cfcdb35e871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a532244-905a-4b70-ba31-4e6e39779717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0449e989-0065-40be-b293-a3f5c2e39595",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b502d58e-4176-4d4f-b19f-27661e2d45da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586c8c9c-7a6f-47b1-ba34-2cd37fbac964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f55688-6a9a-42c4-9d32-2f8b079f047f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e537ac2e-081f-49b3-9db0-84fc9259523f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488f50c2-2187-46bd-a88a-e3a2c5a6b495",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0daa41d-99db-4737-99bb-5f0661685b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df353727-3797-42de-b95d-7eeb06f9c898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76bafda-fff4-40a2-9520-92c7456a035d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "92b0faef-b322-4fb1-802d-4111af18d07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1eb90c3-26e5-4308-976e-96a2061c1646",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a165d7-3698-4f70-ab10-622129316438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616d4320-163d-4f7e-a9d8-8bef1b400d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6e0e02-55ae-4ea8-a976-b581c03f9a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f79eab-947f-4420-9a9e-5577e8d1b2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd165fe-1890-4157-8ea7-249baeb9a6e8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb92bad-34ef-46b4-8683-2db4543c28a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68407472-3709-47ee-a9de-16e9e0dc926d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a0fd32-88c0-415e-9fc2-d06320a64654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "189f81d7-82eb-45ce-803c-91cbfb7c3328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d65a6a2-e4cb-4c4a-98f5-238da296066c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c8d728-ed31-4f9f-bd3d-da36726a6671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee21ab0-b488-4467-bb0a-20d710df335e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4f9e4c-0a73-4a8a-93e4-64b698da1b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6856cd4d-657f-497b-a0ab-af9ef57c320d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd36aad-afc2-43f0-9195-aeb67958524c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840edc5f-aaf4-43e5-8bd6-18f125948411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "689e6257-c44b-4849-a69a-49eadad2b6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91929e34-010b-4b1f-8234-323660f41d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b702467-648b-4ec5-aa29-84fc6590947f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e3ce0d-8f51-4dbf-b5c8-eb9c03be19fb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a83efec-b818-453c-9e88-7b29b3856598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b371f7-1a4b-4731-a8bf-636d3b0cea14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd880e95-4b94-4c3f-9f97-54a2e6c219af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a76e3112-290c-4d0d-bed4-8a6d6dee00ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf352fc6-ca08-49a0-b2fb-2edfdc8bfb65",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3d384d-1ff6-4411-af88-a35d19e981f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb901cd3-4567-47ec-a2a4-eec1aa7bcc03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ced335f-5e2e-41cb-a964-4432a6b45be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06248cb1-245d-4598-87eb-b63b82d8f061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe6f7f4-e76e-4ef6-8f84-db5be2f956af",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5035691-ecdf-40cb-a117-fe65190f7e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c807f688-69e8-4970-b36e-ddc734b18a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c544bac3-5e9d-4ecd-8485-da05498f7821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb82b83-74f1-4dcc-94cc-b1f3cddd780b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05c37f1-cb78-464d-a2e2-a5f5aced0ce9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f81e03c-e153-4fc6-bcea-aeb3dbb3ce70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcbc8472-e737-4771-8f0b-027f12249bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63fe241-db22-44ed-a3cb-617db574603c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f618df9-28b7-425e-9d1a-df00eed49549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fec46f2-c709-4057-8158-97a28d3b86e4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acde9eb8-661a-4173-a7e1-eea461161c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548ba887-0c12-4e36-8651-68db3392b9bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef03834-b90d-477f-9ed7-802d58086da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6296ad2-e2d6-4faa-ab1f-d378672e84aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce2aebe-747e-4054-a9ff-a5b93ad8f937",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6792d6-8d0d-4c70-a871-bd0c0f0e9e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05295896-44f4-4146-a236-4b25d75e9a82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd28b5f5-09fa-4901-894c-e17852e32a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "40d3ce51-acff-4bb7-ab50-a8091e33318a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b64c6e2-4e25-4e8c-acd6-ca65b876a9b4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220d425c-b0ff-44e8-820b-40d45648a0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72032867-2492-4d92-bc15-d15e26175235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4974c394-5991-4555-8833-1dc8c1807792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6605e49-eca1-490b-b2a0-ab78165c6df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d22936a-96fd-4803-8584-a8c73f539535",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c69a49c-dea2-466b-a20f-66e8ecd4c40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e396c9-7d7b-4000-9d31-e8552655daf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9f0d45-814b-4670-8441-64af11cc1340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "31b6541f-3306-4b8c-bad6-8d0b68d076dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc98dadf-7461-4174-8d16-d23894833b83",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d76fc94-ff14-4573-8d76-c349be30008c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccce72f1-f939-435e-bc36-110c9ee10ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70428ac4-ea1f-4ba9-a72d-bc16b66b2f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d991e73-5b46-4944-9f2a-a6a1cf440732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1dd1f0-ca99-46a6-af54-bd1db23e0898",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ba9487-bc1c-4c4c-b06b-86ce82ad3bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc093233-2c7a-4549-9054-74af3dfb1ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03fce1d-4bac-4bf2-9722-e7b96c4f14e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "560883f8-89b8-438f-8c10-099d015ddb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece21d9d-5cf3-448b-9362-10779e745d38",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700acc98-48ca-489e-ac46-768dbd3e0a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8843b9ab-0219-4d38-905c-9d716e74525f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de79bf4-ca70-40bd-8f33-336496192d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c26508df-84ab-4f6b-b517-421036e3ede3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555cd20a-1753-46e4-bfc0-94a8d328033f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13bf6ecf-d284-4af5-950d-56aa983f703d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4878ee2c-74f2-4991-844b-4303727c376c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e16591-f6c3-4e70-a0b0-98e6a9268151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d4a8e7-4ac0-483c-8669-584136ab09fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecda0244-e392-4f9c-bf4c-ab53d738da56",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278fea51-56eb-4168-9ff5-31db4bde5e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81368218-31de-41de-a5e4-98baecf28da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3d8921-d8d2-4500-95b5-e457cc08ab7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "727a1c87-a195-48e8-bd30-9a732383c63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ec3d92-e3b4-49f3-b5bc-acb776ba015a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bb7dcf-2ce3-422a-b2ad-a01f9724d1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d071bcb9-1f0b-4afb-a725-619a9fec5bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59eb5b9-a01d-44e8-aba4-11297696642f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b94aafbd-53f2-4355-8648-8a0706028006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a820a198-ab36-467f-a57d-1999d0b713e4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6af553-2d2e-411c-89b9-aa678bc462de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd91ad0-a97f-4612-9a22-670d8a5806f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abc4feb-a60c-4170-9994-30a79455f714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9047baf-177a-4c90-a6ea-2c59751f0877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80554ea-c7dd-45bc-b318-aca47154daf9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e704c6b-6c17-4b9c-9355-9308a7b09a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc0238f-98c3-4030-b811-12e0a38e98ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0e5fee-bad0-4fde-8d0a-0690c78a2ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed22809d-9807-4c14-9663-3b610b477aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b9d8a0-a70b-4dc0-acfc-884f27cd46f0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5daa68d9-ee1e-4b6a-bef5-38a2935d9a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff69649a-4411-451d-b2ee-d9b89919fe6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c3aa1e-aaa3-43f1-946f-08516dae0aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86eac1db-90f3-4573-8b57-fd2e28cf5dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e2f812-306b-4dc8-820a-07802d5515b2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2f30fd-79fa-4060-9b81-2cc36e6f2adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64321d3b-bae8-46f0-8abd-381a0386d74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11927b35-0c50-4ef2-83b3-a120166696ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "900fa1a2-196d-4f11-99c4-0944f41da3a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb7cf24-5548-459f-aa14-96f8b757a1ec",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed63345-2b1b-43ae-a9f1-307bdfab437f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60571e28-5ca7-4e3b-b2b4-0a0466e359bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601c9912-f43c-4dd7-8e72-a9e3d04f9121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b4666e91-34a8-4622-88f3-f546fa4e0319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2e31bd-811f-4724-8e06-2f41c59d814b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf85aff6-78a8-4607-b33a-787e253f8b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d808c294-f917-440d-a635-20aae56ec74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ddb3a7a-4bf2-4d54-9250-798a4c851b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f202fb8c-01be-4438-9b89-5d254559b67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466d9aae-8ac7-464d-a2b1-c1cc7ca49d6e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fc1321-5f91-49f2-b54c-8ae4de7e01e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3fdfa27-67b2-4d38-8490-96413fe7d4e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9540437-5284-464b-8900-9cd0983bd6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02d5ddef-d3e6-461c-b119-fe686ea8b1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03434a89-b9dd-4a0c-9e77-ce902e309924",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de777e74-def3-4103-9531-0bd7d7ddbb2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f714659-d050-424c-bf51-ad846e060be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a7dcd4-7df3-4bc3-96dc-8d9328b77f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "efca0c3e-f054-43e1-b6e2-2cc607efeb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4e1489-8feb-4c24-8d70-6df3dc57dd6d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca9a91f-cb53-4838-9228-8a7d945d8beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d72cdd-86ff-45a3-b424-7c6e6b5f0699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6316e4-0581-4219-87f7-82df4e49f92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d842a817-6b6e-47b5-99ac-0678ae9ec1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c94af1-3215-4900-be89-20598a9c3dec",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1947802d-8d9a-458f-b9b5-fe0b9761de34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a462833-4e30-4132-9595-b997aeb9aa9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9cb194e-e752-43f1-a898-47aaee4a905d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "540ad3fb-bea8-4fe8-8d60-d5b22b5345d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8708da-9dc1-4be8-b74d-f12718051418",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f01ed0d-51b1-4a27-8792-60b7554a3f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da534125-ff60-493d-a48b-dd821e749fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f734c54-da42-40a0-bddb-0bfa42398763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5630962-9b58-4bf7-9eea-981bfad807a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6a4e15-5a62-4465-bc15-52a619d6183a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5220567c-1197-4ced-a896-a3b5adef2777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc0e5a4-9a36-4a57-add4-e3cc002bbfa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d23bc7-b8ed-4ee2-b75e-ad5ad228dbbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd59b982-3708-40e3-bb9b-b8479950c41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f50d7f-b009-4a33-8672-846cd2ba40e4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8091bba5-bc7a-4566-8260-b8280321742e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24b8c9b-e73f-49e3-b84a-ac1982083956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34eb983a-109a-442d-b2a6-18ca19a2962b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc16ff7a-9d6c-4022-b456-7701a93d47c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0eb1695-75a2-4933-abc7-d40b572e18a3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ced5637-bb0f-4915-b7dc-2a6da281aba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2616444-b8eb-4ac6-9d06-1d2e27defcf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bb7842-45cb-49e6-a19e-1d258ae07158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e677de94-adf0-4c52-86d3-ba97c88b03f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0a787a-78c6-4bfc-afbd-177e3f3b8381",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e7d64d-54b9-447b-b605-fbed05f517e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0dff61-7a43-472c-b7fc-2c9affedfd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488f4b7d-6203-4ed5-9a7d-8b7c5d87974f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "741d367f-3723-434d-8b73-73bb0eeafd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e70fe6-4786-43dd-8845-7cadd6e012c1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e212cf9c-b0ed-4001-8fd6-ee53c89ef303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca1379e-a9f3-4389-b83e-7a8137989637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdcc2c6-d2de-4617-88fb-eab4d727cf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae6238d-d275-4bd0-9135-65304219685c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40330243-4715-4148-815c-d4020a55c25b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8edfa26-d46f-40ad-bfb4-28a8fd77d030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30dd95b-079c-455a-a2c1-f94747c4b291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073fa0de-ef7c-48d2-bc1e-ec3d0a97e276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec38b1a4-7345-4b06-99ff-464120b29e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cbb2ca-e63a-4035-9a3e-e8cce856e97f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e5d79a-54d0-49f8-b999-feb0744782a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094ee7af-a365-4c64-94f2-73a0b75caf31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7755e7-4612-45a8-aba9-0d231895be67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "69e88e73-1725-4aee-bca3-7528760a4220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dee09c6-5a77-4208-b1d3-8c60fa9061bb",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c432d45-e0f4-4e47-a102-d02e1bd3fa25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d91c28-f02f-49e1-94c7-1b89309ff5f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ee11b3-9900-412e-a78f-63780fc33f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4046ce02-59dd-4147-886e-0bcaf9a7e069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ee4938-d6ec-42a9-addc-2f26772d5c5f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9295b2-10ca-4c47-a5fc-6ca8252e8ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea439b2b-1da9-41fa-b847-7ea3e315c82e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc9f766-b519-4f04-a0f3-9fd3678d7bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "11eb2bde-55f0-4487-bea6-c66b00dc2d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1811afda-6e58-4cd2-a47b-27f5372e2d75",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1680aab4-c206-4906-84d0-22da7e038ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4666a41-5c1c-43f3-b20d-90054507eaac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0124ae-de1c-4627-8434-75e2037e73bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "78e4d41c-b1ef-40b0-b4c8-e1e4e97cb9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21197632-298b-45fa-9704-27c0c190c047",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab60bc6a-e07c-4a11-9b60-6db56b2d6fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c401cb6-c557-4cde-a939-6f3afe2473d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5433f9-8d73-4029-9ea9-72f2eada6ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5962dc84-e8aa-458f-9848-b01a3b7cb512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bd1f33-4f66-46ee-9e4c-801e88e76ebc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf50c5d-f2a7-4d30-8ef2-66f4cb6874da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d9d77304-1b94-44fc-9bd6-c742ad767aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc46093-c88f-413e-8af1-f3d0545ea53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6858f4d8-5385-442c-a8a7-d432f682c8bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f6405d24-bad0-4bb4-b2fb-3e6cabc9aa9d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5d7a161-54cd-48a7-947e-f7bc49261750",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79bf920-da1c-488a-b349-ae982e50e53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21b75412-a3e0-4764-bfcd-93d1648bf209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a47beb-0085-45c9-a2e4-3ba485209d69",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95a12590-ec21-4df0-a9d5-045ed25592a5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ea9ccd8-61ed-4aa3-950f-1011b53cc85b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b9d0989-b824-45b8-ba35-a824fa34f3b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afaddeeb-510c-4535-a8c4-bb4908252a75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08c6c710-9cd5-4235-8fea-2dfb8a9b0e38"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4bebcd92-4652-4c33-8794-8d3b6d1064d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bed3822-e9f6-40a3-b357-927bcb4bf2bd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f066aaca-07a9-4132-97a6-dbd2dffde2cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c281125-10c9-44ce-8cc1-d66a6ddf9427"
                }
              }
            ]
          },
          {
            "id": "dd87c1d2-fa3e-4039-9103-f258bd253e95",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3d60460c-c51d-4ccf-b77a-ae24bd5c7161",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "66d77d39-839d-491f-8fe7-94377cb68e03",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50458c5f-d3ed-46b8-86a4-186e99ccba84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "28287b4b-3c4c-4c35-80b1-9e5b0d16352b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac692ffd-ca9d-4db6-bbdf-e2d709aa230f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a73b291-52e9-4123-b9b6-d818ffbc61e6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1abc5398-6dd5-48a1-a071-ade4ba568622",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7e0b0ba-b878-4345-b5e0-c9690dc991a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5d7e091-2e70-47f7-9dc1-3b3df4d8169e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0fa522d-f1bd-474a-bc05-5906fd09d0ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b9daa923-64fa-44b6-9b93-5f2945a58554"
                    }
                  }
                ]
              },
              {
                "id": "95dd304b-b49c-46f1-ad2e-d935dedf21f4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5177ce3-141b-472b-bc95-29a4336a5a8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f53915a5-a320-4305-9a9a-cc4ff0bfc085"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f847d97d-27b4-471b-999b-f94392a47d00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "73e64c9f-7962-42d2-8f63-09e2845b7df0"
                    }
                  }
                ]
              },
              {
                "id": "5afa60c6-f304-4808-9633-1c0924dd5a27",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "844eee01-370b-4dfd-a160-7fa1668bdf67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9c7e4cc-10e5-45d1-adfe-99d2ed57cf5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c849f72-7f76-4967-82d3-388f606c1552",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7fcdf257-1e53-4dc1-bbec-f7b3356fa7b0"
                    }
                  }
                ]
              },
              {
                "id": "9b5a852e-bc09-4de6-84a6-0edee9dd289b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2506dc2-5c57-406a-a207-2e2c0e737cef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8bdd52b6-01b8-44c7-8fd0-81a645dd586d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0b34dc4-a48a-4f23-9c09-16890e8cd8d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "def3931f-f22c-4cca-99f8-7dc1287c4a75"
                    }
                  }
                ]
              },
              {
                "id": "b44af1fd-69ea-4329-8574-128080a33f9c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64581017-2d9d-4e4b-9d21-f4ea84e68e4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "488fd15f-d3bd-41d9-893c-a818ae2a7915"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ed5ce15-b01a-4821-90af-077079f69acc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5e5c7085-4bd3-492f-a4a3-aae5bf86e37d"
                    }
                  }
                ]
              },
              {
                "id": "a4f00be9-3a03-408e-8c58-39d00eab0b0f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7826762-3981-4467-be01-432924980a67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "140ad01f-7627-425b-a011-0646f1e88818"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccfa19f0-1991-4c6c-b27b-d6438fdfdff2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "81060157-99c1-4802-b3e2-295d4fdec4c6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "490fd5d8-e418-4faf-b0d7-5ff3b631f652",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c2472bf-67c8-442e-a143-5605bb1c19b7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1c0f38c3-8a9d-4fe9-bca8-01ebebb225e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50b26e87-34c9-412b-b2df-8643da58ae82"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "609ad0ec-9780-4bd3-9ee6-1fc01541f964",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7b6c4b05-e0cc-4f1b-9b3d-a48190405841"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0985053e-a187-4a48-8265-6e8234195464",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f766d6ab-fd69-4706-a0b9-7cd7b1a05fb8"
            }
          }
        ]
      },
      {
        "id": "92f25319-3831-4457-9525-25b4c66ececd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7e895c7b-c40c-403a-8f11-5e407b348142",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fddb1a08-f733-43cc-9c57-f2be86e1a823",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "68fad1ce-6534-4057-9585-6f7abb4e6b9d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ef7b01-7fc8-4152-aa9b-1214acdd3843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd8456d-bcdb-4f2b-a529-adcab0ba11b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9768a08-8b9e-4fc3-97a3-fe0bdeb18241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a200cd-c265-40f0-a417-82420dbccdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91166e7-e5f9-49d6-b2e5-6f122031215c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e2b071-6ac9-49f6-992b-38f34513bbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d0d10f-6630-4133-8b01-b2ed9f75bf7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10048e6-aa9e-4eb5-8ee6-7d4f8b672b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "15a82251-c1ed-4db9-a62f-5b32a21ffc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb74b45c-377e-47b8-8811-8f9f1f7a2ec4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d1c444-10fd-4b91-851a-7ef068c450eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b562c0-9a09-4f02-a65b-df820c570d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0596d5-6949-4fd9-adf8-8808fa69be9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "021e8244-ceb1-4c39-9333-afcce19693fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d55694-f2cd-4e84-a484-6a3a7fd55178",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2fb0b9-bbf2-49e7-8e0a-b80ff4652171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "194e5fb1-db12-4ecd-90ed-37db79698456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af4727c-753b-4dcb-adb8-03c81037d46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c059a425-4ec4-47ca-80c8-607f43549619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15dafb5-8a79-4a4e-80da-5c8555a345ba",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cc7610-ca24-4770-a9c2-3a682d7947e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34ef403-749d-4a81-9a6e-8cf12d8357be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6947200e-cdf4-4298-947c-36ef217610aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d14cf69b-6e12-4313-82be-24968f64f3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d54531-02c5-4ea9-b997-9cd9cf14ec01",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5327a626-2cb5-43b8-afeb-0e454ec6f959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a131c0b6-4d7f-469c-b459-7066566b304c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6279b2f-8450-405a-b505-9490065d3976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9016f54-f8c0-4963-b17a-cccfed3cb9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b26c15-8bbd-4160-9305-220a1995a0e6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a04769b-17f1-4b19-9761-746b404d7de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8267183-36f2-420c-90cc-0fe243711088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c90c77c-c36c-403b-a727-1b88c178057e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c62f02-8383-4da8-93ea-815e329d1a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5394996f-9bf4-4d14-b55b-d46d7cd3d960",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3663610-bf48-47e6-9c23-ed0c20fbc005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff457729-b3d4-4140-9ab0-9ddd731cc075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecad0bd1-9b30-4758-a495-d6018449d6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4c331d-d8eb-4c06-ae95-917a04cee525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719e6358-4280-4cc3-9768-3561e2bda3f5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9145e64a-9d41-4818-bb89-549efd105f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146e70c6-0a7e-4c7e-8752-bd777eab31c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77cc92f0-80c3-452e-9119-c37188d98bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51b722aa-004e-4186-a011-e101b237c655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be9a8f1-5606-44cf-b62a-eb5dbae4278f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff52ec0-5421-4266-b3f7-dd3c46de27bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f63497-11bd-498d-8f88-7f980ed6ba6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af5edbf-d1be-4bc8-9a65-efb84c81581b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "544e5781-57da-43d9-8fbe-99d898214481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1e1122-410d-4bfe-bda5-7f6a92cf40a9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1911f2-76fb-4fad-9caf-94e24eac68c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c85bb6b-ec47-44f1-9369-ee4cf52f5b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de453bf-ef74-416e-91c1-38ef39d49533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f90ed21d-8725-4fbb-a0c9-0bcb1679eb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9ca99d-68f1-4c59-90ac-e36d94d90ff1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da94d66-94e2-43d5-8c70-b83423bf4f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2789cdfc-88d4-41fa-9a54-e2b05a163bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fef381-f65e-41b3-8789-2c3de2c29a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b533448-c506-4222-b6d8-a5d6d7bd7395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efecaf8b-6fff-4088-a264-1ce6abb0c00b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4724b275-754d-405f-8672-56f3b5a366ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7989e9de-9030-4918-9242-7e1e8b5d60e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d1a7db-412b-4baa-b126-0aa573893b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43becec3-b593-48f6-82c5-622312e6f226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf762ea2-14d1-4dbd-9636-6aaa9114e8c3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260acff0-c39d-4553-afa4-466588846d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0c51f9-826c-4ece-82b7-bd98d160f7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e505ac-400f-40dc-82ad-aae7b346afd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9b07db3-e8b2-45d1-8b2b-8289cc5908d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8a26af-33ca-48fa-863f-eb470487a6ae",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9489447-e3d9-469d-8819-074b4ce9416f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf981586-c836-4d09-a3ea-fe6b026e1a98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3fae15-7837-4742-b2c8-8c401035b7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e47ed0c-db29-44bd-85ff-4f81c0885b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b6b8ac-1530-41e1-9a5c-2167301ee2f0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee62137-0cfe-4ac2-846b-e53b2287c9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6069ceb4-7a46-44f3-b1a0-2a33ed0a4f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240305e4-8573-4da2-9468-177a43a36dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "df871347-5c50-417b-9e3f-f274f847d378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156583c8-ad50-49eb-8734-b1dfa3542401",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52739fe-b9ab-422b-94e7-b35e3ec0faa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89426758-2d83-4a94-bd14-78079b0c5375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb36140b-688d-4aaf-83ea-555bd3ba4f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d993559-01d4-4400-b29a-006769ceb1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a01671-d5c4-4d06-8103-c10aca94dc34",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d0fa2c-9299-4453-88a3-0f73a938eecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440a5526-04e5-4dbc-9ed8-16c2f2535fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475dad4b-fbb1-4792-8130-eaa437380f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b8ba0c-2b52-485a-880e-6efd21a862e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb769424-d3b1-4931-b094-9bf801e7ba92",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e94b757-ba59-42c7-a988-b17726e16377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800c63c0-6b3a-4e83-951d-a417315fc301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd65cc9-0d26-4357-9398-38f2701d1f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3cb992-1529-4486-b386-2a3e74e1e1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f550d891-72d4-4ece-b776-96fe0e3c19aa",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11682467-3380-472f-bb39-c88cd7f841d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67b2485-bafa-4cdb-9fc2-03e47c630c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe6dbd1-e341-4394-a298-cfc0e1fd14d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4bc8179-a6c1-4289-9bbe-800f6b23541e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1199aec5-6608-4dc5-832b-1139bf496289",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5992bb24-c026-4380-b373-e98bf98a3cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7164b3b6-df02-4f4a-87a4-ec3e687b308c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528bbbd6-8198-4517-a708-8b93b54d3402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1dfc2d-0065-44e7-9edf-c65acff44499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32eb017-2936-4123-8c4b-1ad322156be0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3077757a-b0a0-4054-a6a9-216c62fa33f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2942e38b-8ce9-4ac7-adb7-455f98b859e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd22973-2dd3-4860-8d45-6482c04ced4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e295c10-baa8-4f55-b8e8-85f2939ba9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195b1a76-641d-499a-811b-4ff2b4152147",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8276a1-a602-49e0-aa72-4cd10cc2a740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ebd143-aa7d-46f6-8bfa-e6100c908e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9143390-f58c-442a-b46e-cb5171477d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa11a57-f6e8-45f9-919f-da4816c2df7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ba0e2e-0cfc-4d04-9af1-91cbfa7a2092",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57427ecb-30af-47f4-90e3-e6e3b68d7f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01d043f-9a68-40e0-87df-6b04086a8654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3efd13e-3ade-4a60-a334-756ed411d118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91dfea07-4dda-4957-af91-ce7c43692b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb79dd8a-48f5-42a2-8e1c-ae54e8dddfc3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0d557f-f1b2-4e5a-916f-733202544f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2379690-5ca8-4559-b486-7c92a3d8ce33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996b37f9-925a-4a9a-8648-23d2b6dd4f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "616f6b44-9d31-40dc-b9e9-64db1af8b60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a817cdc-4073-4bac-82e3-003141cfb3f3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d6b97a-4e0c-4f2e-bacb-ad66ee06ed1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e608abfe-7d44-4e94-af4f-b0bb7122f6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f0d84e-0436-4886-8d9c-4f586ae7cd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "022af35f-da34-44aa-99a1-a0bac54f7add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91f3408-79ee-4180-8b79-fe893d27e5fe",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3236da-4b82-447c-bc78-d17da2db209e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e04350-6206-4a13-864d-229857bb75f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aec4098-d6f7-4158-84c0-7174d7fdcb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4aa838f-114e-4453-b9ab-3e0d44a225f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1768056f-9e8d-4f30-80af-cff74e6af28f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5d3db5-c93d-4101-9b1b-d6c1dddc6c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c17d703-cfc8-4768-9bba-344be99b49e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e5b298-3b4b-454e-989d-4164ebc80489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08a896c0-610b-42f0-a423-8a5502a74c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19084ec2-2592-4431-9933-f139ea2c3d6a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6c29bd-4572-4e1e-94fc-515c5cad46a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc8e7cc-7dbc-4ca8-92f8-978b80a2087b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f08d15-b863-4257-aa92-4f1852947600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7588bcb-7d09-483d-9743-9bb903025a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0c886a-58fe-4863-a54b-2771dcec2a53",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18c6a45-2ec4-49a1-9713-76cb56b000ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d19d51-f75c-4598-bef7-d133e1ad0495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3c9cc5-da51-4c0e-b9ec-f3717ec10601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da41e2ae-e89c-479f-9017-78287af35d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023ddd12-7546-41b6-b341-a32f6de99436",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4b0bbe-1235-4771-8070-2ccf5c50ed80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ba4ee6-f6e0-4117-9393-98cbbd030e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b6fe3f-8fc5-47ac-bd0f-57a92a8dde34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd173a0-a1f5-464c-bbbb-db9ba548fc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b464c8-17b0-4636-b37a-5e0106a68edf",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f09716-01e7-46e6-a23b-7ca89ea062c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba03b838-6022-415e-b768-e0337bc6e09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deabb43b-c830-4f5a-a408-5d99f3d4cb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7415428f-103b-4923-91e7-b0628f44b405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9d78ed-20c8-4800-8e00-a7e6db16b45e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db607bb-eaf4-4e95-977b-a5d26b1811cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89891418-dd22-43a5-a735-1e663e6e693e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03792fea-3bff-4caf-ae13-46c20a78adcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab34a1bb-7835-48f0-bcfb-fed2873894be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ef1fbe-daf3-4cd7-b867-918309eaa13a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b282fc5-b6b7-4320-9dcd-9befba899d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fba8e9d-6cf2-47b8-a1d6-42b5ad42e0d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3313ae-75a3-42e4-b50f-168a7c86493c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff901347-7a12-4713-a4e6-21c4c0a2bd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fe1d81-b189-4f04-ab8b-3ed8268d75b2",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eaaa63a-1206-4ee0-afd0-a63bc7c5217e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f664a786-00be-456b-ad4b-4eda20ed39d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3759456b-263e-4438-ab43-71f61f290808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75ad3053-351e-4a8d-ba03-f0d0f9aa6a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0949d53d-c8ac-447d-b8e8-6fd1a1920c7c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91907d21-71fb-4f72-a9dc-23ef7d898c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964d188f-ff42-4b4b-af9c-f348fd05e88a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07611bf4-2287-438f-811b-2580a17d6129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff89104-6ec9-49e4-bb6d-34f9f18b1f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1448f66d-3ff1-488a-b61c-0cf1714de904",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5f2b04-a739-4abf-aa04-6f8a822e476f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2af2c4-99da-4d99-9196-4ac48791152e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af90d0a6-89f2-403c-b58f-46dcd9f73b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74235009-7e52-49e7-8f01-c4893be4ab93"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f0630adb-67d1-40bf-9473-5cdf3dc33e12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bea44b43-c374-4e88-ae45-c01dd0602de2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5881b0-0cab-474a-8315-09de03c66cbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c113832e-c23d-47df-82c4-425d0917ac42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "127f90ab-69f7-45a7-b7aa-ecfa27836605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2faebfd0-d389-43a4-8af6-1964c42ac068"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3310906-87dd-4741-96b2-5b5675de6070",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eede794e-4568-45ed-b8ed-65c4ea4ce772"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ab9c20c-b10d-4a5f-ac4c-4814b0809791",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2db7ff40-1935-4412-a32c-4b56e3eab959"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17830f18-b7b6-4dca-98d4-149da3ea63ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "43dbd950-df44-466b-b3e0-ffa728b67af0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff8b0a9a-8aac-451a-9021-406cdb9b332c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f494c98-72bf-4142-b68a-a42c1008b93a"
            }
          }
        ]
      },
      {
        "id": "ba0952d9-e481-47c7-b144-6af4fd954a8f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0d43d3b2-5c0d-4f6e-980c-2f5d7b7fb6bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "515dff1d-7dd1-4e79-89e2-3451206c969a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "578f37df-90a1-415d-8024-72f311380cba",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0218665f-4db2-498c-91d2-b74abd64f4a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ec23e0-3caf-4e49-9688-1cce90d426f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f5cd81-f1d4-4779-8844-213fc935a7c4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ad413b-9728-4ce4-8302-c7a59c0a75e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07414193-2ab8-4716-8a64-e0e40d974f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb96b51-a47b-48dd-a403-7ae0e023c69a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4778f2f-adcd-4cd2-897d-bea0047d4a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c82d8832-a66e-43cc-afaa-3f8e2e303df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d1c957-cecc-46d2-b508-ead8d641e39d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bea3721-248d-4761-a7a5-c2da3749ad13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ad114c-3cb1-468f-80f7-e377e35ae776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123a9fe5-9724-4264-87b2-a8ec57c4f2ef",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055d0573-e107-4170-a217-2077be2d0bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14988655-b184-4c24-83f4-6bb097301651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8984180-9080-4f49-9a33-1798c76a8162",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e1c221-0a6f-4c9e-9012-179e3d0ba8b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fdd2fb7-9467-4195-8cae-09c9a4d83b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b21bf6-804d-4d53-b45c-fb7f8918848c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5352c078-0519-4054-bfeb-34044d767144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396b1a7d-9011-4e0b-8ed0-49fa37fcef48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48eabf25-faf3-435d-af13-fe95a12d3a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b14d53-cfd2-4220-ad26-77da04cf631a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f652ae34-515f-4726-9c46-b3fd4d3e795e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674fac5b-ae72-4d5f-81bd-cefb1843e90f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd0aa72b-834e-45b0-9ef3-82a23efc8f92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f83d910-1458-4252-b74f-11868699c4cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cf3abc-cd6c-4da8-a194-561362a5507b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f239a6-af93-449a-9229-a19d386c53bf",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b42332-da0f-4c8a-beb6-122c3a1b25f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af80030d-b7e4-4b07-9f17-65967ca2da0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def23eb5-90f4-431c-aac1-c2000a7f9a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064e4674-395b-4e7c-a7ad-6443d7c0f3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1f8d67-78ec-4e09-8ad6-fb084fac8d23",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec42cfc-85f1-4832-98e5-d40b88b87ad6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef2600a3-e954-45bd-894d-a0d41221b327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd0542a-1ae3-4e26-8d7e-a61e34070a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2abcfa6f-58bf-4a3f-8e67-360f399233fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5e8591-c9bb-46a1-9eb2-6747e1a822e1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9b6d09-a47e-421c-a71f-93b74525dd03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e695cf-0af9-4fa6-85b8-55a434b23907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "128d96d5-2d70-4f2c-a874-321472c0c55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d683a8e1-2f45-4bbe-91a0-47f5368312d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f93632-db92-4d83-a9d8-296afd858190",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d0a86c-cd84-44c9-9e50-e26ef514605f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec210cf0-a26e-47b7-b29e-619f63fdbc2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4eae899-271a-431b-8056-4907a5a9fb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4cbb45-1acb-4084-abfc-07d6390da535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db852d6-6411-4678-9e5a-6f13a24ab2c5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6753249e-639f-47f5-8f80-0a4e614d523c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0abefb10-59e6-4bb7-9c31-96aec8c90dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9cb61b-6337-47e1-9be5-6bdae09ae7c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec4607b-ce7f-48b7-9081-03a32128276f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8284c7-e46e-41f7-b071-734300216e13",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852e6816-c00b-4c5c-aed0-3460275adeb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7a707c0-09ad-4239-9eb7-3592b2e7cf03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe02ee6-3e11-4f46-9d17-72b4554bdd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385ce8b1-e8bd-4fd6-9508-12e8f2810b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc01e505-21ed-40be-99d5-18a3265368db",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672266fa-7b7b-437d-9b11-5e44b3f1cf51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8896097-ac41-4e02-b6ae-cc3d7ab6b446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0d1866-9fa9-409c-9c39-7574f8c81f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fdb49e7-807c-4dd0-a387-1b3d684b1481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abac5a4a-c863-4267-b0df-c7b89971d9a2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce633427-f2a3-4c22-95dd-e96ef5bba556",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaacfb63-9167-4d31-8bd6-ec89521a9996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f22a4c1-a263-4c91-8f1e-74cceccf5509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d073d0-c5cb-4e07-a738-b4e75ead60be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8f879e-6a04-45e4-8e6b-14fef1e65854",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e5cd5c-0e25-4d5f-bd7d-5ee42668d9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74ed129-3bf3-4e66-9867-6e808e5a60d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f656db0-3bea-4970-8ff5-53bd536cf038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f8ddcb-3dad-4d64-b70f-4ad173bd2c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097486ee-4297-47b8-afa4-97009f7af46a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095d6d35-62bc-457f-8546-060ff16c32d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c114e4-83d4-4b7d-938f-bf8b7964c5f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e876612f-2bcd-494c-94b7-30036a5b0908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1b351e-d37b-4ce5-be55-7fba3cbd9f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a2817a-fc04-45b3-9164-7066d36f3ed0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9deb7dfa-b422-4673-9acf-c713a2d4ed31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d685bb96-cfcb-495f-a93e-c289ef3d2045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc57f019-96c2-4241-a00f-220b429b9155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ed6853-6f77-4c29-b554-ef513af00d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324092cf-30c1-4dd8-8616-20217fe76833",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac7fd36-e393-4086-99d5-45986e009ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a527cf30-05b3-43ce-8702-4ee1e0528a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd54a642-0759-49ab-a6ae-41fb077b9425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c650ac-cc8c-42f9-a319-ff75b69540b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436781fa-6c10-48fe-896a-f01a9ba0f65e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a52a6a-65ee-430e-a2de-3ed6788bf66b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a8a9dc-8894-44f6-a5e1-634d5db3991d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc01e4f6-d903-4438-b77d-587226e7eacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39245b85-b165-4eac-adc9-babb89fdb16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e8e743-08e9-494e-9bc1-fd25ce64354f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eec07a4-5624-4146-b58e-373f4e8f2f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab6dca6-09e7-449a-9971-2e53f3593dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113c270b-c60c-4eae-93cf-ba0ed2aa878e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f569ca3-f667-42ac-bf85-2e01fac53cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f8af6c-1134-4bda-9cbe-0880d4ebc3a1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ca4261-3955-4307-989f-e186e29b5422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c64cb0c-b652-4266-ae21-7fd39dbec6d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c032b4d-f0ec-41c3-bde9-1c8658adb8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aed42fa-fee3-40ec-bd59-0269e3381ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a10b9e2-0c74-4d72-81cf-f339c4c8c294",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7994089b-826b-435b-a269-bee3e2e5f761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aa699bc-2136-42ea-bc51-b3a5ed66bc7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8980c877-b214-45c7-bf67-6e3fa10a899a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c230f7-a76c-43b5-819c-bdece60ef641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6ef42e-acde-45ce-85fc-ab32deaa2bca",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c907dee-c655-4773-9940-af8b6c0241ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd8540e6-09c4-4a6e-baed-af169cc08177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef21bd5d-d467-4230-85bf-69bf1cb42ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1fe8e50-6376-457b-9f41-db79371d4020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087ab805-4140-48b8-a9e6-74a4b038ea7f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8175f5d1-a2d8-4a69-a456-298e91407d19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "081fb5fb-5a1a-4941-a6d8-100cc11ab4fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcea354b-6c09-4701-8b4f-bd1000d97c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d52ed18-0787-4534-a8a6-844edbc42ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ac66ad-f540-4e86-8711-c388ff0e013c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15ab775-2748-411a-abe0-642da46328c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77fcd596-4621-4792-a334-c33abf401fe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15627205-cf2c-4de0-a3f6-8b03ccdc4330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10d6252-5bfd-4b96-841b-060af3776651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f40038a-0713-4c17-93b8-fcf77f8d6199",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f983ba1b-074a-4e94-a0e5-67905ff15cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cddd94e-2137-4bd9-880f-d4559b9baa9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc39305d-f581-4af6-a333-8d576f981ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c5dbbe-229a-4696-aba4-d121e92b9919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78884a0c-6902-4425-88b4-d2766bc80388",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c32696-7a9c-4546-b24f-1d58029ff6f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cc06353-1e81-431a-9dfe-3cd9d8a685ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "853f4d49-1b97-423a-a0f4-eefceeac2230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29eaea8-cbf6-405b-8e8c-551ae1bf6a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419bdee6-c67a-436d-9fa8-352032468bfe",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8f04e5-c772-41be-9750-6b3d34cf01cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19abc61b-8682-4eb1-9431-80c9ebc6b738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "978a89e5-8666-4e8c-95e3-a800332e55df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef461c2-a028-4327-aeac-dff5663220fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c1d423-1a80-4499-8747-e836d05692ec",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072b4db6-492f-444f-92b1-a46870d83996",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09d4a054-a856-4af2-962e-13c73ba5549b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c34693e-2cfd-4ac8-b213-09d0ea810fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c3a8b6-6b4d-4d46-b0e8-a7b117be69eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caef26b6-ce83-4f69-b0f8-47584fde4e91",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2081ca47-93cf-460f-8cd2-2aaf2e45cc22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af69dcd4-2f0d-4a8f-9752-99385b5f05fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c249cda1-937c-46f6-9a62-84912ef53ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f714e37d-05a8-47c9-97ea-c7c7c11ca312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2637ac9-cd79-40bb-808a-5b93156e8c12",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd542ca9-d2cd-4e44-9511-e5e36bda708c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87b96df6-af40-462b-944b-5b35fed7f0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2a7318-ae2d-4127-9986-cdbb0c6a4b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02c66cb-8904-4dc0-954a-379381565929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82029532-16a4-4381-af27-fa7468202564",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc12b1dc-cd4d-40b5-a79c-a51934f369a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0722b287-e208-4b53-94d1-3e88b62eb198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79864817-2944-4181-aaf2-5200dab85ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212b15fd-d30c-4be6-b030-dd177ff9fb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eef8d54-7834-4427-b5e5-54b55db2088e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f0785f-05e9-4e07-8d47-4399abfbe117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83bd3efc-ead9-41a7-adf2-1bee27544ec0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915db892-2b07-4329-b641-6a86391fa5d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b715310d-0966-4ae2-aad4-9b86fefea0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29843591-a907-47c0-84d9-908eafd2de00",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80b8621-bea9-4cff-aa76-0200254c161c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e3f2fc-357f-49df-8211-f3f4b85d6917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c2bbf4-4d22-4650-a8f7-f94220070d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9e734d-1958-4422-8ed3-a2ebb7fe1454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455f65b2-b4e6-4f30-bdcb-f0e7ee4b9afc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed06fd8-4d54-4442-8d25-a48b0ed70aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c979a55-815d-422c-af4f-39b41a29b476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f571bf0a-239b-4a33-b6e0-9d7cebc48356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b081a95d-1a7f-4bfb-b244-69243f24178d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539b1c12-0655-4744-85e7-2646d249e441",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5671c38-3fb1-4894-adaf-04808e5b5dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "115f4a98-1219-452f-a5cb-0b316f894e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "954edfa8-b83f-4635-a5ec-dcf2ec59f74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9206966a-48e6-441b-990b-e6d87ef57005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe47daa4-649c-4376-9f37-78b6b1852cd2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3344328-db97-4e57-9541-9ae147c2eb6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e1f785f-945d-485b-9597-e8b9470b6bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39dde34-5229-4df0-9994-7c53bbc9ca41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23459274-887c-4986-b83f-e89ec69c8f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04947f6f-6b25-4a89-bb2b-328bb7d1a15d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878aadbb-49ce-41dd-ac8e-937da25bdb64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9199c34-3e84-4c76-81e8-5db991d5bb74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4974a46-3535-41ae-8bf2-f1e3e739d752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc545f5f-9040-4d13-9ba0-221a3c272ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7a4650-883e-4bc1-b007-a05619f15f93",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d65f6fc-0baf-45da-aee7-44cd1788f4b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58c0d91-0314-4814-ae55-a8ea7915ed83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a439ea-9451-47ea-8eb5-7e370f3a4df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e290355-0f22-495a-883d-0de19e063efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c001354c-08a7-4230-885d-3eeb8294c42b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0074670-1d22-4d52-a0e3-2a46b2cc933b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a35f0d-b700-46d1-a22f-5e85cd2327ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db58bcb-d3e7-401a-be8a-723bb93c3b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5dd029a-26da-435c-b935-64940287f60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93556ee-b09a-48d3-84ee-ade0fa32a724",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce294e7-9dee-45cc-a456-6145a3fdd4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55df7ee4-047b-476a-88eb-542a2aef4b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa4b14b-9e53-47a4-aa16-ca0cc89df22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2be4940-5570-4c28-b44f-63ca5051cacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6028c06b-debe-4a66-a4cf-b7e943d98a81",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c464af-2205-435a-9022-1e4f73c16ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d885c512-243d-454c-8f74-f62c4848742e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eece136f-c74c-40d0-8943-981d6364a8d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2f2583-86eb-47bf-997f-241e9a411c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c82163-821c-4bd9-a55b-fb30a1faf383",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5d8e4f-666e-4c57-8b5e-a7a739938988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5039e22-182b-4b86-8ffc-4aae4a8c1a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a92551-3857-41e5-a64d-4fe494d525df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dceba892-8004-4b5b-9be5-5a2e816c8b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f0da24-d548-47ec-bbd9-da98fe7c8fae",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d95f23-3821-4a0a-a8ee-68583e291a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d08dac6-9cce-472a-90fe-e26bfaab26ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbeb712b-cab4-49ba-bab4-ba23b4c76979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638126e5-9f1d-482b-a3fc-338f0f4fb2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74424394-0163-4fe9-9679-4f3991c7d5e2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf93486-dddb-4d4a-80b2-b65d8deb94d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a182f3b-ba35-4503-ad14-699125b83153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b75cc29-8a3b-43b1-aba0-3aedab465410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a639a2-d4ab-4ca3-9dd8-3e675241f9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b66f308-9489-4c7c-99af-5a8fc26b7260",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a33ecc-3fce-4304-b472-cf7a75cee0e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0e49f4-e416-42f0-af8a-e1cb56cd424b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9f67ad-ff42-4382-9da2-7d10e420b29c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33709f84-140c-4689-95d7-be90a096d358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7ec64f-5eb6-4b37-a0b2-1d59e1d71979",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62c72e6-1189-4fc8-97aa-74e73927b10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9f5229-1000-47d7-a974-fd75645c4a4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8287ca-599f-4163-a0f1-ccbff5c641bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfbba50d-49bd-42b9-8659-1f4a4946bc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29e70b5-8cdb-4ba7-9f41-6e5cfcc74bbd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c5a09d-1553-40f1-a9ca-d23ffa178b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db7715c-2d72-49ff-9117-19c73a202233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06ccf36-96a7-4f88-9678-bbed03de0973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d1208df-c875-4dd2-9191-770766e03ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc66f45-d27c-4861-ba0c-bbe0f159273b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e9c87a-8e74-4283-a732-b175e2de3c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266f2864-f69a-49ab-9e61-c68b953ae90b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8c0971-2b0a-4cac-b704-7fc7281366b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22d102d3-d421-4949-b7f9-02ec8df91e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e334bf-221f-4a34-bc91-b15444908fc3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5006e084-fb0b-40d1-9c26-41b134160b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3216ee46-9cd7-4fa6-aadc-c0453075f5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406f74df-8489-4e5f-8c8c-62c6e214dd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba960c0-2d71-4d21-9871-42332def5734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43b695b-92b8-49c3-9191-6c16a98d0780",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4e5928-a63d-4c6f-b569-24e729734526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c732a6-de2c-40be-9af1-afe9776ba328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60932959-98dd-456d-88ea-8c8bc3c8a48c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1a6502a-3c44-43df-8d83-639575464cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5546c5-9f26-48e9-babc-8d7858d1b8b7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0fea672-8eca-47ab-b6fb-1a926e601b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ea88c1-0807-4ae3-b759-a1038e0227c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4da045-0fca-4812-b277-6ec0ee15d698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fe55ca2-be3b-4eb3-8941-f08a68cba16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b28323c-be19-4b7b-9482-b48c28fbe7f8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc028e7-303f-4bed-b821-abd532d11403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e0c168-e824-4b1c-989a-ae518d1c8ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66371eb1-d686-460d-9218-e87a70e295f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b689d0-f577-44cf-9ea9-c530db858368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45f7890-c441-4c7b-bae0-d1da8ba3589b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673723cb-6b07-4ad5-af94-a946a4e7f3dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58976cf-d5ea-4231-8f62-6a78e6e265b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a36d6c-e0f5-4c8e-afc8-c71026d73725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f6ba42-c496-4428-befe-dc91802d6ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78df1920-dc78-4157-bd8d-28c71de027a8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e7bea5-9bb1-4b9e-96af-67708c13a668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82cd06e-3b3d-46fe-885e-279e87d479f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40ae520-e0d0-437f-a11a-0646799978b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99acb78-0051-4545-b0a3-b0afe604c10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eebcc27-b970-4982-92b9-1b1be1f09d44",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc82208-82e9-49cd-8e5b-b88655be1c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b79c0d-f847-41b5-bf3a-f4b17c411e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1778ee7f-92a9-414d-a0a7-237709e9c137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb9712f-e72c-486c-988e-a02e4aaaf9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e165687a-b026-4e1c-a7fa-ebd23c003f00",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5598775f-b50b-40ff-8b41-56feb97a6f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954afbe0-3a61-42cd-b1f6-0a678f4de031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e153095-2ee3-438e-b0eb-16e18db116fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df86e12-7c10-4431-91ec-e75e14f49c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae9ac91-90ca-466d-b30a-031b059976a3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe2a3ae-aa64-46bf-b394-24495b2b54ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd9f1cd-9fa2-4c97-a60c-deff7cccf846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2475d24-a038-453e-bc92-a1298f21c494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb930042-3222-42ac-bb29-8ceb0d1d1768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f8817b-6e3c-49d6-81cf-275f25112385",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8c3df7-c935-402c-ba01-5341d14935f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6977bdd9-83c4-49f8-b9cf-a27c524af45b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea908a20-9a86-4d59-8cef-e5dd734f176f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d66b26-a938-4742-ad9d-7c670ff19762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f96cb5-fa75-4f47-b104-17869912e3c7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a77df9-66a8-453c-9c5f-64b54ac1eceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a22c63-b529-44ed-9782-1d44d81dc3bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb2a5b9-782b-4483-bab1-26e022f53739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3650a9df-f486-4760-8e76-74e604634ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d6d5e2-d251-48c3-a607-a3ad8844742b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76032062-dbc1-4530-8d4c-539629a99ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aeaff70-ab32-4161-8ad3-80b70f09f4e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd2f4ba-4002-4073-a18c-ee0967728c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87279323-82cc-482d-83ab-dfdc827dffe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81404e2b-840d-4d97-b32c-214b006124e9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68817c6-6a53-4cf8-9ec4-7245a200b0c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0d1f96f-69a7-43ee-ba70-da0194d1c168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c74edef-0c38-4c27-bfd1-b171a7216f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e51e4d4-a281-4899-a9cf-1f3e1e3f285c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38686bdb-ece9-43f1-82fa-094b0cfbd9a8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b375d33-3bc9-4880-9aac-0fe7bb361292",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ee6f3f1-55fb-4f2d-9445-dc6958278fd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ce56c5-54f8-4f37-beb9-6c2915f4de35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddce84f-4c46-4759-8cb1-99dd36f1eb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b422310-7f07-4d3b-85b1-ec8fedc59783",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc918ed3-baf5-4727-bdf8-a93661f4e41c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df2e7770-b14f-4913-941d-4c902d46282b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d74c8da-7aa3-485f-a3aa-f6477d0603f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af200d68-09aa-47b0-ae52-c75c1457a65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a9d11c-88a9-462d-bc65-457732fcaef3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5db292-6c71-498f-85bf-b5cb1c35374b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "915b0866-26a2-4655-a92c-9daf1999db21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97cbee3-60f3-41d7-b64f-b3ae58357130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5456523c-ac2f-4565-8f19-99708ccdcdee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ae4336-e8ba-478e-ade6-aeaa08b7efb3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8f57f6-0db2-4e5f-8a4a-340d22565734",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f76da88-9c61-40ea-bf18-28c5c4f41b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b383f1c5-f912-4130-ab4f-dca745115779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0855f8-d188-4f55-89bf-684978edcd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556eaa7e-ae7c-402e-9175-07c67ee9ec49",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f758e9ba-4c13-409d-8510-3bbb78ed4a3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9366ab85-5728-43dd-be0a-62c66b526cf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54603ee-31b1-435b-9b65-5361b3fe0072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6cdc56e-b016-43a9-bc85-efc7b7ddd4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d69cc8b-ad7d-43e7-9a91-d7e0a9d9f52f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be112f1-157e-4742-89f2-4908ec533b3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cb34c1f-70b5-4fe3-936f-5e67087b50a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9298db-7ad8-44f8-ae92-e1ca7b5e51a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317e4c48-fc28-4986-9b68-de67d68ea46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee89b263-ec90-438f-8e2a-e944056b0bfc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbd7a12-1b69-4a8d-afcf-53771af01f8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc671cdd-c5cd-4878-aedb-c4f45eee34e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9a8439-a7bf-466e-8113-47d59bb1c1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f10281-40b2-4c04-8853-b65b14baa8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1297aa-2739-40bd-9604-4f07ca771355",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27da9ba-4e86-495b-835f-39b2a53d4da0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d95b727f-c3e5-4520-9e10-5ad391d293dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab94869-22fd-4667-8bdd-dd4be2a1ec34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ede3ff4-e18c-4c0e-b8df-4613d28ea7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ac31b8-5906-411c-a09b-d1efa4385dac",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99247f64-e81a-4a11-bade-a3df18bdf0a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b97c7d37-e66b-42a8-b1be-9d6dea6359d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b017371-36fc-428d-baac-5bd93e4c15cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c440a616-288f-4eea-9b67-c270d142661e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42454a6f-b5fd-449e-b880-6f0e446b1317",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48ea0fe-2441-4e80-b3e0-f2a31148ef42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2732cf9-7d92-4075-99de-0c78bb28b902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba83309-cc50-47a5-8843-3479a3ee6a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb91ae7-a97c-4984-976c-4371f1133260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315df8ae-bf4b-48d0-8818-19aa323912c0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47802423-2d0b-4868-9aa4-617bf4feb8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61b18a82-7c54-498b-80a4-ebd6946423d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "890fd3b2-63d2-4636-9618-838ff5bd9597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83be759-7492-47d2-a34a-7396a43b25a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cc056c-2a95-42d6-a7fa-c6e0b2f33b64",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560f1602-7b69-448f-a515-70d7592565ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3066a5e-0e99-4370-ad7d-d910b21bc228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cfea5f-c822-4424-a1cf-fceb5b60746f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4cf43a-957d-4584-9bff-e930190ce8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6e8ca4-33f1-414d-90f7-3454b8d8fe7f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033c417d-8850-476e-8fbb-71b0a8dbd1eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80262955-c808-4adb-9c49-22fdf909f134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "057f6871-b4ba-400a-835e-fec5fa29a85c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4352fbb-f900-463f-983e-7e0b0e62a0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5c9ff7-08a6-417c-a247-c36a19e4a15e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca682d87-d322-456e-a3de-e5fac2b0923e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09c291ef-f311-4fc7-95bc-057ac2daab4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7c0a0b-212a-454a-9033-df5b70f0daf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16fb2f12-e8a1-4e82-9833-118119633634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5618713-1369-4937-a555-bf6eea5ce789",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7bc3739-f762-46f8-9fa1-a3b3acc8df6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2879211-7998-4bea-ab2c-c6aa6be3d0d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e9dd2b-1f43-49e6-b684-b2d751a60692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969082d4-9745-47b1-9189-190dddd7dc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4335a766-4ef8-4529-a18d-05314a6f456a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2de133b-de37-4129-99fa-d857a6cc6e1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5c8d2a6-22dd-481f-9c81-976f35123d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf5a35b-4b2e-4e43-b149-f42eec39a899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8415a09-ae05-4b2b-b5c3-3d0075d2cb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09394d99-b649-487f-b209-504f7bd80cee",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fe207c-4ebd-4e3b-beb0-b204a57c199b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6841e305-c508-41af-894b-d8d862ea932b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fef50e8-206c-4596-94c8-655d66412b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081a98b6-c834-480b-a975-728af66511e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb37aee-b0c8-4dbf-930a-d3ed3a53edae",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aec7fe6-b012-4ba1-b473-3a2bb2f30e28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59609362-8e16-45cc-aa6c-6c75898b67dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b16e4f-d5d1-4113-b2b7-6412ae19515d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0883abca-78f8-461d-887f-4ebc7e75a0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423b84ed-2a0a-4922-99b8-6553ddc33829",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee887e0-2579-492d-b2bc-b3970638690b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dc78c5a-6dd8-4ba3-8293-fba7ba03bda3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9882ab-d8da-4f24-b0ff-2a2a36806978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3828b909-9b14-497d-8bd4-c8349774c5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b441d6d-99db-4c9b-9375-dfe2b109ae5e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9498f17e-f90b-43d2-af64-f111863f641a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbeaa0ee-f2f8-4d6d-b474-27f7719b4b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cbf6b2-05e5-4353-ba29-2fda33caa3c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f31bce-d852-4da9-a36d-5baee29b6a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cbe51b-c82d-49b9-bb00-d1c93bda7085",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04d39f2-0093-4120-9d60-9d459e674e2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc6090d0-af04-47fe-831e-f566149bbf37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca0e7f6-e090-48d4-a840-855663cb2d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4032ca5c-7638-4cf9-b3eb-f2f8ea6189fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4677bb41-7f27-4dba-8927-16eaee2df99d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca989ad-dbbd-4978-83ae-ebae455c7089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "442ad258-29cc-4f8c-9be1-dce965229fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed74b005-314a-4ae1-8b43-bf799202544b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348877ee-0ecc-436d-b519-6c34fd20ddfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61645e6-ab88-472b-ad70-ae9923111654",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d713bdc1-faa5-41c2-8c48-d005bc00f0cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7e5a495-cbb7-49cd-989c-4a5f4a594cf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8697e9-e3ad-4283-8089-604a1aa6f98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a26992-2547-47f3-8cd4-897c1d9e4897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7e9618-b4f8-4fe1-ab5e-7d642a1501b4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d6b918-4328-4a4f-abf5-77881df0d0ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0963f7f3-744f-4b68-9019-38ae372c2948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa29c94-8781-4e23-8beb-c5a3f96bfbda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac97aeca-5ce0-48a8-ae31-2ebeb2e8bff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af796e2-3b21-4eb5-9141-25d3c4779087",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bd565b-feff-4483-80ef-7656625981a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d038fcd-5b1c-4131-9400-ec8fd1228db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27bf9fd-6376-4121-ac79-9e435ce2b289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d33a234e-fb3a-4626-b347-22d33aac1ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abca0bec-a772-4d12-a42c-4a187bc90eae",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324351ca-0051-4a29-b37e-7efd8374c9ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24619f0a-b6f6-4e87-a1a5-52d2dcb3ca32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e32a4c6-d42d-40ef-9307-faeeb555b2f1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26a3442-eae6-4e2d-b2db-d14a7b62a8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fd8e87-5388-43ed-ac21-4a080a51f30f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a79ad2e-bc52-427f-9d56-104e7a3e8209",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95706a48-7ecc-4eaa-8082-40bf762390d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d6cdaf-bac2-45e2-a808-4e7cc2f77dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a94bd9a-9c05-4435-81c6-1b0cd875ab63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb10ff7-83be-4542-89f4-29b1c3cfd758",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22d1ced-6b07-480e-b77d-60a7f701c95f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb2bb8e0-097b-4de3-9833-c4bb04640e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12b2eee-8a9a-4e81-9e1c-8b2019837e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd941b8-27e3-41a0-8e9c-32fc5dcc8c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e916f4c2-8e7c-4935-a452-f9e580c7a368",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e9e9bc-32ad-4870-b125-3a90cc36735f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "089d964d-c02d-4244-90a3-fecad031b9ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a3cd7e-302a-42ee-9074-1dc77565dc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c3d4b8-7170-40bb-81e0-7d292dc630e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a2aaf7-e4d4-4fcf-b49e-948ab6f3cd68",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8cfa65-ac95-4b9c-bf63-f16c329e2c25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f938441-3d71-455f-bd78-16d9e14ebdfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b262e6-e9c8-43df-9a0b-73732bd01121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364c9547-0951-4c95-b2c6-822d4f823ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c040510a-88cc-4245-be24-8c29123451e9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0cd50a-1a80-4469-93a4-b19d8bf4ad0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4deabf6-1df4-4990-a309-b4af325b0331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3814ac-02ec-48e7-a0b8-fc35adb13c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "559a78e2-65f3-4b32-b8ee-b60b51b3c9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e83aed-0d73-4b3a-bcde-5d72e4159e18",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ad7c05-7ecd-427c-8e3a-3ea892a8ba2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ade111ed-21ca-4fe9-a3c2-ca0cb1cfdd72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f06bccd-0570-44c9-ab53-40498c6415c8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925a8956-b316-4874-9555-06fb5ad156d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e98b67-68b5-4419-8dc5-c0f7d7b0c7ab",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befb8a2d-6e09-4b40-8846-883738b5d3c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "206fdbb1-00a8-47d4-896a-3c540d7fccc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84f2a79-2ffd-4fc4-8ef6-3378464cbcbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de615f27-345d-4c13-a867-629e2ad68315"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3cd6e01-60dd-4256-bacb-f30f03221df7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2db54bc-d1a9-44c6-b5ff-c79ee4b6377c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52838c97-bc87-4dce-98a5-8b1b705913bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0fdeea9-53f4-48c7-8727-c17f04a8ab1b"
                    }
                  }
                ]
              },
              {
                "id": "2fac26d1-b5a8-440b-9d7b-7df4a0de92d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b189c48c-8bf8-499a-a796-a708fa26ce11",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63af6d3b-574e-4c40-9871-83e077a75862",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "17cd21ed-2b1d-48ba-bdd9-47a6f138d793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0baed508-600e-4a9e-87fb-6f2d3ad48f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e95494af-48b8-4e98-bd0c-097d80aa878c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6d6ff0c-0489-435a-a08f-5c4c3afcfe6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fb4a569-5303-43bf-bc43-13348f897087"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "499315f0-b701-42a8-9ee3-518c3aa13555",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2dddf6a2-bd08-4841-9f36-5e9b3811e846"
                    }
                  }
                ]
              },
              {
                "id": "0b427079-02f6-419f-a412-f472be25040c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a2873474-274d-45ba-9c59-69061ef9d9ff",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c18d95d-32fe-4dfd-aabd-c65a3b4959bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9add9211-27d9-442a-b1c8-973ec554fa7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c87be11-fc75-4f9b-b572-60741877593c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cc9ef8-df3a-49e8-99ae-cc7aa9dd3f57"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5d752ca6-fa8e-4384-b887-a832ca1d8b28",
            "name": "Positive Testing",
            "item": [
              {
                "id": "570d29f6-f833-4a82-8297-4178dc6fcf75",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb48bd1e-9e03-4a0f-8c05-bbc6542f921b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4a096265-101c-476a-8633-1ab4f4b63678"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d006e120-d382-4283-97c1-e65447e70e99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61948f3a-2909-4e1c-a0bb-bd987bf01b55"
                    }
                  }
                ]
              },
              {
                "id": "18580835-b050-44d1-9571-f64b439479c8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5770b34-6d94-4fd9-bf1d-910b18edf20a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0506fb60-12fe-4e94-a0f4-d8b5af6a47cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "936557d2-d3e0-43c8-a7e5-9c733349fdbf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9035ca9d-1371-47e7-973e-ce3d67a49525"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21b844d2-d5f8-40d6-a437-8344f0fc3703",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "51770d42-3684-47b7-9b1b-40dc013fccb4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7eae2aa9-a02d-4a68-b3e0-ab676c771451",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6dca76d6-112c-4d44-9a36-62fae6e6d0a8"
            }
          }
        ]
      },
      {
        "id": "938b78fa-3283-4b22-bbb0-d7d38e9d79a5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a5073c8f-b97b-4777-9573-40d14af88419",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0aa94ddf-36fe-4224-924c-1e93b0a7151a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3a29217d-d070-4e83-aec7-6e85acb3cd97",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1d2ef3-5f95-41d8-9271-279deeddb5ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e22fa0e9-9d1e-4d50-869a-db6270ed8d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db02152d-157a-4f77-8ef9-724662ee0609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebc1fd94-2f36-4372-af93-78ae5ab518e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6bda39e-6fd3-4150-9971-92c2ad539aaa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8352fff6-9e9e-4dff-a36f-924398070ac2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06c7e513-685b-4946-a310-b6e3e5231bbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb10b863-e676-4f24-8f9d-6b76a925bf5b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "160ad783-0065-4584-8dca-a263af9a651e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f81ce409-d688-4962-bf96-de0912ddb85c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cabe46b-8389-4879-ac51-3ef6c96a45de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff394e1d-73f2-47f1-8b4f-0fe4867e4e29"
            }
          }
        ]
      },
      {
        "id": "d2ba4572-3d82-46c3-a512-2d6d5ae8000f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3eafe793-1c90-4bf0-9e07-b77bca143afa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "240ee4d2-d0ce-4164-a295-617409b82496",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29b4340c-a4f8-4fd7-8c0e-f2b6fe93be3f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74fa5c1-681a-46fb-83c5-0d325ef1e258",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "591060c6-5da4-46c6-826a-d5bec3bc72e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "190c04ee-300c-42b4-9762-bfd960b44901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6672d33-2547-4e9d-bc31-f003378eddc8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5297612-5d29-4417-a461-991a2dbd0d3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01d5cb9b-e690-42f5-87a6-1ea907eea916"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ebcc02b-e40c-48ae-8378-f376b2b251d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81a12fcc-31e0-4f0f-9327-0789a8a8e418"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91750dd8-a669-4f57-8f1b-d681a3683bbe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "752e8320-4c7a-41cf-9ebf-dc8764190fe1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bad11d86-aa47-4dbd-a826-c954b1b0365d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76ffa724-c471-4f2e-ab8d-21022f3f858f"
            }
          }
        ]
      },
      {
        "id": "02e57696-623c-4825-bd76-b25986670e6b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "49c6ddfb-d119-48c2-8b52-ae07644e204e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b69f5aee-d8dc-423e-9285-c99c555364d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c17170a-801e-473f-8a46-941c2c9eb900",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49213131-7c1d-457c-81ae-e55be73f9576",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9d0e7b0-1b19-4e05-864e-719c1d81233c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ac82f8-10db-4b30-9185-d50d0196653a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ca3e704-62ce-47de-9886-aeab4d95f9ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cd4145e-c05d-421d-8a86-8bdad6850dec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c875fad-ba64-42d5-adba-b4ff102d58d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "008763b5-b593-4ed1-8c88-1c7fae146371",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3c17f6d-7d58-4115-8f99-6c5457cba95a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13150da4-2514-4ae2-98e3-78b530f8a1ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "24648f26-7300-4abb-9ffe-8a45e5d9aeb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f73f960b-1156-4843-b749-fe870f17b867",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8c2b6ac-0ada-4d3b-a768-f36141d3cfa4"
            }
          }
        ]
      },
      {
        "id": "0e174fc1-eef9-45fc-9896-2e06accbd425",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6dad9c32-633a-496a-9daa-79b1ff16fada",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7962e005-5ec9-42da-aeec-41007f10157d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e386cb49-71db-47fe-b804-17652e1a11e5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79691940-8013-469d-ba0a-081ab35044d3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d187fbe-7a4c-47da-8133-03b817ddb533",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 124.67063492063487,
      "responseMin": 8,
      "responseMax": 754,
      "responseSd": 81.44853430766396,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1722818516032,
      "completed": 1722818556082
    },
    "executions": [
      {
        "id": "7026f1ba-b9fd-4eff-86fa-5a20f862bf5c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "86a39e0e-7424-49cc-bb94-6fb7fcfc0cf6",
          "httpRequestId": "42da80de-83ed-4a9b-afda-f4f7cedc67d7"
        },
        "item": {
          "id": "7026f1ba-b9fd-4eff-86fa-5a20f862bf5c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1940d86c-2020-4f9a-ba57-d1b307a896ad",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "0681a008-873f-44f5-8ecd-10f635bdfe3c",
        "cursor": {
          "ref": "db2b0bff-7979-4edd-abc5-5440c558aa00",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9c1915b1-671f-4299-9ed7-6857d73c7270"
        },
        "item": {
          "id": "0681a008-873f-44f5-8ecd-10f635bdfe3c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9d0f324d-1d49-4a2e-b626-5b5e972dba33",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "99dcbce0-768a-4029-a05d-c4cb14ce7b9c",
        "cursor": {
          "ref": "124a4b2f-efc3-4bb6-87a7-35d4d7e69e9c",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3236db66-de4b-4a6b-a021-b365f82ff9d8"
        },
        "item": {
          "id": "99dcbce0-768a-4029-a05d-c4cb14ce7b9c",
          "name": "did_json"
        },
        "response": {
          "id": "53007ef3-5a69-44bc-b2ad-c0978512763a",
          "status": "OK",
          "code": 200,
          "responseTime": 476,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15532015-9729-4727-ac4d-75e80671beac",
        "cursor": {
          "ref": "3a1c1d62-cd0b-460b-ba34-137787430b72",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "52d45c53-f63c-4121-9c26-ca8f9ba47f32"
        },
        "item": {
          "id": "15532015-9729-4727-ac4d-75e80671beac",
          "name": "did:invalid"
        },
        "response": {
          "id": "a12992b7-0585-4d1d-ad44-fa26c5e6bbff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15532015-9729-4727-ac4d-75e80671beac",
        "cursor": {
          "ref": "3a1c1d62-cd0b-460b-ba34-137787430b72",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "52d45c53-f63c-4121-9c26-ca8f9ba47f32"
        },
        "item": {
          "id": "15532015-9729-4727-ac4d-75e80671beac",
          "name": "did:invalid"
        },
        "response": {
          "id": "a12992b7-0585-4d1d-ad44-fa26c5e6bbff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2346a5-a023-47f2-bdfc-d1209d7af32b",
        "cursor": {
          "ref": "a52f4ffc-a341-4578-b906-d093ce8b5d31",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ea45a872-3cd2-4df6-bea3-ea36941d35fb"
        },
        "item": {
          "id": "9f2346a5-a023-47f2-bdfc-d1209d7af32b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "cb15f8c5-10e6-4281-9fe9-9f4c0e754458",
          "status": "Not Found",
          "code": 404,
          "responseTime": 162,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a772b975-620b-4183-931f-340bc5b35cbf",
        "cursor": {
          "ref": "a1e1ce04-744f-40de-bd36-d26c0fd95a57",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "65eeea49-60da-4ad7-9ced-04d686ef09bc"
        },
        "item": {
          "id": "a772b975-620b-4183-931f-340bc5b35cbf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4cb80432-d4a9-4a7f-984b-c7243d1546fb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e915f5-dc33-4c4d-a529-1365ef0f53c7",
        "cursor": {
          "ref": "f8744668-57b8-4d97-8ff7-c6adcb2cce34",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1fd03a98-bc88-4dba-a9e4-fd03bfccfb99"
        },
        "item": {
          "id": "62e915f5-dc33-4c4d-a529-1365ef0f53c7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "18518d6c-cad6-446d-9b1e-d558ad2dc516",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ded50e-7b7d-4449-b99c-a3aa4605ef68",
        "cursor": {
          "ref": "1e8ae02f-ae16-4bd8-bf04-c82946df08b9",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5283ea24-d7ab-4810-b9ef-07cf8298f353"
        },
        "item": {
          "id": "28ded50e-7b7d-4449-b99c-a3aa4605ef68",
          "name": "identifiers"
        },
        "response": {
          "id": "ed89c990-ecf9-4ab8-a885-4d1e9bfb06e5",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3509790b-5a0e-4fe2-a84d-9f1471a39d2e",
        "cursor": {
          "ref": "0093d113-46b6-4a96-9ce7-60c2ea655da7",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5e1e9dc5-0252-4bf6-a400-1d56f63e9b42"
        },
        "item": {
          "id": "3509790b-5a0e-4fe2-a84d-9f1471a39d2e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "329f293a-d2d3-4d8e-9052-ff611eb295a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "d3bfbf66-2254-420d-b238-a648554207ef",
        "cursor": {
          "ref": "a079800f-b402-4d07-815f-fe6aabacd6cd",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b8467f19-e235-45b8-bc17-a1dbe2142df5"
        },
        "item": {
          "id": "d3bfbf66-2254-420d-b238-a648554207ef",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fe760be0-0b77-4545-8022-a3668d4fe80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "b5ef8f89-0b16-4867-9766-a51f923bd1b9",
        "cursor": {
          "ref": "98178385-cea0-4d2a-b3fd-385cdfdbc88d",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bddafb10-e64a-4c06-8c9b-372e8e7fba21"
        },
        "item": {
          "id": "b5ef8f89-0b16-4867-9766-a51f923bd1b9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "392584b0-701a-4d04-a349-1f45839f7651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "f289971a-fc14-4d91-9f09-b29275774ee2",
        "cursor": {
          "ref": "c032e293-1d40-4cad-9a59-e122ca308247",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c2738478-adc8-4542-81b7-264c6f4b9fd4"
        },
        "item": {
          "id": "f289971a-fc14-4d91-9f09-b29275774ee2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "60d55548-0157-4fd7-94a1-3b63539aafae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "5def648c-0074-4042-8d28-9c3389b5495a",
        "cursor": {
          "ref": "23566287-b464-4cba-ae2d-b54faffc8f53",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d96e612b-87ec-4329-82c2-8dba4d9de3e1"
        },
        "item": {
          "id": "5def648c-0074-4042-8d28-9c3389b5495a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "be04d3de-bd23-46cb-86aa-0b96f5c4042d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "2ec8d3a9-5bac-4dc3-9742-4a10101ff215",
        "cursor": {
          "ref": "4c757d9b-433a-48f6-97d2-918d42a1b52d",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9e0563e1-639a-4e13-9570-e6b99fe16834"
        },
        "item": {
          "id": "2ec8d3a9-5bac-4dc3-9742-4a10101ff215",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ccb61b57-0269-4e22-99bd-2e90811303d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "6a6be6e6-4a5c-4237-9dd5-2f5912f451ea",
        "cursor": {
          "ref": "e4c2f303-e814-4bfa-94b1-b0e85f6029af",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "efe5bdea-5f84-4758-a66d-066e905c8ca7"
        },
        "item": {
          "id": "6a6be6e6-4a5c-4237-9dd5-2f5912f451ea",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c4c8d2f1-96b4-4766-88e6-8d9abfe7bf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "235976c5-16f3-4b98-9ada-2d2676b690df",
        "cursor": {
          "ref": "aa486d96-da55-4a78-a6b2-4656710251ac",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9fada49f-10f3-4bc3-9172-9bf715e7dcd0"
        },
        "item": {
          "id": "235976c5-16f3-4b98-9ada-2d2676b690df",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c86342de-40c3-4859-86fa-92234056ba56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "54d5457f-14e1-4b06-b3f9-5c8629fee636",
        "cursor": {
          "ref": "72b3d48a-0552-4cd9-b866-0b12a2fe9689",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4997a767-403e-4e01-b27c-adcbd9dc4d8f"
        },
        "item": {
          "id": "54d5457f-14e1-4b06-b3f9-5c8629fee636",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9024469c-2716-411c-88be-e45fc24526a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f7660ad4-81dc-4d45-972f-38699ef3ba84",
        "cursor": {
          "ref": "b6255775-1632-4b04-a414-a391fffff3ba",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fe50b87e-28b4-45ff-95ad-30f6cf235457"
        },
        "item": {
          "id": "f7660ad4-81dc-4d45-972f-38699ef3ba84",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ad955a96-02cc-4735-aa30-bb84b482bb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "ee96417c-1c3b-4bc9-ad30-608ab0eaf53b",
        "cursor": {
          "ref": "2f88ff90-8c0c-462a-9157-e7b78ecc14fd",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "44933237-8914-46fc-9897-7988621830a1"
        },
        "item": {
          "id": "ee96417c-1c3b-4bc9-ad30-608ab0eaf53b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "05a0a62f-90e7-40b6-ae4b-c232cac16f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "c19dc510-f2e9-4b71-9f2c-d34641f1aef5",
        "cursor": {
          "ref": "2640c8a9-5e86-4123-aa50-8a7f6763535d",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "acb4e897-5f9b-4eb8-8fb1-2fb9a10ea046"
        },
        "item": {
          "id": "c19dc510-f2e9-4b71-9f2c-d34641f1aef5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "01eeb1e3-f873-4085-bc61-886c814ceea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c2af5d92-7000-4983-a33d-b4ad4e7ac5cf",
        "cursor": {
          "ref": "1f200ede-3cc5-40f8-934a-616323ec596c",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "26fa2ba0-e62e-4033-b722-ed1d5ff01ef4"
        },
        "item": {
          "id": "c2af5d92-7000-4983-a33d-b4ad4e7ac5cf",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2d402394-64c7-4ff7-9aa5-b22adc636bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "41ca7b8b-bb28-403b-8408-86d7b0a8b2dc",
        "cursor": {
          "ref": "fb3f7aec-fd73-46e7-a7ae-12703b7a0958",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "120b18e2-babe-4d9e-af03-20db1ef8871f"
        },
        "item": {
          "id": "41ca7b8b-bb28-403b-8408-86d7b0a8b2dc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "17b9d196-a322-486c-8d30-4926eca27b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "18d72238-9006-42c9-ab18-a8908e500f3b",
        "cursor": {
          "ref": "b3e22df7-6ef5-4783-a2dd-9e526d0c3eb7",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4492d11a-a424-4b29-9bc7-7d888aaf85f3"
        },
        "item": {
          "id": "18d72238-9006-42c9-ab18-a8908e500f3b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2dc1bb03-765d-4a1a-971a-3452076cfec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "344c176b-bd7e-4142-b66d-b107a1567ee0",
        "cursor": {
          "ref": "de5c799b-8de5-4ee5-b2dc-948d78e36cdd",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a2510686-9c41-423f-8c26-33afb836dc3b"
        },
        "item": {
          "id": "344c176b-bd7e-4142-b66d-b107a1567ee0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "962ce087-2ee8-45a1-a8a3-38a38bd91d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "efa3e2e9-037a-459e-a540-695985655b76",
        "cursor": {
          "ref": "9df92667-c564-4ee8-ab7a-784e895416dc",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "68820f4d-30ea-4f7b-a99d-c8532df57a15"
        },
        "item": {
          "id": "efa3e2e9-037a-459e-a540-695985655b76",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0198a7ee-9aff-4427-9e20-b5b961e689b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "2588762a-da63-4864-9c86-839c6aa7f4f6",
        "cursor": {
          "ref": "e91d3148-da2f-401b-89bd-b57514e92937",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "eb98949e-7661-4d51-8968-d4e62fe3f760"
        },
        "item": {
          "id": "2588762a-da63-4864-9c86-839c6aa7f4f6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ed75cde9-3304-422b-85dc-1a63683fabff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "265ccce0-9c72-4a4c-8bec-72c6449ddc9f",
        "cursor": {
          "ref": "6e0290c6-9c28-4020-823b-9c2132e2a19f",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b00ba017-fda2-443a-893a-b18b7f47d568"
        },
        "item": {
          "id": "265ccce0-9c72-4a4c-8bec-72c6449ddc9f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e0a35251-e32e-4e43-88ac-562cddce282c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "62a9a115-7cd1-4e65-8694-5f1b725a86a6",
        "cursor": {
          "ref": "a0c314e1-fb33-456b-872c-4aca33188acd",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5fff4d29-2687-4f7b-be13-b8f9f4ef46db"
        },
        "item": {
          "id": "62a9a115-7cd1-4e65-8694-5f1b725a86a6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "883f26e3-bbfa-4b00-8a60-59dc09106f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "2c138274-bdb9-45cd-9f73-cef8bd14296a",
        "cursor": {
          "ref": "2dc51458-db27-4737-b081-d1bba9356ce5",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7779c69c-0468-4b02-86d1-0cbe14a8d952"
        },
        "item": {
          "id": "2c138274-bdb9-45cd-9f73-cef8bd14296a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5df012b4-2d84-4f16-925f-a996687be972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "4944e0ee-d8f6-476b-9a15-56810b0037db",
        "cursor": {
          "ref": "ce33808a-7d6b-4dbc-a227-9343ad6d0b93",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "afb18767-4948-47b1-aed5-6cc5d723ce7d"
        },
        "item": {
          "id": "4944e0ee-d8f6-476b-9a15-56810b0037db",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "43c6b3d6-7a90-4124-a209-f513644bb6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "b8fb28bc-996e-48cd-8997-9eddf79c5d69",
        "cursor": {
          "ref": "364658f0-8ee6-4799-9275-2dc0141f47de",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7d628385-aff0-44c4-81bd-1ded24166305"
        },
        "item": {
          "id": "b8fb28bc-996e-48cd-8997-9eddf79c5d69",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fe6676b9-7fc5-415a-8d7b-2f73edc52837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "043c445f-78ff-4ae5-a817-c6dd7e4e402f",
        "cursor": {
          "ref": "d2432d16-d94f-486f-abe2-afb383c9a46e",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cf6a3bc4-9412-4bbc-8250-d4af82766064"
        },
        "item": {
          "id": "043c445f-78ff-4ae5-a817-c6dd7e4e402f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c1d9d039-709b-42b9-8347-afcf84674aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8773dd3a-538b-418d-9982-7b9fef072a7b",
        "cursor": {
          "ref": "2a30a70f-0910-4cd6-b737-3c93c4eb9f91",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e6f1a591-15ce-460f-b459-a25d43e2da8f"
        },
        "item": {
          "id": "8773dd3a-538b-418d-9982-7b9fef072a7b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f6b86fed-9a8b-48e2-91e3-bf7ed30e1615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "9a011a15-3327-4918-a042-747cfda5025c",
        "cursor": {
          "ref": "b468b7b3-a57e-4007-8987-d5b7558d8140",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f2275aba-fb76-4197-a284-ce65020a52b7"
        },
        "item": {
          "id": "9a011a15-3327-4918-a042-747cfda5025c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c1b7b4e8-affb-4325-83d4-3a08c304c9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a53c0b4c-eadd-486b-a11e-dc63aa1d25bd",
        "cursor": {
          "ref": "288b780d-f6eb-4e5b-925b-dce7d8812ef8",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ebcac5d3-f24e-498e-bebe-bd47f211616d"
        },
        "item": {
          "id": "a53c0b4c-eadd-486b-a11e-dc63aa1d25bd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d75169d4-eefa-467f-bbb7-98a6d5f4b9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "b656ddc4-fef6-4970-898b-d59087e7cebd",
        "cursor": {
          "ref": "a80d9628-b00c-46cf-857b-170883ff6269",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a92ab65e-9869-4db0-bb76-224fd0eb197f"
        },
        "item": {
          "id": "b656ddc4-fef6-4970-898b-d59087e7cebd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "255ab9cd-07b1-41f5-ad1d-687d03d36e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "01c833f1-7ce1-4b51-9334-4b4677bda4ca",
        "cursor": {
          "ref": "1898312f-a7af-4e97-ab60-a5e9df748bbf",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f5215a0b-6aa3-4806-80af-016c1422d17b"
        },
        "item": {
          "id": "01c833f1-7ce1-4b51-9334-4b4677bda4ca",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "59834819-76a8-4694-9d4a-927b34e484cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "8adabe97-9bc9-47ba-8fcf-86b25ddcc1b4",
        "cursor": {
          "ref": "90388073-8a78-4579-93da-ddbcc972a3a2",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "64620b93-6bed-4be2-a1ac-12846b848751"
        },
        "item": {
          "id": "8adabe97-9bc9-47ba-8fcf-86b25ddcc1b4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "984f0d3e-218c-4fa7-bba7-69363e4112d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "1db6c30b-911d-4bff-be11-919c595fa69d",
        "cursor": {
          "ref": "24fe9268-c381-465d-837c-93af101a171a",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "18f45c06-2494-435f-acad-5b88196fab4e"
        },
        "item": {
          "id": "1db6c30b-911d-4bff-be11-919c595fa69d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6a09f4c3-ee73-426f-ab31-0dd68a85a404",
          "status": "Created",
          "code": 201,
          "responseTime": 754,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2da1a1f0-8df3-4090-ae4e-7f4ceb7c0a03",
        "cursor": {
          "ref": "aae7ab6a-96ec-4584-9c2d-63e149a39f57",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4557cab9-5368-47d6-aa99-672db5c0b591"
        },
        "item": {
          "id": "2da1a1f0-8df3-4090-ae4e-7f4ceb7c0a03",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "216c43c0-9441-438f-9b85-be579b88cf09",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "614ed7a4-b87a-4ae9-b946-edc0f9bd8bcd",
        "cursor": {
          "ref": "f9469558-c15b-498d-be7c-453b47f999f2",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1e23be12-5568-47b1-b1f5-2ce8ef61cfc2"
        },
        "item": {
          "id": "614ed7a4-b87a-4ae9-b946-edc0f9bd8bcd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0dfb98ff-7af4-40fc-940a-2be251d49de0",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3204897b-ffa9-4baa-95f4-979e58cf998d",
        "cursor": {
          "ref": "d8187ccc-9c35-4618-8986-3e3abf4721b5",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "02a8b2c8-fb15-479c-aad3-d0595ef28832"
        },
        "item": {
          "id": "3204897b-ffa9-4baa-95f4-979e58cf998d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "40fde771-87bf-46af-8f73-5eaadbb62966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "cbe36edf-747b-4340-8277-afd9f069b3c3",
        "cursor": {
          "ref": "ff57e7fb-9057-46a2-93dd-507b96d87949",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d2ae0594-6535-4e4d-9ea3-605c296c1219"
        },
        "item": {
          "id": "cbe36edf-747b-4340-8277-afd9f069b3c3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d7e3c6cc-32d5-4c70-b128-ededa63f3d01",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "277b4082-1f56-4e37-b2cb-5aab08ba7cdf",
        "cursor": {
          "ref": "b410c4cf-fc06-4377-94bc-18b9ec6dbda6",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0f5548c4-802d-4b93-90d8-61e8b6d5410e"
        },
        "item": {
          "id": "277b4082-1f56-4e37-b2cb-5aab08ba7cdf",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "26f65f75-7894-4c4e-bcfb-b327aab54a3b",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4bb663e9-95a6-46ed-9f8e-44d9eec27b05",
        "cursor": {
          "ref": "a666583e-efcb-44e3-9f39-7064a9018c92",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "06140fb2-b12f-4cca-aefd-b4543621da11"
        },
        "item": {
          "id": "4bb663e9-95a6-46ed-9f8e-44d9eec27b05",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d0783467-ca68-421e-845b-54de43fd5265",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "16d6e0c2-9556-4f40-9c8a-79ab065c4dc3",
        "cursor": {
          "ref": "bb795ab5-4399-40a3-ae87-725495a2a53e",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f982d3ad-290c-4c4a-9b8e-855c5b02c0ed"
        },
        "item": {
          "id": "16d6e0c2-9556-4f40-9c8a-79ab065c4dc3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1d2ef30e-09ba-494e-a88e-ee9097e088e6",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "29a9dd66-7475-4086-a46f-7c1cc36d8704",
        "cursor": {
          "ref": "271490da-851b-4bde-8799-42d70fecc5fe",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "84364bdd-9dc8-48fb-aa5a-1608253ab16f"
        },
        "item": {
          "id": "29a9dd66-7475-4086-a46f-7c1cc36d8704",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0e587c04-6467-4d56-820b-bbf2c6bf8ed3",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "91d45e5b-21e6-4cc3-92d6-4a99b803452f",
        "cursor": {
          "ref": "d3d236f9-402f-450f-a340-7c85c211e980",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5e2ea480-1213-4005-bcd2-becd246bd9ed"
        },
        "item": {
          "id": "91d45e5b-21e6-4cc3-92d6-4a99b803452f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6673b19b-4f7b-462c-a221-a2564115423e",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "81943522-087b-4d03-9a9a-00452a8da289",
        "cursor": {
          "ref": "59a3c631-57a5-4a8a-a70e-cb75b3d28408",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "805aa95e-315b-431c-9038-c7f7e129e4c4"
        },
        "item": {
          "id": "81943522-087b-4d03-9a9a-00452a8da289",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0e431355-33ac-474f-b479-b92d1f759aa2",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "39d4efcf-1417-40ba-b2af-96962b962ec9",
        "cursor": {
          "ref": "6e50e9b3-2331-431a-a64f-b87a8dd9e572",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5b81cf89-4975-46f3-9fa7-fe782d43f754"
        },
        "item": {
          "id": "39d4efcf-1417-40ba-b2af-96962b962ec9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "07e2f9e2-b49b-4c3d-b79e-1c3082b44538",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cad2aafe-1427-4e07-aa41-34eac20a6198",
        "cursor": {
          "ref": "d03bf0d0-00d8-47ac-a4da-8b5fddb64f65",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "daa59a0b-cee5-4f2d-8892-1537e07faa37"
        },
        "item": {
          "id": "cad2aafe-1427-4e07-aa41-34eac20a6198",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f025ea84-886a-4fe2-93cd-3288db5d4023",
          "status": "Created",
          "code": 201,
          "responseTime": 367,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bd37b0a5-00b7-4cf9-9c5d-6152229cac01",
        "cursor": {
          "ref": "5211495d-5e08-44f5-b914-bb569a799a7e",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e7950841-b736-451b-800b-942e2a964bba"
        },
        "item": {
          "id": "bd37b0a5-00b7-4cf9-9c5d-6152229cac01",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "67f7d558-9b02-4dd4-a45b-6af4550805eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5166409c-8a2c-4974-8082-44cf279fc1e4",
        "cursor": {
          "ref": "16b1e07b-9648-4c32-81bc-4c0987cefec9",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "340b98e5-ae8d-466e-98e3-2dc14dd991e0"
        },
        "item": {
          "id": "5166409c-8a2c-4974-8082-44cf279fc1e4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d2e9250a-4232-469a-b1ca-034715ac687e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "00cf7451-8d55-4337-ab06-be3f894d9496",
        "cursor": {
          "ref": "8e6fe325-f0d5-419d-af88-5550229e78dc",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1aa32f52-5132-4bb2-aa3b-1ec12fe5f043"
        },
        "item": {
          "id": "00cf7451-8d55-4337-ab06-be3f894d9496",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2efaebba-4073-4373-950e-d9d042f90a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "b8bbaf3a-aaa7-42b1-b805-859b5eb15ade",
        "cursor": {
          "ref": "478efac4-47f4-435d-a400-8b457de74faf",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a85d81da-f78b-4cc9-a04e-81ba0437254e"
        },
        "item": {
          "id": "b8bbaf3a-aaa7-42b1-b805-859b5eb15ade",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8314baf2-a554-4fd5-9400-5ef28b33d8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "33a66eed-2dc5-4b58-a6cc-ad160e8972a4",
        "cursor": {
          "ref": "b6aeae2b-75ab-49fa-bc1b-4c5b3ddfec6d",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3ea81d26-16e0-431f-a9ee-0b6f78a0f19a"
        },
        "item": {
          "id": "33a66eed-2dc5-4b58-a6cc-ad160e8972a4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3662e97c-8afe-4d37-af21-88d578593262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "f557bb83-d1e3-4b42-aa59-cc3a4048504d",
        "cursor": {
          "ref": "5f9939f1-62b2-414a-b567-6591c477e9d1",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6e711fbb-ba7a-4ef5-98e1-8f741307b8cb"
        },
        "item": {
          "id": "f557bb83-d1e3-4b42-aa59-cc3a4048504d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "520b63d7-f4bb-42d1-8bbe-07f895912025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "0449e989-0065-40be-b293-a3f5c2e39595",
        "cursor": {
          "ref": "f3ba4450-f636-46f6-991a-b537940da71e",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "76f23b0f-dcaf-4986-a225-06394759c94e"
        },
        "item": {
          "id": "0449e989-0065-40be-b293-a3f5c2e39595",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c166c721-b443-4e2e-8c59-4b69fe8c325a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "488f50c2-2187-46bd-a88a-e3a2c5a6b495",
        "cursor": {
          "ref": "ccd47c25-7569-486e-876a-b050b1f14033",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "27ba2bab-0f3e-40bc-8010-9c32f76a4f0b"
        },
        "item": {
          "id": "488f50c2-2187-46bd-a88a-e3a2c5a6b495",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f95e3651-e2de-422a-934c-76c3b2f34f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "c1eb90c3-26e5-4308-976e-96a2061c1646",
        "cursor": {
          "ref": "aad8a91a-5909-4ae3-a45d-0ff5b0a89dda",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "397b38df-cde6-46cb-b7b4-4bdd75b50fa8"
        },
        "item": {
          "id": "c1eb90c3-26e5-4308-976e-96a2061c1646",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fef3f98c-af9c-491e-b4f3-027c06c743fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "acd165fe-1890-4157-8ea7-249baeb9a6e8",
        "cursor": {
          "ref": "84effb20-58e5-4904-96ca-094339e5c924",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "816c9a47-071f-4947-956f-323c99618583"
        },
        "item": {
          "id": "acd165fe-1890-4157-8ea7-249baeb9a6e8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4d4bf3b0-be85-4b3f-ba31-f7c4d1b28534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "9d65a6a2-e4cb-4c4a-98f5-238da296066c",
        "cursor": {
          "ref": "35e09e92-2177-4d49-ace0-46d69b546dd0",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "60e62ae0-382b-4e31-9644-395302adb3f9"
        },
        "item": {
          "id": "9d65a6a2-e4cb-4c4a-98f5-238da296066c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e0e90a07-fafa-4944-aa24-43cabfc38290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "3cd36aad-afc2-43f0-9195-aeb67958524c",
        "cursor": {
          "ref": "14ad7035-e772-4bb6-a3ae-674acf5a2830",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d6699a2c-3f5a-43d7-9f33-0df3d3b9ee3c"
        },
        "item": {
          "id": "3cd36aad-afc2-43f0-9195-aeb67958524c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f8b56666-e5a8-425a-9a84-51f790e047fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "c0e3ce0d-8f51-4dbf-b5c8-eb9c03be19fb",
        "cursor": {
          "ref": "f7483daa-6410-43c0-8269-0e166f1deeb9",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "16b30fa0-3b7a-4e84-bdcb-6e24745882df"
        },
        "item": {
          "id": "c0e3ce0d-8f51-4dbf-b5c8-eb9c03be19fb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a06ed203-dc7d-452d-9253-7c07adfc0b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "bf352fc6-ca08-49a0-b2fb-2edfdc8bfb65",
        "cursor": {
          "ref": "e3a6faeb-e671-49d0-a522-a06608436382",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "51ca6caf-b58f-4b5e-bd82-9b64011a827a"
        },
        "item": {
          "id": "bf352fc6-ca08-49a0-b2fb-2edfdc8bfb65",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ab04c943-20b3-4194-a3cb-bccec9ab0545",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1fe6f7f4-e76e-4ef6-8f84-db5be2f956af",
        "cursor": {
          "ref": "6ac8fa5e-a154-4860-97bd-17300626d855",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7dd45a19-e457-48aa-ba45-dc054a7fa1af"
        },
        "item": {
          "id": "1fe6f7f4-e76e-4ef6-8f84-db5be2f956af",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6f1101ef-9c99-440a-b14f-509885d4bca7",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c05c37f1-cb78-464d-a2e2-a5f5aced0ce9",
        "cursor": {
          "ref": "c72fa6cd-8708-4b08-ad38-41460b1ed517",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "875a3c2b-4563-48ae-9673-865e13abdea7"
        },
        "item": {
          "id": "c05c37f1-cb78-464d-a2e2-a5f5aced0ce9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "891468b7-a906-4acf-b30a-df9c6d9f4023",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7fec46f2-c709-4057-8158-97a28d3b86e4",
        "cursor": {
          "ref": "d34bde5d-07c0-4a1a-b12e-fd006ce44c7d",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f824a9c2-b0a6-49a5-b6ec-991b6ec8cbc1"
        },
        "item": {
          "id": "7fec46f2-c709-4057-8158-97a28d3b86e4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "58d4c298-e420-42e8-b356-2f56ab097228",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8ce2aebe-747e-4054-a9ff-a5b93ad8f937",
        "cursor": {
          "ref": "5ce9b9e4-6048-475c-be9c-c6c6e095fb55",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "156f4d08-4d73-496e-bcc2-8dd6faed1093"
        },
        "item": {
          "id": "8ce2aebe-747e-4054-a9ff-a5b93ad8f937",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "71c2c3b3-a44c-4872-b67d-190029bf5b98",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4b64c6e2-4e25-4e8c-acd6-ca65b876a9b4",
        "cursor": {
          "ref": "0b006b4c-0da3-41da-b254-f9d0c0961387",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fe20cf04-7bb5-42bc-a906-ddfeef0d7d68"
        },
        "item": {
          "id": "4b64c6e2-4e25-4e8c-acd6-ca65b876a9b4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6d6a89a1-bb96-4e33-adeb-f4e2e0cfe1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "7d22936a-96fd-4803-8584-a8c73f539535",
        "cursor": {
          "ref": "0879b067-5fc6-407c-bed0-4fe3b61f0a47",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "48442c83-46cc-4cd7-8a7f-a2d7dbb4ccad"
        },
        "item": {
          "id": "7d22936a-96fd-4803-8584-a8c73f539535",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "729d07eb-8aaa-435f-af1a-24141ab7842c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "cc98dadf-7461-4174-8d16-d23894833b83",
        "cursor": {
          "ref": "954106b7-9e11-4b3f-b222-0dc356a6466d",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "13abac00-4e4a-4d42-96cb-b1363c053469"
        },
        "item": {
          "id": "cc98dadf-7461-4174-8d16-d23894833b83",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "187f60d6-897d-404d-b8e3-0bc56004e9e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "6b1dd1f0-ca99-46a6-af54-bd1db23e0898",
        "cursor": {
          "ref": "9c4db28b-6e62-451a-8f11-a74446acd239",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "35aeffee-8f21-4880-a8a2-7947c16728c3"
        },
        "item": {
          "id": "6b1dd1f0-ca99-46a6-af54-bd1db23e0898",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4222924c-d2cc-4c0c-91ae-250e72b36004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "ece21d9d-5cf3-448b-9362-10779e745d38",
        "cursor": {
          "ref": "fa7f2870-15ac-4de9-bedf-8722f00e7776",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d5f4ec9d-1df5-4b96-a818-602b9b9ee311"
        },
        "item": {
          "id": "ece21d9d-5cf3-448b-9362-10779e745d38",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "520d8a4c-c14c-44aa-a091-fd82549b11b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "555cd20a-1753-46e4-bfc0-94a8d328033f",
        "cursor": {
          "ref": "3c123719-26ca-4b5f-bbbd-ec7b33271894",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6d68bdfb-f887-4806-a0e8-ac8bcf4d4639"
        },
        "item": {
          "id": "555cd20a-1753-46e4-bfc0-94a8d328033f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ed34c68c-7a02-4e3a-b688-52764c867f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "ecda0244-e392-4f9c-bf4c-ab53d738da56",
        "cursor": {
          "ref": "7c2b61d3-8065-45c5-8b73-aa60bd897a5a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2227948c-4544-470a-99de-54078b9e1115"
        },
        "item": {
          "id": "ecda0244-e392-4f9c-bf4c-ab53d738da56",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f5e96eab-c3cd-4436-9cf0-8e63e746ac10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "d3ec3d92-e3b4-49f3-b5bc-acb776ba015a",
        "cursor": {
          "ref": "dd9c814c-1891-477a-920f-1f336a0bf565",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "85555e45-e3e4-4e6b-b7d3-1e2120bf92aa"
        },
        "item": {
          "id": "d3ec3d92-e3b4-49f3-b5bc-acb776ba015a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d714fa63-c511-4ea9-933f-0eca673de6e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "a820a198-ab36-467f-a57d-1999d0b713e4",
        "cursor": {
          "ref": "32cea19a-72dd-4955-a10e-42bc7294ba92",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2cc651a4-6dc3-4287-8d63-c73707e2c28f"
        },
        "item": {
          "id": "a820a198-ab36-467f-a57d-1999d0b713e4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e3808327-a564-41c5-bf29-e3a817202c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "a80554ea-c7dd-45bc-b318-aca47154daf9",
        "cursor": {
          "ref": "b3b53612-bcef-4cb7-9280-550f4b7dad22",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "24f9424b-6fa9-4263-b09e-057e47da1401"
        },
        "item": {
          "id": "a80554ea-c7dd-45bc-b318-aca47154daf9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f4690304-8a0c-4aa5-8b4b-1648675ad43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "f7b9d8a0-a70b-4dc0-acfc-884f27cd46f0",
        "cursor": {
          "ref": "2ed8d561-46de-4e70-ba68-4e0836720c1f",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8d2bba88-7fc7-4417-8b70-b485babacdd9"
        },
        "item": {
          "id": "f7b9d8a0-a70b-4dc0-acfc-884f27cd46f0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "db770ac1-6e01-45a3-a355-f9cd6f8b7921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "67e2f812-306b-4dc8-820a-07802d5515b2",
        "cursor": {
          "ref": "2a7834dc-cba4-4ec9-bbca-eb5f3609add9",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "66c3f41a-b587-4ea0-bd0e-f34d7a8857e4"
        },
        "item": {
          "id": "67e2f812-306b-4dc8-820a-07802d5515b2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cbbf07f7-05db-44ed-9930-199d3ed538b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "4bb7cf24-5548-459f-aa14-96f8b757a1ec",
        "cursor": {
          "ref": "3cb8a48f-d1f0-431e-b78c-836fcde1298e",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c6cb9320-27c8-4a6f-bda5-d32bf012c93e"
        },
        "item": {
          "id": "4bb7cf24-5548-459f-aa14-96f8b757a1ec",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "40eac883-cfc9-4d16-a337-e7057ec97b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "9c2e31bd-811f-4724-8e06-2f41c59d814b",
        "cursor": {
          "ref": "7cc96bd3-e5df-4ed8-8be3-b0e011920871",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "131e78b5-608c-4baf-a372-4a755d6e706f"
        },
        "item": {
          "id": "9c2e31bd-811f-4724-8e06-2f41c59d814b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a0a437f4-0c2c-4a82-b610-874155db7589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "466d9aae-8ac7-464d-a2b1-c1cc7ca49d6e",
        "cursor": {
          "ref": "4cca882f-3110-4c98-8a4e-2bdd9374ca18",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "596d2b82-0747-4b62-8792-c1c94b48fe6d"
        },
        "item": {
          "id": "466d9aae-8ac7-464d-a2b1-c1cc7ca49d6e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d4c73216-183f-4322-8dca-a2e836150957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "03434a89-b9dd-4a0c-9e77-ce902e309924",
        "cursor": {
          "ref": "bcf33c19-5343-4113-acac-19e585ba6efd",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f36ca4f8-9949-46be-b740-d7564dbfb97a"
        },
        "item": {
          "id": "03434a89-b9dd-4a0c-9e77-ce902e309924",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f1f2b307-63b6-4d1f-a83d-96cb360f6b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "cc4e1489-8feb-4c24-8d70-6df3dc57dd6d",
        "cursor": {
          "ref": "93f5a6a5-ad25-4f2f-8265-c5e6d68565bc",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a42d49fb-2a6b-4713-bcb3-cfdbe6645d83"
        },
        "item": {
          "id": "cc4e1489-8feb-4c24-8d70-6df3dc57dd6d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cc9cd90e-e39c-4ab6-ba7a-3ee7e77b3c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "48c94af1-3215-4900-be89-20598a9c3dec",
        "cursor": {
          "ref": "e6067645-8d4c-4448-8700-2b355d602bdd",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bab0c8b6-264c-4ab4-ba82-66e6e6c439cc"
        },
        "item": {
          "id": "48c94af1-3215-4900-be89-20598a9c3dec",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a92b1558-be4c-46b2-80a4-06977ab7a42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "8b8708da-9dc1-4be8-b74d-f12718051418",
        "cursor": {
          "ref": "87ddfcea-0e55-4d41-9c0e-026822fbbdea",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "82be9435-2918-4117-9917-3b07e963718d"
        },
        "item": {
          "id": "8b8708da-9dc1-4be8-b74d-f12718051418",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6428624f-9d26-42b2-8aaf-a80a2319af33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "8d6a4e15-5a62-4465-bc15-52a619d6183a",
        "cursor": {
          "ref": "72c247db-95e9-4f73-8a3c-7386c8a14b67",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "59fab3c8-8c64-45b6-a080-2fff7ee45e66"
        },
        "item": {
          "id": "8d6a4e15-5a62-4465-bc15-52a619d6183a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6741d60d-a636-4c13-871b-6ea8c9309b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "38f50d7f-b009-4a33-8672-846cd2ba40e4",
        "cursor": {
          "ref": "b8783b01-6cdf-4891-b542-246b5729953e",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6d3ca7d6-7825-4c30-ad16-324daf59b931"
        },
        "item": {
          "id": "38f50d7f-b009-4a33-8672-846cd2ba40e4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9b5bf42c-fad9-4b8b-9fb5-fc01f61206e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "a0eb1695-75a2-4933-abc7-d40b572e18a3",
        "cursor": {
          "ref": "d3c6cfa5-c8d2-4171-9952-414a0eb1adc3",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "564d79f0-ab32-4621-b9ca-3eca6a06ef56"
        },
        "item": {
          "id": "a0eb1695-75a2-4933-abc7-d40b572e18a3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8aab277e-ca39-4eb7-93cb-9d2455cb8146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "3b0a787a-78c6-4bfc-afbd-177e3f3b8381",
        "cursor": {
          "ref": "f35dcdf0-af24-41a8-b194-d4576014b335",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2f3987cd-6015-42fc-9040-a55e449f3d6d"
        },
        "item": {
          "id": "3b0a787a-78c6-4bfc-afbd-177e3f3b8381",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7a2d4489-ef7e-4f5f-8728-a7f91ceae035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "60e70fe6-4786-43dd-8845-7cadd6e012c1",
        "cursor": {
          "ref": "e0c4608b-9c4f-4537-8ee5-fef396641192",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "81765f5c-d9d2-4a4f-b697-eeb23ad7f590"
        },
        "item": {
          "id": "60e70fe6-4786-43dd-8845-7cadd6e012c1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3070e3b9-1fcb-4b42-8621-c84126212c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "40330243-4715-4148-815c-d4020a55c25b",
        "cursor": {
          "ref": "6a80f967-5e92-4a78-bf66-e4566e51e2f5",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4abd2b76-9678-43a1-b33a-c1b3f7d4d738"
        },
        "item": {
          "id": "40330243-4715-4148-815c-d4020a55c25b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "618ee702-7ff6-4e55-b942-311da62745d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "b1cbb2ca-e63a-4035-9a3e-e8cce856e97f",
        "cursor": {
          "ref": "42879f44-77cb-4c1c-8b83-e2651bd7faa3",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "90209ed6-11d8-492b-ba68-3963f04275cc"
        },
        "item": {
          "id": "b1cbb2ca-e63a-4035-9a3e-e8cce856e97f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "145addce-c10d-4a0a-a30b-562ed3266e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "5dee09c6-5a77-4208-b1d3-8c60fa9061bb",
        "cursor": {
          "ref": "c6dea58a-472d-403d-8100-e0bf5ead0051",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8dd3bd44-a7a9-411d-9185-697d94a876ea"
        },
        "item": {
          "id": "5dee09c6-5a77-4208-b1d3-8c60fa9061bb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "54e64199-cf51-4b11-a177-2b9da101ac03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "f0ee4938-d6ec-42a9-addc-2f26772d5c5f",
        "cursor": {
          "ref": "21764efa-980e-444e-bc99-478653bb7b2e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0358190c-d02e-4ed7-82ac-3456ee384819"
        },
        "item": {
          "id": "f0ee4938-d6ec-42a9-addc-2f26772d5c5f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "402a4425-ccb7-4bdb-8801-13c254cb3b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "1811afda-6e58-4cd2-a47b-27f5372e2d75",
        "cursor": {
          "ref": "f49cc70e-ba28-4882-9a4b-164893a4ac6c",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "faf94469-a3a6-4da1-8d6c-071afc884825"
        },
        "item": {
          "id": "1811afda-6e58-4cd2-a47b-27f5372e2d75",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "eb7c475e-a6f5-4d27-99a9-3e74eca44c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "21197632-298b-45fa-9704-27c0c190c047",
        "cursor": {
          "ref": "30439a2e-fb52-4058-921c-8e6067669a5b",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a28d8a65-ebae-41f3-9e3c-1f54bec21134"
        },
        "item": {
          "id": "21197632-298b-45fa-9704-27c0c190c047",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "da81b301-7267-42e5-afb1-5493fbd9219b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "87bd1f33-4f66-46ee-9e4c-801e88e76ebc",
        "cursor": {
          "ref": "7afb17d9-36f5-40d0-9603-50020c9d3772",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "16308f07-1d48-4347-b532-1949f19b107c"
        },
        "item": {
          "id": "87bd1f33-4f66-46ee-9e4c-801e88e76ebc",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "39255f81-1401-4513-b877-26e3a98a4b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "d5d7a161-54cd-48a7-947e-f7bc49261750",
        "cursor": {
          "ref": "bdf2cfa2-23c0-4bd0-b9e1-ef042de0e4f6",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "399d67f7-bdbe-4a97-8e09-d7d943862384"
        },
        "item": {
          "id": "d5d7a161-54cd-48a7-947e-f7bc49261750",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "56db4c00-695e-458d-9c1d-70ef22a72c2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d77d39-839d-491f-8fe7-94377cb68e03",
        "cursor": {
          "ref": "1257367b-a324-4a58-b925-c3cc96109fb2",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e316be38-4d98-4175-85a8-320738b65a16"
        },
        "item": {
          "id": "66d77d39-839d-491f-8fe7-94377cb68e03",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "269b60c2-5d1e-4ded-ae53-d7b9720e0b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1abc5398-6dd5-48a1-a071-ade4ba568622",
        "cursor": {
          "ref": "bfd0e130-019d-4c25-b028-e7a93ce49bab",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8b52b536-cd66-4598-b444-2dcb35d19da4"
        },
        "item": {
          "id": "1abc5398-6dd5-48a1-a071-ade4ba568622",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ec0e7855-d36f-4485-bcfe-d02d224a752d",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "95dd304b-b49c-46f1-ad2e-d935dedf21f4",
        "cursor": {
          "ref": "0d968937-99c3-4850-8c57-479a59c72630",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "382d11a2-7ebb-4be0-8b31-5245b7dcfa54"
        },
        "item": {
          "id": "95dd304b-b49c-46f1-ad2e-d935dedf21f4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3075cae9-1720-4ece-920b-23576e6a327c",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5afa60c6-f304-4808-9633-1c0924dd5a27",
        "cursor": {
          "ref": "b9532423-739e-40d8-a94a-8e32859f0328",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3731c819-8f40-40fe-beee-58e2ff798cd5"
        },
        "item": {
          "id": "5afa60c6-f304-4808-9633-1c0924dd5a27",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "582a3ffe-0914-4e32-9d3c-95a73ad01520",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5a852e-bc09-4de6-84a6-0edee9dd289b",
        "cursor": {
          "ref": "076bee69-ccef-4612-a7e8-865eb11c9dc5",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8e9b0fcb-4db4-4fad-8beb-703e5d531604"
        },
        "item": {
          "id": "9b5a852e-bc09-4de6-84a6-0edee9dd289b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7385bdaf-12cc-4d05-a559-89b26f251314",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44af1fd-69ea-4329-8574-128080a33f9c",
        "cursor": {
          "ref": "c060901a-d4fc-4bbe-8a34-0bfca30ab57a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "746f1b6d-7bb9-4fad-9dd8-b2928b6d41db"
        },
        "item": {
          "id": "b44af1fd-69ea-4329-8574-128080a33f9c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "89b2c49a-96d4-45df-a506-66bef12fd8b0",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-08-05T00:42:16.319Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-08-05T00:42:16.319Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a4f00be9-3a03-408e-8c58-39d00eab0b0f",
        "cursor": {
          "ref": "ec604849-142d-4137-8059-ca0d85ad32be",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cd3d0f54-03ef-4a40-a6e5-bfa0fa8c0f35"
        },
        "item": {
          "id": "a4f00be9-3a03-408e-8c58-39d00eab0b0f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8cc2b311-3754-4c3d-b4c4-2795a34c5bd3",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fad1ce-6534-4057-9585-6f7abb4e6b9d",
        "cursor": {
          "ref": "0dff6685-dc0d-4440-812b-4a396b006022",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f28df272-ad27-42ca-a45e-51bc25a7b547"
        },
        "item": {
          "id": "68fad1ce-6534-4057-9585-6f7abb4e6b9d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3c10a7fd-1248-4fee-ada3-a03bf9472136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "a91166e7-e5f9-49d6-b2e5-6f122031215c",
        "cursor": {
          "ref": "89e5a0a9-eb12-4411-9df0-dd209a118d4f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3f1bbeac-cb55-49bb-b574-a3d7274f2ee8"
        },
        "item": {
          "id": "a91166e7-e5f9-49d6-b2e5-6f122031215c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "08321aa2-d14a-4349-ad0f-93bb780b3c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "fb74b45c-377e-47b8-8811-8f9f1f7a2ec4",
        "cursor": {
          "ref": "eb4e8232-9519-4b48-a288-d8a0c86dda24",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "18041ccc-aa2c-47b5-b887-84cb4ee85186"
        },
        "item": {
          "id": "fb74b45c-377e-47b8-8811-8f9f1f7a2ec4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "05496ffa-1728-447c-bea6-74b3bd6e3778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "99d55694-f2cd-4e84-a484-6a3a7fd55178",
        "cursor": {
          "ref": "895044f1-7dc1-4e63-8c1d-4050754e01f6",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8b5f33ee-2869-4885-b0ea-8b5c4f571eb3"
        },
        "item": {
          "id": "99d55694-f2cd-4e84-a484-6a3a7fd55178",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ec23be8a-f544-4eb4-9930-f7b897121dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c15dafb5-8a79-4a4e-80da-5c8555a345ba",
        "cursor": {
          "ref": "1d115088-a220-4c3b-b454-253da7b9b40b",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ae2395a7-3e61-4d38-81f9-d292ed27ffa8"
        },
        "item": {
          "id": "c15dafb5-8a79-4a4e-80da-5c8555a345ba",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "60d0aba1-df95-4add-9af6-0d86237840f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "a9d54531-02c5-4ea9-b997-9cd9cf14ec01",
        "cursor": {
          "ref": "c993aaf7-a352-448e-9ab3-03c47848d54e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3e3ff091-08f0-4555-9184-49a67e2c55b9"
        },
        "item": {
          "id": "a9d54531-02c5-4ea9-b997-9cd9cf14ec01",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ad317ddc-5ab1-4bbb-b98d-0e6e79e0d05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e3b26c15-8bbd-4160-9305-220a1995a0e6",
        "cursor": {
          "ref": "265f531f-90cc-4e04-b7c9-8625d4459d48",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "30013f87-b013-4d9d-a8b7-c583248a0e5d"
        },
        "item": {
          "id": "e3b26c15-8bbd-4160-9305-220a1995a0e6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "21bceffe-3b3b-43dd-beef-40cc4a5eb9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5394996f-9bf4-4d14-b55b-d46d7cd3d960",
        "cursor": {
          "ref": "e16309dd-5d25-4ecf-827f-78a8c5c174ed",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2b9c1583-d967-49b9-80e0-0488e7e53bfe"
        },
        "item": {
          "id": "5394996f-9bf4-4d14-b55b-d46d7cd3d960",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a3a767e8-61d8-4e17-b83c-d92293d7a1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "719e6358-4280-4cc3-9768-3561e2bda3f5",
        "cursor": {
          "ref": "666ee103-627f-4138-88be-72ac78a72365",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "40ae2189-0f9e-44f9-ba17-e0caaafb2fb9"
        },
        "item": {
          "id": "719e6358-4280-4cc3-9768-3561e2bda3f5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "53979785-9b1b-4056-9159-3fff61ad604a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "7be9a8f1-5606-44cf-b62a-eb5dbae4278f",
        "cursor": {
          "ref": "014fa934-f09d-4956-8ee3-7ba07adecde7",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "edf3d386-c21a-4210-a0c5-85dbdcfeb310"
        },
        "item": {
          "id": "7be9a8f1-5606-44cf-b62a-eb5dbae4278f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "167f9075-762f-4758-a9ae-daee68dfa689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9a1e1122-410d-4bfe-bda5-7f6a92cf40a9",
        "cursor": {
          "ref": "f99c8dbc-fdbb-4dc3-9141-bc9cc5acd72a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b1e52f7b-ab90-4021-bd11-698529c2b368"
        },
        "item": {
          "id": "9a1e1122-410d-4bfe-bda5-7f6a92cf40a9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b04f1f04-a97c-4963-ad1b-f37061d88bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "fe9ca99d-68f1-4c59-90ac-e36d94d90ff1",
        "cursor": {
          "ref": "335be73f-bc14-4acf-8026-d1d004797221",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "61e2cb8c-a7a1-4be2-8498-31f58a5e9a4a"
        },
        "item": {
          "id": "fe9ca99d-68f1-4c59-90ac-e36d94d90ff1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "639f1210-8665-4c46-a526-78cae381af08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "efecaf8b-6fff-4088-a264-1ce6abb0c00b",
        "cursor": {
          "ref": "36637de9-6a38-4ab3-b740-b10d2fa6cd2d",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1346ecf1-541c-4500-a4ce-6f02b451968a"
        },
        "item": {
          "id": "efecaf8b-6fff-4088-a264-1ce6abb0c00b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b98e6fd9-1880-4aa0-b3ed-bbf8070c3ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "bf762ea2-14d1-4dbd-9636-6aaa9114e8c3",
        "cursor": {
          "ref": "6fa667a0-30a4-4fa6-95f9-dd04a5ca731f",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e2f6cadd-8a4a-4796-bb76-8268c021e851"
        },
        "item": {
          "id": "bf762ea2-14d1-4dbd-9636-6aaa9114e8c3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6462803e-97fb-484d-a8ac-0eea03514ca0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 129,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6f8a26af-33ca-48fa-863f-eb470487a6ae",
        "cursor": {
          "ref": "d4d18380-9e74-45f8-89e4-1dfd2c02e8c1",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ceb6c650-75a7-4d28-9c5b-450b459c4110"
        },
        "item": {
          "id": "6f8a26af-33ca-48fa-863f-eb470487a6ae",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "aac88181-b43d-4f93-9924-a351a93b7ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "95b6b8ac-1530-41e1-9a5c-2167301ee2f0",
        "cursor": {
          "ref": "35446e71-ff77-43a8-880c-a34fce4f01c0",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "95adebb4-f54a-4141-87b2-8b9d45c2637f"
        },
        "item": {
          "id": "95b6b8ac-1530-41e1-9a5c-2167301ee2f0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9dd8ef80-4b5c-4735-a66f-12c4017d1c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "156583c8-ad50-49eb-8734-b1dfa3542401",
        "cursor": {
          "ref": "a077a572-09af-4885-af61-3c01f558f421",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0b920ea5-ffba-4197-8004-f90475bf7cf0"
        },
        "item": {
          "id": "156583c8-ad50-49eb-8734-b1dfa3542401",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f1c143f4-65a2-424b-a3c2-84ec9e421472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "40a01671-d5c4-4d06-8103-c10aca94dc34",
        "cursor": {
          "ref": "6603c189-db86-4889-8706-8dc671a6c75c",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "846b69e4-619d-42ce-9508-7052313b9e15"
        },
        "item": {
          "id": "40a01671-d5c4-4d06-8103-c10aca94dc34",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b0ebffac-a4e7-4eb7-9c6a-3c2562ea950f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "bb769424-d3b1-4931-b094-9bf801e7ba92",
        "cursor": {
          "ref": "cf22d51a-5b64-4654-b997-036be87c0034",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "eb464e41-9444-4331-b68d-63bcb545889a"
        },
        "item": {
          "id": "bb769424-d3b1-4931-b094-9bf801e7ba92",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f2ab1256-1ca1-41ea-b98d-61b417746405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f550d891-72d4-4ece-b776-96fe0e3c19aa",
        "cursor": {
          "ref": "6139340a-0081-4067-8dfc-f416832b1dbc",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1ba0a5e8-8f2c-432e-abf6-cc771fea0630"
        },
        "item": {
          "id": "f550d891-72d4-4ece-b776-96fe0e3c19aa",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1bb01c41-2d29-444a-8730-9969b3595b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "1199aec5-6608-4dc5-832b-1139bf496289",
        "cursor": {
          "ref": "c3c7a502-be00-4c28-a17d-52dab1faf15b",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "95f8dea9-92b3-4981-a2c0-ac695094949b"
        },
        "item": {
          "id": "1199aec5-6608-4dc5-832b-1139bf496289",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6bda09c2-cf48-4fd3-b2fe-2f1fbf516a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b32eb017-2936-4123-8c4b-1ad322156be0",
        "cursor": {
          "ref": "26147b90-9bd4-4c66-ba0f-145f0709607b",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "aea3e9b1-a640-40be-8ea9-7af25eca1f66"
        },
        "item": {
          "id": "b32eb017-2936-4123-8c4b-1ad322156be0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9eff5543-3779-45c2-b31d-227d35394023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "195b1a76-641d-499a-811b-4ff2b4152147",
        "cursor": {
          "ref": "0f7f8533-b750-4696-8495-df015a0e7871",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a1a01d6a-c24f-44e2-9591-0e1783d6cf86"
        },
        "item": {
          "id": "195b1a76-641d-499a-811b-4ff2b4152147",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "10991275-8206-42f4-af85-da095d34c88b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "72ba0e2e-0cfc-4d04-9af1-91cbfa7a2092",
        "cursor": {
          "ref": "23ebc225-cf4e-4a5d-8957-cf04e5df356c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ee3c34d5-e4e3-4ce1-a4de-823f70220850"
        },
        "item": {
          "id": "72ba0e2e-0cfc-4d04-9af1-91cbfa7a2092",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e95e69c2-673e-4365-995d-29beab8d8dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "fb79dd8a-48f5-42a2-8e1c-ae54e8dddfc3",
        "cursor": {
          "ref": "1439d48b-9ce9-4842-bd5e-5450dbc624ee",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2a26edcb-9c46-4e8d-a6f5-c45df9814fc3"
        },
        "item": {
          "id": "fb79dd8a-48f5-42a2-8e1c-ae54e8dddfc3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6e6f8c9f-a400-4211-a440-c826fc7aa8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "0a817cdc-4073-4bac-82e3-003141cfb3f3",
        "cursor": {
          "ref": "27786f7e-af56-4515-9501-b0b3ba09a83e",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e766c5ef-2125-4608-8204-faec8ee12f54"
        },
        "item": {
          "id": "0a817cdc-4073-4bac-82e3-003141cfb3f3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e55d960f-2e73-4d7f-97f3-fbf22bac38a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "b91f3408-79ee-4180-8b79-fe893d27e5fe",
        "cursor": {
          "ref": "2210f599-1f5f-4114-a336-cfd0405fe92d",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "29844286-a862-4710-9fd7-9c17e96c91b2"
        },
        "item": {
          "id": "b91f3408-79ee-4180-8b79-fe893d27e5fe",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9b25e6a3-109a-47dd-967e-e05c15446deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1768056f-9e8d-4f30-80af-cff74e6af28f",
        "cursor": {
          "ref": "2918ad16-f55f-4f49-b45f-bae5a1d4a302",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "00772b35-5129-4277-ad7b-9848fb1910a0"
        },
        "item": {
          "id": "1768056f-9e8d-4f30-80af-cff74e6af28f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f7a8b618-38ba-44de-9663-c7ffbed90692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "19084ec2-2592-4431-9933-f139ea2c3d6a",
        "cursor": {
          "ref": "688f60e7-e298-4a7e-9536-49cd6e6233c0",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6e5642f8-a531-469f-b815-83a7ad625b62"
        },
        "item": {
          "id": "19084ec2-2592-4431-9933-f139ea2c3d6a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "112d2a42-5c0d-4b9e-af80-e9d58985273b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "7b0c886a-58fe-4863-a54b-2771dcec2a53",
        "cursor": {
          "ref": "bd35275a-5125-4247-9273-355c97a00dc4",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "38231fca-3253-45bc-8543-32d5c24cb61d"
        },
        "item": {
          "id": "7b0c886a-58fe-4863-a54b-2771dcec2a53",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0a10c233-2ea8-4576-9c02-8d3b7db5ac31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "023ddd12-7546-41b6-b341-a32f6de99436",
        "cursor": {
          "ref": "f05e0dfc-341e-42fd-b937-e7e70bcc52f6",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a95e1d8f-e8c1-422b-8233-35ce570e201a"
        },
        "item": {
          "id": "023ddd12-7546-41b6-b341-a32f6de99436",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2c750a76-b8f9-4ef5-9992-b97567a3d5da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "98b464c8-17b0-4636-b37a-5e0106a68edf",
        "cursor": {
          "ref": "2995543c-fe64-48ba-98e1-29847875e225",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "57904d07-721f-4ff8-a44c-6752281745c0"
        },
        "item": {
          "id": "98b464c8-17b0-4636-b37a-5e0106a68edf",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "26ed3af1-b881-442e-9f72-e6895378b4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7e9d78ed-20c8-4800-8e00-a7e6db16b45e",
        "cursor": {
          "ref": "7f9cc233-2d32-46c6-9c27-7eb040b5908e",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ec1b5eed-ce07-4bbd-9bc2-5a77e95e55b9"
        },
        "item": {
          "id": "7e9d78ed-20c8-4800-8e00-a7e6db16b45e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b47809da-2c7a-4ecd-8450-9ece4151031f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "38ef1fbe-daf3-4cd7-b867-918309eaa13a",
        "cursor": {
          "ref": "6a8f8a03-09fb-42bd-a404-6fbe26e3b2f7",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fa26b802-8e81-4a7a-8399-89b02cb9c317"
        },
        "item": {
          "id": "38ef1fbe-daf3-4cd7-b867-918309eaa13a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "89276a38-c611-4dc1-a36e-0edb9e6e081b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "80fe1d81-b189-4f04-ab8b-3ed8268d75b2",
        "cursor": {
          "ref": "04589fd6-75c1-4020-b6de-264926ac783a",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9975ab86-ace9-454b-94bf-3b937ea070f1"
        },
        "item": {
          "id": "80fe1d81-b189-4f04-ab8b-3ed8268d75b2",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c0634ef8-494a-4b1a-9351-0d01c0cb67cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "0949d53d-c8ac-447d-b8e8-6fd1a1920c7c",
        "cursor": {
          "ref": "a8532f9e-6111-4d0d-81b9-6976f75b7761",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c86007c8-5b06-4052-9da5-487223a9d655"
        },
        "item": {
          "id": "0949d53d-c8ac-447d-b8e8-6fd1a1920c7c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9a8b1c1d-33de-415b-952a-d9fe379c18bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "1448f66d-3ff1-488a-b61c-0cf1714de904",
        "cursor": {
          "ref": "a08c6d68-686f-4c61-b142-62e76c9f5d22",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3a1137f8-845f-48b6-a65d-7ae35cfa00c6"
        },
        "item": {
          "id": "1448f66d-3ff1-488a-b61c-0cf1714de904",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1f9afe3f-1ce8-4c0c-9f0f-51f30e646c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "bea44b43-c374-4e88-ae45-c01dd0602de2",
        "cursor": {
          "ref": "44df61ad-6cc9-41c1-804f-0c88f5665947",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "309dc66c-9c38-465d-af21-5f968def06fc"
        },
        "item": {
          "id": "bea44b43-c374-4e88-ae45-c01dd0602de2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3c0d22ae-ace9-4f9b-a9f7-0b989ba0f8fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578f37df-90a1-415d-8024-72f311380cba",
        "cursor": {
          "ref": "5a3a69b5-b499-47b3-98d0-c5a538c01089",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "90140e05-672a-47fd-bad9-74ae8fecabac"
        },
        "item": {
          "id": "578f37df-90a1-415d-8024-72f311380cba",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "73a0ca83-5d0a-4645-b9e2-7944b6e90ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "f5f5cd81-f1d4-4779-8844-213fc935a7c4",
        "cursor": {
          "ref": "004ad9a7-1763-4855-960a-d0787304e899",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2e13446b-177d-4c55-85e9-e779471b28c7"
        },
        "item": {
          "id": "f5f5cd81-f1d4-4779-8844-213fc935a7c4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0b27a173-db75-43ff-bd77-ee6812c362b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "3fb96b51-a47b-48dd-a403-7ae0e023c69a",
        "cursor": {
          "ref": "4f921c91-5677-4820-9681-02c77caabc46",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5ff50777-ed1d-479e-ba4e-5a9adbe0146a"
        },
        "item": {
          "id": "3fb96b51-a47b-48dd-a403-7ae0e023c69a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "63007061-23dd-44d0-984d-28be9dece3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "e4d1c957-cecc-46d2-b508-ead8d641e39d",
        "cursor": {
          "ref": "4931a27b-a20a-4a4a-9dc4-0694d007c37e",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "276f5d9a-ffb5-4aa7-b527-de770898a29a"
        },
        "item": {
          "id": "e4d1c957-cecc-46d2-b508-ead8d641e39d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bd7c0f38-2d1a-4ad2-9b70-6b079d31a0a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "123a9fe5-9724-4264-87b2-a8ec57c4f2ef",
        "cursor": {
          "ref": "06e473ce-ba2c-4ba4-be15-996d66b9fc00",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "08645ebe-e0e1-4bca-bb6d-083d160a0643"
        },
        "item": {
          "id": "123a9fe5-9724-4264-87b2-a8ec57c4f2ef",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c6a0f201-e43e-422b-b7a8-03a31d1f8068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "f8984180-9080-4f49-9a33-1798c76a8162",
        "cursor": {
          "ref": "7b64deaf-f64e-4acf-9a86-10c96271d18d",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "de4c343e-dc01-4fb1-8472-30f6084f96f6"
        },
        "item": {
          "id": "f8984180-9080-4f49-9a33-1798c76a8162",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "76d44017-179f-48ec-89bd-792c7bc01ab8",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a7b21bf6-804d-4d53-b45c-fb7f8918848c",
        "cursor": {
          "ref": "a30a9424-739d-4774-b570-d67cf64c5a22",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6c40b004-e457-4314-aa16-5500e9a99293"
        },
        "item": {
          "id": "a7b21bf6-804d-4d53-b45c-fb7f8918848c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "511b1054-dba3-4322-ae6b-a65c45d275b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "f652ae34-515f-4726-9c46-b3fd4d3e795e",
        "cursor": {
          "ref": "7d6e8401-4e01-4e64-9d7c-67c9188661b9",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0eba1a59-e6e3-4deb-ac80-848836e9368a"
        },
        "item": {
          "id": "f652ae34-515f-4726-9c46-b3fd4d3e795e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "66a508e0-4296-4447-bafb-4db321ac77c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "52f239a6-af93-449a-9229-a19d386c53bf",
        "cursor": {
          "ref": "2156ce54-52f7-4c80-82d6-80ca6759245f",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c080f1e8-194f-4462-8638-b10d6c7ab13d"
        },
        "item": {
          "id": "52f239a6-af93-449a-9229-a19d386c53bf",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7ee9dde2-e953-4e41-b66b-53246cdf72d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "de1f8d67-78ec-4e09-8ad6-fb084fac8d23",
        "cursor": {
          "ref": "c6424dfe-0ef5-407b-8032-af95626cfe37",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0ab0646f-0955-4530-a631-5ed53cb84aad"
        },
        "item": {
          "id": "de1f8d67-78ec-4e09-8ad6-fb084fac8d23",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d1bde69e-b542-4d79-b416-ca22a1b930b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "7c5e8591-c9bb-46a1-9eb2-6747e1a822e1",
        "cursor": {
          "ref": "4ed17c16-9e11-4cc0-8e54-75f8c407f77c",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "09283905-0d18-46f0-b4cf-fd94cd261935"
        },
        "item": {
          "id": "7c5e8591-c9bb-46a1-9eb2-6747e1a822e1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "43f7ef62-8550-478c-a55b-3eaa1cd51355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "f6f93632-db92-4d83-a9d8-296afd858190",
        "cursor": {
          "ref": "2727b326-1d1a-410e-ae78-72540811b9fb",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "18c96700-5a29-4173-a6da-3364f6756c4a"
        },
        "item": {
          "id": "f6f93632-db92-4d83-a9d8-296afd858190",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6efb1fe8-152e-4539-8f1d-f750a42da8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "7db852d6-6411-4678-9e5a-6f13a24ab2c5",
        "cursor": {
          "ref": "d172b34c-d365-4942-ba6a-77289e8ff641",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c830d6f0-cce4-4518-897e-f300ccaf923b"
        },
        "item": {
          "id": "7db852d6-6411-4678-9e5a-6f13a24ab2c5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "76874cea-b738-4375-9d36-d003df1be74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "dc8284c7-e46e-41f7-b071-734300216e13",
        "cursor": {
          "ref": "ec474310-aa9b-4168-b273-abc480e27712",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6a2992fe-c65e-4f85-a1b0-6ba83f03bd94"
        },
        "item": {
          "id": "dc8284c7-e46e-41f7-b071-734300216e13",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a88eb4f3-4b69-462f-a6d0-9220f2e818d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "fc01e505-21ed-40be-99d5-18a3265368db",
        "cursor": {
          "ref": "1cb7e5d1-53eb-4a80-ab52-29a19d0d8ced",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0a96fd8a-4385-4c98-be66-44052b032e1b"
        },
        "item": {
          "id": "fc01e505-21ed-40be-99d5-18a3265368db",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "87448bd9-bf90-4243-a8fe-4bc04aca2b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "abac5a4a-c863-4267-b0df-c7b89971d9a2",
        "cursor": {
          "ref": "a2ee3f1f-3045-49c2-b065-849f0640a5dd",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "82cd441a-f1b9-43f2-ba71-d5ef973260b3"
        },
        "item": {
          "id": "abac5a4a-c863-4267-b0df-c7b89971d9a2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ce1bb4b5-caff-453a-a6b5-d0ec69830f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "2c8f879e-6a04-45e4-8e6b-14fef1e65854",
        "cursor": {
          "ref": "1dad84a5-7e7f-497d-b493-204bde2fcb25",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f9f3051e-d7b3-40bd-b0f4-ec65ba93b5a4"
        },
        "item": {
          "id": "2c8f879e-6a04-45e4-8e6b-14fef1e65854",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f830dd72-5fe7-45b5-a2c1-024f58c5d177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "097486ee-4297-47b8-afa4-97009f7af46a",
        "cursor": {
          "ref": "a5fb3e7a-504a-450f-8856-a861c1c1d470",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4081c102-1bca-4fc0-bb6a-b5b73fb00751"
        },
        "item": {
          "id": "097486ee-4297-47b8-afa4-97009f7af46a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "71774cb0-bc10-4018-a046-1ba7b1276576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "04a2817a-fc04-45b3-9164-7066d36f3ed0",
        "cursor": {
          "ref": "52722f9e-f2ac-4b85-8395-121759dd82c0",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "08d9a059-bbf7-42be-8596-995108f4db3a"
        },
        "item": {
          "id": "04a2817a-fc04-45b3-9164-7066d36f3ed0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7822acf0-520e-4c38-9bf5-eb76382637ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "324092cf-30c1-4dd8-8616-20217fe76833",
        "cursor": {
          "ref": "693bf9c3-269c-4c77-9ce3-06c525251493",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "24d9dd55-b81b-4718-9344-8be6fd361e1d"
        },
        "item": {
          "id": "324092cf-30c1-4dd8-8616-20217fe76833",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "809fed16-add5-4fc4-bdfc-520f32fca469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "436781fa-6c10-48fe-896a-f01a9ba0f65e",
        "cursor": {
          "ref": "d47e0c59-1cf3-4e5d-865c-7c6616dfd59f",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b9d8816d-d6ba-4727-9217-dcc39d853da4"
        },
        "item": {
          "id": "436781fa-6c10-48fe-896a-f01a9ba0f65e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cc298046-37d0-4995-a299-0fd50fa1cbea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "97e8e743-08e9-494e-9bc1-fd25ce64354f",
        "cursor": {
          "ref": "01906df9-5997-41b3-8dd7-f9e8c0d70f31",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f22f01fd-2d2f-4aa6-8d4d-7a1e237720d3"
        },
        "item": {
          "id": "97e8e743-08e9-494e-9bc1-fd25ce64354f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f6d4e714-e91f-4ccf-852d-be7771629545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "06f8af6c-1134-4bda-9cbe-0880d4ebc3a1",
        "cursor": {
          "ref": "293cf43c-3b90-4287-9379-caabd31b4ead",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ddbfc0c7-82fd-47bb-94bf-be6424590eff"
        },
        "item": {
          "id": "06f8af6c-1134-4bda-9cbe-0880d4ebc3a1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "748f2560-f270-4ccf-abd3-d30252a80e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "7a10b9e2-0c74-4d72-81cf-f339c4c8c294",
        "cursor": {
          "ref": "35cf1095-7edc-440b-ae75-2d2b6caa60db",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bcc495d9-4241-4af9-a029-1d2ccf82175c"
        },
        "item": {
          "id": "7a10b9e2-0c74-4d72-81cf-f339c4c8c294",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "88e58782-478a-45e3-89bb-d185c19f72f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "3b6ef42e-acde-45ce-85fc-ab32deaa2bca",
        "cursor": {
          "ref": "e1fff4b2-0ca9-44d0-82ba-1254cd030d44",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "14f1d19d-b943-45c8-aad3-1360e77086c3"
        },
        "item": {
          "id": "3b6ef42e-acde-45ce-85fc-ab32deaa2bca",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e7262cb4-d152-4578-af8d-1c968f487187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "087ab805-4140-48b8-a9e6-74a4b038ea7f",
        "cursor": {
          "ref": "c91226fb-cf4b-4ca0-b98a-affc915e0f05",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9ee23910-46fe-4a85-a99b-283a237fb440"
        },
        "item": {
          "id": "087ab805-4140-48b8-a9e6-74a4b038ea7f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b2f6d38b-4b3c-4249-b9ea-642ae7a80359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "22ac66ad-f540-4e86-8711-c388ff0e013c",
        "cursor": {
          "ref": "bfa9c50b-3176-4a9b-86fd-bf3106184ca2",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8ad6d8bd-0ecd-49ed-af14-dc316c399f7c"
        },
        "item": {
          "id": "22ac66ad-f540-4e86-8711-c388ff0e013c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "de4ac62f-cebc-47d6-a59d-f9f4907db9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "8f40038a-0713-4c17-93b8-fcf77f8d6199",
        "cursor": {
          "ref": "c9b4df19-fd39-41f8-a4b7-b1f4417adea8",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1bc149ad-701b-4b66-a67e-fb8ae251d683"
        },
        "item": {
          "id": "8f40038a-0713-4c17-93b8-fcf77f8d6199",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "51537ef8-d2ad-40b7-8e3d-fee5f8f7c0cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "78884a0c-6902-4425-88b4-d2766bc80388",
        "cursor": {
          "ref": "39a9433c-086f-44a0-b75e-8e9325b78fd2",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a12ee001-ab1a-4dfb-a3af-1bd922b02475"
        },
        "item": {
          "id": "78884a0c-6902-4425-88b4-d2766bc80388",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "832acdf0-8fcc-4af8-85c7-705e145cd054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "419bdee6-c67a-436d-9fa8-352032468bfe",
        "cursor": {
          "ref": "a8d65b67-54fd-401c-9086-53b8e0e94e8c",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "210667de-0c2d-40bb-8ce4-694e79482eb7"
        },
        "item": {
          "id": "419bdee6-c67a-436d-9fa8-352032468bfe",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cf668883-42d1-4197-a533-2913e6837520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "89c1d423-1a80-4499-8747-e836d05692ec",
        "cursor": {
          "ref": "276b6f53-4b46-4b9a-843f-927c9be130ec",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7e0ae7ce-8d16-4324-9878-609e2d37bcee"
        },
        "item": {
          "id": "89c1d423-1a80-4499-8747-e836d05692ec",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5747a4d1-28bc-49d0-86e2-122d3cdb96e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "caef26b6-ce83-4f69-b0f8-47584fde4e91",
        "cursor": {
          "ref": "4309b154-e6ef-4070-845e-b69157256f94",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0ce13733-314e-4537-8fbf-b0496cae5198"
        },
        "item": {
          "id": "caef26b6-ce83-4f69-b0f8-47584fde4e91",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "89823022-baa2-42ec-82ba-8598d9032ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "f2637ac9-cd79-40bb-808a-5b93156e8c12",
        "cursor": {
          "ref": "fecb65a8-742a-4cea-84b3-55fa3105a9a9",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ebf273ef-e121-4dd4-9ce3-0d9e2fb4acda"
        },
        "item": {
          "id": "f2637ac9-cd79-40bb-808a-5b93156e8c12",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5f9887db-4f5e-4b6b-bee0-218f25bc7844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "82029532-16a4-4381-af27-fa7468202564",
        "cursor": {
          "ref": "7dbb5f6d-a0ec-46cf-a5bf-ddcbf5e61d94",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "81ce710d-e4f9-4557-964a-9346e3a96acc"
        },
        "item": {
          "id": "82029532-16a4-4381-af27-fa7468202564",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9fa02d8a-c289-4f20-8095-42ac0a361c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "1eef8d54-7834-4427-b5e5-54b55db2088e",
        "cursor": {
          "ref": "c0997b24-07bf-4f49-a3d7-887c11b334c7",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a104fc70-566d-4486-abd9-0b642b886d05"
        },
        "item": {
          "id": "1eef8d54-7834-4427-b5e5-54b55db2088e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "43836b96-5623-4117-b574-1ba66d95525c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "29843591-a907-47c0-84d9-908eafd2de00",
        "cursor": {
          "ref": "dc37b96c-f180-4a26-86eb-e56ca991f123",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9015630e-e36d-44d8-91ae-28abb1279e50"
        },
        "item": {
          "id": "29843591-a907-47c0-84d9-908eafd2de00",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "382b70e2-204b-446d-8d27-3c51a38cea90",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "455f65b2-b4e6-4f30-bdcb-f0e7ee4b9afc",
        "cursor": {
          "ref": "85fd073e-4872-435f-8c74-3f2f0be2ef26",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2304e67f-ea74-4958-9aed-c3d771742854"
        },
        "item": {
          "id": "455f65b2-b4e6-4f30-bdcb-f0e7ee4b9afc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "52c7afc9-6ccd-48bb-99bb-9f61d41a885f",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "539b1c12-0655-4744-85e7-2646d249e441",
        "cursor": {
          "ref": "ec27ad1f-5ebb-450c-b03b-4f86c20ca4ca",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "54f940ac-26d9-4671-a439-d1667498cdc7"
        },
        "item": {
          "id": "539b1c12-0655-4744-85e7-2646d249e441",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8b5acba8-6d25-46bf-8fad-bbcffdec5a6a",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "fe47daa4-649c-4376-9f37-78b6b1852cd2",
        "cursor": {
          "ref": "f637f42a-f557-48b2-be32-71878fe52ccf",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c8de1e05-a553-4e96-9fac-9bdb392a1514"
        },
        "item": {
          "id": "fe47daa4-649c-4376-9f37-78b6b1852cd2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e08619ab-e8fb-415c-a4f7-5f3d09a685d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "04947f6f-6b25-4a89-bb2b-328bb7d1a15d",
        "cursor": {
          "ref": "9fe7592e-abbe-492a-95c3-3e86a3a7b375",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bfa6bfe0-c990-446f-8824-4e9520123035"
        },
        "item": {
          "id": "04947f6f-6b25-4a89-bb2b-328bb7d1a15d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "59babe94-cfd0-4033-80c8-c19aa0d72eaf",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "2f7a4650-883e-4bc1-b007-a05619f15f93",
        "cursor": {
          "ref": "13a58f2f-42b9-4acc-89aa-709bd14fc0d4",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "84d4e155-ff9d-4831-9780-a32ca9dcec80"
        },
        "item": {
          "id": "2f7a4650-883e-4bc1-b007-a05619f15f93",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5e8e868d-4ff8-43ca-9dfc-8aa0aaaaf5f7",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "c001354c-08a7-4230-885d-3eeb8294c42b",
        "cursor": {
          "ref": "dd41565b-cbce-4ffe-9e5a-a605f899c078",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f2b55858-a5ea-469b-8b6a-a6dbfccef0de"
        },
        "item": {
          "id": "c001354c-08a7-4230-885d-3eeb8294c42b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2a8cfb32-baab-4fea-bfcc-afb979cbc76d",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "f93556ee-b09a-48d3-84ee-ade0fa32a724",
        "cursor": {
          "ref": "36f6593d-f3f0-45a0-8903-2143c6887030",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1aca0510-a0bc-4a76-a07e-1f52f371b046"
        },
        "item": {
          "id": "f93556ee-b09a-48d3-84ee-ade0fa32a724",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a7ae61a8-a6f4-4923-b80f-7f38b2493f90",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6028c06b-debe-4a66-a4cf-b7e943d98a81",
        "cursor": {
          "ref": "b259caad-2210-4504-a12c-fcf2b5abb681",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a5ce44c2-4458-47a4-8e37-64fa5534004f"
        },
        "item": {
          "id": "6028c06b-debe-4a66-a4cf-b7e943d98a81",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "16cc19de-c7e5-4829-b83f-506e92b3db99",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "59c82163-821c-4bd9-a55b-fb30a1faf383",
        "cursor": {
          "ref": "ffbed7da-312b-40ba-9191-777281334adf",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7c1f665b-aec3-435d-a670-9b0250d1888e"
        },
        "item": {
          "id": "59c82163-821c-4bd9-a55b-fb30a1faf383",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "889d03c3-44a8-491f-9e48-ce4ae225c299",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "22f0da24-d548-47ec-bbd9-da98fe7c8fae",
        "cursor": {
          "ref": "0a7d55cd-4bef-47d3-8107-d13e3b116962",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9bb6be44-ab04-4c48-9226-9d5f35ec41f8"
        },
        "item": {
          "id": "22f0da24-d548-47ec-bbd9-da98fe7c8fae",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "07565ab7-c995-41b4-87bf-c74c40041b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "74424394-0163-4fe9-9679-4f3991c7d5e2",
        "cursor": {
          "ref": "e98c1e59-e742-4d66-99ee-dbc93b01ad4f",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2738331d-646a-47c6-a52c-0c6ec7f0db6e"
        },
        "item": {
          "id": "74424394-0163-4fe9-9679-4f3991c7d5e2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "50e95449-152c-4f31-83d2-927f1cca1aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "9b66f308-9489-4c7c-99af-5a8fc26b7260",
        "cursor": {
          "ref": "4b273f13-c7fd-406b-9d00-6df9777d4b73",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ea11f2c9-f417-413e-bcd8-2c20104b37c9"
        },
        "item": {
          "id": "9b66f308-9489-4c7c-99af-5a8fc26b7260",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a1eba7fc-dd32-4099-9ef6-13e8a712df8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "be7ec64f-5eb6-4b37-a0b2-1d59e1d71979",
        "cursor": {
          "ref": "f341c46d-e1eb-4dcf-a3b5-79d59d76abad",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a2550432-93e8-4ecb-a878-72f3ff75f822"
        },
        "item": {
          "id": "be7ec64f-5eb6-4b37-a0b2-1d59e1d71979",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5f4d2845-9d61-4dd1-9bc1-41ebc8d986dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "c29e70b5-8cdb-4ba7-9f41-6e5cfcc74bbd",
        "cursor": {
          "ref": "de48d168-746d-4745-80c6-00f7c367e6f3",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "80ad6935-bc10-4795-bf1f-240ef58b9a4f"
        },
        "item": {
          "id": "c29e70b5-8cdb-4ba7-9f41-6e5cfcc74bbd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2891c9a2-170b-4997-8888-73f04d0d502c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "2dc66f45-d27c-4861-ba0c-bbe0f159273b",
        "cursor": {
          "ref": "1508ae05-cc82-4379-b288-9ab43ad3a098",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e6adac2c-97c0-4544-a550-02858594e511"
        },
        "item": {
          "id": "2dc66f45-d27c-4861-ba0c-bbe0f159273b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6e6db223-4322-49ed-90ed-a303476c8f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "b5e334bf-221f-4a34-bc91-b15444908fc3",
        "cursor": {
          "ref": "3f3abec4-f15b-4b2c-b474-3e68325df5c2",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e375d4b8-c98d-4af6-af15-f1d5b765cfad"
        },
        "item": {
          "id": "b5e334bf-221f-4a34-bc91-b15444908fc3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "562c053c-c2ef-47cf-9633-3da4d58c04cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "a43b695b-92b8-49c3-9191-6c16a98d0780",
        "cursor": {
          "ref": "c5b52470-1e9b-4bb6-8df9-a18aedefbbbf",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "60fc8c53-2b4e-40e7-ac2a-6aaf42c12619"
        },
        "item": {
          "id": "a43b695b-92b8-49c3-9191-6c16a98d0780",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d6d0d6ef-93ca-45b8-bde0-635376a9fcaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "4b5546c5-9f26-48e9-babc-8d7858d1b8b7",
        "cursor": {
          "ref": "b49f905b-38d4-40e0-931c-145215ac8947",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "31157d3a-9695-459b-84a8-bda65b1bf58f"
        },
        "item": {
          "id": "4b5546c5-9f26-48e9-babc-8d7858d1b8b7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9b83b69a-45ea-49b2-94c6-850614203ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "0b28323c-be19-4b7b-9482-b48c28fbe7f8",
        "cursor": {
          "ref": "0808b441-8a28-4e42-94cb-e1b5c7e9a69c",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "aa983090-8909-4c2e-a617-901d8f32ab62"
        },
        "item": {
          "id": "0b28323c-be19-4b7b-9482-b48c28fbe7f8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "eeeb355f-9a18-4c31-83bd-fc4aaeb7948f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "b45f7890-c441-4c7b-bae0-d1da8ba3589b",
        "cursor": {
          "ref": "0b0bfb68-9a5d-4f10-9817-887d5bdeecd5",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1f034536-c69b-4383-8cc2-a9ca8b0e3aaa"
        },
        "item": {
          "id": "b45f7890-c441-4c7b-bae0-d1da8ba3589b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "488717a6-fa63-44bd-a5f5-dff41a9e7797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "78df1920-dc78-4157-bd8d-28c71de027a8",
        "cursor": {
          "ref": "423681aa-38b8-4bee-8e49-9887457f5456",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b664db40-dfc3-402a-9359-d2c67c88e1b5"
        },
        "item": {
          "id": "78df1920-dc78-4157-bd8d-28c71de027a8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d08d7007-e375-4b81-adad-6fe5254135a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "5eebcc27-b970-4982-92b9-1b1be1f09d44",
        "cursor": {
          "ref": "550b44b6-fb47-4b01-82a0-2ed84db09862",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5d5564a8-3c6b-429b-9216-8c0eb82d39bd"
        },
        "item": {
          "id": "5eebcc27-b970-4982-92b9-1b1be1f09d44",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "31f64f8d-d139-42c3-9cde-10a9ee3c6f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "e165687a-b026-4e1c-a7fa-ebd23c003f00",
        "cursor": {
          "ref": "ab6e90a7-77a7-4327-9f57-3ae4ce1743d2",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7c53febf-fadc-4287-b9a7-3c8434207cb7"
        },
        "item": {
          "id": "e165687a-b026-4e1c-a7fa-ebd23c003f00",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0f70c298-67de-4fc8-996d-15d5ba3125ab",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "2ae9ac91-90ca-466d-b30a-031b059976a3",
        "cursor": {
          "ref": "278f480c-e02d-4655-8568-24cb0bcaff44",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8205b4fd-ce49-4850-b6a3-1c4af29fb108"
        },
        "item": {
          "id": "2ae9ac91-90ca-466d-b30a-031b059976a3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1c97a2b7-f893-497c-88da-8857633e8e46",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "76f8817b-6e3c-49d6-81cf-275f25112385",
        "cursor": {
          "ref": "f585820e-4124-4124-82df-85b5da18738f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c17bfff5-54f2-4452-b3b1-2f762c3d7b44"
        },
        "item": {
          "id": "76f8817b-6e3c-49d6-81cf-275f25112385",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "01341fb1-0a45-437b-9a1e-84bfddf49d17",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "03f96cb5-fa75-4f47-b104-17869912e3c7",
        "cursor": {
          "ref": "bff6549e-991b-43cb-9e64-e1e3617be854",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6e9d9a2d-85eb-468a-9264-7b006bab6f9c"
        },
        "item": {
          "id": "03f96cb5-fa75-4f47-b104-17869912e3c7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0d2243ad-6be1-4e1f-9645-01e7c69295f7",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "b6d6d5e2-d251-48c3-a607-a3ad8844742b",
        "cursor": {
          "ref": "bbf3819a-238a-40ec-9f9b-7ba50d24ba65",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "09bf9672-6aee-45a2-aea9-a838d63e5565"
        },
        "item": {
          "id": "b6d6d5e2-d251-48c3-a607-a3ad8844742b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "69d34613-7fe3-4d74-bf2a-97fd4b04d813",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "81404e2b-840d-4d97-b32c-214b006124e9",
        "cursor": {
          "ref": "53b5cb2e-e737-4a48-8ed4-8c3e7e34fceb",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9c4ecad6-118c-4815-a76d-60fd54590323"
        },
        "item": {
          "id": "81404e2b-840d-4d97-b32c-214b006124e9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "982c97f9-c241-4846-8cc1-a385ca0cf8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "38686bdb-ece9-43f1-82fa-094b0cfbd9a8",
        "cursor": {
          "ref": "311717a6-d41a-4469-b998-fb945a5ef694",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7d649f96-f0bc-49f5-9994-13d96825d2a1"
        },
        "item": {
          "id": "38686bdb-ece9-43f1-82fa-094b0cfbd9a8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c3327f07-1c1a-4041-84ed-a6f86a1e94d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "7b422310-7f07-4d3b-85b1-ec8fedc59783",
        "cursor": {
          "ref": "b8e65862-3ca9-409e-9149-634ab0f9059d",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "072971d2-0bb7-48e8-95b4-04e20fc00aa1"
        },
        "item": {
          "id": "7b422310-7f07-4d3b-85b1-ec8fedc59783",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "94329748-08c0-4dd0-b807-41970fb5a874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "22a9d11c-88a9-462d-bc65-457732fcaef3",
        "cursor": {
          "ref": "1e4270e7-4bad-4113-b5a7-b7cf0d520039",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "84fec2a2-e23c-499a-8192-4bcaaf0a91c9"
        },
        "item": {
          "id": "22a9d11c-88a9-462d-bc65-457732fcaef3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "689c4a25-76cf-477c-890a-daca14a46330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "61ae4336-e8ba-478e-ade6-aeaa08b7efb3",
        "cursor": {
          "ref": "b48be493-daba-4c03-a58a-0d1a47321e77",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "10a12308-d95f-45dc-849d-ad221e727d99"
        },
        "item": {
          "id": "61ae4336-e8ba-478e-ade6-aeaa08b7efb3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "32941502-d434-491f-91ad-701715faa6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "556eaa7e-ae7c-402e-9175-07c67ee9ec49",
        "cursor": {
          "ref": "10ef96f8-28bb-44c7-adb5-33172861f8b3",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2fd0d2ca-6cb0-47cc-8818-464867795918"
        },
        "item": {
          "id": "556eaa7e-ae7c-402e-9175-07c67ee9ec49",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "83a5eaed-8c74-427a-8ad5-c69a65b2bab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9d69cc8b-ad7d-43e7-9a91-d7e0a9d9f52f",
        "cursor": {
          "ref": "fe03bf66-0802-401a-b82a-9dcf554d7e66",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2395d970-ba07-4094-bc8b-436c4aa3be96"
        },
        "item": {
          "id": "9d69cc8b-ad7d-43e7-9a91-d7e0a9d9f52f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9af10e6a-aa79-4671-86b2-b4949f355be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ee89b263-ec90-438f-8e2a-e944056b0bfc",
        "cursor": {
          "ref": "8ea53756-a4c0-4b30-8804-7258af37dc88",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3ecad33d-8a96-48fc-8a9f-82e84d43c636"
        },
        "item": {
          "id": "ee89b263-ec90-438f-8e2a-e944056b0bfc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4b1485f6-97ee-4b1f-b719-2a010280aed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8a1297aa-2739-40bd-9604-4f07ca771355",
        "cursor": {
          "ref": "ec12d94a-627e-49d3-9f1c-da9e09bf9b0f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d16a1183-7a03-4891-be8d-abc7bb3c3b49"
        },
        "item": {
          "id": "8a1297aa-2739-40bd-9604-4f07ca771355",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "123f9ab5-01fd-4c60-9c0e-665e786e2dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "f4ac31b8-5906-411c-a09b-d1efa4385dac",
        "cursor": {
          "ref": "cd6f03c0-67a8-4bcf-b2c3-47352cc3272f",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "566ae23e-1e0d-4b5d-a519-537083f93717"
        },
        "item": {
          "id": "f4ac31b8-5906-411c-a09b-d1efa4385dac",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9f3cf194-e890-42ba-bd74-dbdf32a56497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "42454a6f-b5fd-449e-b880-6f0e446b1317",
        "cursor": {
          "ref": "18d37820-e572-437c-83f3-c614eae9e6d6",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7e3da913-3e1a-43bb-a718-fe3ff66e65b1"
        },
        "item": {
          "id": "42454a6f-b5fd-449e-b880-6f0e446b1317",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "49c48763-593c-44b0-8d21-329c948466c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "315df8ae-bf4b-48d0-8818-19aa323912c0",
        "cursor": {
          "ref": "b48400ef-53d0-46ac-8802-027d1b7b1a2c",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8897e683-9858-4770-9d0c-384459e7d278"
        },
        "item": {
          "id": "315df8ae-bf4b-48d0-8818-19aa323912c0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2ad283e9-6c5a-414a-bf3c-30dc8dbaa992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "48cc056c-2a95-42d6-a7fa-c6e0b2f33b64",
        "cursor": {
          "ref": "07615a01-fbde-4bd4-9a67-3a1c519c98af",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bfddecad-ee8c-4d62-98e6-a8f9319cc5b4"
        },
        "item": {
          "id": "48cc056c-2a95-42d6-a7fa-c6e0b2f33b64",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7fe42f2f-96e8-4e22-84cb-96bdd3728c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ff6e8ca4-33f1-414d-90f7-3454b8d8fe7f",
        "cursor": {
          "ref": "d45b2c9e-7482-42f7-bf9a-8e8b9ce50e4f",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d8d9b2a0-14d6-4ce6-8eb6-da570c1b26c9"
        },
        "item": {
          "id": "ff6e8ca4-33f1-414d-90f7-3454b8d8fe7f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d4ae5bc8-327d-4752-8844-cbf4dc2dbb1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "af5c9ff7-08a6-417c-a247-c36a19e4a15e",
        "cursor": {
          "ref": "807c133c-dc2a-4330-ba30-9cccc306de96",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f31f7299-8345-43b3-9301-355ff6545f4c"
        },
        "item": {
          "id": "af5c9ff7-08a6-417c-a247-c36a19e4a15e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "edc89cab-1dff-4492-8c03-507b7cfe4b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "f5618713-1369-4937-a555-bf6eea5ce789",
        "cursor": {
          "ref": "4e37f929-fb11-42f0-a497-ae4c6b2531fa",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a80d0c6b-e943-4a17-98ba-69d69726372b"
        },
        "item": {
          "id": "f5618713-1369-4937-a555-bf6eea5ce789",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0c5cb294-5f47-4380-9adc-cdbebf6dd73d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "4335a766-4ef8-4529-a18d-05314a6f456a",
        "cursor": {
          "ref": "c4b7ff5e-244a-4a46-9941-9eb11a5eada3",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "62166611-76e6-460e-ac83-119ca11b4d25"
        },
        "item": {
          "id": "4335a766-4ef8-4529-a18d-05314a6f456a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "267e2eea-84b9-4e19-940b-1f62c9df36a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "09394d99-b649-487f-b209-504f7bd80cee",
        "cursor": {
          "ref": "488d99a7-7b7c-4ca5-a9ff-e1bd5e13de7d",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "09ef6ec4-e55e-494e-aa6e-5c72d317228b"
        },
        "item": {
          "id": "09394d99-b649-487f-b209-504f7bd80cee",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f8d9ca11-d33d-43d2-bf95-bb6ef9fb5bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "5bb37aee-b0c8-4dbf-930a-d3ed3a53edae",
        "cursor": {
          "ref": "86414c74-da27-4597-816c-863f04c7b8a0",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "43f71eb4-6f3b-4765-9183-81ca61add113"
        },
        "item": {
          "id": "5bb37aee-b0c8-4dbf-930a-d3ed3a53edae",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9c8df753-200b-4426-b397-5354e5f08199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "423b84ed-2a0a-4922-99b8-6553ddc33829",
        "cursor": {
          "ref": "e411324e-fc19-4bf6-acba-c335e52e3864",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5d75e6dd-714d-46d2-8c31-16e96f06c27d"
        },
        "item": {
          "id": "423b84ed-2a0a-4922-99b8-6553ddc33829",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "577b5000-97f5-49c7-ba51-6d364e1f0f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "8b441d6d-99db-4c9b-9375-dfe2b109ae5e",
        "cursor": {
          "ref": "7dfc4907-e837-4a66-91de-254eaf626a17",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "17d6f702-60d6-4e39-9b66-f422d6f5b070"
        },
        "item": {
          "id": "8b441d6d-99db-4c9b-9375-dfe2b109ae5e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3d967329-1ee2-4ef3-86ea-4a766656881b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "23cbe51b-c82d-49b9-bb00-d1c93bda7085",
        "cursor": {
          "ref": "c980df47-9733-4c6e-bb86-b3fd65b51ef6",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e8302d65-42fa-4f85-b851-ad24148e51c8"
        },
        "item": {
          "id": "23cbe51b-c82d-49b9-bb00-d1c93bda7085",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4258a3f2-23a2-4d0e-8f56-7c7d0a69491c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "4677bb41-7f27-4dba-8927-16eaee2df99d",
        "cursor": {
          "ref": "781d6467-9e3f-43ac-b0cf-71afa805621d",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a61c3303-d07c-4360-97ec-ac861696c952"
        },
        "item": {
          "id": "4677bb41-7f27-4dba-8927-16eaee2df99d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "afbeec98-aafd-492e-8d2b-487fbfe98e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "a61645e6-ab88-472b-ad70-ae9923111654",
        "cursor": {
          "ref": "28276787-40c2-4919-9343-04863c2b0365",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8ae9bde0-4dfa-4b72-9f77-7dc9c09ee9d6"
        },
        "item": {
          "id": "a61645e6-ab88-472b-ad70-ae9923111654",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "26c065fb-22fb-4caa-b333-9ebee5b249ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "7d7e9618-b4f8-4fe1-ab5e-7d642a1501b4",
        "cursor": {
          "ref": "89b8028b-6012-41d2-9a58-93043321ea36",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bca8d5af-edb1-46eb-abe2-6d51afb0a86e"
        },
        "item": {
          "id": "7d7e9618-b4f8-4fe1-ab5e-7d642a1501b4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9f89ad8b-918a-47aa-95a6-c0aacf2f9cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "1af796e2-3b21-4eb5-9141-25d3c4779087",
        "cursor": {
          "ref": "4c266c01-4c7f-456e-9938-00058418a796",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c71d6187-0114-4b17-ac55-c187917e43c1"
        },
        "item": {
          "id": "1af796e2-3b21-4eb5-9141-25d3c4779087",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e477a049-0e09-443d-ab8d-170f9faa27d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "abca0bec-a772-4d12-a42c-4a187bc90eae",
        "cursor": {
          "ref": "6b147164-714a-4c31-b8ce-0f9e4d29694b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7183b3a1-4309-41e6-99ac-3d88e629fbe8"
        },
        "item": {
          "id": "abca0bec-a772-4d12-a42c-4a187bc90eae",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1427890f-5cb4-4460-8e94-f55be971c744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "19fd8e87-5388-43ed-ac21-4a080a51f30f",
        "cursor": {
          "ref": "3f485681-dc96-4aaa-9f3b-15118bff6b03",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f7f81c8a-7201-4ee8-bbea-736d3e7d4fc3"
        },
        "item": {
          "id": "19fd8e87-5388-43ed-ac21-4a080a51f30f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c59976d4-9c3f-4d33-b8bc-05d5656da58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "8bb10ff7-83be-4542-89f4-29b1c3cfd758",
        "cursor": {
          "ref": "591818e2-47f9-4020-b31d-7279a7bb65d0",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fef5520d-d458-48f3-ba02-1e52dabffd18"
        },
        "item": {
          "id": "8bb10ff7-83be-4542-89f4-29b1c3cfd758",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9087055f-93b3-46cf-befe-e40976336cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e916f4c2-8e7c-4935-a452-f9e580c7a368",
        "cursor": {
          "ref": "ac070a8c-96a4-4ee9-8305-6639ea6784d5",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5dea8037-f3bb-4179-a369-bf021d57df0c"
        },
        "item": {
          "id": "e916f4c2-8e7c-4935-a452-f9e580c7a368",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bed78cb0-783c-450d-805b-bf79ac586135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "95a2aaf7-e4d4-4fcf-b49e-948ab6f3cd68",
        "cursor": {
          "ref": "d9c4af03-319f-4c50-9e5a-5825b087f34c",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9375f221-7fae-4eee-a550-5a911fa95ee4"
        },
        "item": {
          "id": "95a2aaf7-e4d4-4fcf-b49e-948ab6f3cd68",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a30fda69-78bb-42d1-b7c6-56253f55bd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c040510a-88cc-4245-be24-8c29123451e9",
        "cursor": {
          "ref": "54980c8e-09ab-4aa4-bec3-de1b96d1d627",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6ff1147f-caaf-4587-8e5b-01b4bd9134ad"
        },
        "item": {
          "id": "c040510a-88cc-4245-be24-8c29123451e9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c9b9042f-f1ec-4a18-8aaf-d76fe745a457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "67e83aed-0d73-4b3a-bcde-5d72e4159e18",
        "cursor": {
          "ref": "d1e4e0b5-78c1-4478-acc9-6b0f95699b14",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "015db4f1-32d4-4b61-bcba-05e4f75a98f0"
        },
        "item": {
          "id": "67e83aed-0d73-4b3a-bcde-5d72e4159e18",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "add5d966-af1b-4c6d-a8f4-33e25e41b3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "57e98b67-68b5-4419-8dc5-c0f7d7b0c7ab",
        "cursor": {
          "ref": "2c2c842d-1f54-43e1-8e2d-7c592a9acf87",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1f0bae1f-bb9e-4c0e-b8ab-20f39f91fd31"
        },
        "item": {
          "id": "57e98b67-68b5-4419-8dc5-c0f7d7b0c7ab",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1eab212c-8163-4127-84fc-cf175b66c6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "b189c48c-8bf8-499a-a796-a708fa26ce11",
        "cursor": {
          "ref": "3b707adb-9294-4f66-aabf-f582ba5f5b5f",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7e8b21ac-2723-4d63-8c73-27a3f68c0b70"
        },
        "item": {
          "id": "b189c48c-8bf8-499a-a796-a708fa26ce11",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e71a0753-4580-452e-a172-0c95e9472dd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 92,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2873474-274d-45ba-9c59-69061ef9d9ff",
        "cursor": {
          "ref": "e7707219-c31d-4983-bfd9-a84671695233",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9d39c9e3-343a-48bc-a1c0-f17dffb7f346"
        },
        "item": {
          "id": "a2873474-274d-45ba-9c59-69061ef9d9ff",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d11a3fd2-e970-4737-9695-62fe18f834d1",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "570d29f6-f833-4a82-8297-4178dc6fcf75",
        "cursor": {
          "ref": "417cde91-594a-417a-b3f6-0c941172aca2",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7377e441-d5c5-4ad9-b622-065ff4f3dd8f"
        },
        "item": {
          "id": "570d29f6-f833-4a82-8297-4178dc6fcf75",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f535fddf-cf21-45ce-be3e-2b6aa1685bbe",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "18580835-b050-44d1-9571-f64b439479c8",
        "cursor": {
          "ref": "dcfc1a3c-e45b-455c-bbc5-59252171f5c1",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fb0154ce-6595-43d9-8ddf-27c3a4f59401"
        },
        "item": {
          "id": "18580835-b050-44d1-9571-f64b439479c8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0750bc3d-b20e-4a7a-9951-a736a76c729e",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a29217d-d070-4e83-aec7-6e85acb3cd97",
        "cursor": {
          "ref": "6bb6752f-c67d-4ea4-b8a6-78c1c120aa15",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dd0fd2b3-576f-4f09-bd00-b173161bdf90"
        },
        "item": {
          "id": "3a29217d-d070-4e83-aec7-6e85acb3cd97",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f80a5ed1-ddaf-4a47-b6a1-490ae07fde8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a29217d-d070-4e83-aec7-6e85acb3cd97",
        "cursor": {
          "ref": "6bb6752f-c67d-4ea4-b8a6-78c1c120aa15",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dd0fd2b3-576f-4f09-bd00-b173161bdf90"
        },
        "item": {
          "id": "3a29217d-d070-4e83-aec7-6e85acb3cd97",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f80a5ed1-ddaf-4a47-b6a1-490ae07fde8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b4340c-a4f8-4fd7-8c0e-f2b6fe93be3f",
        "cursor": {
          "ref": "804e2f0c-c87a-4277-a3af-491067c70e79",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9abad164-ae78-436f-bd2e-cc1e6703b3ae"
        },
        "item": {
          "id": "29b4340c-a4f8-4fd7-8c0e-f2b6fe93be3f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ee1e3d84-d090-404a-a6ab-5608e165d1aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c17170a-801e-473f-8a46-941c2c9eb900",
        "cursor": {
          "ref": "dccd6487-a87b-49bc-a147-369514eb5c23",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1d31a194-77d3-474a-8c4c-0530ad0d5608"
        },
        "item": {
          "id": "7c17170a-801e-473f-8a46-941c2c9eb900",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2ba1d794-122b-421c-964f-bc44287b448a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}