{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7c7ffa62-9dd4-4aab-b2a7-ae016e6be9fc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "45c96af5-ee57-4c33-85cc-36f35f212d87",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "710cd524-458a-412a-a2b4-4396a2f75baa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "00a42586-62e0-4dc3-a46f-5f82644606e3"
                }
              }
            ]
          },
          {
            "id": "36ca4c25-0a85-4325-84c1-35b37af5c943",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "351579e3-0988-4e59-8651-775d2ec1e2bd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f02f9c9a-3035-4a2c-96d1-beedf7f1d5c0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0d4cd0d5-4995-4d9a-8418-47a41f8bd349",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5dbb019b-7e1b-48f5-b8b8-9c95f9ac1ff4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96dcbc6b-b99e-4ce1-ac6d-441c36f01eb5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4084833b-4560-41e9-8b5e-14b45d7f5d9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26502d40-c4f9-4568-9c55-a5a4f5c649b4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d25df55-b855-4986-b41f-a5fb8d283f79",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "336570ca-72da-479e-a0be-f146e9ea397f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ef7d9b38-2059-4754-9b30-a7a85b7c2373",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07514d1d-d68d-4108-9598-d40bf2b9fed4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a81163fd-1cf9-4b63-862b-8a7fb2666012",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0996ec85-838c-4831-b81b-2f7606bb5491"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7b6347e-e73f-4cf0-9605-64670fff9a23",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f631c605-3c05-458b-91b5-0db824c085e7"
            }
          }
        ]
      },
      {
        "id": "2726bdd0-2c5a-4703-9b62-d10303188c39",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1a6110a9-06fb-4b0c-90f8-8b5236d93a0e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "589379ed-83cd-471c-a6b2-4ba008e914ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8021013a-1b3b-4955-8c5d-57e77cd35303",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff27c9d-331e-4dc9-b4b4-fc3cef801a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b337ea52-5f99-496b-9ab3-f4935ba7d03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c658e917-2463-4117-a42c-f942832ba2ea",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdd7361-e927-4dd2-a597-f17fea1d2839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23b387fb-6125-41e9-96a7-3b3fb7c11e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a00dd3b-4edb-4d30-a692-15846c81501e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e63395f-57a8-439e-9840-16e40a64dc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80686e8c-c9c9-4990-9173-63fb1ac86dc5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7685804c-ebde-45e8-b60e-ddf5f7dcd2bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4fa21e80-8322-4a0a-aa9d-010c64291684",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37696912-a70c-4499-9d7f-da02deb6532b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e97ccdb-1823-4a6e-ba05-83c62a655cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702e35fb-e225-4f00-8280-b2b9c4b73e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09128ce-18e1-446a-9603-42bb8b8987ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0808dc-65b4-45a7-a7c3-39dba0a6c46b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7147b63c-8a7f-43a1-a90d-5018e4769316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c85539c-0800-45d7-a353-1bf92000ff90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fabee23-7d53-4be5-b9e8-ffe75237818c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "78089811-f02c-4845-ac7d-ae5f4f49ca23"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5cc3c2af-d2bb-4903-bd26-46f94211d917",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7c180769-2e60-4d77-81f8-c7141957d41f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4757b3f8-cdc9-41c3-b639-4b231ee3737f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ac4bb011-3840-46dd-8761-d7fbccecbd3a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bac393a7-4e7b-4a28-a0ef-ff86c310db40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "30dd1359-332f-4e40-ba44-17798e595399"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32108fd1-4233-449a-aa80-e4be7bd834af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2882225a-12e4-408d-bd33-07c53f4dbbd3"
            }
          }
        ]
      },
      {
        "id": "9423af86-95ca-4834-bf20-7abbfaee91f2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0f7303b0-9786-41b8-b52b-059e8006bf3a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec183dee-fe1b-4c27-9837-3bf328324b20",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b8bdab45-426e-4cd5-8fde-0795d454caeb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4a7493-fa6e-46f4-af63-b181baf009ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfeee90-8410-4ff0-aa5c-7a80af14bd78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0496b329-7127-4e0c-9670-29e87cea5395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6e84966-7842-45d1-a798-34ceccb53ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b30d08-42b0-4340-8779-63e7ac30da91",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a02d146-9a64-4164-9b42-8b236e366de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610574eb-6758-4f52-855e-6b10c2976654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a660f9-330e-4e25-9258-6c2bb03f259f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62ebb14b-3bb4-436d-a539-bcca653ce4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc39e78-efe3-4177-9b20-0284d9e56264",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db29756a-77b7-493e-996e-c463d1ae3aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68a6c0a-160d-4099-a720-05384b761337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004db866-cdd7-447c-a431-fe3707c90108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7be1498-3180-47a4-a137-b2b89bfa9bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62ed995-f85d-4ede-8740-c5e88d46c733",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573b82f8-2571-4c09-8186-c56feb1d0a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3086d34d-4003-47dc-8c61-df7574ed1ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2859ea59-80bf-491a-bdb5-4ddf92c32adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f57e9b08-8634-4363-883f-c38311b0814f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6e5d3e-4f15-46f2-a27b-bcc5ca331b79",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10733f4f-8d4c-44ea-b5b0-1eb9ae40c1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0fcc8be-f46c-4b25-be63-d7a8383eace6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3b1c5d-d5c2-47f2-86b0-fe0b763e0032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec4a36eb-7161-4ab4-871b-56b1f46a721c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1130ef-c642-439c-bcb4-a1566f5aa4a9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3a00bf-0bdd-41b7-b0e3-16b92121d61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a685911-d233-43c4-b5e2-6b703e035fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8ed9f6-b452-4d89-84ba-71ab633c7af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "674b4069-d991-4b14-8b74-a1c5fc829a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd2fbd1-a854-4c81-9cda-30079ae1b256",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6535b2dc-ffad-48c0-babe-650f947db9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62cff18-596a-4298-8eca-6e08af2b7a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2cd44c-2db0-4fd8-a201-69446c13d853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6afc4c0d-f6b8-429e-9405-6251b1b6c7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9e00e9-123f-46c2-ac11-864b1c548821",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e509fa8f-bdef-4449-ae1b-3ea35e6a8aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6471cc76-fea0-4dfa-b450-46f4080984fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fddafc7-c074-455b-9471-f6c36df22c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1441b90-bfd2-465f-afbc-12cdff092079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8752bf3e-c03c-4e97-b876-224cdce6526e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d9d37e-7ba2-4b58-916a-fa52a31b2bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce81bd7-6539-4643-b1a9-1379663eae98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b370a8b-ff79-4421-803e-9a5d617e3188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6b50b64-eb2c-42f8-8fda-3b508fc836f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c5985a-33a9-408e-9a04-466cfb23c376",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4f6af0-c0cc-443c-978f-c99e4ba41063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e5a8444-16fc-4367-acae-c9ec22c8e204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a524202-a9d2-427f-9eb3-eb2bde9cf2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "951d86b1-ae54-4715-b158-fa29e3c2edc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bee15e6-3b41-430f-a6ba-8f7cdf54f60a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4400767-f512-4408-b2c6-27545bcac232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee91cc1f-b33d-4de1-981e-e60b74a69140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77570d96-4d06-4611-a860-c520119d55f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b3adb00-4f8a-46ba-acd2-ef44083aa948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae432ce6-d433-4950-93c2-903a5b169c98",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b0e39e-2b83-4c93-8452-097cf51407b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50a9f93-1367-47ff-ad82-31ddd19ef864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2145f029-3e7a-4b03-8d1e-ac13f1652585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1e97499-8441-4fb6-b57f-e7136ffe8663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757122f3-d05a-448d-9959-4d05ba05cfb1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5afc79-da5a-4fa2-bc04-c2dfacf4d40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb2629f-bcd1-4bc5-9d47-fdca8c44ccad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7f4dd9-076d-4775-9595-0624fc050914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c3e6c98-f2f4-4518-a289-2e4d1eb6df13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1715bd-1255-455f-87a7-66267dd2f0db",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13eea38-ffb6-4b9b-8376-5d78120dfca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88489cd3-502d-4713-8138-c6cfaf4ba9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716b9bb2-811d-4749-8569-67335e677755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4a5e8ca-80b5-4ccc-b01a-2766d4d32d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d829f2-f69e-4648-9542-3a78e472df5d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1c6bcf-ed71-4e83-adf3-7a2750144f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10e9634-d983-4e86-89cf-ca22fa4e2f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39cab36-58d6-4178-919c-5606867444ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3f4ff70-4613-46f9-a0ca-4bcb8fdb69ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601a8acd-8f0a-4ec8-bb6a-f566cff65a25",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69edf48d-43a9-448a-b443-914e29f961ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9911f767-33ca-4b23-8b4b-44e2caf40e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93fcd0c1-1c8c-4512-9756-c7d49293f227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23a35d6a-6921-4e97-a4ad-7db9169d6642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7453340-34a6-4023-88d9-416655de0c19",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2431cc3b-66c4-40a2-aaf4-35d61c9c89c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d98bdbb-859f-4408-b5b9-a62700de7f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f2756d-bd4a-4109-94b3-29059a1a01c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f12034a-b5ae-47d3-9611-bfd675ab1b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc49b00-0a73-4d4a-9677-78885c760d78",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90be8b50-129f-4963-a026-46817b82b08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4cc5be4-8ab9-43de-ae32-693eede90137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc2f1de-c1f3-40ab-b1c2-914e08cd24a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c25aabb7-b393-4c6d-96af-c3cb71600426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd3df79-f7b5-4520-bea1-41fdea3d9020",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b21cda-454f-4322-adda-a691afadbd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "845cfbc9-88ec-417b-a7e4-10ad5ebd49bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117981da-a5e3-4041-8d8d-054147cf03a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4513ca24-4084-4793-a675-3b113417b54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0681c749-f4e1-46f2-baa9-d723ce792299",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274de51a-fb3f-4ee2-bd72-2fb5e8a27d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3400e08-a194-4a1b-996e-1833255cb2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42507b7a-860e-40e6-a34d-12cf8cfa54d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b00dfc7e-7bd6-4673-ac1d-0c971b3840c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222f8c12-eb5e-4c1d-8320-5f33dccb5814",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5d1f98-6ca0-47f1-b798-f1c93035ed44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fdf418-f7b7-4eb8-96f4-90a5198c9f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dec21fb-6c4d-4551-b721-6b466846cad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4414330a-c9a6-46f2-b0ae-206f55cbd6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68a6538-afdc-4253-bcbc-e8e10cb88f77",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4937cf48-91f9-49c0-8bf5-e6e2821924bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093bf067-3e97-4920-bc5e-d4b6f0110ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39230deb-edab-4c9c-9719-9102cc102ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c7d2b63-21f8-4b70-a5b7-d85f90bc34ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd4f238-f4f6-405f-aefd-53110e7b33c2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735624af-7e93-4a0d-b810-f4ed6916714d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c117e6c6-1dcc-4b3d-86b6-69c0070df3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8719e8ad-b130-4b34-8402-cdf4712f9776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32523f4a-b1ce-48a3-b525-31e395d81b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8354b265-8019-4bdf-8fbf-8177f6bb1bbc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e78731-e4bc-4f7e-ad5f-198a2629dc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3135f6d2-f732-462c-aaa4-dff08de34933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae7aa99-f839-4882-9efe-8bb340ca74c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "73852da3-16d0-4d91-a294-ecb53a7253cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb740f0d-37f9-4301-a8da-0b5e253fb7c5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1994a673-1a14-4718-92b5-7024e153b6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32565b8b-769c-4281-aceb-6b6870be3b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8f07a7-ccf6-4aea-8d5f-de68c3afee66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0d2764-b898-4ddf-927b-647dcfa39ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e846eac-15a9-406a-817d-963671cec499",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eea00c3-2ab1-41a7-9164-a10bfca115fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373a39fd-1df9-4ac6-905a-440680bfdf2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d97454-ad47-4c4b-8464-a6e56f2b3a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "14af61e9-6633-445c-999c-293a4eb593b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e7fd43-50a6-480d-a761-9ad4f1837d3a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5d0e60-e5fd-47f7-9810-932f7f292049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "961ffbee-defd-4cc2-9297-4a80020f3912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20e497a-e0e5-42e9-acb9-55e8ee241c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "85ed0ee8-507f-4d2e-8cae-00b82566d945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d591a6b9-df0f-4d18-9598-d2470d799e91",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d713d4c5-50e1-45d7-8e11-42ec1e768aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f44fe0-2444-4126-948a-3a1917b76ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc9f2fe-e539-4798-a8f9-e2d0f1b9fb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b83b6e36-e4b5-4326-9a95-f37751700a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581e8478-78c3-470b-86db-8ac928de4803",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed339c65-5e08-4e53-80af-6d55fb232a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf35df3-2845-4323-9aac-d1ab4ef398ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49781d73-5b39-4842-8fd1-73b06be00f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03a7542e-3fbc-4c5f-9a33-506410742cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa08871-45e7-4ed7-a60a-ef43610d4402",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14730e7-96b1-40cc-a71d-f7c743e02daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098ab746-eabc-49ec-a6fc-bda252abf1a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2f0e04-1aca-4945-9771-94f10936df99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b6618f-60fa-4e65-99d9-38b532aa1071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ef9014-ea81-403f-b216-87a28f03d8c3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c2c7c8-3b41-40fa-9006-3f513683c7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658dfc63-9fea-4be9-a653-b6f257e36856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8607f1a5-9d4a-40bb-9ed1-1aed5365d044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6578efcd-c018-4640-b271-500464c0a7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd4b495-68ed-490c-be8e-c34d2c42e065",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11de593a-50fb-4c95-aaa4-fe846b88f4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654d0317-96b2-4451-b485-e5a6c9fb8de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c1aef4-78bd-4139-a176-d1838a1b38ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b9c84f-1f7f-44b0-91ea-5442a7031071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17258fb8-5cb1-41b9-a92c-e3998c67e244",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d4c051-47c9-4e15-b245-45c993de22e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed6e113-e5d6-400b-a375-a9245488ac6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd28f189-414d-4a9c-8854-79c504a47954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16c53aa0-13db-43c4-9630-f4aef234d291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacaefd7-2a0b-4ef9-b22d-fef93b6cb21e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caab2d4-0882-44fc-864a-7c6686c5b7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682ec418-82b3-4284-b494-ff2f2b83d685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92216935-b398-4aa1-9c84-5c408caf7160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f08dc071-ea7c-44bf-91a7-6f8347323c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e80d073-d2bc-412e-9ca3-441f157f91b3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05899dc-e35a-43ad-834f-5f0768f14e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93128f87-6f9c-4f67-85a0-7f5d8950d96b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e66abac-ffd5-4fbb-a492-78927039a960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "19e36cce-76ad-4466-99b5-4f80b221e5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4503f17-72d2-4c2d-9566-8819e979dd24",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb4f1c0-9af7-4c6c-bef6-6972634501d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b4eee94-5cd8-493e-b80e-81bdb344b859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2518049b-29cb-430b-91f5-b25de0186623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78c63a0a-0517-4006-81bb-a2eaa044c4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8f41dd-2903-41d2-9008-140ff090d6f3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59550c54-c427-4472-b97b-5e46f2b8321a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d063a7-43d3-4e5b-b30f-5921e695ec3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf4b9a0-86ab-487b-aa7f-1054907188d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e697ab90-51d8-42b5-bc28-4dcee74e531e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f8af14-122a-4bca-bac8-9bfcaebcb913",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcaa427-ff9b-40bd-9452-87c3bda3d960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36eb30ba-4c05-47e9-a77d-21d41cb20a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94597442-ac2f-49db-9ff4-b36cf05e53a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab532c4c-5431-4b1e-8117-d39a4919dca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adae533c-a0d6-4844-b325-0de4080249a8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b9a403-79c1-441d-9470-4536460f9765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df4bb6fc-9d8e-48c3-a78b-7d8b6c740d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35555c6b-c130-4b4d-b0f5-f75e76d3afce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a813edf2-35f2-4469-87df-d2bc630cc751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482632b6-241e-40cb-9fa0-64db414471a4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d55a576-1557-4828-9996-be1c54c31803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d0a840-2b71-457d-a564-b2cea793cd53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e653e13-681f-4287-ba52-b399119ac16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d97311-29fa-434e-9fef-e553a3e44889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e40140-0228-4cd7-aef9-2d251d5df15f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9cf023-3625-45a0-96db-c713f9de9a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc0e10c-80b8-4285-997b-f700dadb9d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98446c64-7c13-4e2b-8d8f-755929a180f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7dc3d77-8fb7-4663-9e3d-caf5fec19aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f034062-1ffc-45e6-8e97-f558157ff597",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91433ea5-d099-458c-b7df-ab36d6c60e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d5bc5a-725d-44f2-804e-c7b672df5ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3028c820-5bd5-4130-b6fb-7f4e5a078c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c430ed2e-a955-4bf6-b35d-58c13b6685ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f3a67d-a5cb-4f68-ba9f-43144a37b44e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2bf8db6-4d34-4bca-bfbd-e93fb03e2bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f17b00d-634d-47dd-806f-b97092aaa031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6452f4cf-d6d2-4599-b416-8e553e60c0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c883190-4a5c-4d6a-8b68-5ed6286bce68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf9319b-3756-4bb3-ac35-45eb0a0f9617",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30b1edd-0ba6-4aad-a793-241962e4adc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468c99ce-d370-4c26-bb83-cb8095267c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04afab5-9689-41f7-8edd-e25c1423a7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b5b131d-b7c7-4136-bed8-01e3f45d3d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf34a24-62e1-486c-8a76-44ba7004197a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e11a6e0-6aaa-4ecf-bfcb-32b9fc398875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164604ca-0cb2-4f5f-b711-49a5435fa6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09eec760-380d-4b31-a670-e340cef2641d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4c05a6-5ad2-4748-98f5-96704aae6557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c014e4ce-39fc-4cce-98ec-6a9936381ba3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6ee2cc-d636-486b-80c0-e20643b9e983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650d1f0f-6474-4a72-aaa1-56e0af23d74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56302878-1ddd-499f-89b6-326a453a9ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1e7c2c-5883-449c-bafc-8248b9c98a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5214fa-1e83-4565-a3f2-dc5cb3319247",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfdb2fe-c493-46ca-86e3-8a5e7077d6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd53f48-98d9-44fe-9451-5f99b8900358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164f7789-a0f1-4ac0-b01d-225ab8c4bd45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "156af444-a32d-4f1f-9119-14f33cadbb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c57ad0-e633-49d4-867b-1bcda1c17987",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "821b02af-0463-442d-991e-f131de8066f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b16a812-4ee9-4f7a-a909-0ef935e4bf6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490a4ffd-5f01-480a-9038-45fc34962bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e266c945-70e9-4fae-9611-3c49641200c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc854cc2-74d8-480c-b4d3-a2d63e786185",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5e8704-6b1e-4731-9b7d-63179b80f632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4e9e22-804e-4d65-bb40-acebe9263b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4671d481-6eee-47f1-b2da-ebbe32af6c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b70f79fa-8240-4d33-88d9-a7034a2e38dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52aa51b8-3d99-4275-8b2c-ce98b0cb5352",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8639948b-322a-4d45-b6f1-562e49cf5112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a339e231-0ce9-4c47-b803-e651f6323db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55970082-16c7-4b41-9537-26c4a6110035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14dfa2e6-13cf-43cc-93a5-107b705b1471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9db58d-77e6-4c98-9d52-1d3e68dbcf8d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfc9e4a-611e-436d-bc49-decc97d37ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47953a6-7ca1-4956-a6ec-5e2365cad99f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51947cc-350c-4240-83d6-b0d4217af742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3c3fc4-ba41-45af-8e33-3a9567f5f5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab8b5fb-73b8-44c6-8059-8304b85f067a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e78cb4-2ca1-4f41-846b-7188eade01c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21af938-3b9d-4253-9503-b12a86132022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9ee539-f2d1-4639-9306-5b09cbf8da83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "47125c64-8dde-4781-8f27-aeaadc59a4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc40778-12ba-41ec-bc95-00233b047d4f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dbc615-cf1e-480b-a2ea-b225c6bb09cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7edd44b4-a02e-49f6-9f4f-858adca7ad9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cb35e7-ce24-4ee6-9b41-0259a6216df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2afce0fd-69df-40d5-beee-54f3442e9996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0a605f-4bc7-4bf7-bedc-6c56ac73b3ab",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29247f7-4a9a-4439-831b-4c8f228ff758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138ef999-3b52-4ddd-98ed-22a1f6e43e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687a620c-c9ee-4174-89b7-61d586e8dcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c371652-ba79-41df-a5e9-328664a0cf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98807ad-0579-44d7-853b-dde783a1362b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e59b75-18e2-42b4-a017-a9c27cc6b0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e4afabd-b755-4e12-8d33-a88c0330585e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d22143-f796-4ec9-89aa-b2ebefa193bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "282c754a-8a56-4331-8c0b-28dd03e646b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1f2f1a-3d96-4063-ae98-db75c8612740",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cf58c1-e575-41c0-9658-26601fc5ff41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d44f70-3692-4038-98be-5fbe29265a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ad5e8a-abfe-4414-8f2e-157236ae97a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "917ace42-a3c9-413e-b350-9e4702574dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f6704c-5e5c-4062-92d7-ea92ac32fed3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce92296b-02e1-4ec7-bb77-724825cb6712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2a3861-9835-4747-b7e2-42f0c765a882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29cfd43-dc80-463f-8eaf-08cbe90e27e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "beda9c7a-0359-44ed-a2af-22cebca11353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e324908-e509-43b9-8c9b-832f6264fa99",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb5db9b-4912-4344-8d3f-5d3907c1e5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c6ee465-a5a7-4fec-89cb-cbf51dad2f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab23d67c-15e5-4612-8e41-4acad922049f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "44d6c7af-0b5b-4de8-b955-dc6dd85a9754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3decc6a9-8601-462f-9ce9-8ba4319a5a22",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71d9393-246d-49aa-a2e3-ceaf6f11c696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91eb4e02-4e20-44e6-b611-285abf0fb64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54992938-2be0-4cb7-83c3-2b99148117c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c68940f-c869-4dee-8c2b-dc1a9d56bc61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ba2c2c-1b61-4002-9829-9a378832f713",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7730d0f6-d4ea-4890-a9bd-8382b94715fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3b919a-e479-40f0-861f-35f59ccbf48a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3707c5-6c3b-4f3a-b8fb-badff4360a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0487bbe6-51b6-4753-a265-161717e2c152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe3afa2-2af1-45c8-9807-6e36ed9b11cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3087960b-e1a8-4a51-a5c9-6efd8dc15b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4058d0-cb23-4dc7-b822-bbc7d47ad16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89113a7b-144c-478a-8052-5e224c7ed8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e20fac0-9816-4a14-9ce3-3e6abb31539f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6108e22b-aa54-49d2-9172-98df1a7d519d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db071889-75d4-4eba-8e32-646920390870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "267e50d3-3860-4e82-ba7d-fa095c8e7e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62af4f1b-2cbc-4dc3-9065-c426b3de7ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1efd5044-e5ae-48c8-ac7f-c60057bd2b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde78774-66dd-4525-9ba5-a31488ebecf6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ac02e1-ffe5-4003-b4b3-86d05f043214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01011f98-6e4f-4cb9-afe0-41883acd298b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a523da-ba1a-4291-b28c-547007dd4ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "12004f0c-4416-4d1f-ad37-b4dadc9e7f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b088e3-787d-4a4b-b6db-5414e3ab14b5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b67b84d-e637-4665-bef3-6d5f2d88dec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a4d9f2-9107-455f-8cbb-35bec76ba027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbccf4c0-f9c4-4ef9-b5c3-408b9b7fcfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9113e11-6c32-42d7-8487-722298d5f7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73d774f-f6be-4c85-a28e-3138a263210f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051ad80f-b1c9-4c77-8d80-fe141b28f7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe0b01de-7130-44a7-9490-03666a6b6ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f283fd2c-5c7f-46a9-a09e-89f8228ac67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8712a92e-3c1f-458f-ba3a-cda1ccb05e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0706b1-50c7-4250-bed6-11036bb966b8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbc9733-7b7e-4192-a596-b4a441de6cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d2ed885-d0c2-498b-923b-cb3eba748495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af9c6f2-60fc-4a8e-8251-16498667415f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20a42dcd-53ee-44e9-bed6-73bb84e19a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a215163e-2883-4f21-b1f8-2e84e9771029",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e858ce-dc6b-4bfd-8283-fd3a42b09885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a25c02-705d-415e-b942-d9987fcdc975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e1c99e-1f0d-4353-a427-2f4f7542ec6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67f04965-58b3-4115-aad6-c0b46785cd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424a5d04-45c9-4806-8119-c54f11ac47aa",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5bff7b-e2fd-4d77-8c7b-c0684f6d5806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1523285b-c956-46da-b159-041ab347c87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4920707f-1e4c-459e-b857-f1e9b2e4ebac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "70ec7f56-3be4-4a58-a135-1bcd7b696342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453ab725-9fc8-4cc2-90bf-3fd14499780f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179d79a2-6071-4003-9bbc-ebf98d5a20a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d701b8f-78f4-4c38-b07e-85c54a6e327f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0139dc9c-1a0a-4cef-894a-ea7606271049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b6dbcb2-71f0-462d-bb62-982e760b4ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bb1acc-6d58-46fa-a767-855cf1c65002",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ebc4bc-410c-471a-8246-3a3c7cbbc273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa68df5b-908b-479b-972a-db02030a528a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30de833-52c0-4bd1-9a63-fb09e4329803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c512aec6-212e-42e7-9b52-6c99fc4fb0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519444ca-6a71-4405-8580-a683720e4dec",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08df279f-b0de-46c8-9a75-1577bf456eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b663115b-fd69-45d1-8abb-ccb0c29b7209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19437b32-8dab-4b5c-88e9-6cb20492a5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba86db2-4228-43b1-a444-ce078b1394c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9844db78-0fdb-4404-a71a-961744de27d2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237a6496-33be-4df0-b462-eda42da5958b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc477bf1-be71-4007-904e-abf0920073c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2f8b51-01e9-42c6-93f4-ae19f5daba50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0dbca79-461c-418d-b560-a3fe65b32299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bab7b22-9ecd-43f9-bdf3-071fa1794d05",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaa0ba2-5208-4360-9bb5-7e256b9a510b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4819aa-298f-4186-853f-1b614e98e8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d011101-dd1a-4b85-8725-9c0f87ff0466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d142b7c-8216-4da2-b150-e79515dd2cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c053032-f509-46d1-b696-0d95af5d2ccc",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e425f294-a31f-4736-b28b-dc171e1ae950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0fd1f8-c627-4a99-a7f5-3c4c778d176a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6882b8a5-a31e-4366-87d6-e5f798ca30e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5de6ce7f-2bf2-4479-9709-17272df994a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b04fa51-7b84-4415-8437-dac70cb80f3c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0a9529-6324-4b0f-9024-87a4f3ac47ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7046dfbd-8ef7-45cb-8145-035d35cb3e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5beee4bd-57b3-461f-b8f8-750333df04cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f6f546-684c-4ddb-92f7-04e92c56ff89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2154ff89-86be-4d66-b385-71921951cb11",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b4708f-49c6-4d28-b852-e65db88548e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6dcf4b-b79f-489d-8caf-a315713be76a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51facae-ba64-45a8-a414-cb483e863c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2039f5-4425-4839-94fd-2cd56eabfe25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325e4ba6-5e8b-4ae3-ab5a-865901b3cd1f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db73ded9-d00b-47a7-9614-1bf96ac4388f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19be8028-7d57-4a67-8224-9fc425f520c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9960c9f-c4dd-41c2-a494-2499ca30fc75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ebe1110-19da-4594-a93d-d170cf6c0622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9740305-ca21-4326-bf0c-abad0202113a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f124d373-9c29-4d4a-a2a0-1e252e462364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29260db6-d9d6-46fe-a085-8522f0e4d3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2af32e-61f1-44d6-84f2-1668b15a20fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "16c12c88-7934-4f46-bfd3-68c37622b9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf992ed-b0a1-4325-8376-b8c0235f8f8a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b358b5f-6f64-46b0-894c-97b8cfde69ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5af3388-6ff9-4fb1-b1a6-6a8c559d0f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0283522-1f41-49e3-a2b1-c1277d753d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ddb8b93-799b-4827-99fa-46c06c654274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645c0c21-e649-43ec-8719-223ab0360de9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d225859a-df74-4c2b-8a7e-6f47481bcd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d715ea-4abf-4d10-b4e8-ab3a3dad96d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ba38a4-ce44-4113-85ca-7c5983276a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "176d302d-265a-40d1-a282-672b1f4c4c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfae8822-c3da-489a-bf19-d75eae80d58d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5fc9a9-b367-4ea8-9dad-b53b90c19689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027f5008-9a30-4ad1-a675-b03a769bc4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c48fea-a260-4be9-a46e-edaacdf1cbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a57c986-7a4a-4d69-a791-1ea47736f3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3aa528-dcbd-43b5-a86f-95df6319a2c9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a7ca21-51e1-4452-8d0a-5fd6451d459e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10472343-636b-4730-bc7a-eac43d34ac7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c2583b-ddb1-4964-9217-e7e78457d46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f51a8d00-205d-4231-a3a8-7f65d47b1510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acd84d1-e7a8-4d46-a8b4-dd0ada93589e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b474ce-fefc-4736-9612-cc1f291dbc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd84e8db-1f48-4011-a562-f96d55202d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9eecd3-445b-4821-90e1-0bf653d42ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf4fcc0-1e7a-45be-a5a7-d69a6c4c0746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5690d0-d4a2-4c3b-bc97-f96237232c47",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c083e7c7-e4af-4f36-b864-12bc221d8364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78816bbf-131f-4b42-bacf-651fd7ebb54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e97746-1b1a-407d-9450-6f6f1924f66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "017e2b12-7415-4255-848a-4e98ad1014ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869d43ef-6672-423d-8300-93531a14340c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371ddbc5-bf30-44cd-9374-4c9bda8286bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66b3809-3e96-4a87-b5be-6ada598584ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c7d0c1-48f2-4dc0-9d50-d3876ed10aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8f8469-24e2-463f-908f-d9642f3fe090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada6e9b3-c8f4-4701-9486-03a95c92ad2f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf596e5-7554-424d-9004-a0a02faf96ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1426ff02-5981-43b2-be72-71796f652569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ccdfdd-e3fa-4a3b-a492-a7e4791ef102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea499e7b-a90c-488f-8d16-9d2908cfd51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c48cb5d-515f-439d-8b84-63b91cceacd0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd83257-930a-4578-af7c-20d61e0c9acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed47e645-2bf4-4254-a50e-b57c72925eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac839f12-590c-4db1-8594-39687c19bb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "91651e88-bd73-4f0e-99bc-20a5ab967c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9769cf4a-bc66-4600-b219-a07e4a212a92",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1134834-44a8-4274-aee8-f5a79c56f33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec650daf-83eb-493e-bf73-4d5c9325e033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7371704-ac6a-4d9f-a618-9c7eb39b5bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b292e541-b3c4-4ff5-8d00-5c165fe5b59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04335b7-b1fd-46e5-83b6-a2046f332b78",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06eed89b-0ccc-4fce-bfe7-ec62ac631d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d3ce9c-f1e5-4c8b-9f1d-e9f66c53279b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1432c9d-177d-46fa-9ba3-e0ce0f7af6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "250d6fbc-0172-4137-a28e-e1053b7c00b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49306872-86d7-46ce-8d96-a67e9b09f978",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe60bad-f44a-4fd5-81a8-3b8ef5c06bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "958803fb-1af3-422f-8bad-11bbdfd56a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d67ab5e-9e05-4a3e-9ca2-e41b474917fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2efc9da6-3089-4707-a7b8-97aa870097a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39685fe-43b5-4350-8709-5e75ad1cafbf",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb3c755-faae-4f0b-8986-c7ad88cfdfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ba0f0b-2885-4c14-abb3-2bc52649a44a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154656a2-7a58-495e-b0ff-6141e617a6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d0b3b1-7753-43e2-a172-aba8b0321103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4888dc4-b771-4d3b-913f-7d396a062e2c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011bfb4e-7f61-45a0-93c7-13855a9688b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6165f0f3-6739-4950-8bb1-81d2e05ce3a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dafd56d-3823-4e56-987d-a3d8278b88c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a391a0f9-8e84-43de-a1a0-15ce50cdb0ce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d337bb31-c105-4a4d-b587-890f87819e52",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b32dcb7-905e-4fb1-a0d4-4c4281228ceb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07676baf-5abc-46a9-b51e-b8522c353843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d8b82b3-b28b-427a-bc2c-421564f473f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67e615b-c7a7-4937-b80d-a1ea0364f1aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e068710-ef16-4656-98c6-df3160e51955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0307a80a-108a-4e3e-b522-be575ebe4579",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1c636c-cb33-4cb2-bfc1-ab9231e7b7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ba442dc-6402-4852-8cc2-0d99cfc011d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f8da15-55a7-4220-8ba1-3f1336585280",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e266aaa-56ab-401f-a0fe-3e6c4adff971"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96bd7c2c-950f-43e9-b9f6-89d1776f1c7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "461c6b85-63ab-477e-91b6-aa24195cc2a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c07d5923-5f33-4355-b248-eacaf76d7abb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f2c51f7-0d19-4100-9031-a508e8fd9c4b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d16d1ca-dfd3-4ee5-b22a-4a045db8e59d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "efa86d23-4b23-40cf-b213-34c95c06e681"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "73f777bd-918b-4194-8e80-7ed28c3184b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0bbd40f-08db-41ce-9b96-ec04bd0747e1"
                }
              }
            ]
          },
          {
            "id": "018be63c-54e1-48db-b695-3c1d69522ed2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ec42b94a-ca62-44fe-94bd-cce418092f6f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e55a034b-1ec0-4fc5-a34e-21dc3ebc45f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84965d45-bc0b-4407-8b9d-a174a75736f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2dd0a54c-222d-4a02-bf89-ca2b59630c91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6417b4a1-a230-4097-b7c3-5628eda5a07e"
                    }
                  }
                ]
              },
              {
                "id": "5ca2dfa3-bd00-49b8-917b-caaa2fa37b40",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e298785-7ce3-4b51-96a8-a5457c372975",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "721998d3-7828-4e64-a62c-a9a286d13f1c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea854d7e-aae3-4464-850c-4623cc3d6681",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4b1f1d6c-7417-43a3-aeec-a0bb1eb44109"
                    }
                  }
                ]
              },
              {
                "id": "8f1a8321-86f2-4b49-a8c8-9b3854af41c6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3688e178-f6ec-49ef-b030-ace39b3cb28a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3bbefea-a255-42fc-99ad-eb716c2ea4f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a411244-3938-4735-9035-039fb24fc39f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd239224-6ad3-4203-afdd-e00b6f5f506b"
                    }
                  }
                ]
              },
              {
                "id": "35096f2e-bbb6-40b5-a17d-06c7f27c6f38",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2938a25a-78ba-4343-a85f-b7eea81b7b0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b8405b4-98bb-4f8d-929e-7ce1407ede35"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "801d96e3-6c92-46be-ac04-8cea6977817b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1699736b-e800-484d-883e-d7a5fdf5e917"
                    }
                  }
                ]
              },
              {
                "id": "43c31a9f-bf16-4dca-b9bb-54a872b796f2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "041b04d6-501d-4c3b-af00-311f1ac1ff8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb0f6a7a-39cb-4a1c-acb7-b43f434e0484"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97cceb12-9099-4cc8-9336-ea4658204bb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2a3c7f1e-3ddd-4480-8834-3b7c22b2ded3"
                    }
                  }
                ]
              },
              {
                "id": "57d4912e-3a08-41a1-b0dc-8b5db4cb34f1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1531ca7c-5d80-43a8-8b8f-8af6b9f5830d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49905d74-fb96-44a1-b731-58427313cd68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89553f32-589c-498d-a5c6-71f5052e299a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d9f2d423-cd73-4cfb-8806-31f6bd919954"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f9a1134-b01d-4e2c-9a98-ba245073f0f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68ae7efd-41f1-44cb-b85f-058e0fa637b2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "77d27bb3-d432-4dd7-ba32-68014e2446b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68a3c02d-89c3-42ea-854f-a800dc1dea3d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32236068-f240-4a77-806d-ab58d85c4477",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "dcb5ec50-e4f1-4444-80c6-d88cf1fb7741"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8aea324-d6ea-490b-a9e6-f5b0a2823f03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ddae939e-ea4f-4c10-a9b0-febfa1a9198d"
            }
          }
        ]
      },
      {
        "id": "bc66e6da-9aa7-473d-9a1b-c86adc82186e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "72240bb4-3ce0-4596-8387-a9fc3c377c7e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "17e0f978-c1c2-445a-ae7f-5a8f45010a17",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bec5ed99-f85e-4753-b7ec-e9f33f600bd9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3125acf-1d01-4d38-a8b9-7fde40d8d25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6476d883-8fd4-4ee0-a873-8f88121e35fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d97c01c-6f43-44f5-aa09-9c9720224d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "04658e84-705e-402f-81dd-2410295c4975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a712cf7-b8ef-40a9-8882-e6a2c1285a63",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27008e23-307a-4f4b-9937-2e82e10f4c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe2926c-64f9-45d4-9f85-7be7c3274dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b981cfd-3439-43f9-bb09-655e273e83a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eabecbdc-596c-43b3-81f1-9afab4f1d66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d378f7c-f511-4406-988f-0c47a327cda4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bd2c48-89ae-4fe3-91ac-749df1004427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cddcdb-9f31-465b-a5b5-c556f832bed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22f22f1-4b40-4752-ab79-ef36f6053cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25f4ff3b-ba16-4446-be6c-d0e9bac0dcfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fdf596-7c81-48d7-becf-2d494c49b19b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d623ac48-d4d4-45f1-8a84-490cd06a130d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8779ada8-d349-47ba-a8a4-a80f77132c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9837267-3874-462b-8448-093331a81e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d18b69ba-d23c-4016-8a48-9e73dd8efd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3cbd6d-8221-448c-bcd3-20e66b6b5c47",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9231838f-5c94-4873-85ec-2bafbdeca188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d9d2ee-82c0-4a05-90a3-baf683f2d83f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6e330a-197e-4f8a-a31e-89842241fead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9caef68-8875-45d0-b8b5-dbb53ed2a9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65227a18-8ec6-4477-a04d-99cd73e68c00",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb930412-5040-4e4c-ad3f-ae9663f09849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abec129f-7fb7-42fa-b301-b7d4911e03f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b06a014-fb41-4e2b-99d0-ceade302ac6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19f24d93-1580-4eb1-bc2b-f03ee9c2f8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6540f70-34fc-410b-bcf3-d3f14ada60f5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f245761-6c65-4a1a-87e4-17180b82d364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fba19e-7391-4829-b7bf-fab356912c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7fcabc-4f15-4020-b6bd-485275d1fdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a98986df-2766-4c27-9e92-f35a7f3ab227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff575d23-412b-48d9-b332-a89bd8cad1b7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9171ae69-90d8-45d7-affc-fa0e775b1b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355a950b-d1bf-4fa3-9548-2d4ae55c8578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582b4007-2484-4e40-85b3-f27fa600b9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7317b15c-c06a-4cef-9c28-4c081e16e482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc6a497-a287-479e-ada5-1f303b6a00c6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71e21da-f8c2-48bf-9043-826872941281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46095f0-8af4-44e9-97c1-d036ded5c16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996024c3-6f02-4b0f-861c-d6f36cc499f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e085866c-3f2d-4968-8119-6596911a71c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc20683-183c-4c36-ac24-b09428db188f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b13846-09c3-42f2-9b8c-c7671d4e6f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5426e921-8bdc-48a2-9e8c-8e4a335d682c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22ed75b-4219-4cc4-bcb1-5785b7788e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef1d2f2-1bb0-4af9-9df3-9a865539ed81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadc859b-4d2b-491d-8ae9-c1232b496f51",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1deed2-a2ec-4249-9a19-ac68a83bdf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41d3794-42e6-4703-ae5d-e5c5ebb5e731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9124ee57-0531-4436-8d99-bcaaa986ac05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b895837e-b024-43cc-9636-3680e99015af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161a69c0-a9ef-4a08-a5cd-bf22cde5cff4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a70e65-7dfe-44bd-a835-76a321f72890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4849c8f5-c74f-4115-8a17-715717b26d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a653fb04-eb4c-4f31-a3da-7c929c28f939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6cab2f90-9373-416c-933f-ce26e7cb94b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1998967d-bbaa-4fb9-b3d5-4ea9afc7299a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8298787-225f-4293-b6bf-16efad7f4473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f03bae12-e15a-4782-8cd6-ef93dc1c8f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a20994-7fbc-4777-9cca-66ffa6eb688c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a58a3bea-a9c3-4229-a299-3d650a875453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8bd889-da62-46cf-b387-8373b95e8b4a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2719f0-173f-4777-ad55-070438058b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6a2c06-e82a-4415-9f23-0ee4b08efc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b782895d-5f62-46e4-a22a-df7307610a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "651ebaa7-7238-4e6f-a363-e73a4cf7dc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c1f3c0-39df-4460-8c7a-35a72c508c65",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad28bba4-0841-4594-9bef-ee0c03241e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46239065-f5f6-40ac-b426-a3e1d4f9882f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eadeba7-c2c7-44b1-9d05-041b49fee284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaac8a61-c3a4-4143-a874-0aac2648ac77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3aafb73-1b3f-4418-9403-7960e80b9977",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1035e66b-3435-434b-ba47-530911874011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d4f8cbd-3067-45ab-81e9-20499d3698b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef920e5b-f31c-4da3-aa38-43a644b7d6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe76770-bf68-4409-9399-045529867ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d849e2b3-257d-48c8-bbe8-be3f7d125fe2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111337be-df11-49b7-9f8c-0343d6900044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727ba77d-e563-4743-9387-d33cb93bd93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5bef8a-4a28-4301-a62a-b8a25bcef982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9da80bba-53fd-4110-b984-1500c8570088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1547741-0ec8-4c96-b412-7d1684401915",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445fbd8e-413c-4a29-b466-286f2fd232c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32cd3a47-aca5-46ca-be25-50ea4a00de82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18abd185-02d2-4dcd-ae40-eeb8c3d7a3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e58406-c6a5-4bde-b7ac-04d82d458ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bedd3fc-d574-46c9-9d68-90e1fcf92dc4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd917eb2-4149-41f6-b856-fa6df04e9689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20e620b-5762-4e93-b35d-ab9c147c6320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcbc2ff-38d2-4b00-b1de-b07bc94b54ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9db1a3-7dac-4f5a-8a63-1c4b55aa172a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5ffebb-8105-4e80-98f2-e180fd7e7bba",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b403cc86-6c8f-4130-84f9-54a2aeff3e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f006ce3-7551-4616-9fb2-c20454be321b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0d0f1d-38e0-4192-bcff-92cdc165ac38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e62b294a-715a-4d77-b69b-8f5e1d3dd5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b6a2a5-05e4-4513-ae06-109134d131c4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319728ed-26a0-42aa-9c35-3f02b5a125ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09fce716-d4bd-42e2-b509-5ccf2c98870e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a8382f-3e34-45a0-a7b7-8005f872452d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e697a2f-1d1f-4224-bdac-01b40deb4513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1cf5b8-b7c8-4ddf-9087-72ce0accb5d3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f4e6e1-9034-41e3-bc0b-37e7ffdf0652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ba46bf-d918-4223-ac62-edc84cf9123c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6521207d-1b03-4fae-b4f5-2e38ebfb8ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9417d5c2-b065-461b-b1a8-79bd385244c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac5948b-e24b-42d1-8c75-719b5385d251",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14393f2-2a44-4e6c-bb6f-2c2e8e1df808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccaff8f-ea7c-46e1-9d6e-8a31f1781cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16522c3-2bde-4af1-a275-7b4c3e286a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ece6d243-4a04-4c53-bed5-59b910c3f655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6daacc7e-3eaf-4bcd-a2f9-4330be7ded74",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a535954b-99aa-499e-8506-52d69d83139b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90ac063-2f0f-448f-b941-17f658ab29aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf2a3c0-7419-4cad-b8f0-5a001a4487d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3b023f-f255-44a6-ae01-82bc3c83d444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fedea8-0b9a-4916-b689-363d4edbebf6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88acc21a-2f8c-420e-8c43-a8a67d6fe307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db49f802-7516-4f17-a088-a09b7970e552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a91c23e-7371-4a95-a1f5-3a79a19eae44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d935260-db9b-4e7d-9648-5cff74003309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a79f04c-6419-4a42-91e9-f84696b4e80d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7526edfc-3f85-41ca-9886-7415cfc64fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c229e3-da94-4556-b980-1c34a901f40f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21744ae-6406-4046-881a-3dad64b1eb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b7e085-2bc0-4b30-88f2-202180a2c67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0161bd-95eb-4bdc-bc9b-eef5967af233",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf49406c-a3df-4860-bc50-5e69d4d63e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cdba2a7-b75a-441b-a0eb-793cb0b5aabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9470aba7-b458-4143-81a9-38d72bd78d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d23e3193-b774-4884-bdd1-eefc5788f06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c650f2-0d14-4865-b2d9-ef90b4b86986",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a6ed46-356b-4cbf-8cf3-33d6deebfda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97da9135-ab1f-4a50-bd41-f24adcb3a9c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17cb44fb-8a62-489c-b5d5-a3ed36854ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab73390-31ac-4ded-8448-883fe382d519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41623f26-06ea-4254-8f7f-127f42f9d32f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b03e1e-f0b9-48e2-82a2-dcd0564bab48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a87c37-ed56-47d5-8796-fd7fae7ea82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf996af0-9c88-442d-9c37-c17fef76b96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca334318-c0e6-4c99-b8d9-c0b57618abff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d458d1-42d9-4b19-81ef-02c5ed3e4881",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd459541-037a-49f2-95dc-5a2475f84395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1fcfd75-8d38-43b3-8df1-8080047bc8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763704d2-4074-4ffe-94ad-2531b672a3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e28b5530-d18f-46f3-8914-71e3383ae58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64cd355-3345-425d-bed2-4e2aa7f516af",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af4172c-7ebb-4ab6-8e15-ad5fa0560f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0ac57e-2d34-450a-8138-f47f31b98d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8ed767-db1d-4b60-8aae-8d2c95012cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab01a1e9-12bb-443d-a039-c882bef9d44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728f03c9-d33d-4de3-bc96-739f6a90bdc2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0699ef2d-fa47-495a-8d49-bf0985cd2919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091b1a12-5f27-4826-9d5d-2bbac72e99d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141989c4-78ab-4be1-bf41-14bc027653b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a08abc-738b-4ff2-b4e4-d0b02b007af0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6903dc3e-a2b7-4f31-ab69-025c9d68c863",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35a8b0c1-e75a-4189-af90-d5d58aba54d1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68dca6a6-85a7-4315-8ca2-6a71d58f3192",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4df867f7-2650-43e3-833f-e63555847da1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecf737b-25de-4b16-b4c5-8e927552d442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c120dd50-ea61-4da9-808e-07e00d688b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ceb470-0d8c-4351-b323-f75f871cacda",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2260b1-3ac3-4029-a1d1-78e72ce896ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff3a237-7705-438b-8dd0-09b32ab4fae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32c8ac8-5c87-4018-a3f7-ef45f136a735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fc33df7-1c41-43fa-ab1e-eb4144b247a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df20c0b3-e9aa-47f9-a65d-b8df4f4c3e52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb2e58a2-236b-49e8-9cda-ce14b6bef8ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78e21cd3-a4ba-4dd1-a62a-b9b8d28b487a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "475a388a-b40e-47ba-aa02-4f43f16828ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d6a22b2-42ea-4028-8296-83a0cef1cf42",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "399d6b53-8d9c-41ea-a754-269bab53d372"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6837f2f-3f85-481b-85f6-60bf18b79f8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ec85b94-5fc4-466b-9b06-53abe045dd83"
            }
          }
        ]
      },
      {
        "id": "4972e6c5-f9bb-4007-b1cc-cba6851b63d0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "283383bc-84a1-436a-a32d-ecfae3967dd8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73c7c46c-a07f-4222-9b4f-a701ef5ca19d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c0deb6ae-83d4-47b4-a891-7215491ef950",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ff5acc-ceb6-4a2f-9cfd-bb7165551af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96a02e9-44be-42e5-adfb-87f668c66684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20d2d78-b6c4-462a-862c-99de727932d3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699c7028-4f68-41da-8b07-cfcfd27d095a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f008ba88-f479-438d-8084-6f417156f91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f236d1bf-a1bb-42b0-b89e-e22fcba47730",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dce6427-1099-49ad-bf96-fd7c5f3a10fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ae2dcd-b875-4610-b409-b7af9176e751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963bd264-c354-4a51-8709-f047d46a5c52",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca585d05-0eb1-4bda-a129-d57eaf2fb476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c1a503-c67a-4731-8893-199636e19d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af355bd2-d01a-41a1-bf92-042783af8671",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dacbaca-956a-43b4-ae8b-d8f88dfd2a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f0f3da-4e8d-4e9c-97ca-db8265edebd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a1da45-2821-4be3-8ecb-a7cf1114a081",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68ed918-6696-44aa-ac67-c911221173e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d12e0cf-1e51-445f-9e08-8766ddda6cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a110eee1-2af6-4ea3-8d60-0e9be4fe9bbc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f1aeda-fd31-48a2-af9c-7aee488554b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f4af2e-5547-45d6-9852-6e146c9a0cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072ca5ad-3aca-470f-a4b5-f59b8705011c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c21eaf8f-f869-4b80-b13e-0a22ff79fc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29f2b18-4b7a-4c83-995e-98fa2af63309",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb8830c-f999-4677-9ca6-5ff5c2a432a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fa96caf-c25e-4811-b1a1-450f16df8bc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e46cfd7-a780-45ce-9240-513f767b43d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaef7247-e448-44c8-a4ff-4e5564744595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6d654d-a197-492e-aac9-e444f6659f46",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5729b0-8b48-4a50-a91c-d0c814c016ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df512c71-e427-4263-aba5-be33d19118ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468fe3c7-122f-4466-ad74-b77cca2b0d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be3785ff-7945-428c-811f-190dda450182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedef62c-eacb-4ee1-9e9d-b595b2635d98",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80204d43-6a1a-4d10-986f-19b90a98f154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61f5ab19-ffcc-408f-b7f8-6083aa2f23a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd70a2cf-6299-4131-a774-eddd550dee2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a41833-a37c-4aee-8a1f-c23ff697092b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2723132-2fa3-41a3-8837-1765ab024d64",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b81473a-b47c-417d-814e-18783d31f9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73abfa53-9f0a-4a70-93dc-0cc2cfa53535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd25295e-ef37-43e8-89b5-fe98f6b01624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c6b13db-3511-43dd-aa98-915416f6248e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aebd73f-b61e-4e8a-b8d1-242ea554b671",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e7a0aa-7074-4235-b3d6-e2d12a6f596c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41fca98e-b721-491f-9060-5a9095442086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d31692-37b2-4ad2-8fdf-9bdca6dc402d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2197ed-539a-4c34-8909-da506809d0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5244b438-1acf-4e28-8ad1-b43043a2b558",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0475ddb8-4d36-4b2f-9760-69b43ee2d2a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5668ec2-8c51-4100-8ed7-2f074ad32e43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f50e51-4739-4b12-977a-28ddf007fe43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9641e1-6f4f-4eda-8b1a-a826e2dc4539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523d76d8-40c1-43fb-bd93-4dce0f218a92",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafd1c80-5a02-4861-af21-66f59313ebe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4775b6e3-6c14-4090-832a-3a2acdc0e9ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7538793b-87d2-46c6-8c2b-f0751b1819cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b616e6e-2063-403f-a115-20855681cee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac80f2d-f1e9-4152-8440-e9209c060f03",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10441945-ff66-44af-9964-90719e440e1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "571a6a65-8878-4632-8855-910235aa5ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b38661-1c3d-4633-a7f0-f35e4efad96d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac616a28-5d85-4450-a286-9ae79f008c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c011afe1-3012-41d7-a4ea-fc22d7844501",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfd2960-8bb6-4edc-a68a-482c29fdcb80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1c8833f-1c3d-48be-ba7f-c8547d55583b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f180d95-751b-4ca1-a3ca-9765b854beac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b21ba83-5a85-4437-966c-c87f1da447d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70089dad-baa9-4b50-b35b-22127d76cdbb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a387de9-8579-454a-b525-8cebc67663c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb30d5cf-9a62-456d-946d-31b43cc691c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f6a97c-12dd-4185-911c-3d40512b4319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19ca1e3-8ab8-49a5-8b85-4e36aaec311a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88386c86-82cd-44e1-bb81-cd0570f28802",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1fd9d0-0907-45cb-ab7f-2c8957a0831e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53696f24-4078-4310-97f9-fdd8b3113977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d44054-7465-48e1-b178-1f2ac5cccb04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eacfa8bf-95ed-4f69-b1a2-2ae5bc8cd4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ace534-dc78-4fa5-8e6d-737e3cc9dd17",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee77cd89-ade7-4534-9787-791db77c855b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29cc9418-e484-4979-8885-24ec0139aeb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f10b4a3-d38e-4a3e-8cb6-b1e64919c8ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1e7ed2-6ba5-4798-bc33-599cffbc8b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff86fde-100f-4d4e-8d53-b4400985979e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d825f0-55c5-4578-8e29-801a5cd9ce71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364b46ba-e027-4168-9d6a-99624e661f93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d7d066-ecc4-42b6-8232-69d6e82461c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16738b38-0d3c-4f8d-8af7-ef46ca2ada2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ee8b19-50ef-4ac7-9bbc-9857d1649f38",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c9e0b5-1625-4515-b382-e43ebc8f17bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b25c5d6b-31c3-479e-afff-dbc0e8d9373f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b6e756-4922-491e-bb02-2aa847946c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b08b47-cbd4-4d60-ae84-fbf9f00deae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3faa0ea9-9328-429e-b6fa-821c9d79507a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beafbe1c-a83e-4932-ab01-03e821655c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb3c4fc-8e19-44ca-959d-562d967d7109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a374baa9-8629-447a-9bbb-00dcb8a25483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4c8b21-8892-4531-8c6c-c721fe60029d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ac113f-e9ac-4b84-be7f-19e016337eb9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35bbba4-cdea-47bc-b073-184266b135d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc74ba16-a8f1-484b-b51b-8c5f29d19c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "103df4ef-86e9-4a7e-ab5b-8297e610eadc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea02548-1ea0-4714-a302-407a1d30f482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a1d037-6025-4b37-9e46-2a8a3d8d4ed3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374b66bc-b034-4dfa-8b7b-0ef3c90a5f23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a760796-d35b-49b2-809e-bad8f8f84ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53cecdd-8973-442c-b641-20152faed991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418a3f1c-faf8-4c6c-9319-1099f758fcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcce874f-d02f-4a0d-97cc-32caea335b8e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e324d4c-85ea-43c2-ab1d-a61bf1997d5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "656ce6b1-402e-4aea-b415-26b37cae86b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48a9b79-0a3d-4f2a-8034-ed699251a123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e46903-133f-4efb-ae6f-d679909937b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2604d21-5161-4d6e-ac12-836bb1239ca7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3688d3a4-5352-4c71-93fe-9b786571cca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2441149-5c3c-480d-9985-399eb2be1bff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a64f2d-ede7-4ab1-8241-75de4e6044e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29a529f-4ee3-49d1-8f98-88240ba089c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff350be1-bdac-4631-8501-c69006aa8066",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb4a50a-aea2-4946-bdb8-095b7861345e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b96d0ab-1fad-4b27-884d-99761b7dfd97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c3c29a-b0e6-4360-aa1f-e57028d1787f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff421c1-e4e1-47ae-ae9a-c942f8ecf2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76076b9-1814-4443-86da-7e130f4d4d5e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfb1024-7a55-4d90-a3c5-8beb32173483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd0b697-2050-46fd-99b2-2b249ed34d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d20c08-496b-45a5-bd00-06de352fe9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c2cb57f-74e3-4a79-b487-91b500f3c12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62626bcc-0b0f-4812-9391-487f77fd8d13",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afef35f-7f3d-4972-af0b-2d552ec3d9c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8eaea74-2d4c-4fdb-95c2-7897f28596b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df79b8f-ba61-4e7b-afee-217fc8bd3eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c73535-1711-443f-a67b-7ef79453603f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cb9861-d0f8-4507-8a10-5dd64f3c56ca",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf255c50-7707-4322-9f1c-6e279ce7d827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c140230f-6056-4dee-9487-8630941a03f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b4c578-8998-4bb6-9693-c86faa245b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c5b594-507c-48c8-8284-fb11ec64c2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970cc4ab-1d6d-4c1c-a8b4-147b23f10cc5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07686973-837f-41d5-b406-45bcba0f1565",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70bdc396-ac22-4b30-905f-2a1b7c42e04f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa74cf3b-c34d-4a49-a0c6-8eecf029d485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec379c53-9449-4d75-9d28-784344db3bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18dfd08-d648-4e44-88c0-ecd20ef40177",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc2cd1b-ba18-4404-aa17-126dc2e0cb15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a00b60e-cbef-4648-889c-4f3c6e7b75ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc689e9c-32d4-4a94-8acb-ff1b9ee51ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b842c6-104a-4baa-aa98-6a94f82d6b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc133e08-e6b9-4ee5-a29a-af2b41f0db93",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085a46d6-b05f-4a70-ad77-a939771f5f51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2d328bb-f690-4ebb-b07b-5a532f903e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179e649a-5a16-4c6f-bdb0-f92c322bff98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4631d1a-bce0-4136-8ec4-b614fa78d204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cb8357-6ab5-46a6-857d-32d071e86a7b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55dd296c-cd0a-4c9f-9134-0466dd22ca91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e40e12c0-6e49-4bcd-81ca-93c297855948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075b50f3-f880-44a5-8ea7-72faa3f943e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b4dfe9-2f01-42c9-a96e-a563b8c14823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7999b0c8-4ede-4691-a252-269c44eb6158",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d12e26-4103-4429-a561-d0ecce3403e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0715de15-8918-478b-8b10-32ee3dfba934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6b1031-b744-4ee2-aaae-5387c4d00adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f34c65a-c6ae-480d-8b24-3458549d42a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc9b5c5-26f2-4bdc-be41-6520718d1acd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f45a07-547f-40e2-b8ff-ee5fde2f9d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39eb8dcf-7110-4457-8897-70e75895ba71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7e84d1-6966-4ade-89a1-9fe6568794f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6fead1-7ea5-46e8-8929-e7baf06055b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2424d400-09be-4c01-965b-7e13363db49c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8362a77-aaf4-47a1-b389-12347af5f695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6066cceb-98d9-4a6d-ad6d-4d7a08d8e19d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a16496-70c4-4a92-8eeb-b5f6f746ce2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200a60de-a74b-42f3-9201-c5a7ffda161d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aface4ed-bd94-4971-a9bf-101bb2c4d3d3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09c1ab2-86bc-4982-9b1c-01190fb91595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18f9792-21cb-451f-9248-192464b623cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e889ff6b-6e01-48b5-b657-cadb069bbf0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56feb26-ffa1-455e-acfd-4fb76fcb7073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1afcce-7eab-4b62-9319-f4ca11cb5551",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93e85f7-a6f6-4fb9-b67b-692126300f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45eee9a3-baf0-4a69-9eee-7b6335e47b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c264f352-36b9-448b-8886-38fe962abbb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d21429-6348-47e1-b3a8-106f285eb0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fdadb6-5c5f-41b8-b60c-0c6e920f20b3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627442aa-ab48-40f2-82c7-69ffa508b3a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3971df-f2c1-47f3-ba4b-fdd982756ddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d80e80-7b2b-4b31-8a7a-bf7e7a5b9c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6eadc9-e8fb-4652-aeef-357903b4d766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9918e53-ca7b-42ea-836d-70fe3b5f0f2e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2515b1e9-ae97-4399-bce2-9ae17f01877f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c505be8c-6ce9-4f67-9031-668995cbebda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4003bcf3-bb55-49aa-9319-e63f4d79185d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad95fe0-8c2e-4bc1-ba3e-5cc13b8f797f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194eae88-24dc-4497-8670-f9323d580b86",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c53ab3-92aa-48e9-9fcd-552e17844553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fee0c76-f449-44ee-9c83-b7b8c9000e1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc0592f-7aec-4e2c-aba6-bdd7d005430f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6bb4fb1-4670-4a67-9e54-deea4335df26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cec2b5-5a87-41f7-9967-84006a89fbd8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e02099c-8153-4ce0-ae2e-d5651e145550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29492455-9d73-4ce6-929d-598fa15f7272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0786cc-7674-4059-bea8-f3607e0b811a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d088f2-c7bf-4736-8869-8b24a402e481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561a4b81-5bab-4e2b-bf86-9c4cbc74e766",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88947322-27b2-4977-b076-0a6396793094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fab76e-c441-4234-9ef6-9354197c375f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31db8555-37e4-4980-9408-f8f13b6f3cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82160a88-be83-48a4-9ae2-8d664fe7cd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750a9138-133d-4f35-ad19-f58c627930fa",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabea862-81e6-4cea-a2fc-8567e43eead2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32ae704-6a3e-4db7-ae7b-47b4ac8c6539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fa0dc3-df83-4c82-92a4-a0ef3c297d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c271de92-3413-43d8-a503-2c6638fc2d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba138150-204d-4b12-9a5c-aa1cb4862e80",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732a4abc-e6e5-42c3-a02d-1cb54cfb5f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc078c44-fcac-4381-b531-f4349901c4ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d458e661-3251-4dc9-a126-184f8b4ebbe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325e054c-5466-44d6-ae33-948595b6a2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eec3084-b1bc-41d0-aac8-34c5640bcb09",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f7092f-0a60-4a80-8bc3-aed96803d550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15bf210-2f68-4a72-99a7-060cd8ddfcf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "837d193b-947d-43e7-b4d8-718bdbeb73ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a7821a-daae-4eaf-9647-4469b78a38e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61bbdab3-514a-4bd3-af86-a93d77d38f91",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143a043a-bfcd-40df-b20f-989c974c1219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049d6da0-6e53-4f6a-bdb6-ac24cfea2f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b87ca58-5120-4254-b11b-19cd73d8756d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1250f51f-5a90-4904-b31a-90e90b91582e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe2c9f7-a45d-43e8-981a-10556f9e6d69",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb7411c-2cce-42dd-9dd2-b598504fc84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7fd8f9-ecb4-4328-a6b8-e0e6fe25e2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c41032e-1a29-4067-88c9-d14b95d9f904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5caa23a3-238c-4645-9c2f-ec4dc5995742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166058a3-09ba-4662-a621-a9fa681140e6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5924c1e-6cf2-4030-a7af-4e78e74522e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68298426-189e-4001-9c0c-3d00769c41c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4846dc6-9742-4494-8b75-900a82acb284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d024ae64-d1cd-459b-87d5-f48cecfd8cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f15affe-a6c8-4f8b-ac11-e53e22fa1fa3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c449f614-47a1-48c2-8657-e8e4e184b4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83dd2d84-b089-4e5a-a749-c40e4304b45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2ef445-4657-4957-8988-3e5caca27035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ec8572-dc38-4308-87a3-e60cdd23be36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a63dc47-9892-426c-9fcf-63e806d00d1c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69021d2-62ba-4100-97d4-f2057fe8ec4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a34d90f-5478-4c76-b5ec-4edbe0ab8dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69efaab-eda1-4893-9e54-2bf74c7d86ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ba0ab1-c145-4471-9533-5dd274a386a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437fe44f-81d5-41e6-bd18-3e4f279f6975",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af990ca-9ed2-4242-994e-38bde6c7c190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20230052-ec0d-474b-a880-d393b2fa5417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c60b82d-7030-464b-8c72-c6cadefee155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2efa08b-7a1e-4523-8ed3-305cd6e0c603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0149b4-00e3-4489-bf2e-9b9a226d560d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b77b97-6c09-4b9a-94a0-0714648afc4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892adc3d-3f45-4983-8b1e-d7a625bc7a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b97b96-a460-4d10-8199-85ebe40af7b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0ea21a-2591-419e-b8c7-1b2062ff5fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98caaaa4-c361-4c54-a4bd-e27585a0311b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384d4120-3995-439b-8b88-d98408649873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72dc1cb-7cf6-4d63-afe2-ee365a4888e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0502430-6564-4335-979c-6103d31a3f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5867e3d4-d361-426e-a83c-8550a38bf7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52001df-d062-4864-ac37-e2148962870f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d01c35c-8b61-412c-9d0b-369614f66297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991ce3bd-a25e-42d0-b4e3-f047952502a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b336bde-f967-492a-a68f-d88804a23c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2b13aa-aed9-4bc1-9ac4-268deffc05c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e9a25e-823e-4a55-9b57-fafe1b804e3e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c53e06-2db0-4fbf-bc47-dac18dca1ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809ef062-3f66-4fa1-a651-b0482ff34a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b2b705-4316-4931-b14b-793b8c9f790e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dffe5cf-b8c7-4fb8-8568-3b8bb60de765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54de3839-8c72-45c9-8231-bebb0ae80990",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f670ef-6487-4e14-9cb4-d6612ab84f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56cfbd20-9463-4498-8a0f-c4bc0e8ef19f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f657364-db8e-4a19-a177-f88f2903a482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff041850-bbfe-43a8-b6f2-7bbcc0f8ee88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469f445c-55d2-4001-940f-f56f0effad60",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9870bcf0-86e1-4d32-ac84-ddd98eb85c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d583acc-1654-4c2c-b079-6f522a7413bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bd93c8-f02d-45ef-8b30-2c79924c468a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b388cad3-6593-4694-b59e-fd75990d9d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05751a29-84a7-438b-b6b8-01e3305b3ad6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38219fad-1d2a-411b-9bbc-39475715b450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63dfddbd-8792-4705-a8c3-130e0a25e517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d12214-11c1-4855-aa85-507a6634e923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887645f5-273e-4f8b-8133-462c348a00be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01a66dd-765e-469e-8469-98d66a208d10",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0fbd97-0633-469b-aa2f-403d564b1abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d83034-ce0a-4be0-80ec-799a1039830b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877cd5b7-cf2e-4472-926e-fc9cfa297fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad796fa-a4b1-42c1-82d8-522ae1027455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7430fa-1c1b-429e-b8a2-684df9e9d99a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d65f776-b9c1-4f44-8265-9b455e62e04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b819f4-bf16-4785-a493-31d4c1a7b339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6a112e-c842-42e8-8d86-47af373ca3c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860e39ac-e21b-44c0-831b-cce1032de644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fb26f4-7ffc-4c28-8527-1e23e40f894a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db478a6-b530-4d53-b0b9-ed0bf1700ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be706417-51df-4cc7-94fe-01e73a7d0532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c384300-a71f-45ee-962b-95045cf61ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33dfa16d-7c63-4022-aa73-88513156e97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf57805-7ec2-4e82-8b1d-e0bd10416ce2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8496f021-eba0-4b63-8efd-e7df8a870dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d8ea83c-a48a-4aed-bfb8-494e9a3eb830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbcbadc-b4f9-4c28-b431-f66c868fca09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e8e08c-0d28-408e-80c4-ced90529b69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce2924a-0d48-4746-8364-df2516aa1122",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3308aba-1794-48fd-b315-a4fd33229dee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b8f1d02-afb8-4674-826f-9a63d89e5081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e5f2a9-e90c-40cc-bbb8-b9608542e956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdaae1eb-78b1-482f-9437-b23bce58c7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14f82b6-8396-4fad-90e9-6ffa58fb0139",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa170b1-4941-49fb-8a63-0a8dc91c1d98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f0943bc-febc-484f-9c90-e790c1c8351a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c8604b-1698-4eaa-9591-d0858cd426fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a63e57-69b9-4097-871b-c25d1dd8b6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c1679d-79d6-4967-934c-60f10a6df775",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41872398-8466-4349-baca-9a4560fe92de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49d0e78f-cccc-44fe-ba83-367160bc9ea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd72ab0-70fb-4cd9-ad63-11c676c90725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb422a0-b875-4615-8174-db6f6a7de9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0789282a-01f7-46a4-80c0-673db0b52027",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e370aafe-814a-4fcf-af81-4cc26151d85c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecf185fe-0a89-4ae5-8b8e-e3dd923b9a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f03b42-bf30-4b22-8649-78e3d25d977d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1540b0-bf60-4654-9fba-1b101a2f8e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b999e7c-0930-4d46-9f65-6fabc5a76bae",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15e6b45-b77b-446c-a8f7-c8f30cc25b14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a35ec75-6fbc-47da-84b3-90f07ba8ded1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edfcaaa-e03d-488f-8764-aae0cb679380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70e5c6a-2053-463a-add3-8cd7c18b03cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056a591b-57f2-42b9-8d8d-ea3c994660cb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051d35ce-ec4e-4004-8e6f-01f13448fcf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f95604d-8038-43a1-9ca6-8e910aa07ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1415bde-07cd-4ba0-b7ea-c89550282ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62902676-168e-4250-bceb-2e6b0272dce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50c28ca-2fab-46e9-abc2-ae438354f0dc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8613b2de-a088-42ca-89c1-ef0e0a975a76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2591b1b9-25a7-4dc2-aba4-4126920e833b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91d0c6c-2789-426f-b6cd-782fd20332d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6b1ddd-27fe-4205-b741-c2c3c9e2fbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c90abb-96fc-4d84-8798-fa82d94e39fa",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae606a4-261a-4e01-a1e3-6594bd9e119d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa6d57cf-2828-45a6-b9ff-7316248abfb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34627b18-4d64-43a3-ad84-8bccdeb1b2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014ddbfe-4482-45e2-8a12-1a85b91fd8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fab8ca8-0b90-498d-a38e-60542a35e7d7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602da742-0aaf-4f86-896b-810b85800e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b89221ca-8211-4502-bfc2-6284f7648c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8787a12-1287-4609-ad4a-aa5d4e7091b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35de2d5-6675-4c68-b0d9-56c9439151f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0327c9-3136-44e7-9ddd-a9e42b2c129b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4544fc76-0597-4574-9831-eac21f5ca1df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a58b3cb-27ae-4c03-a5a0-841803cc9727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760e47a7-e86e-4daa-b2db-2530e07b9ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac703e9-ad79-4c4e-983c-ad46b90bffe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd22f94d-7e0d-4ab1-b08b-c4a2bc38dd3a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97831793-a9a2-42b0-ac6c-55941fc36bea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2517e1ff-9062-4d79-9add-e7846f30031e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd91f676-603e-4955-af09-9314ae06da54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf57512-233b-4b7d-81f0-322991a05961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f27364-1b1f-486b-ac2b-c68ef1c9f2d9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4acd88-92ee-4a31-8529-c785a15ec0ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9953cd27-6052-4710-8f95-ad75f6f5b7ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b04cb3-a250-4cff-b25e-0fb197a655f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "243af51b-98be-4102-ba6b-745b718aadb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b957461-8c5e-4597-b5d0-58a05e5409bc",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3907fee-a881-4ed1-8657-5f65f492168f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b0eea37-ebe7-40c7-be12-187cdae1f4d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "928c365e-7380-4a02-9c3e-6002133ecda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084a15e8-4f82-4dc9-b80b-07fed6cc1544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a106e58b-45a5-4e05-8b58-1535f48387cc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4f3b70-259b-4a4b-b2cd-fbf906251f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e23cc819-e3a5-4514-8247-1a238dcfba8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842533f2-2004-4fb0-98e1-ee00498e20a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40f9e3c-4e05-4b66-83d0-270457b6ffee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfda74c-2818-487b-8b06-a0edd3591f6d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9da0a1f-eb03-438f-a55c-14c0bb6e7bd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6539335-c043-46c8-a83a-c036eeab87aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5faf716d-f8ec-47a8-bc7d-5fcc37e424b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149b12aa-2b35-4df9-89ee-070c838650af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77199854-680c-49a9-9461-ce8a28333e07",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d1db55-1402-4a9c-ae6a-137a675e7e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28e0570e-3500-493b-9311-a6fa46b288cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb67d43-b06b-4ac2-9a48-d8f5bf9e581c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5eeba8-0388-4d59-848d-e959d34378b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1132a684-2a1d-44ec-ae1c-9fb6ce9ab925",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e62c7a-7ca2-4b4f-8151-cfeb481b9546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1485e339-efb0-4fdd-86ef-8c0eb8277e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6a1b6b-ad18-4f82-aa80-29960a140016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2fc112-0d6e-4a10-bdcc-fc861945d791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017df698-6c51-44b5-9faf-042ed21894a9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf1e77f-694c-4e86-b1f5-ff0c1b3d5416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38e3fa63-616a-4f91-98ec-d7da81f4c1fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8333b9a1-3174-4f29-8074-59505be6345b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0061ea68-4e0d-4520-aa3c-e0ebd53ca4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb41f43f-81ef-44a6-9ee9-bdcd32319f4f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e309e8-01c3-4e1a-a9e4-6e1a8755e740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f36fd4c8-50c5-45ab-aa52-dbf62b996590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0341fd9f-2ace-4863-8e3a-e2abc22bf16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff5fbb5-538c-42ae-91a3-02819d3f943e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c00697-6dda-4948-a017-52c67c00c12d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec71f5f-98a1-48d3-81c5-0f0d20a04f38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "992fb897-e939-45ec-b464-bdead0e1ac82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d79aa9-d12b-41cd-9a07-d32a9fdb7bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead3338d-bb5b-4e9c-bb0f-072392df71af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c0e5b1-348f-4de3-92dd-b7fd102732a3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760562c5-5c55-4b94-943b-c364e97038e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c5b4372-853f-47b4-a4e9-83f3cf0d9b08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a62426-6a9a-474a-8f19-25e0ce3c240c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782f2128-1ab2-4d54-88ef-f717b4046106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc8ad8e-2571-4a2f-96ea-0790b989fe0a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640a7163-2a8e-4aee-b9a3-420fa72b17bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26c49bd2-d0e7-439f-8306-6d8535186ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8777f7-84a7-4ce1-9e02-c003f783463e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7521bb6a-323a-4ca0-9459-43e2095634e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60362429-8175-4a19-af62-8543eeb39f8a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77d59e6-0737-4edd-a308-be0ba6873d30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0db458b9-6ca7-488a-aaf9-b70d522006c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43431a85-9fd5-47af-8ceb-90c0163bb85c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e1fe12-802c-4f90-b7cd-58aca13b7d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0e3174-9498-4b30-be60-1dc6364d7806",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae131d7-6097-4401-805a-efe9678fb7ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55512dff-7161-4f98-a396-de68250b6586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1e40c4-1ddc-47ab-8cc2-c823e23bda34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c879c3aa-896a-447b-b626-3d1db9be2409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129bdc9c-db1d-43da-801b-f3533ab733b2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a57c639-0391-44e7-b5e6-f5ee5414edf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f5466e8-be65-4af8-b861-a75ee8059542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db84930b-d80b-4008-84cb-bd9832e55012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2051a635-e70f-4972-8fa0-5c7b82c53596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f543cc9f-d698-466f-b08d-693a15f7c565",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ecf181-be6b-42c9-97ea-b881e26b74df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6ff738e-422c-4435-ba69-d932028d001b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00dc8a45-c691-4318-8eeb-9f7a58c9875e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83d8989-67c4-4014-8340-31e25c4a4c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9516f4f-98b6-433c-80f6-7ca0fd779795",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e337c8d3-bd5c-4bad-b87d-3b25d9631246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48793323-7040-4176-8439-0cb87c6c636c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded1d962-7cf6-420f-8a9a-42bae1463ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5af1f0-8270-45cf-8446-ed6266dc2e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea879bd-3706-4620-a715-c4b0c96b2dcf",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae25f64-2e0d-434f-826e-22cfb808bead",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6c6e518-88e7-42dd-a562-c454939a7c7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c618d779-b116-484a-82da-28e128f97d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9aadb0-a407-4611-818a-8dfc34768bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df023ce4-bd1c-49d5-b0a5-927f4e446e12",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3a5253-ac96-4398-ac1b-f8e9fd6f01f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd808307-291b-4c05-b14e-8d02a8110f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16494ca9-f4a1-49e2-850e-47f5a49fe1e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7ded4f-4f91-489d-b83d-cd57acc31c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b124e555-52a5-46bb-9325-60adf4132494",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b79f77e-f59e-4f09-9514-d5aaeb59e781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30c2256b-0969-43f3-9258-f5a61b552dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1912e2a-3358-4aa4-b620-a1c73a98c51b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40c1493-47c7-49e2-98f9-da7cc567a2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e19b8d8-0fa8-4dec-81f2-ac0a0626e7ac",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fea2bc7-68ce-4c0c-9765-c4dfe915ed0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3209b2f-483c-4c78-86ec-b57468c91835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01389397-886d-493f-8a7b-91b3d6da64ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900fb014-922e-419a-8385-162e0d5b0e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa04f6d-445d-4bd6-a3ce-00f1f060254c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d578b5b-b652-492e-8afa-a8d176bbad2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5086cbe7-684a-47c1-8c98-badec4e7455d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de35a2f-9315-4087-89a9-54b298a3c907",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8dc4eb1-d3cf-418a-b9e6-2aa26b644079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e62789e-6e8d-4399-bb33-8ab057a73ccc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3562a4-b88f-4976-9175-ea9cb8d190dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ba93372-0afa-4d6e-a723-a423201e544a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5e53ea-5b32-4f5f-8ffd-6b76a4596c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9b5bd3-6dbf-4391-8b79-9c5594672ff8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "687a67f9-6761-47a1-8143-17105650b20c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0be6d92-2c0f-469f-a208-8820de73c340"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ba65729-f0b9-47be-9911-08ae576d1cbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a19fff7-122b-4c0b-8f05-ce0d8bd27a78"
                    }
                  }
                ]
              },
              {
                "id": "0ef2fa9d-f793-40bc-af38-706b87e6efcf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1fc39cd8-d07f-402c-a97a-514faeaef000",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f9c9ad-d81e-48a8-aad2-1940c9c47ef8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b09efcd4-b983-4e6b-9c57-dc66065b2604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2fbed5-f024-45f7-abce-ac21ee869d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3f7e75b-e577-4e0b-aca6-5c856e82dfeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25dc0405-ecb6-4c95-99a5-a35289b39a55",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d2fe24-394b-44f3-ba90-9d7fd8ab9dfd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "57e544cd-5951-40e2-8b96-b29edea5dad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6017bbdc-00e2-44ab-8a59-788c5f356da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6ab56a9-cbf6-4b1e-ac62-9ababc54c43b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc9050d9-7c5a-40d3-83b7-216da7b5dd09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25033b4c-29ce-443e-8cf7-cb82355030f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a451e2d1-e0dc-4f45-93f2-c983c9fa64c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66027cd0-e3c9-413a-af1c-8f7a51e9e90d"
                    }
                  }
                ]
              },
              {
                "id": "fc57abd7-4785-4e54-b8d2-70714cc19a8b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e2ff249e-2c81-45f1-8a37-7e47d5195d86",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e5f9ff-e85d-4cc1-a6eb-f2c9712739f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f90854ff-0d4d-4fc9-a82b-fc3464729cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf685935-3e93-4221-aa71-93a12e8c5058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9cc3b1-1a38-4954-baea-f3d3bf12a7f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "005d44cf-af3c-4cec-a6e4-84881cd7c2e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2f7fa649-b889-4832-8b27-c3be2e846aaf",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c98b8cb1-daaf-4294-8821-930b91d27f61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9d39bd9b-f292-4c7c-9fab-7daaed7cccfe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35e34206-ed6b-4440-aa2b-0b8171afd863",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb56dad8-b3e1-495a-a976-698dbb89b9db"
                    }
                  }
                ]
              },
              {
                "id": "0585d7c8-2cc4-49c7-84cb-0971fbc16c62",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9e0cb43-a7cf-4ba6-a333-3beab1e89e2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e677c28e-8af9-4bad-996e-2270a722e2fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c34e9c7c-bbad-49b8-8012-a6a18f439c39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e60f363-61ea-4332-81fa-4b42549400bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bacbac0a-ede2-4e82-88b0-a746680447a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c7342cce-71e5-4b3e-a7fa-f73f53dde509"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8983969-63f1-4b89-b8e6-bd819b28df33",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a31a770f-7809-49f9-ac0d-4074512bb525"
            }
          }
        ]
      },
      {
        "id": "b45d810f-257f-4d02-b781-360d095f2d7f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "84ad4ab6-8a7e-4c4e-a52e-1bd10dfd22b8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12678a84-56ed-443f-91ca-52d088d6d5f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "91c23b2d-a997-4df1-9553-2d77e5223872",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804b66de-c7e6-4152-aa0e-6891f251c0b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3ef3719f-82e0-488b-b6b5-db91137f7de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "215190d4-5d0b-486f-99ba-873184cc5a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e2635b7-ed1c-4b7a-9b5e-34e0f7c38724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a449c8f9-4913-48cb-a9b9-4ebe28c934d7",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65579ba3-a9f7-47ef-be52-87a8505529ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fca14f2c-a031-41ab-8131-7f092afddcb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5052f455-caf7-4ad4-877d-dc04ead7c654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14125e33-82b9-484a-8ab1-03ea7e6aa8e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18a272ad-b44f-4e57-b271-d7d1d4e6b44c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97a29194-dff5-4bd3-8f81-76ea8fec8aca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d7787a3-bcc5-4126-a59e-c34adadbc9f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f31ede0-f9c5-4a4d-bca5-d21f0fb18d60"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "840acb82-6df3-4d10-955e-5e9c1d8552e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e9f27255-b965-4e70-be75-25744fcbcc64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdcdfe72-b862-40e2-8411-63b7e0bfed85",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3452911c-bbc0-4778-832b-e60dadf0e83f"
            }
          }
        ]
      },
      {
        "id": "87160288-5cfb-4dc1-a065-ed64df965673",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "502b509c-0198-4aef-9ca6-5784b78bc90c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcb3e54c-3052-4ece-b8c2-34a32966ca5c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7fe6b504-7285-47dd-b145-3beba7efcf9d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a929044c-a415-4226-9be4-1481d8d1258b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b0ae0af-11bf-47dc-be78-7ffba131322e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7551e11-8d7f-47bb-9bd4-dd16757ca799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95464f6a-7125-4ed6-8154-c579dbcd2b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53796d60-6903-47c4-a8aa-5a3232498839",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d26ff6-d298-475e-b801-ad213de3391f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7f5515-f29e-4e7b-adbb-09cd58e91534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb5d207-3553-4472-bc9c-839d13229ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b49a61a5-c0f8-4a23-866c-68d6770279ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a000f975-af03-41d7-af85-0b718f72081f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b05a6e6-1906-4f8b-8b79-b6ed2bb2f915"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1af82b2b-9ad6-4755-a42f-cca5999d4dc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af97d44f-6951-4c20-bae0-7afd4ed7a488"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3179436-bc85-4d4a-9ab2-bf91bf173ba9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "73bbfb40-bb14-45fd-aacd-3dbbed4fa9c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84dec900-7c49-4b84-8758-f9255eb2bf98",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "345ac001-b926-4c27-9876-0f905dfa44db"
            }
          }
        ]
      },
      {
        "id": "8b3856a0-7fc5-41d6-834f-bd425752ba72",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0a0fb903-de6f-4689-8ee6-b2511ffc93c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "316d1064-ec84-41f5-b211-69c597307723",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "981b7035-2a7d-4b92-9059-2a23000b2311",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41b4b5f-a700-4d64-98be-ff982f5f5d0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "379ae385-a2c2-4fa3-985b-ff6618bf8607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49750ded-cea9-436f-aa64-f647cbc41562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ebca78a-057e-4f4e-90f0-0447c1edacd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e8e53d-5f10-44ce-88b4-603ce0bd861b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fdceda-a24d-4441-8363-ba3d9c93b849",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa14b0a-caa4-4bfc-b385-70f0756c21a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674e05f8-63db-4aaf-8a7d-69302b140058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1cba8e2a-4161-4d87-82f6-7ecaaf736de7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9afb6ed1-9d65-420c-a2af-86457954cd73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0d7339c-9b5c-44d7-b86d-1362c2e2e994"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "785ad71a-b21c-476a-ae99-dd0e3386fd27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ec502dc-6020-4d14-b5ab-f62a6a74d515"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2ae5dec-8850-44d9-90a0-1c398d6ea09b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "47074cfe-a619-4f32-957a-bf69cb466054"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcd51785-5686-4ebb-867d-31d28f70ab38",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebc16bb9-931e-451a-b883-4515ee31aaf2"
            }
          }
        ]
      },
      {
        "id": "26dc8c3f-4da2-4fbb-b9ae-f8753af3f05c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6cfcaedf-d553-4a50-94c1-0098f0cd5910",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3630854-d462-4519-8147-264212a54e84",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ea114a5e-9c56-43e8-b0a4-e314df995cdc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f64a0972-1716-48c1-b3e3-a0369bc49260",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "503c983a-e070-413e-ac4e-d4440862913b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 313.596153846154,
      "responseMin": 9,
      "responseMax": 8195,
      "responseSd": 824.905595055845,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685147948775,
      "completed": 1685148044756
    },
    "executions": [
      {
        "id": "45c96af5-ee57-4c33-85cc-36f35f212d87",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "68eb719e-2301-4165-8c0c-67a9aa8a70a5",
          "httpRequestId": "5ccd24f9-afca-4ab4-a832-c96b675fc3bb"
        },
        "item": {
          "id": "45c96af5-ee57-4c33-85cc-36f35f212d87",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4d39d456-0238-49d4-82dd-b6585405b02e",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 0
        }
      },
      {
        "id": "36ca4c25-0a85-4325-84c1-35b37af5c943",
        "cursor": {
          "ref": "870e860b-a966-4485-a059-4420a4f01cbc",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "96279f9d-8208-470f-a572-7f6c533d4e0d"
        },
        "item": {
          "id": "36ca4c25-0a85-4325-84c1-35b37af5c943",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a8f3ca66-4fe3-4eb0-b78a-7efdb8e44f37",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "96dcbc6b-b99e-4ce1-ac6d-441c36f01eb5",
        "cursor": {
          "ref": "06a4afb3-f08d-4532-abc9-9a7380eacbdb",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "aa8c4f87-bff9-492c-ad28-1a27905afa1e"
        },
        "item": {
          "id": "96dcbc6b-b99e-4ce1-ac6d-441c36f01eb5",
          "name": "did_json"
        },
        "response": {
          "id": "25c81c2a-d639-47fd-8fad-ae232e2f3d76",
          "status": "OK",
          "code": 200,
          "responseTime": 525,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8021013a-1b3b-4955-8c5d-57e77cd35303",
        "cursor": {
          "ref": "fd989441-53d2-4ab4-bbc0-8a5038f4cc98",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8ebb533e-cb2e-4df3-84c4-3f21dc53283f"
        },
        "item": {
          "id": "8021013a-1b3b-4955-8c5d-57e77cd35303",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a6eec23-3a15-42b9-9a5a-278f83ff079e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1126,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8021013a-1b3b-4955-8c5d-57e77cd35303",
        "cursor": {
          "ref": "fd989441-53d2-4ab4-bbc0-8a5038f4cc98",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8ebb533e-cb2e-4df3-84c4-3f21dc53283f"
        },
        "item": {
          "id": "8021013a-1b3b-4955-8c5d-57e77cd35303",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a6eec23-3a15-42b9-9a5a-278f83ff079e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1126,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c658e917-2463-4117-a42c-f942832ba2ea",
        "cursor": {
          "ref": "ac5687ed-de78-4c39-9db0-173b771e2d85",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "164ce6e2-3d8d-4c64-bcdc-6da4e480795e"
        },
        "item": {
          "id": "c658e917-2463-4117-a42c-f942832ba2ea",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "43740f95-9f68-4ec1-bc29-3f4df3971767",
          "status": "Not Found",
          "code": 404,
          "responseTime": 103,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a00dd3b-4edb-4d30-a692-15846c81501e",
        "cursor": {
          "ref": "ba59016f-fdbb-4921-9839-eca8bd847272",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2d5dc2fe-6069-4745-bdd7-751704b3cc1b"
        },
        "item": {
          "id": "6a00dd3b-4edb-4d30-a692-15846c81501e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c7687fd5-6712-4711-abc4-f7715fc46928",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa21e80-8322-4a0a-aa9d-010c64291684",
        "cursor": {
          "ref": "a2e9dbc4-0c24-49dc-b633-e92cd706e081",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "272c1b2d-cd8e-48ad-9534-eda272de531f"
        },
        "item": {
          "id": "4fa21e80-8322-4a0a-aa9d-010c64291684",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1985027f-2385-4df0-ac80-27c5232d74cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "7d0808dc-65b4-45a7-a7c3-39dba0a6c46b",
        "cursor": {
          "ref": "b2d3065c-7329-418d-8c8f-91de3dce5a74",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "885380d6-95ec-4ef1-a65c-cae4c8620e1c"
        },
        "item": {
          "id": "7d0808dc-65b4-45a7-a7c3-39dba0a6c46b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c38026c4-5c7c-4c00-b685-bc5355c22a4b",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7d0808dc-65b4-45a7-a7c3-39dba0a6c46b",
        "cursor": {
          "ref": "b2d3065c-7329-418d-8c8f-91de3dce5a74",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "885380d6-95ec-4ef1-a65c-cae4c8620e1c"
        },
        "item": {
          "id": "7d0808dc-65b4-45a7-a7c3-39dba0a6c46b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c38026c4-5c7c-4c00-b685-bc5355c22a4b",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7c180769-2e60-4d77-81f8-c7141957d41f",
        "cursor": {
          "ref": "e0f4ca09-fcad-4b38-8adf-bac679c2ddab",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9c92659c-4403-449d-9861-08338c3ef651"
        },
        "item": {
          "id": "7c180769-2e60-4d77-81f8-c7141957d41f",
          "name": "identifiers"
        },
        "response": {
          "id": "9331bae2-4565-4ff4-865f-aa50faa3420d",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bdab45-426e-4cd5-8fde-0795d454caeb",
        "cursor": {
          "ref": "0a264fa2-ee54-4f8b-b58d-13e26645ddf1",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0d2f554e-2ac9-45cd-a68a-93a18c6160d3"
        },
        "item": {
          "id": "b8bdab45-426e-4cd5-8fde-0795d454caeb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d934289b-4eeb-46ae-843e-5441267acc0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bdab45-426e-4cd5-8fde-0795d454caeb",
        "cursor": {
          "ref": "0a264fa2-ee54-4f8b-b58d-13e26645ddf1",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0d2f554e-2ac9-45cd-a68a-93a18c6160d3"
        },
        "item": {
          "id": "b8bdab45-426e-4cd5-8fde-0795d454caeb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d934289b-4eeb-46ae-843e-5441267acc0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b30d08-42b0-4340-8779-63e7ac30da91",
        "cursor": {
          "ref": "43988bf2-093c-4ac9-b62b-79e685414ee9",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ac5798bf-9e16-4f1c-99d2-11130d0d25c5"
        },
        "item": {
          "id": "38b30d08-42b0-4340-8779-63e7ac30da91",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "40c97be6-ad41-46df-8239-95cbb0deeda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc39e78-efe3-4177-9b20-0284d9e56264",
        "cursor": {
          "ref": "8a9a0973-785e-4e88-848d-8eab86c1f73e",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9d6533d8-7b1f-4a5e-aa5e-843f747e8160"
        },
        "item": {
          "id": "9fc39e78-efe3-4177-9b20-0284d9e56264",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3703e0a2-d001-452d-8e74-7d19111672e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62ed995-f85d-4ede-8740-c5e88d46c733",
        "cursor": {
          "ref": "9dc80f3d-aecc-46c6-9121-73d1baebc0fa",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "019e7a6e-b0e1-44d3-8cc3-cad658e278b5"
        },
        "item": {
          "id": "c62ed995-f85d-4ede-8740-c5e88d46c733",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0923cc28-5dd8-4077-8910-2b7c50a99e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6e5d3e-4f15-46f2-a27b-bcc5ca331b79",
        "cursor": {
          "ref": "b8791c18-dd9e-461e-b870-d6220b7a992c",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f0a4dbed-dc9e-4ad9-a972-8a133a32e774"
        },
        "item": {
          "id": "8c6e5d3e-4f15-46f2-a27b-bcc5ca331b79",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0a745d92-40f9-46a2-88ea-e7240df5d0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1130ef-c642-439c-bcb4-a1566f5aa4a9",
        "cursor": {
          "ref": "1709ff10-8bec-4c05-8d17-e92e30503045",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3d867cf2-ee4d-49b8-be83-b742b7545ba0"
        },
        "item": {
          "id": "1c1130ef-c642-439c-bcb4-a1566f5aa4a9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9fd360b4-9eae-4727-b76c-99d49fd65b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd2fbd1-a854-4c81-9cda-30079ae1b256",
        "cursor": {
          "ref": "563b11fe-b054-40b5-9c02-0b2222330cad",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1c6ea7e5-cb2b-4618-b602-1e5c6a9c41ba"
        },
        "item": {
          "id": "2dd2fbd1-a854-4c81-9cda-30079ae1b256",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6c148fe7-1cdb-43f8-836a-527bdd8e94ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9e00e9-123f-46c2-ac11-864b1c548821",
        "cursor": {
          "ref": "117b68fc-0029-46de-88e5-5fe962a205aa",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8087be7c-78d6-45e8-b9d3-e67bd6c46000"
        },
        "item": {
          "id": "2f9e00e9-123f-46c2-ac11-864b1c548821",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5d0d2aab-70c7-4e73-81fe-14a64be19746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8752bf3e-c03c-4e97-b876-224cdce6526e",
        "cursor": {
          "ref": "680a8795-4e23-4489-af73-380b581bebc1",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7b3c0665-78c9-44cb-acde-ef6e520e60ed"
        },
        "item": {
          "id": "8752bf3e-c03c-4e97-b876-224cdce6526e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8b17bd61-a10a-4e5a-8009-44282f05f0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c5985a-33a9-408e-9a04-466cfb23c376",
        "cursor": {
          "ref": "a0096885-02bc-4eb3-b46b-d6530606ad7f",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "aa30ca31-dfc5-4599-8e74-351e1e58ce84"
        },
        "item": {
          "id": "78c5985a-33a9-408e-9a04-466cfb23c376",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0fa7bc4f-fcfe-44a2-a93c-ac896b650181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bee15e6-3b41-430f-a6ba-8f7cdf54f60a",
        "cursor": {
          "ref": "7892a9ec-727a-403c-a18b-0d25727ff65e",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4b64924d-98d5-4949-a49b-d35a9c435b05"
        },
        "item": {
          "id": "2bee15e6-3b41-430f-a6ba-8f7cdf54f60a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ccde5147-5f25-4dad-b80f-65a9f77a9e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae432ce6-d433-4950-93c2-903a5b169c98",
        "cursor": {
          "ref": "8744057c-e8ca-49ec-bd0a-c2ad5f562127",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d51e5208-2e26-41d0-ae8d-f1adbf7a3c40"
        },
        "item": {
          "id": "ae432ce6-d433-4950-93c2-903a5b169c98",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6bd5e229-304c-4e00-b044-dce8b7567e91",
          "status": "Created",
          "code": 201,
          "responseTime": 1047,
          "responseSize": 980
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "757122f3-d05a-448d-9959-4d05ba05cfb1",
        "cursor": {
          "ref": "a9cd909a-b6a1-4a4c-a215-d124a82d801d",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a0b6deb9-50a2-4b1b-8345-ea9c5b547f0a"
        },
        "item": {
          "id": "757122f3-d05a-448d-9959-4d05ba05cfb1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6f767de6-c276-4447-bfba-223f92ec24b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1715bd-1255-455f-87a7-66267dd2f0db",
        "cursor": {
          "ref": "be0a5d4a-f053-4e50-9c32-38d6310df925",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "407fa653-450b-484f-b75a-045adad1cd2b"
        },
        "item": {
          "id": "1d1715bd-1255-455f-87a7-66267dd2f0db",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a03ef4cf-7211-4408-9ec8-980265cf8815",
          "status": "Created",
          "code": 201,
          "responseTime": 8195,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f0d829f2-f69e-4648-9542-3a78e472df5d",
        "cursor": {
          "ref": "209ddfd6-8508-47cb-bab4-911b7f31bad6",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "20a36179-927e-4d8e-bd84-a545de03255b"
        },
        "item": {
          "id": "f0d829f2-f69e-4648-9542-3a78e472df5d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9d42785a-b898-4b28-8105-114bd0a07b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601a8acd-8f0a-4ec8-bb6a-f566cff65a25",
        "cursor": {
          "ref": "449cfe6d-bdaf-42dc-b089-22169a904482",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "93619628-f317-4ce6-b892-51c1be27f932"
        },
        "item": {
          "id": "601a8acd-8f0a-4ec8-bb6a-f566cff65a25",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cab5a7e9-8fe7-40aa-b21a-328688294ec9",
          "status": "Created",
          "code": 201,
          "responseTime": 3369,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e7453340-34a6-4023-88d9-416655de0c19",
        "cursor": {
          "ref": "ce01c86e-4d5d-42ce-9c14-17c30001be7b",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ce8b02e8-d792-4e64-b014-575196ad5751"
        },
        "item": {
          "id": "e7453340-34a6-4023-88d9-416655de0c19",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "79818cff-fb01-4bd1-bf1f-2b88bfaa5ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc49b00-0a73-4d4a-9677-78885c760d78",
        "cursor": {
          "ref": "5f9c37c2-7ee4-48d4-80fa-0da4a1535270",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "778d1d80-622c-4f3a-af1f-95de2a6fee3e"
        },
        "item": {
          "id": "5dc49b00-0a73-4d4a-9677-78885c760d78",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "41526bfd-2915-4250-afc6-c4c292fc43a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd3df79-f7b5-4520-bea1-41fdea3d9020",
        "cursor": {
          "ref": "49b65246-5cda-4230-831e-d95df12c0655",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e70e5b16-cfa8-46bc-9141-864f3e54aef8"
        },
        "item": {
          "id": "4bd3df79-f7b5-4520-bea1-41fdea3d9020",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ad61bd01-fe69-4397-8521-06ebcf0b6dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0681c749-f4e1-46f2-baa9-d723ce792299",
        "cursor": {
          "ref": "f82e2be2-2e26-4c71-87e1-11805ba93f8b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "63347e1e-1a57-4492-ba08-982a914aeb3f"
        },
        "item": {
          "id": "0681c749-f4e1-46f2-baa9-d723ce792299",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "59b6113a-8c49-4bba-8258-d696407ea2ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222f8c12-eb5e-4c1d-8320-5f33dccb5814",
        "cursor": {
          "ref": "ac4b4540-a4c4-4d70-bfcb-efb32c7fe798",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b654c137-9d87-4ac4-b328-88e4716e6029"
        },
        "item": {
          "id": "222f8c12-eb5e-4c1d-8320-5f33dccb5814",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6f28e82e-f2ad-4014-839e-fd1168ad5aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68a6538-afdc-4253-bcbc-e8e10cb88f77",
        "cursor": {
          "ref": "abfe460d-134c-49d6-aff3-5d366be66405",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8b9eb4d9-6667-4279-b613-3490ec999b91"
        },
        "item": {
          "id": "f68a6538-afdc-4253-bcbc-e8e10cb88f77",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "334c0838-45b0-4cf6-9a29-cf9dfab3ecea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd4f238-f4f6-405f-aefd-53110e7b33c2",
        "cursor": {
          "ref": "2f158fef-3a47-4fb7-bb09-4e9b3fde224f",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1e9617c6-a74a-49c3-9828-1603c0661be2"
        },
        "item": {
          "id": "2fd4f238-f4f6-405f-aefd-53110e7b33c2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a9ba2762-cf39-49ce-baf9-767a76a59541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8354b265-8019-4bdf-8fbf-8177f6bb1bbc",
        "cursor": {
          "ref": "25280bec-57a3-41ad-a017-92c2564905d7",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "142da1ab-c41a-435b-8ba4-66a992ab5caf"
        },
        "item": {
          "id": "8354b265-8019-4bdf-8fbf-8177f6bb1bbc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "73b140e2-a55b-4a7e-b496-faf796f92b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb740f0d-37f9-4301-a8da-0b5e253fb7c5",
        "cursor": {
          "ref": "f52849d0-9e53-4159-8443-a2fa7422b4db",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1201c36e-0a52-490e-8bf4-8e427e8fa6f8"
        },
        "item": {
          "id": "bb740f0d-37f9-4301-a8da-0b5e253fb7c5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "844e4586-7207-4114-9bca-fa5b5721f549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e846eac-15a9-406a-817d-963671cec499",
        "cursor": {
          "ref": "8d19a4d6-d046-4ce6-852a-862bc67628da",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3bc8407e-0847-4604-b52e-e185616a9317"
        },
        "item": {
          "id": "6e846eac-15a9-406a-817d-963671cec499",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8463e100-9772-49c8-8dbc-1153e1e301ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e7fd43-50a6-480d-a761-9ad4f1837d3a",
        "cursor": {
          "ref": "1c2e5c39-ede0-4c1a-a93e-0e53513bbb6a",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "78ba924a-7ce9-4e19-a618-963d8ce82c56"
        },
        "item": {
          "id": "d1e7fd43-50a6-480d-a761-9ad4f1837d3a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d282dea1-e75b-4dd6-af47-ae2d32e24c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d591a6b9-df0f-4d18-9598-d2470d799e91",
        "cursor": {
          "ref": "b930dc63-d03a-4459-ace8-b1844ae548f5",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9e67996f-39ff-4197-827e-0e13d0d494c1"
        },
        "item": {
          "id": "d591a6b9-df0f-4d18-9598-d2470d799e91",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b79175e3-6899-4a01-9a3e-5c12c7df87ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581e8478-78c3-470b-86db-8ac928de4803",
        "cursor": {
          "ref": "c8f59228-08b7-4d1d-9a17-96dcd6f06927",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "96f8ed21-38d8-4e09-934b-5cbb46674d9f"
        },
        "item": {
          "id": "581e8478-78c3-470b-86db-8ac928de4803",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "793ef0e4-e972-4939-9682-e9e5c15f26ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa08871-45e7-4ed7-a60a-ef43610d4402",
        "cursor": {
          "ref": "fc107085-b3f0-430d-8292-2849efcd044a",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "79e9c768-8a90-4d1e-8e92-7b7068b76f47"
        },
        "item": {
          "id": "1fa08871-45e7-4ed7-a60a-ef43610d4402",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e093bb53-970f-4def-90af-db4a01f4a108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ef9014-ea81-403f-b216-87a28f03d8c3",
        "cursor": {
          "ref": "926e94ae-8555-49ed-8fc5-ac58d2280700",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9f8fef00-6dab-4771-b6c6-fcb5ce6d2581"
        },
        "item": {
          "id": "23ef9014-ea81-403f-b216-87a28f03d8c3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b3746e70-0a5a-4ea1-96b4-97d7fbdb7fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd4b495-68ed-490c-be8e-c34d2c42e065",
        "cursor": {
          "ref": "8d82788b-0638-4bcd-86c0-102ef5c66bc5",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ff0509ec-1975-48a1-93b9-74d127b3d889"
        },
        "item": {
          "id": "ffd4b495-68ed-490c-be8e-c34d2c42e065",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cdb88341-b82e-4b91-a74e-426275733148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17258fb8-5cb1-41b9-a92c-e3998c67e244",
        "cursor": {
          "ref": "69ac5874-364d-4393-b1cd-6225c22ba208",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6d110045-e871-4067-88d2-baab3e4d92e2"
        },
        "item": {
          "id": "17258fb8-5cb1-41b9-a92c-e3998c67e244",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7db0aa3f-3fdb-448b-b546-398403f807eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eacaefd7-2a0b-4ef9-b22d-fef93b6cb21e",
        "cursor": {
          "ref": "c324c3a5-1a09-4b1a-9a5f-6f64ee97082a",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "efca68ab-c204-4fb6-adc2-f13949fcbc9a"
        },
        "item": {
          "id": "eacaefd7-2a0b-4ef9-b22d-fef93b6cb21e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1fbcc968-9a75-45dc-a187-d53d3be319dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e80d073-d2bc-412e-9ca3-441f157f91b3",
        "cursor": {
          "ref": "777fee8c-a530-44d8-8d23-1b706519a064",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e3d99639-7ee1-4458-8f4e-19600eb82514"
        },
        "item": {
          "id": "3e80d073-d2bc-412e-9ca3-441f157f91b3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7c52d416-c168-4877-ac2d-5666cdc83b27",
          "status": "Created",
          "code": 201,
          "responseTime": 3314,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f4503f17-72d2-4c2d-9566-8819e979dd24",
        "cursor": {
          "ref": "5e6f8d58-3f2b-4f7f-b862-16fa3702e411",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "262826e2-71a9-437b-9048-d28f8b17d04b"
        },
        "item": {
          "id": "f4503f17-72d2-4c2d-9566-8819e979dd24",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ed5167d9-717a-4852-945f-c2b9c7856377",
          "status": "Created",
          "code": 201,
          "responseTime": 2398,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4b8f41dd-2903-41d2-9008-140ff090d6f3",
        "cursor": {
          "ref": "e1437bb4-2c35-4390-b0a3-522bc303664d",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c7d687d1-615a-46e2-8ec2-f0d5afff7038"
        },
        "item": {
          "id": "4b8f41dd-2903-41d2-9008-140ff090d6f3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0f707923-ce57-4b40-bed1-cef68bb6edd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f8af14-122a-4bca-bac8-9bfcaebcb913",
        "cursor": {
          "ref": "1adbc756-8086-4d58-9505-7b57749ebb0c",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8f8d8599-65c2-4018-a015-38b9ec5a9a32"
        },
        "item": {
          "id": "a7f8af14-122a-4bca-bac8-9bfcaebcb913",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9ec14a22-c7a5-4128-a8c4-6d09809d2431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adae533c-a0d6-4844-b325-0de4080249a8",
        "cursor": {
          "ref": "87194a6a-8d3e-4556-a078-f8cdb135c982",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "56f735d7-105d-4ecf-8b8a-5d0b76e15c56"
        },
        "item": {
          "id": "adae533c-a0d6-4844-b325-0de4080249a8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "61eaacf4-fdf8-4422-8eb0-f5e48a0c88a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482632b6-241e-40cb-9fa0-64db414471a4",
        "cursor": {
          "ref": "eb6bb977-7984-4929-baa4-7c54769ea944",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4ec006b4-fc87-4325-ba5c-bf76e5649218"
        },
        "item": {
          "id": "482632b6-241e-40cb-9fa0-64db414471a4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "38f0344e-2189-4271-9fec-908b481538ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e40140-0228-4cd7-aef9-2d251d5df15f",
        "cursor": {
          "ref": "1ab4904c-ca6c-4d0e-b9c5-e55c0d580f65",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fc1bc73d-e335-4dcd-a0d5-ab11402cba47"
        },
        "item": {
          "id": "a3e40140-0228-4cd7-aef9-2d251d5df15f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "db3e38f6-5b1b-4773-a0eb-dad7d2b315e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f034062-1ffc-45e6-8e97-f558157ff597",
        "cursor": {
          "ref": "f05c0fb3-fb3f-4da7-b976-4d4a3a35862a",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "add7f354-f112-4a21-9494-2ada610f3a57"
        },
        "item": {
          "id": "3f034062-1ffc-45e6-8e97-f558157ff597",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1a076af5-92ad-447f-9fd1-421633e0726b",
          "status": "Created",
          "code": 201,
          "responseTime": 2665,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e3f3a67d-a5cb-4f68-ba9f-43144a37b44e",
        "cursor": {
          "ref": "89612181-07b2-4880-a794-a0da2e8d1b78",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1feb0b2d-5a8c-41ea-8edf-d6e2acdb3df4"
        },
        "item": {
          "id": "e3f3a67d-a5cb-4f68-ba9f-43144a37b44e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d7fb1489-6dcf-4203-a401-c8ec06f20837",
          "status": "Created",
          "code": 201,
          "responseTime": 2626,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4bf9319b-3756-4bb3-ac35-45eb0a0f9617",
        "cursor": {
          "ref": "7e0805f0-6ee8-45d1-975b-6b42f46b27c3",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "859d5abd-4aac-4806-8c0e-9d5bd62142d8"
        },
        "item": {
          "id": "4bf9319b-3756-4bb3-ac35-45eb0a0f9617",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "75c8c96e-8e56-4fca-9569-89ca9770a301",
          "status": "Created",
          "code": 201,
          "responseTime": 2632,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "8cf34a24-62e1-486c-8a76-44ba7004197a",
        "cursor": {
          "ref": "cce343d1-0000-4481-ac4e-ec00aab0d20c",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e357d0f4-0550-415d-9655-1cd68710511c"
        },
        "item": {
          "id": "8cf34a24-62e1-486c-8a76-44ba7004197a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4a0fd6b9-6c47-4a54-9af9-93ea82c7101d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c014e4ce-39fc-4cce-98ec-6a9936381ba3",
        "cursor": {
          "ref": "51167e8e-c029-45f7-bcae-673091aaac7b",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2c813b38-92c5-4242-abe9-5ec437a9be46"
        },
        "item": {
          "id": "c014e4ce-39fc-4cce-98ec-6a9936381ba3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "23c9cd21-0c4f-478e-8a39-5777cd2dc1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5214fa-1e83-4565-a3f2-dc5cb3319247",
        "cursor": {
          "ref": "b46ed262-be65-4376-9e65-c1969f79ae29",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7f53db32-1da1-4e8d-bb44-76d2472f2b37"
        },
        "item": {
          "id": "3d5214fa-1e83-4565-a3f2-dc5cb3319247",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c12e6677-df48-4bc1-a47c-4867667e01ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c57ad0-e633-49d4-867b-1bcda1c17987",
        "cursor": {
          "ref": "aaeb8c7c-3f39-4a9e-97b8-8cd4234455c8",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4da660cd-c4f4-41d7-bc30-605d8682396f"
        },
        "item": {
          "id": "40c57ad0-e633-49d4-867b-1bcda1c17987",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d74c8738-7a8f-4051-89d6-02bd60a77098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc854cc2-74d8-480c-b4d3-a2d63e786185",
        "cursor": {
          "ref": "841413fb-4bed-4be1-824d-bde8bc60c27e",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "44d88926-1837-4a3d-9765-73e86981d4bb"
        },
        "item": {
          "id": "cc854cc2-74d8-480c-b4d3-a2d63e786185",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6ec116cc-13fa-4e03-978d-2ba881318da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52aa51b8-3d99-4275-8b2c-ce98b0cb5352",
        "cursor": {
          "ref": "a59055a6-6579-4f0c-8819-30c7487792d4",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c8fa2ebd-c3df-4cd7-ac2a-c449825a4ee7"
        },
        "item": {
          "id": "52aa51b8-3d99-4275-8b2c-ce98b0cb5352",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7328e585-da8e-447a-b31c-68792715bb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9db58d-77e6-4c98-9d52-1d3e68dbcf8d",
        "cursor": {
          "ref": "16723b7a-061d-487b-aaf7-0e180e7756f4",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cbdd9e2e-4336-4f57-93e6-20c8b8ceca61"
        },
        "item": {
          "id": "cf9db58d-77e6-4c98-9d52-1d3e68dbcf8d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7078d309-d70c-44ad-a3a0-a2bc7dd25078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab8b5fb-73b8-44c6-8059-8304b85f067a",
        "cursor": {
          "ref": "9b49b102-457d-47a1-91f2-a85aabcc69de",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "edc9a817-ce93-45f2-b51a-a07e8accc07b"
        },
        "item": {
          "id": "cab8b5fb-73b8-44c6-8059-8304b85f067a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "71425848-6a30-48e6-9b42-bdf9382ff5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc40778-12ba-41ec-bc95-00233b047d4f",
        "cursor": {
          "ref": "0bf7dc15-b294-4d92-a0be-059269c1a59a",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "70612f77-5c16-4432-90e9-8102ae6eb002"
        },
        "item": {
          "id": "7cc40778-12ba-41ec-bc95-00233b047d4f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5abc6256-7d19-4a95-a98e-19fd7cfb0f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0a605f-4bc7-4bf7-bedc-6c56ac73b3ab",
        "cursor": {
          "ref": "a696651c-81cb-4172-86e4-c027d2c052c8",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0504eb05-73a1-4ccb-a359-3fca82395cba"
        },
        "item": {
          "id": "ab0a605f-4bc7-4bf7-bedc-6c56ac73b3ab",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d43f13f2-9383-49bf-9f45-d9625b3dc18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98807ad-0579-44d7-853b-dde783a1362b",
        "cursor": {
          "ref": "ecf9668d-05a0-48a8-8c69-86de109c831b",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b82deb2d-01c8-4379-865c-939068600e7f"
        },
        "item": {
          "id": "b98807ad-0579-44d7-853b-dde783a1362b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4135ecb9-497f-471e-985e-ba683b8d6e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1f2f1a-3d96-4063-ae98-db75c8612740",
        "cursor": {
          "ref": "224b165f-7199-4cf4-afcb-60fc4673f231",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9c117c83-1e36-4306-8446-7d6cfa342eb3"
        },
        "item": {
          "id": "8b1f2f1a-3d96-4063-ae98-db75c8612740",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "12cfdb8f-ea05-4885-ac42-3e388a1cba44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f6704c-5e5c-4062-92d7-ea92ac32fed3",
        "cursor": {
          "ref": "9c249c77-f369-4f36-9794-7af515b97761",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "021bb8ab-e935-4498-9546-d8e959b1b055"
        },
        "item": {
          "id": "12f6704c-5e5c-4062-92d7-ea92ac32fed3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fcfa36d9-a23b-464b-bf5a-fae83f50192a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e324908-e509-43b9-8c9b-832f6264fa99",
        "cursor": {
          "ref": "0bcf4030-995d-4d7b-957d-f37fb9d8c427",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "12223b4e-36f8-4dd1-b44b-29b58f5cf733"
        },
        "item": {
          "id": "0e324908-e509-43b9-8c9b-832f6264fa99",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "794a6be3-2d93-4b00-ba9e-a741feb92c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3decc6a9-8601-462f-9ce9-8ba4319a5a22",
        "cursor": {
          "ref": "f87672d2-e41e-4682-8593-d3b978dbf1b9",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f2514472-3f25-4862-b674-2824f0413a98"
        },
        "item": {
          "id": "3decc6a9-8601-462f-9ce9-8ba4319a5a22",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "84e015b0-c51f-471a-b447-077221d14318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ba2c2c-1b61-4002-9829-9a378832f713",
        "cursor": {
          "ref": "dd8bfce4-6a30-47dc-a86b-c2ee7c687d96",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6ce39d1d-af10-418f-b391-6ef189185416"
        },
        "item": {
          "id": "54ba2c2c-1b61-4002-9829-9a378832f713",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4f4a712d-c92e-4332-ad90-0ff3efe1f338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe3afa2-2af1-45c8-9807-6e36ed9b11cf",
        "cursor": {
          "ref": "f60d7036-641d-4a98-b739-16b4dc7adb96",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "452c0212-3814-4835-932e-7af8930b569b"
        },
        "item": {
          "id": "dfe3afa2-2af1-45c8-9807-6e36ed9b11cf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "16c7ac13-8e0c-4140-8a51-56cf9c32c95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6108e22b-aa54-49d2-9172-98df1a7d519d",
        "cursor": {
          "ref": "388bf2f4-ffe6-4def-8016-ae0b70f2912a",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "804205c7-bdfe-41cd-8f98-432cb4446c23"
        },
        "item": {
          "id": "6108e22b-aa54-49d2-9172-98df1a7d519d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "85567319-9b3f-46c9-9911-ca3178dc52e7",
          "status": "Created",
          "code": 201,
          "responseTime": 3021,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "bde78774-66dd-4525-9ba5-a31488ebecf6",
        "cursor": {
          "ref": "d6777163-dac9-4c01-b462-0d76d1cd37e8",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8b10809b-f286-4d66-b40c-4fa0482ce3c5"
        },
        "item": {
          "id": "bde78774-66dd-4525-9ba5-a31488ebecf6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "279c6b75-ddd2-4d3f-9009-8cc2088ea2d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b088e3-787d-4a4b-b6db-5414e3ab14b5",
        "cursor": {
          "ref": "93df6e73-c682-4b0a-ba38-5284a39be7f2",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "aaf51b1c-0f23-4147-a712-80f1a6e365a0"
        },
        "item": {
          "id": "19b088e3-787d-4a4b-b6db-5414e3ab14b5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4c23e143-b33e-4c2e-ae8b-819bc6d1ec52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73d774f-f6be-4c85-a28e-3138a263210f",
        "cursor": {
          "ref": "bbbae0d0-0186-4204-a0d4-17bf57c5fd0b",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "59352545-2455-48fc-af31-aca19b3a7284"
        },
        "item": {
          "id": "c73d774f-f6be-4c85-a28e-3138a263210f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0a0c04b8-2c02-41c9-9145-b4cfed747009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0706b1-50c7-4250-bed6-11036bb966b8",
        "cursor": {
          "ref": "144b92fa-4672-46a6-a441-83c0f276f06a",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d7ff3843-6887-4cbd-b6b3-451fe3b90bad"
        },
        "item": {
          "id": "0f0706b1-50c7-4250-bed6-11036bb966b8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "67c48c66-3a91-4680-a305-3bdd5ecafe11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a215163e-2883-4f21-b1f8-2e84e9771029",
        "cursor": {
          "ref": "fe0657e0-ca8c-409d-bbb3-8a00bbfe0a8b",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "10babb25-f69f-45cb-9bb6-f56491d3e290"
        },
        "item": {
          "id": "a215163e-2883-4f21-b1f8-2e84e9771029",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "24d3d5a0-45bc-48d1-aa7a-4605566f1544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424a5d04-45c9-4806-8119-c54f11ac47aa",
        "cursor": {
          "ref": "87f6b933-6c45-4c1e-9da5-3587d003bbec",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "172dc90f-6d94-4c23-9f4c-fc770595f575"
        },
        "item": {
          "id": "424a5d04-45c9-4806-8119-c54f11ac47aa",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5ec412a9-26f3-47b0-ac45-d30ca338149a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453ab725-9fc8-4cc2-90bf-3fd14499780f",
        "cursor": {
          "ref": "3fdc8f20-8ebc-4d0b-8288-09af40a7750d",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a1389427-7936-4b63-9393-86b4f02bd73e"
        },
        "item": {
          "id": "453ab725-9fc8-4cc2-90bf-3fd14499780f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d8d3aa0d-9773-4060-9aa1-dfdd904e5417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bb1acc-6d58-46fa-a767-855cf1c65002",
        "cursor": {
          "ref": "90fa1090-6bcb-46ba-8b9d-63182ca11a61",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b19a2b7c-3993-4cea-9a09-bafa77126e08"
        },
        "item": {
          "id": "a7bb1acc-6d58-46fa-a767-855cf1c65002",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b25282ad-a830-4514-a747-54f2f1961705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519444ca-6a71-4405-8580-a683720e4dec",
        "cursor": {
          "ref": "1adeb2d1-3258-4620-a39a-71f664126db2",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e097dd80-0931-4e6d-b89e-dbd005a68f88"
        },
        "item": {
          "id": "519444ca-6a71-4405-8580-a683720e4dec",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e1ce86b3-9fd6-4b1b-8339-dd955dc60f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9844db78-0fdb-4404-a71a-961744de27d2",
        "cursor": {
          "ref": "03c12e4e-5cd1-404e-8724-0fb88425c6e4",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b30dbb82-e2d0-49fe-80f4-10e48ce599c1"
        },
        "item": {
          "id": "9844db78-0fdb-4404-a71a-961744de27d2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f8e3af33-a4db-4bf0-badd-26b029dfcd36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bab7b22-9ecd-43f9-bdf3-071fa1794d05",
        "cursor": {
          "ref": "9786ee38-3b3c-402a-9ad3-8b9f29153ea2",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9e6612bf-5dfc-41d8-a0c6-52ca89e61e30"
        },
        "item": {
          "id": "6bab7b22-9ecd-43f9-bdf3-071fa1794d05",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ab71ab29-d44e-4e6e-a9a3-e5e9a3633daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c053032-f509-46d1-b696-0d95af5d2ccc",
        "cursor": {
          "ref": "7f99fb39-6cba-4b71-aa1f-f50bd5c5ca3a",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6e6761bc-821c-43c2-b3ec-9bf62c2dd19f"
        },
        "item": {
          "id": "8c053032-f509-46d1-b696-0d95af5d2ccc",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "861f82ae-4a1f-4bd3-a92d-b005b4867928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b04fa51-7b84-4415-8437-dac70cb80f3c",
        "cursor": {
          "ref": "ea35cd7e-eb6e-46f9-a141-4c5d64d0fa2c",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c9e64b7a-9717-4869-9169-3a0bcab4ac73"
        },
        "item": {
          "id": "9b04fa51-7b84-4415-8437-dac70cb80f3c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f4d098c0-1a3e-4d95-9576-f3d68a94b1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2154ff89-86be-4d66-b385-71921951cb11",
        "cursor": {
          "ref": "40f95b29-ccc6-4392-a3a9-02ff0fce8353",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2461b4ca-68a4-4ffe-a70c-c878377cb755"
        },
        "item": {
          "id": "2154ff89-86be-4d66-b385-71921951cb11",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b34c2dca-c53f-4dda-88a3-6e9c68272682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325e4ba6-5e8b-4ae3-ab5a-865901b3cd1f",
        "cursor": {
          "ref": "93c7aaa3-89ec-48f2-8647-a313500bcceb",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "14125be3-55e0-4887-8270-dc5620e7a0fc"
        },
        "item": {
          "id": "325e4ba6-5e8b-4ae3-ab5a-865901b3cd1f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ee2e4254-55b7-469b-a964-4777b90f94d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9740305-ca21-4326-bf0c-abad0202113a",
        "cursor": {
          "ref": "7c74bd5d-1128-40dd-9084-a499492a554a",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b169ae69-c6a1-4af8-9394-d9e95b56cd36"
        },
        "item": {
          "id": "d9740305-ca21-4326-bf0c-abad0202113a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a62165e7-ea4e-4664-b043-b88140fdc19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf992ed-b0a1-4325-8376-b8c0235f8f8a",
        "cursor": {
          "ref": "edd727ad-0c9b-4c55-b82f-3b4ea54f6787",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "db043afa-59e4-472c-84e9-efaa0195a3bf"
        },
        "item": {
          "id": "ebf992ed-b0a1-4325-8376-b8c0235f8f8a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d55236b6-4502-47c0-b11f-d29d6f503e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645c0c21-e649-43ec-8719-223ab0360de9",
        "cursor": {
          "ref": "c99926e5-a5cc-4c58-9165-01d09416d209",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bb22a4b2-b94d-409e-9034-44935b74dbfe"
        },
        "item": {
          "id": "645c0c21-e649-43ec-8719-223ab0360de9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1b090e39-4974-4cee-9b64-1aee99e791fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfae8822-c3da-489a-bf19-d75eae80d58d",
        "cursor": {
          "ref": "43db8fd7-c902-4bca-8e34-61fac37738a7",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "98b66270-9774-4a6b-8757-56af02e8bd37"
        },
        "item": {
          "id": "cfae8822-c3da-489a-bf19-d75eae80d58d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9c6f2e96-77da-4587-b177-95a5b16a3516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3aa528-dcbd-43b5-a86f-95df6319a2c9",
        "cursor": {
          "ref": "3900eabd-6f30-4cb2-a33f-7b69c1348912",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d48b07c6-083d-4554-a672-138bb8c9ba64"
        },
        "item": {
          "id": "fa3aa528-dcbd-43b5-a86f-95df6319a2c9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bd33f8f7-10d0-474d-ab7f-69e8c65cee11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acd84d1-e7a8-4d46-a8b4-dd0ada93589e",
        "cursor": {
          "ref": "f247f36b-df37-430f-870a-9b19013a0afc",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "97fae932-1a8a-4e4f-8ad2-abb2cf997230"
        },
        "item": {
          "id": "7acd84d1-e7a8-4d46-a8b4-dd0ada93589e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "342e91e0-f7e0-459f-ad1a-8ea44f2ada40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5690d0-d4a2-4c3b-bc97-f96237232c47",
        "cursor": {
          "ref": "9438523b-b1cc-4fa6-94d7-44126abac70a",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d470afa3-81a3-459e-a870-12a9e7e5b9e3"
        },
        "item": {
          "id": "4d5690d0-d4a2-4c3b-bc97-f96237232c47",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f9c5a319-972f-422e-9380-aa01a75b397d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869d43ef-6672-423d-8300-93531a14340c",
        "cursor": {
          "ref": "2905965e-3510-4e76-8f6a-8749d104de50",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "13740f11-3bc6-4c18-82d8-1b4d669796ff"
        },
        "item": {
          "id": "869d43ef-6672-423d-8300-93531a14340c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8427b099-ddd1-4014-a1ef-d6511320a7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada6e9b3-c8f4-4701-9486-03a95c92ad2f",
        "cursor": {
          "ref": "7c196747-bab3-4bd2-883e-748f766d6c42",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c266a8bc-aa68-4286-bf0a-bf5637cd62b1"
        },
        "item": {
          "id": "ada6e9b3-c8f4-4701-9486-03a95c92ad2f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1b19c748-6db3-4fef-adb7-b884a729a39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c48cb5d-515f-439d-8b84-63b91cceacd0",
        "cursor": {
          "ref": "ae6f1799-8b2a-403f-ba1e-c433bf22b998",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "aab1ebd3-f370-40c8-989b-f9a088095d0d"
        },
        "item": {
          "id": "5c48cb5d-515f-439d-8b84-63b91cceacd0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0f6f6a5d-ae2e-4574-8bf3-8b25be0563f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9769cf4a-bc66-4600-b219-a07e4a212a92",
        "cursor": {
          "ref": "fca7cc4b-98d2-4ff4-a96b-8ac116407200",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "48a9a4ac-02d4-4557-8a1a-dfc82711859a"
        },
        "item": {
          "id": "9769cf4a-bc66-4600-b219-a07e4a212a92",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6d26ef97-4c0e-4896-b1de-5fa3b262eeed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04335b7-b1fd-46e5-83b6-a2046f332b78",
        "cursor": {
          "ref": "f523fee7-18f6-4199-9874-52af9dc4d5da",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "dccfe166-7992-46d6-b656-88b8b13d4aa4"
        },
        "item": {
          "id": "d04335b7-b1fd-46e5-83b6-a2046f332b78",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1aae0a9e-ab3c-44c7-9766-72050770c78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49306872-86d7-46ce-8d96-a67e9b09f978",
        "cursor": {
          "ref": "9cc8694a-a8c6-479c-81d3-054a67c7d56e",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e6820aaf-5260-4642-844f-7b9a971920ab"
        },
        "item": {
          "id": "49306872-86d7-46ce-8d96-a67e9b09f978",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a984262a-769e-491e-8f80-8910a2e03f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39685fe-43b5-4350-8709-5e75ad1cafbf",
        "cursor": {
          "ref": "e4fa948a-aab1-40c3-bc92-629fc6702b6e",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8737460f-42c4-457b-b788-89ff29aff491"
        },
        "item": {
          "id": "e39685fe-43b5-4350-8709-5e75ad1cafbf",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3572142f-901f-4916-8f54-2a757b905e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4888dc4-b771-4d3b-913f-7d396a062e2c",
        "cursor": {
          "ref": "888ee4f8-133f-44ce-b116-1f5dae3a3dc3",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4f964850-b6a5-4728-bfbc-a2ff8dc2c561"
        },
        "item": {
          "id": "d4888dc4-b771-4d3b-913f-7d396a062e2c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8d1138b3-cce0-41d5-8a16-70697c1439f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b32dcb7-905e-4fb1-a0d4-4c4281228ceb",
        "cursor": {
          "ref": "13b11d59-67e0-462b-ba3e-14b2958eb303",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1d535f1e-f3ac-4812-8a5b-5ff6c1d41b67"
        },
        "item": {
          "id": "4b32dcb7-905e-4fb1-a0d4-4c4281228ceb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fbe8a848-809f-4b5c-879f-51394d4099ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "0307a80a-108a-4e3e-b522-be575ebe4579",
        "cursor": {
          "ref": "1cc72fb4-4c72-42c6-a42e-80eaf508512e",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "56ae8d8f-3a9d-4335-8cb5-e9efe7185344"
        },
        "item": {
          "id": "0307a80a-108a-4e3e-b522-be575ebe4579",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "38260c9f-959d-4db7-8d50-f6e1bda88f39",
          "status": "Created",
          "code": 201,
          "responseTime": 2679,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ec42b94a-ca62-44fe-94bd-cce418092f6f",
        "cursor": {
          "ref": "b2df7d63-6c20-4c7a-acc6-2fdf13f2ec1f",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2e816a1a-c8a6-497b-a062-50d19496b529"
        },
        "item": {
          "id": "ec42b94a-ca62-44fe-94bd-cce418092f6f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3e48e2fd-c7c6-4654-89c3-5caf494280de",
          "status": "Created",
          "code": 201,
          "responseTime": 4053,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca2dfa3-bd00-49b8-917b-caaa2fa37b40",
        "cursor": {
          "ref": "e93e7f9d-477e-46b3-83c7-cf71201fbdaa",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7e27657d-0aa2-4b5f-adf5-8b10b6dac104"
        },
        "item": {
          "id": "5ca2dfa3-bd00-49b8-917b-caaa2fa37b40",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "992c0122-542d-484d-9009-99e7fabc209b",
          "status": "Created",
          "code": 201,
          "responseTime": 2591,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1a8321-86f2-4b49-a8c8-9b3854af41c6",
        "cursor": {
          "ref": "c145d7cf-54bf-45c2-b245-c6ec6a68de4f",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0f831a9e-949b-4bcb-8cef-fc482d00dcf0"
        },
        "item": {
          "id": "8f1a8321-86f2-4b49-a8c8-9b3854af41c6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "289c3dba-754d-4af9-86d4-3404221de181",
          "status": "Created",
          "code": 201,
          "responseTime": 2295,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "35096f2e-bbb6-40b5-a17d-06c7f27c6f38",
        "cursor": {
          "ref": "c3575d64-061e-45bd-91ed-0d36b5a0115f",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2c7d2163-a3ef-4920-a813-ed1219e73f08"
        },
        "item": {
          "id": "35096f2e-bbb6-40b5-a17d-06c7f27c6f38",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7d3828bf-406a-48cb-93b5-31411057ce28",
          "status": "Created",
          "code": 201,
          "responseTime": 2544,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c31a9f-bf16-4dca-b9bb-54a872b796f2",
        "cursor": {
          "ref": "42269096-9fa2-4c4f-8756-f7fc8d0c5219",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e099cce6-c08e-424a-bb74-e777d844cbcd"
        },
        "item": {
          "id": "43c31a9f-bf16-4dca-b9bb-54a872b796f2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "69224fa7-0998-4331-bf6e-a00e20775ba8",
          "status": "Created",
          "code": 201,
          "responseTime": 2460,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-27T00:40:13Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-27T00:40:13Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "57d4912e-3a08-41a1-b0dc-8b5db4cb34f1",
        "cursor": {
          "ref": "69e8f421-017e-41a4-83c6-cdef84932704",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "747e80a8-c066-4d36-9a8d-4ed0193f455e"
        },
        "item": {
          "id": "57d4912e-3a08-41a1-b0dc-8b5db4cb34f1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b72c2fe2-ca2e-4f46-85a9-39bb0beb6b1a",
          "status": "Created",
          "code": 201,
          "responseTime": 2400,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec5ed99-f85e-4753-b7ec-e9f33f600bd9",
        "cursor": {
          "ref": "fca65adc-53ac-45d0-96bf-523b50a3a364",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "eee114f4-0367-428a-9ace-f37d848d5fc8"
        },
        "item": {
          "id": "bec5ed99-f85e-4753-b7ec-e9f33f600bd9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "27141a24-8e25-4c5a-b819-e1ec9b653ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec5ed99-f85e-4753-b7ec-e9f33f600bd9",
        "cursor": {
          "ref": "fca65adc-53ac-45d0-96bf-523b50a3a364",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "eee114f4-0367-428a-9ace-f37d848d5fc8"
        },
        "item": {
          "id": "bec5ed99-f85e-4753-b7ec-e9f33f600bd9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "27141a24-8e25-4c5a-b819-e1ec9b653ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a712cf7-b8ef-40a9-8882-e6a2c1285a63",
        "cursor": {
          "ref": "3c4019da-3d70-43f1-9222-1d24fbe3264f",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "46307763-fced-44ae-9ded-6c4ac6babbde"
        },
        "item": {
          "id": "3a712cf7-b8ef-40a9-8882-e6a2c1285a63",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e5ea775f-4a9d-468c-9d50-3085431a96ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d378f7c-f511-4406-988f-0c47a327cda4",
        "cursor": {
          "ref": "70944ae2-649a-471b-89db-916cfee27639",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "894828b7-194d-45e1-8ed1-23c8e0636eb5"
        },
        "item": {
          "id": "4d378f7c-f511-4406-988f-0c47a327cda4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "42fee200-8934-4a30-a469-b20a1d0fb5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1fdf596-7c81-48d7-becf-2d494c49b19b",
        "cursor": {
          "ref": "6c8d5205-407a-474b-99d1-3912b986113c",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "08492608-f1c8-4574-9cf6-8ff6abaf075f"
        },
        "item": {
          "id": "f1fdf596-7c81-48d7-becf-2d494c49b19b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ded7d002-d01d-4531-bf9a-1a2a4d379a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3cbd6d-8221-448c-bcd3-20e66b6b5c47",
        "cursor": {
          "ref": "65b79996-90ec-47d1-8a29-926e4b9e5774",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "76c220fc-836b-482d-bc76-0c1633d51817"
        },
        "item": {
          "id": "ed3cbd6d-8221-448c-bcd3-20e66b6b5c47",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "55c322f0-674a-46e0-a358-6acc3eb6a039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65227a18-8ec6-4477-a04d-99cd73e68c00",
        "cursor": {
          "ref": "8713af06-722b-4995-8888-692f16c365f7",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "86d5c0a0-3394-4192-8ae1-a865d753b1d8"
        },
        "item": {
          "id": "65227a18-8ec6-4477-a04d-99cd73e68c00",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "150b8466-6a3b-4e5c-a935-606a421f3483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6540f70-34fc-410b-bcf3-d3f14ada60f5",
        "cursor": {
          "ref": "624e5ae0-92b3-438f-b05d-dd2d97917e64",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "53c3039d-dd74-4c46-8ad4-b91edd8eca74"
        },
        "item": {
          "id": "f6540f70-34fc-410b-bcf3-d3f14ada60f5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dd4dfc2a-7139-45c1-a359-3abeadd0112e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff575d23-412b-48d9-b332-a89bd8cad1b7",
        "cursor": {
          "ref": "1765df55-f03f-44d5-aa92-3050de194b7b",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7fd0efe6-fba0-48e9-a19b-5fe2daa1201b"
        },
        "item": {
          "id": "ff575d23-412b-48d9-b332-a89bd8cad1b7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a4fd5e22-7d97-4049-a2a8-d1a2314d2dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc6a497-a287-479e-ada5-1f303b6a00c6",
        "cursor": {
          "ref": "80ea44f2-8ee2-4f20-a0cb-31f3d6507183",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f85c172b-b434-471f-ac17-8bccf7d67256"
        },
        "item": {
          "id": "ddc6a497-a287-479e-ada5-1f303b6a00c6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9cf71a04-67cb-4973-b473-74ab5bb730c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc20683-183c-4c36-ac24-b09428db188f",
        "cursor": {
          "ref": "f1f0bb4c-561e-4bfa-961f-5685acb63753",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2440df90-7bf1-41a4-97dc-2b2d5b95f47f"
        },
        "item": {
          "id": "5cc20683-183c-4c36-ac24-b09428db188f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "820b7fde-1182-4c1e-9124-32ef645bf2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadc859b-4d2b-491d-8ae9-c1232b496f51",
        "cursor": {
          "ref": "2d5aebda-dd8e-4299-94c3-f0b4eb538f99",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dccc6923-2f82-489d-a750-29e871380c3c"
        },
        "item": {
          "id": "fadc859b-4d2b-491d-8ae9-c1232b496f51",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "071f7965-6e4d-4708-9092-dbb0588ba529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161a69c0-a9ef-4a08-a5cd-bf22cde5cff4",
        "cursor": {
          "ref": "20947024-c07c-4747-99e4-6e235190e724",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6402d03b-6171-4353-ab9f-536d5cbf2303"
        },
        "item": {
          "id": "161a69c0-a9ef-4a08-a5cd-bf22cde5cff4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "09a0d2a9-c29a-437e-8176-a5983ccf79a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1998967d-bbaa-4fb9-b3d5-4ea9afc7299a",
        "cursor": {
          "ref": "f0f04dd2-0ed8-433a-abfb-e23e1f68716b",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2aa0468d-c72c-4f8f-802f-8205e57084b8"
        },
        "item": {
          "id": "1998967d-bbaa-4fb9-b3d5-4ea9afc7299a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ef86443c-e650-4805-8de7-87d24d81e7bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8bd889-da62-46cf-b387-8373b95e8b4a",
        "cursor": {
          "ref": "f691ef9f-5750-4a72-b532-cec8f2be54d9",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9032e804-e504-46af-9806-05301f29b2c3"
        },
        "item": {
          "id": "0c8bd889-da62-46cf-b387-8373b95e8b4a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c49d0b3a-a9bc-4374-bfaa-98ea9df27016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c1f3c0-39df-4460-8c7a-35a72c508c65",
        "cursor": {
          "ref": "fcc9247a-194b-4f59-af0d-f9b705c5644c",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9f05de2e-3c7e-4ee4-9b31-1c293b206702"
        },
        "item": {
          "id": "68c1f3c0-39df-4460-8c7a-35a72c508c65",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cf2fafcd-0a6b-4a41-81ab-e08774838976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aafb73-1b3f-4418-9403-7960e80b9977",
        "cursor": {
          "ref": "1ca7c225-4122-4795-8d63-8a9bfa82ee79",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9701a466-e822-465d-83ee-e2a691ca22c5"
        },
        "item": {
          "id": "b3aafb73-1b3f-4418-9403-7960e80b9977",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8f887a01-f389-4edb-b345-20dbd122bd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d849e2b3-257d-48c8-bbe8-be3f7d125fe2",
        "cursor": {
          "ref": "f8b8ba39-288a-4dc8-a60c-31c877622ae9",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "31f4ee17-cdf8-413c-bfe5-cb66ad24dd40"
        },
        "item": {
          "id": "d849e2b3-257d-48c8-bbe8-be3f7d125fe2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ece1eead-a04a-478e-ba42-f67272ff4224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1547741-0ec8-4c96-b412-7d1684401915",
        "cursor": {
          "ref": "6fd3ecb0-d2e2-4ad4-a149-10ed2caa1cc4",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e44554bf-2cc6-4df4-99d7-b308bc81a067"
        },
        "item": {
          "id": "a1547741-0ec8-4c96-b412-7d1684401915",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "51d58c5d-6049-4586-a941-712cd1b90985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bedd3fc-d574-46c9-9d68-90e1fcf92dc4",
        "cursor": {
          "ref": "8bc8ae89-fce4-4640-a736-861eaa861871",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4ae0e8d7-22c1-42b7-92f1-d3a1a2167257"
        },
        "item": {
          "id": "3bedd3fc-d574-46c9-9d68-90e1fcf92dc4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9ecc28f4-ff21-4d7a-8757-761d3b7f24f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5ffebb-8105-4e80-98f2-e180fd7e7bba",
        "cursor": {
          "ref": "49936c14-fc58-48a1-879e-bb11e333ae93",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a42bca7c-fd6f-45eb-bb27-4672821e97bd"
        },
        "item": {
          "id": "dd5ffebb-8105-4e80-98f2-e180fd7e7bba",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b91e5eb1-ea5d-43a0-aab2-4034bc07ca18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b6a2a5-05e4-4513-ae06-109134d131c4",
        "cursor": {
          "ref": "d8cefbca-1e2e-4e16-b4ef-8506096cd069",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "84ea4cd2-c4c4-4a05-bb5f-17d25b5e1312"
        },
        "item": {
          "id": "92b6a2a5-05e4-4513-ae06-109134d131c4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ee4a9630-dc00-44b6-8f14-9547915278fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1cf5b8-b7c8-4ddf-9087-72ce0accb5d3",
        "cursor": {
          "ref": "5b2b700f-30bd-411c-84cb-33cb6a11c9ab",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "067aa5ee-2b36-49c0-b144-037a8c2a3a34"
        },
        "item": {
          "id": "cf1cf5b8-b7c8-4ddf-9087-72ce0accb5d3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "09105a13-bc6d-491a-8baa-d79304ad47bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac5948b-e24b-42d1-8c75-719b5385d251",
        "cursor": {
          "ref": "16e38534-02b5-426f-8114-3373e086f2a0",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f62dd79c-b75b-44b4-8a56-39756b4f76fa"
        },
        "item": {
          "id": "3ac5948b-e24b-42d1-8c75-719b5385d251",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4e552949-7640-454a-a398-32d9e33692e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6daacc7e-3eaf-4bcd-a2f9-4330be7ded74",
        "cursor": {
          "ref": "632d4fa8-bba1-45ef-bdb9-e90e5e28cd09",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "76b083c6-74d4-46ad-a6d6-b796548d44d4"
        },
        "item": {
          "id": "6daacc7e-3eaf-4bcd-a2f9-4330be7ded74",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d9e51db8-03c3-4d85-8227-4e3752a8b70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fedea8-0b9a-4916-b689-363d4edbebf6",
        "cursor": {
          "ref": "831039ab-d9b3-45cf-8423-c9ee4ca5bfe4",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7bd96532-c0a4-450f-902b-3bece86a4b46"
        },
        "item": {
          "id": "92fedea8-0b9a-4916-b689-363d4edbebf6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "22287b44-7d5b-4b9f-94b3-1012628855cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a79f04c-6419-4a42-91e9-f84696b4e80d",
        "cursor": {
          "ref": "4c8c25a0-7347-4814-9b1e-ba17111b3d70",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "410811eb-68a6-4ba8-bb12-f0a6bed5db60"
        },
        "item": {
          "id": "5a79f04c-6419-4a42-91e9-f84696b4e80d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "19b5efcf-85bb-42d0-8e51-cfe2f0d18083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0161bd-95eb-4bdc-bc9b-eef5967af233",
        "cursor": {
          "ref": "e9d81201-eedf-4432-b3a4-ad6b373eadc4",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5c7ef1b5-b1e9-4462-9e76-b5153a3ba5f2"
        },
        "item": {
          "id": "bf0161bd-95eb-4bdc-bc9b-eef5967af233",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "49c3d99c-d36f-4240-820c-fad300945b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c650f2-0d14-4865-b2d9-ef90b4b86986",
        "cursor": {
          "ref": "e7b200ab-5855-42e5-a721-65a7e6d0797a",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fbe5edf2-6e78-4dde-90da-fbcefc5f1bc9"
        },
        "item": {
          "id": "65c650f2-0d14-4865-b2d9-ef90b4b86986",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2a6af4aa-5383-4a7c-abfe-6d48435658e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41623f26-06ea-4254-8f7f-127f42f9d32f",
        "cursor": {
          "ref": "460455f0-abfa-4bcb-815b-f06fe9bedc39",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "98ed9981-f8da-445a-8fe2-ef34651f2a3f"
        },
        "item": {
          "id": "41623f26-06ea-4254-8f7f-127f42f9d32f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8f07694c-73a9-4b69-a9ec-1510daf7584d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d458d1-42d9-4b19-81ef-02c5ed3e4881",
        "cursor": {
          "ref": "15d6617f-e663-479d-9a21-755e6d4ea06b",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f89a8c30-5b77-4174-96cf-4df15eb39cc6"
        },
        "item": {
          "id": "48d458d1-42d9-4b19-81ef-02c5ed3e4881",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "51549e4a-ee05-4589-971c-8e3fa97e1a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64cd355-3345-425d-bed2-4e2aa7f516af",
        "cursor": {
          "ref": "d3bbd018-a26b-4f27-9ade-744d8742d508",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "02cd5029-9fde-4b94-8c62-dd6bc49a3298"
        },
        "item": {
          "id": "a64cd355-3345-425d-bed2-4e2aa7f516af",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4f844dc5-6a19-4ffe-97e7-8a0753bb53c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728f03c9-d33d-4de3-bc96-739f6a90bdc2",
        "cursor": {
          "ref": "b376613e-5b4d-4e49-8ff7-2076a7e95de1",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "04d883e2-ed6f-4cc3-b3de-2c19b66263e5"
        },
        "item": {
          "id": "728f03c9-d33d-4de3-bc96-739f6a90bdc2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "11e9db7d-77d9-46fe-b8c7-7cd398af045d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a8b0c1-e75a-4189-af90-d5d58aba54d1",
        "cursor": {
          "ref": "8437e9df-ded6-4b7f-8493-43a13bd7c7d3",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "25364158-1263-47a2-918d-f937cb0518e1"
        },
        "item": {
          "id": "35a8b0c1-e75a-4189-af90-d5d58aba54d1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c4cfdfa1-7f23-4b9e-8258-5ac79c1896a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "09ceb470-0d8c-4351-b323-f75f871cacda",
        "cursor": {
          "ref": "ce706a9a-d8bd-4055-8dd0-bfe2889cd837",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "cb628af4-41cf-45d6-881b-3c07405b0492"
        },
        "item": {
          "id": "09ceb470-0d8c-4351-b323-f75f871cacda",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e625797c-d09e-4939-bdea-d1df646a1ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "c0deb6ae-83d4-47b4-a891-7215491ef950",
        "cursor": {
          "ref": "905dba14-c83a-4194-b587-1d389a6b0a70",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2b5fff5d-634b-4aa2-95fb-15b15fa84c66"
        },
        "item": {
          "id": "c0deb6ae-83d4-47b4-a891-7215491ef950",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9d780d6d-6e69-457c-9390-6afa749309cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0deb6ae-83d4-47b4-a891-7215491ef950",
        "cursor": {
          "ref": "905dba14-c83a-4194-b587-1d389a6b0a70",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2b5fff5d-634b-4aa2-95fb-15b15fa84c66"
        },
        "item": {
          "id": "c0deb6ae-83d4-47b4-a891-7215491ef950",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9d780d6d-6e69-457c-9390-6afa749309cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20d2d78-b6c4-462a-862c-99de727932d3",
        "cursor": {
          "ref": "9c2e5a67-70bf-4fa4-bbb5-c9fba6daffd9",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "77d9a531-16dc-420c-bbe0-a8ce9f825b59"
        },
        "item": {
          "id": "e20d2d78-b6c4-462a-862c-99de727932d3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "afff655a-69b3-4430-895e-9abdb6394cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f236d1bf-a1bb-42b0-b89e-e22fcba47730",
        "cursor": {
          "ref": "ddaa9736-8e09-41b2-872c-d38b1a3bf667",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "94006d4f-d28b-4d6a-b523-3eb684a95bc0"
        },
        "item": {
          "id": "f236d1bf-a1bb-42b0-b89e-e22fcba47730",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d714e052-a037-411b-b3fe-4ce60d6dfbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963bd264-c354-4a51-8709-f047d46a5c52",
        "cursor": {
          "ref": "a9a116db-d568-4571-8a69-fa2d5ca57208",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "50c7661f-a540-4bdc-82eb-e32be6b8f6bf"
        },
        "item": {
          "id": "963bd264-c354-4a51-8709-f047d46a5c52",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5a13feb4-f94d-4955-972a-543c7dd2f2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af355bd2-d01a-41a1-bf92-042783af8671",
        "cursor": {
          "ref": "73bc2d43-4ef1-4b62-abb4-bdfeedff3888",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "05263c89-f019-49c6-9bca-16b9c7f86bb4"
        },
        "item": {
          "id": "af355bd2-d01a-41a1-bf92-042783af8671",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5ce6bec5-2b32-4da1-adc4-4ba6eb4cf2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a1da45-2821-4be3-8ecb-a7cf1114a081",
        "cursor": {
          "ref": "94537289-0633-4497-8e70-2fde31df5824",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5fb92548-8935-44a5-ab5d-13944d7615f3"
        },
        "item": {
          "id": "e5a1da45-2821-4be3-8ecb-a7cf1114a081",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b2c6cc65-c425-4b34-820b-a1ac2998953f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a110eee1-2af6-4ea3-8d60-0e9be4fe9bbc",
        "cursor": {
          "ref": "932b2eb1-d394-4bc0-85a3-2d82d264c0eb",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "36ad7412-9bc9-43dc-81d2-f04ec59395db"
        },
        "item": {
          "id": "a110eee1-2af6-4ea3-8d60-0e9be4fe9bbc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7aaca999-551d-4d58-96d1-3e043718e6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29f2b18-4b7a-4c83-995e-98fa2af63309",
        "cursor": {
          "ref": "05c15ba3-8adb-447b-a8e2-77735747f0bd",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0ea29733-66f3-48da-9cef-80479714509a"
        },
        "item": {
          "id": "c29f2b18-4b7a-4c83-995e-98fa2af63309",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f95b93c0-9947-407b-b70c-26cb9e3c1715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6d654d-a197-492e-aac9-e444f6659f46",
        "cursor": {
          "ref": "44b0c4a8-c5d8-445a-963f-926bb20803b9",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9ca148ed-96f2-4699-8674-e031387e8674"
        },
        "item": {
          "id": "1d6d654d-a197-492e-aac9-e444f6659f46",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2c5d6ddf-266b-4335-bdd0-571ce153eebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedef62c-eacb-4ee1-9e9d-b595b2635d98",
        "cursor": {
          "ref": "9c0ca306-1f72-4bf5-ab98-4ae86f9ecd25",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d966edc1-57b2-4729-879d-ffe2020e19a8"
        },
        "item": {
          "id": "bedef62c-eacb-4ee1-9e9d-b595b2635d98",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c0f01997-edae-41f6-9139-d04329566879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2723132-2fa3-41a3-8837-1765ab024d64",
        "cursor": {
          "ref": "cf9c0fc4-0202-4f82-a13f-2fbdd817e1a9",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9ee3b996-4fe0-44e4-8843-236645d7bf6a"
        },
        "item": {
          "id": "d2723132-2fa3-41a3-8837-1765ab024d64",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "afefe1b9-bf6b-4f3d-ac6c-753e8cf3891b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aebd73f-b61e-4e8a-b8d1-242ea554b671",
        "cursor": {
          "ref": "35aa7ab8-33b5-4d70-b5c3-e8d0a4cb94b4",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "55bba38d-3bba-400e-b1ec-c8a78d0cde68"
        },
        "item": {
          "id": "4aebd73f-b61e-4e8a-b8d1-242ea554b671",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "17dcf9f9-e5fd-4d8e-93ef-2af441ca6537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5244b438-1acf-4e28-8ad1-b43043a2b558",
        "cursor": {
          "ref": "07c75b20-09c5-4769-8fcc-f4855610eacd",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2466cfb2-c077-4d33-803f-3d9f1a1d331e"
        },
        "item": {
          "id": "5244b438-1acf-4e28-8ad1-b43043a2b558",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a9b0383b-463c-407d-8554-c15917a58626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523d76d8-40c1-43fb-bd93-4dce0f218a92",
        "cursor": {
          "ref": "22b00ed4-66c7-44ec-ac65-87c1593f5f33",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a47acac0-0f0e-40aa-b040-d16b95ac82fa"
        },
        "item": {
          "id": "523d76d8-40c1-43fb-bd93-4dce0f218a92",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a01d285e-c2db-4d1c-b787-90c6431dd9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac80f2d-f1e9-4152-8440-e9209c060f03",
        "cursor": {
          "ref": "fb2888e2-483f-479b-bedc-d4cdf00752be",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bd66e632-babc-4f0c-94da-f015691b4bf0"
        },
        "item": {
          "id": "cac80f2d-f1e9-4152-8440-e9209c060f03",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e13c0ba6-5dba-4b52-a37c-89f42dd8a04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c011afe1-3012-41d7-a4ea-fc22d7844501",
        "cursor": {
          "ref": "84c41aba-2dfe-46e5-877c-a5e6b6c0bf9f",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c2ffdd50-a4b4-4001-8fec-315eae8dc421"
        },
        "item": {
          "id": "c011afe1-3012-41d7-a4ea-fc22d7844501",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3f96b705-9907-41ff-a109-b639238ee5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70089dad-baa9-4b50-b35b-22127d76cdbb",
        "cursor": {
          "ref": "de7e31d3-0283-4ea1-8c0c-7a27ce703740",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d4f35175-ac0f-4622-bb1a-532d420b7c61"
        },
        "item": {
          "id": "70089dad-baa9-4b50-b35b-22127d76cdbb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "90059c15-1e02-4fd3-b0f5-fcfd4e5b1706",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "88386c86-82cd-44e1-bb81-cd0570f28802",
        "cursor": {
          "ref": "da402cbd-6aa6-4d9a-8098-b073740cde78",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c55bd84f-c66b-44dd-93d0-ea280a697be1"
        },
        "item": {
          "id": "88386c86-82cd-44e1-bb81-cd0570f28802",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "383bb042-f83a-4e54-aa7b-1c1aaab9488a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ace534-dc78-4fa5-8e6d-737e3cc9dd17",
        "cursor": {
          "ref": "581a8825-14b6-4e09-9ba6-32f00d7d8284",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "55fe344f-9e82-4a4a-b927-239df74393ef"
        },
        "item": {
          "id": "e8ace534-dc78-4fa5-8e6d-737e3cc9dd17",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f1dcea23-7026-4990-b422-09ab5ed0b4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff86fde-100f-4d4e-8d53-b4400985979e",
        "cursor": {
          "ref": "30895424-3603-4afc-8e45-7b615ee9d0f4",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4c4cf5c1-60ef-4cd7-8ed9-2efb37858d64"
        },
        "item": {
          "id": "fff86fde-100f-4d4e-8d53-b4400985979e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5bf8ee6d-bef6-4ccd-8814-69eb0ca29767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ee8b19-50ef-4ac7-9bbc-9857d1649f38",
        "cursor": {
          "ref": "c648a70c-2962-427e-8e5b-457873e21a37",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1f4a482e-6317-4d84-8ea3-6f72f4d789ea"
        },
        "item": {
          "id": "42ee8b19-50ef-4ac7-9bbc-9857d1649f38",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ca21b5d5-6bb3-4b46-824d-94946601acdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3faa0ea9-9328-429e-b6fa-821c9d79507a",
        "cursor": {
          "ref": "31340414-9ade-4490-b41a-3e36eac71700",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e0bf10ed-bdca-4f88-8611-8e46f189fa3c"
        },
        "item": {
          "id": "3faa0ea9-9328-429e-b6fa-821c9d79507a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f7e5647d-e13b-443f-b1bc-128c67daa87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ac113f-e9ac-4b84-be7f-19e016337eb9",
        "cursor": {
          "ref": "9b648cd1-1dad-4459-9e88-e866584a8a90",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "42219721-35fb-4a9a-82d6-9be800c4dcbe"
        },
        "item": {
          "id": "69ac113f-e9ac-4b84-be7f-19e016337eb9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "93c2277e-bdf6-4a08-9e67-a4339f78f1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a1d037-6025-4b37-9e46-2a8a3d8d4ed3",
        "cursor": {
          "ref": "428e72ea-0103-4e8d-b0ea-9993de3c94c6",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d10a6dfa-0721-4f5b-a202-c9eeb1648500"
        },
        "item": {
          "id": "e3a1d037-6025-4b37-9e46-2a8a3d8d4ed3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "08e9b930-d31a-4a28-b3a1-31bfdba4ec6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcce874f-d02f-4a0d-97cc-32caea335b8e",
        "cursor": {
          "ref": "4876139b-abb3-445b-982c-bd577f6136d3",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "58b3043a-713d-433d-8104-a175776ca39c"
        },
        "item": {
          "id": "bcce874f-d02f-4a0d-97cc-32caea335b8e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "51dff0bb-afc3-4aa7-b5b8-25a2ba59f278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2604d21-5161-4d6e-ac12-836bb1239ca7",
        "cursor": {
          "ref": "2c593d1f-f75a-4d3f-ae73-a264fac06b2b",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c85b7fc2-8286-4234-ad25-4437506aa394"
        },
        "item": {
          "id": "e2604d21-5161-4d6e-ac12-836bb1239ca7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e5a84505-b0d3-4b83-b523-73e340b1ff22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff350be1-bdac-4631-8501-c69006aa8066",
        "cursor": {
          "ref": "7cfbb6a7-40f8-4607-bf07-4a454c05fe84",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "481da60d-9eed-4913-ad6d-ea39afdcdc27"
        },
        "item": {
          "id": "ff350be1-bdac-4631-8501-c69006aa8066",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5f0daf20-1dc1-478f-bfe5-900c8a9a2273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76076b9-1814-4443-86da-7e130f4d4d5e",
        "cursor": {
          "ref": "6132d325-2e4e-49d5-9737-0a4c564eedd8",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b1a13489-082e-47e3-82ce-86f9a577af62"
        },
        "item": {
          "id": "f76076b9-1814-4443-86da-7e130f4d4d5e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f77dd478-408f-476c-81b1-8cad3c504d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62626bcc-0b0f-4812-9391-487f77fd8d13",
        "cursor": {
          "ref": "78a48522-529d-49eb-af3b-5310cd73ab23",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5fb2401c-5567-4aba-9f67-2990f00d3063"
        },
        "item": {
          "id": "62626bcc-0b0f-4812-9391-487f77fd8d13",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "415aa759-5ab3-40e3-8b15-d6f176dd80a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cb9861-d0f8-4507-8a10-5dd64f3c56ca",
        "cursor": {
          "ref": "50327263-5e27-49f4-a54c-7d26ca5b03e4",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bceb957f-97ec-4abc-bc5d-6a881aeeb71a"
        },
        "item": {
          "id": "19cb9861-d0f8-4507-8a10-5dd64f3c56ca",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7ab60d13-8c33-464a-b6ed-61139281c306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970cc4ab-1d6d-4c1c-a8b4-147b23f10cc5",
        "cursor": {
          "ref": "21fb1933-760c-4a35-a099-2e3525218c82",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "44d4f8d2-61ad-4ee4-b93d-92bebc704ff0"
        },
        "item": {
          "id": "970cc4ab-1d6d-4c1c-a8b4-147b23f10cc5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1bec47bb-3d71-4613-8431-07937ebd9daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18dfd08-d648-4e44-88c0-ecd20ef40177",
        "cursor": {
          "ref": "3c7824d7-3caa-40d6-85d4-5a9e0a101bdd",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "444df7ab-65b2-4b05-a7fb-f56f27c4b88f"
        },
        "item": {
          "id": "f18dfd08-d648-4e44-88c0-ecd20ef40177",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e6ad30f3-e911-4353-ab97-7e0bd6ad459d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc133e08-e6b9-4ee5-a29a-af2b41f0db93",
        "cursor": {
          "ref": "9aced91f-5147-487b-b342-bb4378dc557e",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "686f065f-6313-46f3-a8b1-beafc69bb11d"
        },
        "item": {
          "id": "dc133e08-e6b9-4ee5-a29a-af2b41f0db93",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f1f49e7e-8098-418d-92d8-04a1a1913762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cb8357-6ab5-46a6-857d-32d071e86a7b",
        "cursor": {
          "ref": "2fc692d7-a0d4-4f80-a8fd-3cc3e8fed836",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "021f746c-a320-4cc6-a022-c1911aa58716"
        },
        "item": {
          "id": "03cb8357-6ab5-46a6-857d-32d071e86a7b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d21858d6-8a39-445e-be05-b82c0763180e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7999b0c8-4ede-4691-a252-269c44eb6158",
        "cursor": {
          "ref": "e423150d-0711-4997-a378-a83bf2174980",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4d548f18-beef-4a16-8692-e0afbfe9e0d8"
        },
        "item": {
          "id": "7999b0c8-4ede-4691-a252-269c44eb6158",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "54d42a49-013d-44d3-b423-67df32233322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc9b5c5-26f2-4bdc-be41-6520718d1acd",
        "cursor": {
          "ref": "1829c2c6-e565-4066-86ee-a12ebf12f3b5",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f47aead9-a765-4933-8f2e-eb1304492d2a"
        },
        "item": {
          "id": "afc9b5c5-26f2-4bdc-be41-6520718d1acd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "972d2c9d-e348-4d68-a23b-6e397d3ed335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2424d400-09be-4c01-965b-7e13363db49c",
        "cursor": {
          "ref": "f49d2280-074d-4478-97be-ac204448358d",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "edc640f4-a532-4520-9ed3-ce3a5c081172"
        },
        "item": {
          "id": "2424d400-09be-4c01-965b-7e13363db49c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1866a2ee-6125-4059-9f6e-34cf01483c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aface4ed-bd94-4971-a9bf-101bb2c4d3d3",
        "cursor": {
          "ref": "ac7711c1-da43-4988-9185-88c302ff7c05",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8f78b059-c879-4d90-9be9-e12ba6d42a25"
        },
        "item": {
          "id": "aface4ed-bd94-4971-a9bf-101bb2c4d3d3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f38c15db-4a7f-4b89-bd1f-0343a492e364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1afcce-7eab-4b62-9319-f4ca11cb5551",
        "cursor": {
          "ref": "a9b2699a-e69c-4bf8-82e6-3b42dd7a6460",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "64b5e740-3523-42d8-8059-c04654124599"
        },
        "item": {
          "id": "0d1afcce-7eab-4b62-9319-f4ca11cb5551",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b84c4be0-0ee2-4e79-abd0-05b5c2dfe144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fdadb6-5c5f-41b8-b60c-0c6e920f20b3",
        "cursor": {
          "ref": "29949516-ab9e-4c83-bf86-a03ad2c31621",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b056fe2f-0f18-4793-98fc-271e03c72691"
        },
        "item": {
          "id": "e7fdadb6-5c5f-41b8-b60c-0c6e920f20b3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e4c90fd0-299f-4082-a9c6-74a422577fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9918e53-ca7b-42ea-836d-70fe3b5f0f2e",
        "cursor": {
          "ref": "6366b079-2d56-4e00-ae48-b9727f989c2e",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fc0b4d9d-e0a1-42e5-a8e7-45c3b6e92cd8"
        },
        "item": {
          "id": "e9918e53-ca7b-42ea-836d-70fe3b5f0f2e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e4f38c5f-aa0c-4ac1-bb7d-bc3046c6ed6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194eae88-24dc-4497-8670-f9323d580b86",
        "cursor": {
          "ref": "41e7b944-4713-478f-a3b1-3d97657b8c53",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b60bdcd3-ccc0-4795-bd7a-5af4cb5658f2"
        },
        "item": {
          "id": "194eae88-24dc-4497-8670-f9323d580b86",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "37749ee4-2de2-42ba-9bea-3dd8f3842fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94cec2b5-5a87-41f7-9967-84006a89fbd8",
        "cursor": {
          "ref": "3ecd58da-74a0-47bb-8a7f-e2dc7357d635",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0284245d-1de2-483a-92fd-65c9038dc061"
        },
        "item": {
          "id": "94cec2b5-5a87-41f7-9967-84006a89fbd8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "970ffb5e-861b-4e0b-b920-8be3f77a75f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561a4b81-5bab-4e2b-bf86-9c4cbc74e766",
        "cursor": {
          "ref": "f2868ba1-d755-40f9-9cb1-df670d673fd6",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "47f9c93e-c5dd-4219-8fb2-30287fffaddf"
        },
        "item": {
          "id": "561a4b81-5bab-4e2b-bf86-9c4cbc74e766",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "abf48462-ed12-4b18-9a83-1c9514ef5eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750a9138-133d-4f35-ad19-f58c627930fa",
        "cursor": {
          "ref": "d7e51c18-8c14-48b2-8f65-d5d18d46bdf5",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "254b4c81-7c4a-455e-a982-23a86e1f714f"
        },
        "item": {
          "id": "750a9138-133d-4f35-ad19-f58c627930fa",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0c9c9079-9916-43b7-93d2-ecff6a310588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba138150-204d-4b12-9a5c-aa1cb4862e80",
        "cursor": {
          "ref": "4259ee9d-14ac-46f6-95c1-3ca412a08ec2",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b59e7ac2-f263-48f5-ad3d-9f3b94b93b61"
        },
        "item": {
          "id": "ba138150-204d-4b12-9a5c-aa1cb4862e80",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3039241c-c366-4555-8f6c-c8adb3527569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eec3084-b1bc-41d0-aac8-34c5640bcb09",
        "cursor": {
          "ref": "cb5278ec-5f8d-42ed-92a5-a80b3d481f4e",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a3fa24a0-dafa-4d0e-a007-025c654dbc55"
        },
        "item": {
          "id": "0eec3084-b1bc-41d0-aac8-34c5640bcb09",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "47787a53-7cd1-4c54-b5b5-fdb5c25a452f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bbdab3-514a-4bd3-af86-a93d77d38f91",
        "cursor": {
          "ref": "6fa76c73-3361-4be9-bbd6-86856e792706",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "85ec2180-094e-471f-a929-5312b694626a"
        },
        "item": {
          "id": "61bbdab3-514a-4bd3-af86-a93d77d38f91",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "322d32e2-98f4-4ee6-8587-2cea9a1db05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe2c9f7-a45d-43e8-981a-10556f9e6d69",
        "cursor": {
          "ref": "0abdbd68-5cca-40ef-9300-aa356cc93336",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "998fad5d-32cb-44ac-8e22-4cb2865a9222"
        },
        "item": {
          "id": "4fe2c9f7-a45d-43e8-981a-10556f9e6d69",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fe0faedc-ab61-464e-9abb-bf1e40a57aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166058a3-09ba-4662-a621-a9fa681140e6",
        "cursor": {
          "ref": "86f10d1c-5f59-497a-9661-83a5b353f2eb",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c0eb9ef2-d309-4116-a631-3461da962045"
        },
        "item": {
          "id": "166058a3-09ba-4662-a621-a9fa681140e6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6682f7fa-b677-4e8c-9fa3-4c64de91460a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f15affe-a6c8-4f8b-ac11-e53e22fa1fa3",
        "cursor": {
          "ref": "203ff7aa-bf06-4605-b0ec-23d428654e48",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c96feca7-7fba-4cd6-a31f-f8074c140c5d"
        },
        "item": {
          "id": "5f15affe-a6c8-4f8b-ac11-e53e22fa1fa3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b99a3bd2-70c2-4a32-b4eb-ea41f3e6c0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a63dc47-9892-426c-9fcf-63e806d00d1c",
        "cursor": {
          "ref": "29390a42-b8c1-4cae-a97b-c24ac470461e",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d028eec7-79f8-4fe9-8539-bf27cc5730be"
        },
        "item": {
          "id": "5a63dc47-9892-426c-9fcf-63e806d00d1c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "43481ea3-bb8b-427e-bd85-a8fe7e8ae9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437fe44f-81d5-41e6-bd18-3e4f279f6975",
        "cursor": {
          "ref": "9f05d081-57e2-41c1-80ca-861a972caa54",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a5c0e3ef-f7fc-4a85-989f-68d83abedf72"
        },
        "item": {
          "id": "437fe44f-81d5-41e6-bd18-3e4f279f6975",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7b82eba4-19e2-4a63-b488-52acd2b1c267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0149b4-00e3-4489-bf2e-9b9a226d560d",
        "cursor": {
          "ref": "5adc6c32-2a14-4c2b-b696-835082bac6d2",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "27325ea1-153d-4ded-9c25-5a6115103f28"
        },
        "item": {
          "id": "6d0149b4-00e3-4489-bf2e-9b9a226d560d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "34c605c3-01bd-4d2c-9ed2-faf9b6662ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98caaaa4-c361-4c54-a4bd-e27585a0311b",
        "cursor": {
          "ref": "ea004523-420c-4a89-a952-5b3158c8cdd5",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4aff03be-729e-47fb-b097-53130d006cce"
        },
        "item": {
          "id": "98caaaa4-c361-4c54-a4bd-e27585a0311b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "93523f7f-e773-4912-acd5-f2d8c3c5798d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52001df-d062-4864-ac37-e2148962870f",
        "cursor": {
          "ref": "60d9164c-055b-493e-84c7-119a9095c898",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8540d0b9-f280-42b6-a024-cbcbf85998a2"
        },
        "item": {
          "id": "d52001df-d062-4864-ac37-e2148962870f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "52f47d5f-7368-4023-8040-cab0dfd29c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e9a25e-823e-4a55-9b57-fafe1b804e3e",
        "cursor": {
          "ref": "94db6691-fbc5-47dd-bfac-45d7f5a8864c",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b7fb1cbe-02a0-4a0b-8994-dc13a386120d"
        },
        "item": {
          "id": "a8e9a25e-823e-4a55-9b57-fafe1b804e3e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1f678bf0-0abd-41e1-812e-fa0b40ae1bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54de3839-8c72-45c9-8231-bebb0ae80990",
        "cursor": {
          "ref": "1d6272e6-494c-4523-ac65-ceea4a134c04",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e84e7aab-f719-432e-ac3a-e09445b44e2d"
        },
        "item": {
          "id": "54de3839-8c72-45c9-8231-bebb0ae80990",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bbdfdad0-54f9-4832-bffc-f8e65e11273c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469f445c-55d2-4001-940f-f56f0effad60",
        "cursor": {
          "ref": "b382a296-16cc-4fb9-8021-be91fad87995",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ab85eb2c-82bd-4933-b90d-36c5f27723db"
        },
        "item": {
          "id": "469f445c-55d2-4001-940f-f56f0effad60",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "73af87b9-1f54-4fe4-b1b3-7d3b342f9c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05751a29-84a7-438b-b6b8-01e3305b3ad6",
        "cursor": {
          "ref": "10e9d732-689f-4904-9ad8-8c9da3c884e9",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "43add722-8057-41ad-821d-b81e1eb41aa3"
        },
        "item": {
          "id": "05751a29-84a7-438b-b6b8-01e3305b3ad6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4149bfd7-2551-469f-af50-92df809c39ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01a66dd-765e-469e-8469-98d66a208d10",
        "cursor": {
          "ref": "731b98d0-b2dc-434a-826d-49fb2429bc77",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "96b3c6cc-437c-46ad-9937-54bfbf15a65d"
        },
        "item": {
          "id": "e01a66dd-765e-469e-8469-98d66a208d10",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a7339432-9e85-42bb-b538-0019e4393d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7430fa-1c1b-429e-b8a2-684df9e9d99a",
        "cursor": {
          "ref": "a867bd47-ff7d-493b-8fee-1939e29bed98",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1ee6bf3c-5b0b-4dab-b0af-15b36c7083b0"
        },
        "item": {
          "id": "7f7430fa-1c1b-429e-b8a2-684df9e9d99a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7472efdd-2755-4bde-aecb-9f3902ceec8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fb26f4-7ffc-4c28-8527-1e23e40f894a",
        "cursor": {
          "ref": "a3d51a6a-32bd-43cd-ae8a-ab8ccdbbcf26",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "76e98a91-328d-4335-af90-0d1904d2c89a"
        },
        "item": {
          "id": "d3fb26f4-7ffc-4c28-8527-1e23e40f894a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "38070299-3176-43e7-90ed-b1153f7a0261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf57805-7ec2-4e82-8b1d-e0bd10416ce2",
        "cursor": {
          "ref": "c5d17731-8423-4f38-9c85-a50e11d4337d",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9af15d33-5dc5-4dae-8860-80fa9e14c68c"
        },
        "item": {
          "id": "eaf57805-7ec2-4e82-8b1d-e0bd10416ce2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "786969fd-884b-47b6-b7c3-505a5b445c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce2924a-0d48-4746-8364-df2516aa1122",
        "cursor": {
          "ref": "cbfda9e5-708e-418f-a448-5c65a8cf2f2a",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "883aaa32-c601-4b95-bb62-67905688058c"
        },
        "item": {
          "id": "8ce2924a-0d48-4746-8364-df2516aa1122",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7a997e57-8fd2-48cd-9d85-2b4c50fa61de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14f82b6-8396-4fad-90e9-6ffa58fb0139",
        "cursor": {
          "ref": "f054475a-1b14-4a24-8569-b4b49797be17",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "dd85d065-74a5-4bc0-a6bd-e6cede71a79f"
        },
        "item": {
          "id": "a14f82b6-8396-4fad-90e9-6ffa58fb0139",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ee1e4d37-456b-402c-824f-882e5e281976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c1679d-79d6-4967-934c-60f10a6df775",
        "cursor": {
          "ref": "fdaef43b-759e-4af7-89cd-aea7136a42d9",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8bbf92f0-7f95-4f8b-94e2-af3a215b8bd7"
        },
        "item": {
          "id": "d2c1679d-79d6-4967-934c-60f10a6df775",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7a616007-bbd4-4496-a66e-6df4dec63262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0789282a-01f7-46a4-80c0-673db0b52027",
        "cursor": {
          "ref": "e0b63b87-4ee2-4ce1-8eda-10fa0bcce6e6",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d570cda9-417f-4c10-a98e-ff3926db82cc"
        },
        "item": {
          "id": "0789282a-01f7-46a4-80c0-673db0b52027",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3716f826-c314-46f0-b791-481861e05b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b999e7c-0930-4d46-9f65-6fabc5a76bae",
        "cursor": {
          "ref": "a62ccbeb-f700-4dcc-bcfc-693f7f279ce0",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9a50c125-1525-445e-ad95-8fed09fd8234"
        },
        "item": {
          "id": "8b999e7c-0930-4d46-9f65-6fabc5a76bae",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2813cfc8-b796-4bd1-9983-3ae5b5de29e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056a591b-57f2-42b9-8d8d-ea3c994660cb",
        "cursor": {
          "ref": "4d3e52d1-9877-46eb-9968-537f2125395f",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7a9e3326-e577-4c3f-aa1f-ac0670bcabb2"
        },
        "item": {
          "id": "056a591b-57f2-42b9-8d8d-ea3c994660cb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "61f2f50d-4629-4f96-a155-0434c266d8b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50c28ca-2fab-46e9-abc2-ae438354f0dc",
        "cursor": {
          "ref": "6fa86888-c32e-48b3-b040-3695e4168e85",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c6551ccb-a60c-4961-91f6-67eb898c357e"
        },
        "item": {
          "id": "d50c28ca-2fab-46e9-abc2-ae438354f0dc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "994c6bbd-87d7-4ebb-9add-02f1ac33dc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c90abb-96fc-4d84-8798-fa82d94e39fa",
        "cursor": {
          "ref": "98df575e-eb2e-4017-8e12-a62d9105ee4b",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9b9ad3eb-a5fb-407b-8e22-8dc6a28a3e52"
        },
        "item": {
          "id": "e8c90abb-96fc-4d84-8798-fa82d94e39fa",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "24a3c8d0-f493-450d-955f-1c6959edbc1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fab8ca8-0b90-498d-a38e-60542a35e7d7",
        "cursor": {
          "ref": "ac55425a-3526-4978-a58b-32aaa5c4bf0a",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "799be527-7a31-4b89-8d67-39c837ec61a3"
        },
        "item": {
          "id": "1fab8ca8-0b90-498d-a38e-60542a35e7d7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5abf03f8-7850-450d-9b11-34b419f7d9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0327c9-3136-44e7-9ddd-a9e42b2c129b",
        "cursor": {
          "ref": "dce53edb-c730-4d4d-9042-b7d3db3b84f6",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "69cf1902-627f-41d7-abdc-4ef305cfab22"
        },
        "item": {
          "id": "8d0327c9-3136-44e7-9ddd-a9e42b2c129b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2734f4c6-15bd-4f81-99d9-63d766fbed28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd22f94d-7e0d-4ab1-b08b-c4a2bc38dd3a",
        "cursor": {
          "ref": "e85354d2-fc1b-444c-af57-7f4c2d07041f",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "176bbc3c-3826-4aac-881a-9f735ae12f6b"
        },
        "item": {
          "id": "bd22f94d-7e0d-4ab1-b08b-c4a2bc38dd3a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f2fed555-9a67-4e43-a2ac-d3b7bbcad298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f27364-1b1f-486b-ac2b-c68ef1c9f2d9",
        "cursor": {
          "ref": "bb433167-48b9-4ca5-bec8-b75a988f0b8f",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b1505759-acd1-4cab-9913-b467cfe809ac"
        },
        "item": {
          "id": "34f27364-1b1f-486b-ac2b-c68ef1c9f2d9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "79158136-69f4-452c-87d3-3526b069dd18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b957461-8c5e-4597-b5d0-58a05e5409bc",
        "cursor": {
          "ref": "5a1452d8-ec29-41d4-9d46-d150be14e165",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f298976c-4c69-48ab-be0c-f1fcd614d3a1"
        },
        "item": {
          "id": "9b957461-8c5e-4597-b5d0-58a05e5409bc",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e29ec1c7-b256-4042-b200-c7335d8cd706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a106e58b-45a5-4e05-8b58-1535f48387cc",
        "cursor": {
          "ref": "62997787-5e7e-4074-9fe5-10ea04b87f78",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8e016fd8-7f61-4215-9bba-ff71523b4f75"
        },
        "item": {
          "id": "a106e58b-45a5-4e05-8b58-1535f48387cc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "50ec4676-5cc1-4b78-9f3d-eb583d40c1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfda74c-2818-487b-8b06-a0edd3591f6d",
        "cursor": {
          "ref": "af9f2451-7baa-4aa0-ba1b-e4d65916d6dc",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "81e4a59f-a25b-4ade-be90-f9b5ed2648e7"
        },
        "item": {
          "id": "abfda74c-2818-487b-8b06-a0edd3591f6d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3f1719ea-8f2d-4e26-9f8d-863538cbfe42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77199854-680c-49a9-9461-ce8a28333e07",
        "cursor": {
          "ref": "0cff2542-debd-434e-af49-66363fe7d940",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bd4977a1-107c-45fa-88cd-1ab7a7685b40"
        },
        "item": {
          "id": "77199854-680c-49a9-9461-ce8a28333e07",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dada4ba2-4b1a-4c06-81a4-8b1e63d4f6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1132a684-2a1d-44ec-ae1c-9fb6ce9ab925",
        "cursor": {
          "ref": "6bbcbe1c-9375-4842-89fa-f2d12d13c85b",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0083c6ff-7eea-4d61-a521-c85879be30e6"
        },
        "item": {
          "id": "1132a684-2a1d-44ec-ae1c-9fb6ce9ab925",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2af4654d-9499-4f8f-a087-7d9605216560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017df698-6c51-44b5-9faf-042ed21894a9",
        "cursor": {
          "ref": "8a3d4718-b472-4b7a-9ca8-040220dbaed8",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1be339a1-9f01-46ba-b283-96a136c177f0"
        },
        "item": {
          "id": "017df698-6c51-44b5-9faf-042ed21894a9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a4f2fee1-e8d9-4bfc-b73d-7116ff20c80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb41f43f-81ef-44a6-9ee9-bdcd32319f4f",
        "cursor": {
          "ref": "1790b10c-c952-4e6d-9ab0-c221f93150e3",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9a88f54a-b52c-4fa3-a344-882c95e04733"
        },
        "item": {
          "id": "fb41f43f-81ef-44a6-9ee9-bdcd32319f4f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "03eb71e6-f81a-4e84-8d76-e0697b62bef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c00697-6dda-4948-a017-52c67c00c12d",
        "cursor": {
          "ref": "02768616-e0aa-407a-af07-d29ab46f2f03",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a53a0712-3689-4bb6-b6aa-46d2b836a0a4"
        },
        "item": {
          "id": "15c00697-6dda-4948-a017-52c67c00c12d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4f5460f1-ddd1-48cd-aaca-bdb7b732007e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c0e5b1-348f-4de3-92dd-b7fd102732a3",
        "cursor": {
          "ref": "915ce956-a300-4e38-a737-06bccabfe3bc",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "21d8eb55-8b46-4bac-a6ec-1aa10b7d9383"
        },
        "item": {
          "id": "74c0e5b1-348f-4de3-92dd-b7fd102732a3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4b9b8ab4-3fc0-47c8-b690-a60462079e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc8ad8e-2571-4a2f-96ea-0790b989fe0a",
        "cursor": {
          "ref": "329042ee-5093-4991-aaac-9b717a2a6df9",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "12550d1b-42b0-4e1c-af53-d37a77ffcb02"
        },
        "item": {
          "id": "acc8ad8e-2571-4a2f-96ea-0790b989fe0a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0f9916e9-41d1-465b-ab13-c47a3841423f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60362429-8175-4a19-af62-8543eeb39f8a",
        "cursor": {
          "ref": "8889679d-4071-4481-acbe-c482fb4fd166",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c418107a-2107-4cc4-9651-c38bffbb29c9"
        },
        "item": {
          "id": "60362429-8175-4a19-af62-8543eeb39f8a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0aa38946-3436-4ae5-92f6-6f1d291f3601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0e3174-9498-4b30-be60-1dc6364d7806",
        "cursor": {
          "ref": "15958021-f6c5-48d3-b1fa-44f285050abc",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b3c3e2a5-5030-4c96-9175-c7119a6dffb7"
        },
        "item": {
          "id": "2a0e3174-9498-4b30-be60-1dc6364d7806",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "87d40261-2f17-45b7-bb57-2f8d363b632b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129bdc9c-db1d-43da-801b-f3533ab733b2",
        "cursor": {
          "ref": "16b20c93-cf9e-4d84-ab32-76561a20cb80",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f3d29558-ec0b-4e72-8365-9a7db75fbc25"
        },
        "item": {
          "id": "129bdc9c-db1d-43da-801b-f3533ab733b2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c478c216-bcc8-46b8-97c3-2aad436ab8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f543cc9f-d698-466f-b08d-693a15f7c565",
        "cursor": {
          "ref": "33dfdc5e-7c01-467d-9134-80d57231a49e",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ef10759a-a5c1-45f5-8d79-0bb18221848b"
        },
        "item": {
          "id": "f543cc9f-d698-466f-b08d-693a15f7c565",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e3aaa06a-7522-44bf-a7e8-8c487fdc9dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9516f4f-98b6-433c-80f6-7ca0fd779795",
        "cursor": {
          "ref": "90e8d4b7-262a-4bca-b9fa-129290113915",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5e716917-a05b-43b4-a9ed-89712e0d9eba"
        },
        "item": {
          "id": "b9516f4f-98b6-433c-80f6-7ca0fd779795",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ca9c765e-d3b4-424c-83da-fa46ba07c83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea879bd-3706-4620-a715-c4b0c96b2dcf",
        "cursor": {
          "ref": "1943a0b2-7b5d-4616-a21c-e20e4cd49937",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ee1acd23-007f-4342-a8e5-b6de73cc04d6"
        },
        "item": {
          "id": "7ea879bd-3706-4620-a715-c4b0c96b2dcf",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d66079d2-d326-4927-9717-57fd9065e861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df023ce4-bd1c-49d5-b0a5-927f4e446e12",
        "cursor": {
          "ref": "0a5558f3-d836-4e1d-bc98-09616d119d06",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "eb2c8232-acb7-4000-992b-db6d483679f6"
        },
        "item": {
          "id": "df023ce4-bd1c-49d5-b0a5-927f4e446e12",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0ded858e-a33f-460b-9350-2c19bfc3bd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b124e555-52a5-46bb-9325-60adf4132494",
        "cursor": {
          "ref": "dcfbad98-5e1f-441b-bc94-ca0a47e4f4b7",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9f7e8508-e42e-44a9-98b7-cec3e3592be0"
        },
        "item": {
          "id": "b124e555-52a5-46bb-9325-60adf4132494",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "dadd01c4-afd9-4e06-b50c-fca0cdd58fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e19b8d8-0fa8-4dec-81f2-ac0a0626e7ac",
        "cursor": {
          "ref": "69d7582b-c353-42e8-a3ef-2f013474b039",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b4b64cf6-3573-4701-8bbf-ca92efff1909"
        },
        "item": {
          "id": "6e19b8d8-0fa8-4dec-81f2-ac0a0626e7ac",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3537600e-7e2c-481e-8ff8-a312e101a99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa04f6d-445d-4bd6-a3ce-00f1f060254c",
        "cursor": {
          "ref": "5ddf55d1-6b35-488b-bc76-51dd6907e4c8",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7736fddc-9ab2-4651-8af2-c7f4a36d85cb"
        },
        "item": {
          "id": "8fa04f6d-445d-4bd6-a3ce-00f1f060254c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4dcd6077-d7c3-45c9-9e78-57f62877ab8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e62789e-6e8d-4399-bb33-8ab057a73ccc",
        "cursor": {
          "ref": "1eea4a06-2b2f-4814-9414-9baefcee6893",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "347670ed-1ccf-4698-9e0a-3436f502cad7"
        },
        "item": {
          "id": "1e62789e-6e8d-4399-bb33-8ab057a73ccc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9976b4d9-c0fd-4b92-9865-3e30748eca82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc39cd8-d07f-402c-a97a-514faeaef000",
        "cursor": {
          "ref": "74677a31-6774-488c-8808-98fac6511036",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c9b1eb3d-0dbd-49b7-9564-bde9f1750872"
        },
        "item": {
          "id": "1fc39cd8-d07f-402c-a97a-514faeaef000",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "59c62daa-6d17-434a-935a-85199cd2b7fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "25dc0405-ecb6-4c95-99a5-a35289b39a55",
        "cursor": {
          "ref": "6c19533b-08fe-4aa1-b840-9365d37d9dd5",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "866a3998-c1e4-43be-9862-922d7cbf3b80"
        },
        "item": {
          "id": "25dc0405-ecb6-4c95-99a5-a35289b39a55",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c46a0d81-a679-4d66-8495-dbdac2f18e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e2ff249e-2c81-45f1-8a37-7e47d5195d86",
        "cursor": {
          "ref": "03df8607-c7e9-4002-b8da-fd62f04bec6f",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e712e030-127b-4cb3-8bb0-fc9e10b9e381"
        },
        "item": {
          "id": "e2ff249e-2c81-45f1-8a37-7e47d5195d86",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "bf6320b0-1020-43b7-a1f7-9975fb35a7af",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7fa649-b889-4832-8b27-c3be2e846aaf",
        "cursor": {
          "ref": "85269e9d-dc67-426e-afee-986d72884e46",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "025e302a-2288-4b1d-9ed1-04bcb8d5149c"
        },
        "item": {
          "id": "2f7fa649-b889-4832-8b27-c3be2e846aaf",
          "name": "credentials_verify"
        },
        "response": {
          "id": "855e53dd-0499-4cfd-9cb6-b3ba95f96c3f",
          "status": "OK",
          "code": 200,
          "responseTime": 2412,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0585d7c8-2cc4-49c7-84cb-0971fbc16c62",
        "cursor": {
          "ref": "2fc87287-33b7-47f9-bd58-abb47c441add",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "517318a2-276c-47b6-83e9-f0e726aebe4a"
        },
        "item": {
          "id": "0585d7c8-2cc4-49c7-84cb-0971fbc16c62",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "eb051d9b-2576-4f94-be91-b9be92f7da42",
          "status": "OK",
          "code": 200,
          "responseTime": 2370,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c23b2d-a997-4df1-9553-2d77e5223872",
        "cursor": {
          "ref": "220c1ffc-a15d-47f4-84bf-228d8d82bc91",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2a680b2d-49bb-449a-ab08-96b6f163fb76"
        },
        "item": {
          "id": "91c23b2d-a997-4df1-9553-2d77e5223872",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2f8ee786-a39f-45a4-b30f-76fceb3b5297",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "91c23b2d-a997-4df1-9553-2d77e5223872",
        "cursor": {
          "ref": "220c1ffc-a15d-47f4-84bf-228d8d82bc91",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2a680b2d-49bb-449a-ab08-96b6f163fb76"
        },
        "item": {
          "id": "91c23b2d-a997-4df1-9553-2d77e5223872",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2f8ee786-a39f-45a4-b30f-76fceb3b5297",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "91c23b2d-a997-4df1-9553-2d77e5223872",
        "cursor": {
          "ref": "220c1ffc-a15d-47f4-84bf-228d8d82bc91",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2a680b2d-49bb-449a-ab08-96b6f163fb76"
        },
        "item": {
          "id": "91c23b2d-a997-4df1-9553-2d77e5223872",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2f8ee786-a39f-45a4-b30f-76fceb3b5297",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a449c8f9-4913-48cb-a9b9-4ebe28c934d7",
        "cursor": {
          "ref": "f34124f8-04ac-4fb3-8775-04fbdb870324",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "14353c8c-6e87-4258-a59d-81dec116fbae"
        },
        "item": {
          "id": "a449c8f9-4913-48cb-a9b9-4ebe28c934d7",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "95639948-8a82-4aef-912e-5ab97bedfb3a",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7fe6b504-7285-47dd-b145-3beba7efcf9d",
        "cursor": {
          "ref": "39c7aaa5-3c82-49da-b427-eea4f5144fdb",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f24e0cc9-9fc6-47d6-a180-fd6e854a0d9e"
        },
        "item": {
          "id": "7fe6b504-7285-47dd-b145-3beba7efcf9d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "954eed10-0128-46b1-a816-cf22d3757b5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7fe6b504-7285-47dd-b145-3beba7efcf9d",
        "cursor": {
          "ref": "39c7aaa5-3c82-49da-b427-eea4f5144fdb",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f24e0cc9-9fc6-47d6-a180-fd6e854a0d9e"
        },
        "item": {
          "id": "7fe6b504-7285-47dd-b145-3beba7efcf9d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "954eed10-0128-46b1-a816-cf22d3757b5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "53796d60-6903-47c4-a8aa-5a3232498839",
        "cursor": {
          "ref": "3fa3269c-7268-4d44-a343-653c87c64aeb",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8581d069-b9e7-4c45-a45d-cdf51824625a"
        },
        "item": {
          "id": "53796d60-6903-47c4-a8aa-5a3232498839",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ce772e93-173d-4ca1-bac4-b1db1ec1533c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 206,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "981b7035-2a7d-4b92-9059-2a23000b2311",
        "cursor": {
          "ref": "f7879ae4-e93d-48e7-875e-898ceeb182ce",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "19d606fc-a22c-4dc8-bb5c-41070ecb8903"
        },
        "item": {
          "id": "981b7035-2a7d-4b92-9059-2a23000b2311",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "622c60cd-73bd-4d6c-9f9a-fa3b6b9934e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "981b7035-2a7d-4b92-9059-2a23000b2311",
        "cursor": {
          "ref": "f7879ae4-e93d-48e7-875e-898ceeb182ce",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "19d606fc-a22c-4dc8-bb5c-41070ecb8903"
        },
        "item": {
          "id": "981b7035-2a7d-4b92-9059-2a23000b2311",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "622c60cd-73bd-4d6c-9f9a-fa3b6b9934e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "22e8e53d-5f10-44ce-88b4-603ce0bd861b",
        "cursor": {
          "ref": "c81d10ee-29db-4cff-9aed-4ab34f3a4400",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "65b2a924-e32f-4809-aff3-9fc9f93c22ad"
        },
        "item": {
          "id": "22e8e53d-5f10-44ce-88b4-603ce0bd861b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "62a060be-e847-4bbb-ace4-3c364f949b46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}