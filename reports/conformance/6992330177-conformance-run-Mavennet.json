{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fd768f37-6015-4916-b3fa-6fc478c36cbd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3bc75751-6dd9-4835-b052-6264e4c29553",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "43c968da-cc35-4a09-82a5-a905ae24b1ae",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d082e61c-e161-4461-add4-95494cd4e31d"
                }
              }
            ]
          },
          {
            "id": "0f31d11c-b02b-4092-91e7-a53e92e310cf",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97d2ffdc-e004-4fd8-b7b1-c8189a943fae",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fc1a8b7c-3183-42f1-91d2-5b3c8438cfe0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fe5b8242-f884-4478-b88b-73f98fa018f6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "26c1f4b5-ed0b-419b-a7cd-d47efdb35e93",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a87f710b-568b-4da5-882d-b6dbfdb85d31",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7f777c4-129c-4bb3-9d0c-00dda636dd17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1965766-6c07-499b-be83-13e6c3663676"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4ee26da-ba07-451d-a06f-24bf61b64626",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "832f186e-4a8d-413e-8006-678f8ee7d9f2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc5c03fd-0314-4f29-ad1e-90bc44f48ca2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09f3eb29-6620-4119-ae70-70f3579b1a35"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57ed4e4c-e030-4842-b11d-521a54f2bf1a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1ded4cc3-6639-4bfb-9d22-689de2d12167"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "417ff2bd-605b-42f9-a127-db611f1c1373",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2c310cc-e45d-4247-9251-2a88e864bebe"
            }
          }
        ]
      },
      {
        "id": "e1852a10-a818-4fe3-968a-ef23157ca2fa",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4c1c5d1e-7741-4dc7-8a67-b3a22e4496c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "296b730d-f241-4028-8184-fae40b449e85",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4d3776df-f8bf-40b5-a796-8f729d6f57f6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc9de95-46aa-419e-8e4d-c6cea119a60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebe55596-d275-4d52-8829-b6d8d425703d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d83f567-5ae0-497e-8571-37218b4aca0b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992e2379-0390-4ffb-a064-ad502aa01931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d08c167-1445-492c-9dc9-49d953c0aa1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f81853-a74f-4bda-b5de-141f79d79113",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0bc860-c807-4181-a821-00d3ce4a0a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2383277-b127-46d3-9468-fe95bcfaa0e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "90cc37b7-42ca-45c7-842e-108aec984675",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74cda783-f2e5-40da-bf78-902963d024fe",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aaef26f-865e-4123-bddf-1fe1b992f6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d088c869-1691-4f67-a8c9-68e78d03371c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbdeb232-a2eb-42e7-91ed-9c884232c8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eebcc235-79e0-4ffb-96a6-a3a0b23275fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f1aef119-5ddb-4da6-a1d5-1fb4a6939257",
            "name": "Positive Testing",
            "item": [
              {
                "id": "91ce8bae-f11e-4141-9406-e494567a945b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e53e609-ebc6-4088-9acd-2f134bbb590b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a3483a8a-57dd-4899-89c9-a57339af20bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb9f11c1-baa8-4a30-821e-e1ab66e72137",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5211eac9-b3ce-4639-ad33-33417369184a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8b0c53e-e993-4d2b-9ec6-e15d29123699",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25c4c969-04e1-49eb-8c96-c0af7c79f8e1"
            }
          }
        ]
      },
      {
        "id": "a7d7847f-7b67-4c5e-b197-53be389501a4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "17607edb-6921-4c7e-8b43-662928d0283a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2c401d9-f499-48f7-b593-914f2b7e2992",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9bec6ccb-0ae7-4ca0-b5cb-6a75e6c020ca",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0de6e50-89f5-4509-a00b-479070cdc50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "268a3d48-4efa-4d60-b009-198002ae3fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0f5fa1-6617-4f7b-8814-dd28fc1148e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e30fed3-5a70-442d-af14-06df0d036c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6fa766-a6c1-490d-9908-413e7438f930",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd657a2-25d1-46b6-b5f5-8ebe72347eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d744bffd-d1e2-45a0-837c-27bdf7bbe317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15685236-0612-491c-ba4c-0c23a229564c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de46d763-b2a1-4b7f-93bc-81f5e113b1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5aa768-d9c4-452c-a3d5-9d873ab4d48b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8feedc0a-5f7f-4993-959b-bb20b581eb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "861288a1-8cdf-4534-8167-be3947e53037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54185c3-2fa1-4a8b-9b38-8c5948d0e896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbef22c0-9c0f-4526-a5a4-d60f7ffab2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c768eaa0-87e3-4e07-9240-d18d030c8d66",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafebc21-33fc-4707-935d-649ab2af2c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29986d86-e8f1-44c1-b573-658f6f4818cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dac4286-bed1-4c86-9cc6-e61432c46a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7503869a-93e0-4e53-b2bf-dab14b8049da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455ae671-a5bb-4aba-9eab-d442a0466a05",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f3de19-491d-45fa-8887-2622f1de3894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaee34a4-02ab-4cdc-be1d-2d66451f25ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9170c129-4700-42c6-9f3c-d9f368113c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca12a2ed-529c-44fe-975c-595179321c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3433ab1d-b50f-4eb7-8efa-45aee4b7d3dd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f05e8ea-50ba-456f-9ef2-ab265644e6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d37174d-7f58-4c12-9918-f3c8613842b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524819a9-d767-4c95-b1b2-d8636a8d77c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "719bad25-bfaf-4904-afc4-933ac60c1823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4191ad51-2431-48fe-897d-142ade690509",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0ccbc0-854f-4d82-b838-8cabf2c2ceae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75f3bb8-18b2-440e-9b41-9e7a3bc64d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74f6cb5-e51d-44ee-962e-8692f29b772e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88a9a3ee-2c12-4545-8ecf-a271fcf2a2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddac1407-2543-47d2-9c37-df64c500ee2c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0b7301-8199-43d5-a4b7-0664eda7f317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571870a6-7279-4d25-b80d-a07bfbdd008d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6064503-bfe5-41ca-b58e-f43b54fee945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "969d8bcd-3b06-46f1-a607-3b9eb8e2c9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8a1dc5-5958-44fc-9723-b1f2c4f86892",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9b3cdc-85c9-4fc8-9d1b-ddfc27cfaf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3e6fec-9f55-46a5-8963-9615e46fed24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43beea40-7a6a-4bbd-a7df-45dc1a475d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd5a06d6-8aca-4902-b130-0c912766a9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a93097b-4e8c-4a43-9496-d51f54be9101",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9f4600-cebc-483f-815a-2704de1ba498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd10274-23f5-448f-bd0b-daad9947c5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdb4265-4c39-4d02-98d9-319048606eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85947af4-3459-4de2-affa-6a06e7af0837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992d6aa7-0885-4d0d-92ac-8a49698aa14d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e5966e-3cc6-4ae9-851b-01c86e1cfa1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06309823-f0dd-47cf-9151-b87adeadf9e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494cc583-bbec-4b7c-876d-f72a990d5312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2df66cc-74ae-4677-ba89-3ed770611e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec49a2eb-50c3-4ea0-a4b8-327d0acea267",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d7e7b1-b224-403a-b919-9451c382bd7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18867794-e1a2-48b5-a0a0-6d0c272f8f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76ddea5-b4da-4414-b44e-06d7c5c24757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "248e511f-fabb-48f7-be20-b09c83a9164f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466dfbfb-e70a-4e43-bf54-cd8d1c7aa3ac",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb12d7da-823d-4c60-82d8-123cb329c38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a81266-82c8-419a-a982-0394d30f1d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d8ce05-422d-4ac5-8231-f0ff312d0d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32525061-29c9-4bde-bdaf-e676e4a343b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d97fe00-2cd1-49b4-80fe-f4646e732443",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632aa52f-7cd3-4e83-bf89-1d15524fef15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac27bd20-f2ed-48a2-ae2f-7ea013cc4c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8d3849-dbb9-49d1-bb72-eb5e5d0d4f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be7adddf-5ca6-4e39-a642-22b7230c6cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99eedfa9-677a-4071-b691-c5b79b750bd8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fef999-14eb-4beb-b0c6-ea139866d320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdbe418-4f6b-4950-9cee-49f395b0e151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c519e73e-5453-47f0-8d06-c8b9458819c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "638afe9f-d693-462c-8385-35283a96e7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e428ed-c677-4c22-988b-f40faa05483c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d46d0b-ff39-441a-84e1-8268a57f13dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5fa523b-c3ac-449d-988a-a6c73b8fe50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521d58b2-cbf8-4f4f-b53d-9106f14694a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6399d26e-0689-4df7-af8d-b556806c5b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51721ec5-75ed-4043-b4bd-c714e8703fc2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a9ff4f-2c39-4ca6-9d90-2de416db82d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a664f7-f7b8-4ee2-a961-23679d7c876d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9f39d5-6427-4994-a916-ddad0582c295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "760e682a-a23a-4efd-8064-81547b3468eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36dbdc8-5fb9-46f9-ae4e-ebe50ddd0cc1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c92fc62-ca40-4002-bbd9-7d9d71432693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872c144a-7f22-4d8f-ae58-117ad37cbede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb9eb69-8ef0-45a1-9dc4-33cc0e98923f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd4d6da-922b-49b7-8400-61376f57804a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e47af35-037a-4a18-b0fc-fec6304dda24",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be53a10-4b05-46bd-92b4-d9be94eae05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e7c335f-44de-4c5b-9825-822e56e3d8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00f3d8e-15ee-450b-8a76-7fea0742db25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d24297c-fb48-4128-8c0d-38840606c52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f266c30-7da3-4656-afbb-a099c04e5aed",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8be0f1d-96db-406e-b739-1dbe41cd4c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11573018-dfef-40e2-88b0-07e1111d35b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97822152-225e-4e09-b4e7-812d5d85cb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a8531e1-e834-4025-ba09-71aceb8e885e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39686577-43c3-4013-a590-0cb2b37551c5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a187f186-fbee-4059-8a75-49c19ab38e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ede90f-f508-42d3-82a2-5187ce43f60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65d4907-d184-476c-9387-950835e812a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd6f184-ffb8-480c-91b2-1ff36a7cc35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3160b8-f8d4-48db-8c60-cbcc124d7b34",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2191ca0-65a8-4db4-a6f6-56bd8af4ae10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8be1bc-a064-48c6-8f84-553355777ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c1fbd7-2945-4e9b-ba85-9167a5b113ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0afee493-530e-4c75-ac6c-9413d1921333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16a4bce-0c1d-4412-aa8e-ba8cdbbc1fa3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a963daee-e081-443b-a6bf-6e8467991386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0108b64c-806e-407a-8282-fc2e49fd8eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82cd8cc-5c72-45be-a1d6-0fd594abff7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62901a17-0f36-4609-b48e-8f87327efd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cf40a9-069f-469c-9616-83c02df79565",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7446d3-c3b7-48b0-92bc-21149862bde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139b529c-3d79-4a91-9dc1-b01520033244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccf1fe5-4640-4d97-ac1c-4cb24a286d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "417caf33-942b-4e4e-b9d1-f506ef06712a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb0dc15-a5a1-4410-a735-8d15021e0956",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fee8ad3-8ef9-41c3-a9d4-2c73a1bb1ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d2f292e-5714-4be1-b11f-845aa5f334e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c360322-b439-4b04-97d3-ed8c092d65a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "02c49f8b-6287-45bc-b008-3562d2577795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a492ee9a-071f-41c7-bf61-d1650a87f8bf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30640545-8d26-4b52-8c27-ab8f6511ce8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db57f1ee-493c-4562-bcf6-edbb5bb2dbba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f611c2-f964-44e4-a515-6d4cde1df220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c67df4b-deab-48a9-8445-1ac5e088ad8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d033a348-4331-4646-84cb-3b511e008815",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a4c720-932c-4854-bfd4-cb26909e358b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bbb0c51-3657-413f-824a-1538525572c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b4aea9-95ba-466f-9e56-df6c909e442e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7e0a6b-2415-4805-a955-3768925722f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7939eb4-35fe-4f9f-b472-2614cc63f923",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb8deab-d61a-44c1-ac16-a1e07ecf724b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3093621-1fa3-455c-8b6c-8af65ab01009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e214a52-a9d8-48ee-ba31-9a8434938ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e79b3d18-3d63-4d3c-a45f-d563f8ec21b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf97ee07-5d92-4497-ad7e-dcd89a7f901b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48f5029-f7dc-430f-9350-e1151ce297e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ae7cea-813a-4f28-a9c3-7bdf1911bd05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbe835b-5226-4bd4-bf30-3479c52a0df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c23887ab-25bf-46d9-8494-0b565520ab02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b45377-b840-4ee0-a868-de1efcb1e478",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e50374-28c8-4078-8710-de06bcf67af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aecac8c1-e710-4249-87a7-95fe50b0d332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad85579-16e4-4501-9386-20161bffd123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "913522ae-ceee-4ff1-bbec-5305b7bc8edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de08764-507b-4063-b669-f4176b16ed4d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133c5621-52ee-44fd-a47f-375eec75956e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84e54bb-3dfe-4f27-8b13-5f5139d6ee28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ebbac7-2a6f-46cd-9224-694e9a657541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a8f2a00-5333-4e45-bf8d-11708376ab15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76dc2d2a-9d95-4067-a4b9-b8b6344af8d4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9799f355-50b4-4682-b27f-d52598e81266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e63d969-2b72-49b5-8d8d-4585fbdbb69c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f260fe54-0ade-40b4-9ce1-787edd89544b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3ed768-04ab-41b0-9e33-91942ac84dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357a3161-978a-4dd2-9497-fe9b21f781a8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15da8b16-0b66-4e7b-8f49-9f680ac74d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3640678-904c-4282-af21-305a25e9342e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1683e33d-2115-43e5-9cd1-ea4cc3fbb7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "537a48f4-39d7-4f7c-a146-f8ce6acdd3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1dc5cd1-6bd6-44fc-b0dc-2806dab47c91",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e081886b-81ce-4309-88be-faaabf3d874b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389bad32-5daf-474f-a707-7bea9e223b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d555c2d0-c632-42f1-8a9c-f9f3247bddb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04ad9ef7-fe90-42d3-ad33-940ab0b12dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d9c7ab-2691-426c-9d37-d114298a5525",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b140ec-5734-460b-8802-d87601434c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da84030a-941c-467d-85f7-e38cb90dd73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806ad65a-2387-4f41-a58f-a65a521b5c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2746a291-36a4-4855-835f-bcaee406c707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d4d67c-8452-4700-86e7-585e7a7d2b10",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c89247-5dbc-4c0f-a60c-a86e83d89ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "221fd2ef-ff3d-468d-aab8-40dfd715564f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccf357d-6110-48be-99f9-247a78a3429a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6616fa0f-4fa1-401f-9ef6-e35cc5cd31a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a01fb85-2726-448f-a621-fe6fb3278924",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea472835-b91a-4b51-802f-dae299c76926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bc3311-ea16-45ff-ac33-bcd8478d7d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623bf373-6a4b-4439-bf6a-def3cbe97c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb5c989-ee86-44f7-81b8-1d0afd732f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247be295-41f7-4142-b9c2-29d14bb4b422",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5469fcf5-e063-4d0d-8cf2-5269a0f38790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d0fcd8-c664-4486-9825-da034be91fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e47a8b-701b-4aba-8fe1-65b40647ba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "739cffc0-8d91-4188-af06-b18a438e9907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7457fafe-936e-4c9f-a4d8-ab6cb11d0ce7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c79ad32-18ca-434e-9151-8147b76005e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f722a4b0-0a62-4378-8c15-941f928fda12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80c0f0c-65db-465d-9031-9f0b720f959d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "773cdfec-ec56-421e-8c84-bf952423ecd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5108f309-975d-4cdf-b31f-2975b49ab90a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54239ff9-78fb-4061-abf0-a6551e33af99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45dd6f2b-82c3-4674-ad0f-3344dd7f7ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37003af-7043-481d-97cd-e7ab5bca734c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "786850a0-a8b7-4244-8c77-8c3adb7bcfc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccaafac3-9630-42cb-abf1-0289d273af74",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b28207-5608-4a9f-8594-114e65c8757c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4759912f-205c-4c12-ad5a-a76337e7609f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94352a8-3e88-45e4-a873-67ced23c7d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0603ed92-ccb9-4448-b244-3ee01758f46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f78525a-cb5e-4033-a415-127348f19fea",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28676d91-0a33-4091-9ab8-bb5338443819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3adf94-091d-4128-ac2d-95b816f60bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7baf0b-7a1a-4ef3-9dcb-a4e4816ddd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2b499669-cb23-4b5a-9efc-48e30af3d072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1092a8cd-88dc-4889-b983-f54dfcc823ce",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81194521-0fa6-4fc4-b46f-5958c0e837a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52cce48b-0742-4a59-bf3e-e0fdf55897d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8c358d-9611-4bff-a26e-d92e4906c61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ecde22d-0388-4a9a-9ceb-86a653bfb8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce5198e-ab3c-48e7-821c-b388f7429f08",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e17d9b-910c-47e8-b62f-172241750c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3f7ea4-75ce-4433-8d56-205a75eb6b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38a7587-5022-4a72-bf31-ae1b3b938b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "507fe471-4432-43ff-994d-6ac73162d5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10093413-d2e7-4db9-bb31-ac4f9e043096",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc49b6b0-23c3-40dd-be42-01e20bf526d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "104ac271-46c2-41fe-9415-386a36d78862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabff1d0-b847-4d52-b6dd-233cf104e506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb0e05b-e6d0-4a06-9753-cd2877be4cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1136bec-d647-4ef8-965d-0075a5efb9c3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8798088b-3be7-441b-b689-bcab61780b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52d67e5-dffd-40a5-869b-98e3d044f976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "babc52f0-b72e-4345-a9d7-9c19a4afb070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2251d9e-2bfc-4bfe-ae17-4aa16feda86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f39530-c82e-4b76-aaad-73ac505f3a3c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830a5057-0bda-430c-a803-5e6575de6ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505fd48a-1021-433e-b991-d1a08d703545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbf974c-0df8-438b-91af-75b531011b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6aa5dfa-edcf-449f-b878-f0fbd741b8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedb7d3c-65e5-491a-aab5-f70931327977",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2934e586-ac2f-437d-949d-cbacba129953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4f62e6-0257-474b-beb8-7448ac108bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4777d221-c823-478b-9e4a-59b6ca468e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5af50eb2-8c48-4779-b403-604edcd4fb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17411d9-4b1d-4cea-8b56-eaf1dcb5d05b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "050ab3aa-d41e-44b4-b0e1-f27828780fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741a00c6-793a-4557-a50c-466b9ad5b0c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1eb1af-53f4-42ea-8a38-460133af3829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9904cbd-5603-4e16-9025-64680f1a9d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529a1434-3251-4dce-a739-662c10c31a3f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94089b4-3365-4575-b246-3cf0a15bf9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b113287d-9b46-4d37-9109-98b5061e23c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114dcd85-4fbc-4be2-beaa-735ffa08c079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "395a01bb-ef12-4443-86dd-c2b3d1fd0044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143b41d8-a408-4822-b160-bf48971cae47",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59524a85-780a-46c6-9ef4-c07b6f93c739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3f6c73-c713-4cd5-b4e9-f323628b2909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772aabf2-ee65-487d-9fa8-2edbc4e73ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5c16fc-ca67-4d13-9b21-029d434a656f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefb77a5-71b5-4aec-9873-01995e58e6c9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d941c5af-7bb0-43db-851d-cd6caf151a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8a5ce0-74e4-4203-9ae5-eaee7be651e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03350235-a5a6-4f35-8d56-eec24894d4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e20f54c9-232a-4c40-adf5-4f02d03eccc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9584bd35-e341-4258-85ce-e6b5a71dd762",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01454f11-a0ca-43fa-b985-c2935bf223d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a7daaa-1535-42bd-8f33-48d1d7c73907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8832f217-6d63-4ca4-8226-7bb25dcb30a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7311a308-02c6-45b1-9be1-89a79081d473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0396b758-d64e-41bf-8b12-fc1bebcc7bde",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0894d9ca-11d0-4ad5-9a5e-18dd3020af1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "602643ca-6c48-4b90-98bb-dcf8bf01f877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e2922b-7e03-441d-8bb3-f9f097939c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc438f98-a4ee-480f-a3ed-c0a3c35ae4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b504cc7e-6b42-4a8b-845e-bc54fb763dbd",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b298a4d6-eac6-42bb-9016-2049bcf1d80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94483f7d-53b5-40c0-9f91-46e149195430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946db27c-45a0-4df8-8d5c-aaec16ff4e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca58a0a-cf1a-4667-b34a-013c56c9747f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea91dfe-496a-4f95-85f3-fd4ca65f5be8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1c4b78-c66b-47d6-afcd-b0bcff536e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e42724c-cadb-47c6-b195-6b1bdc83e0ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f912da1c-de2e-4998-b38d-2c25feba5263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1d50776b-2b2b-4e1b-a000-c44058f7379d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea21a3f-e408-4936-8a12-2f032eca3620",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6565c3cc-4f47-4e42-b1e7-063f747a8024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7aff702-7e63-4e30-856c-e468a9cc9be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52780895-1131-47b1-a849-23aa750e41e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "95301ae7-7a6a-417b-a1d5-f2274fd2490d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676bf4d8-fcde-4d23-be23-1fde3601ceb5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4643b9cf-e0aa-42e6-84fd-ff70e71da5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a6be1b-f304-4cc7-ad9f-868dc6ee89e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9942d0a6-1889-452c-bc8d-b43b424c432c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2589626-6cd2-4b71-b95d-fff72f4821b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ba22e5-e385-481c-bcfd-a0467d26df39",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c16796-e136-4232-9c9a-67105164b083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084a009c-0698-4d52-b8bf-c1e23b32051a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586500ed-57d7-42a3-bba9-885e3eb971cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "783198f4-1f8c-4b6f-bb92-0733232132ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604d68d0-7eec-49ff-bc60-134c87945235",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b02c95a-b163-4a51-a0aa-d88180f6556e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d1a2d4-2e47-49f5-b19d-6f3054fae75b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9facaa9-ae8e-4c6c-8a1a-66bb95e6a708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "12d5a1f7-48df-4935-936a-b93ff30637b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c542d2c1-a624-46bb-8bad-a13111e8eae2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b06c84-c4cd-47b8-87b1-3c82c20d22c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a53656-578e-4079-ae9e-d8108f083f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38958c3e-a941-40ab-b955-099d20178367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "de65e6d4-bdea-4954-a6fe-a3271cf5cf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79027362-963c-42c6-a174-c9046abc8d80",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5406d15-4960-4d13-af0b-e49235e81303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72630829-07f3-4d69-bbd8-294370a2c691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f0666f-466e-4fd0-aa95-c535fca91330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a663ad-f8da-401d-ad73-8fe4fa79e0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9596228a-53a7-4020-8226-a65609804ae4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f2dbed-a537-4639-945e-a15c55fef63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5bf143-8a17-4b8a-98a8-aeec9eca5045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f7116a-4f72-44d5-b5ef-d39f5dc9b72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c79c02e5-223f-43ac-9d33-75829e9276d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d3c209-9a6c-4aae-93f6-5e0846942a85",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aec6262-8efc-4a9b-a38c-fb110cdffba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb14b050-15a7-4842-ab7e-c4b041ad5d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bc3678-69cb-4e83-9cd8-16224ad95159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef691c3c-10f6-42d9-b8a6-97fec77b0f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854dd2e1-919a-451b-935f-7884a2efc6f7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a912ddb-ead3-41af-be0b-bff4ac19264b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac484d2-88eb-445b-aaf0-57c2846f6d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670f8906-0b75-43f3-904c-27ae87deaab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c705bf80-95c9-43b7-bafe-9d4498f624a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d71268-4aab-45b9-9395-272b2515f884",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0d6481-e42c-43f6-8e05-cdb2828e1692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fafbd4-b7b4-4333-90ea-1fa801a0ce73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e8caf1-eaf4-45f8-8dea-9f4267e9a498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4699cb9-e629-46da-88d2-a4a5f7c2bd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7545890-8ce7-4fc7-b6ae-22b6ed5a6bee",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb92c0e4-a7e8-4a35-92df-fdef1cffe37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c2bc44-fbd2-4da2-836d-a561412dac75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a00b1ac-fb76-4737-9f07-9fce06aa272c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4364ffa7-4522-4eed-8043-df404d7cf949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d86758-0390-4aa1-8440-f0eab21091cf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1342b47a-c6a5-42bc-93aa-6c8469c266c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c5b80d-3b19-4928-8aac-ba9aa9d1fe72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b096f58-2531-4ac5-bb6e-90e737513f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e01903-27e1-4518-97aa-6882d78d6cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aaa39f2-110c-4e5b-bc33-bdd5a54b6577",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9e89fd-199e-479e-8f70-7b0440cf8fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a052d19-b7eb-44a3-a59b-a85140fc4b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d20bcd7-1ce3-4463-bfa6-4a823d866798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c594479-83d7-4812-8521-fed5aa84d8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9866b3bd-8291-44eb-89ea-9f29eb027d25",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08d84c8-8739-4114-b770-3f66c0549875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f6be85-9a2f-478c-9961-6f185b94c46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33f94e3-f67a-4628-812c-68fabaeaeb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ca1caf-908f-4cb0-a220-d469a754f7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09c4d0b-d0dd-4659-9bfb-4ef1762979b1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f436e64-1b57-4719-a2e9-7bdfbc75f640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2226e59d-dbcf-444d-95c5-52157c73ff0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e115066-3c6c-4792-a99b-0840daf2d59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c318bc29-fe6f-4401-b25e-295ec0823850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abd368c-e20b-4a26-b5fc-8e8f26d4a7eb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa715e7d-8668-48ac-95b2-c3f24277551b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e2b602-1b8e-453c-beb6-66e1d22ab962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0d0f27-03e7-4797-8033-771ad6987f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f06a8407-a53e-4c6e-a323-720248b18d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2664bf-c832-48f9-8c52-7a0dd87b12a4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2aad222-e508-4b65-a30d-04f07a54091d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ea47dc-58de-4c06-a71d-87aee109741c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833cbad7-4527-42d0-a101-8ebbc5564479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca312a33-e1f2-4fe1-8268-a4c275b4c2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5681e61c-83f8-40ae-a861-80a2a8ba8dac",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ac7235-b70d-4358-bd70-3f81cf3ef636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e8b2c4-0466-4d89-80a0-39f79ee33379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7eb28a-5807-47af-8718-c7f35b0d50b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "012edb48-c1a3-49c7-9f42-9b35e77482d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419b04ef-0702-4648-a5c0-89b6c970a809",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ad70f3-2292-4c34-8cc1-b2ea6348114e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70b673b-0263-440e-a13f-80f3dfc97bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8e7f64-6ce3-4dfd-9735-d7a4a9aff51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3f7f2d6-fac5-4c76-acd7-ecd6f2b7fbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28589ba1-0260-404e-8713-f18c4bd28cf4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018a78a6-2b9b-4205-9251-ad6cbd0de1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f9583c-55fa-45a2-83f1-8f7473648ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2075e787-622e-4960-8e02-c787797a7f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c3b577-c44b-4adc-ac18-495ef86e15b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cb71e2-b621-4186-ad78-21de95fcb3a4",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d87918-cd09-4a04-af8f-db2c1b8ee04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d015461b-b467-4662-9518-abc9d141d92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf97fcc-9d95-4ef4-940d-895d1ede01a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb640a4-5485-4337-b37c-786bd74c675b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5c24db-0c10-4a4d-8845-58b31df9075f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c67180-20d9-4744-adcf-77ae6339ef36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7fc28e-feed-40fe-8b84-fcf6b39476db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3b8145-702e-4aed-b2f1-9fa31ff9a5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a63bc02-c959-4450-a3bc-ee07b2c83023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5303255-ddb6-41af-916e-27d068edbafb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4dd373f-cc4f-4677-8c8d-04baa005459e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485162e5-98dc-46b2-94de-b00ddf03774e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7189c5-ba2c-4ef4-b2f9-cf3357fa7df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2af9a99b-cd84-4005-94cc-ba57bc80144f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e57d423-5774-4650-b415-e9a616d04a36",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c504b569-d132-40cc-888b-d28d0978308a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2955aa6a-ede8-4099-b5f2-13759662e237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1b8373-01aa-481b-97eb-620897e63aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "135536a0-5eb1-4731-80a1-0d44cea3ca74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43895048-9df1-4796-b915-67122256d3c4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29532181-53dc-4421-96e3-91d0759692be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670c9f91-4632-474a-87cb-a6f4c98ac5ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040e91ce-d0a3-4e4b-96d9-274ef03639d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd177572-a110-4539-b243-9a79f0f3a5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c08561b-074b-4484-83c7-4c08eff0ef98",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27722272-f17f-41ec-a146-fb3ca25a80ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d454ee-e4cf-435b-bc01-087d3dd9d597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67a63d0-4ace-49be-a230-27d950d167fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb7c093-64ea-46b0-8c6b-76ad7e00c202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f79f61-c56f-4d52-9bc8-ba6f81e2896d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e0384a-83b9-4aaa-ad1c-1ede1fc63b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06150dbf-ee07-42d3-a550-869b79ca7174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c153428-36a4-45a2-bd72-e2d1fb7f8f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e34604-290a-4239-b28f-2e8ecf1b87a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91121217-288f-45f8-828e-a9627982b67b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8358f2fb-5d6d-423f-8b48-358e10e1f5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d721490-e173-48bb-888a-002f54f50695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73208148-d27e-4257-98ca-deb42e08e7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf81381-dd74-4c25-a941-48988b91427f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3fd1a6-b5b3-48e2-91c7-f335376737ee",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2906ee-9586-40f3-90aa-a4c964b9e2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e18fe4-134e-4c64-afc6-1acd4bdd17f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c593318-aa27-43f7-8309-6d6be579911e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce0fb2b-10dd-48e3-8fb0-dd165045d047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5a0a15-91f7-43ab-86d0-562477918428",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f646c1-23d2-44b7-bfd3-62b86454935d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dee958-cadc-4e88-83bb-abe4e969f8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2b0629-e0b9-4666-ada4-f9a16fb7891e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1efa9e30-a8f2-4712-9823-30fa006a5386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a2fbcc-2305-4853-84e4-c8bc285d9465",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e37f08-655a-46aa-82af-6f41beff89a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c951f198-9e8f-4305-a885-c96f54c9b486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f6d652-d244-440c-82f8-f6ef0b0d3e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f080952-09e2-4167-bb05-dda9e506194b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c9c168-65de-4b48-b6ea-05d52a54929e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a83fd3-0164-4d32-968c-a30bda9c5b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f60f3e-ed74-48ba-819e-855cc1d4d4ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82744260-89a2-43ed-94b5-6d5990f39aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9460f2-459c-4d70-a683-8bad56c385a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61320182-5f81-4b06-b614-91d1faffb8cc",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83cb435-7558-4034-b519-f98ff819fd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681c0f84-07da-4139-8c80-897ef41480f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f38aea-58b9-468b-bfe0-21678870f2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "220057a2-5a20-44aa-aef4-682884933bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988389f8-36a9-4c47-935d-ccfada65f201",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81505fc-5ce2-4c9e-a8d7-837e8721e434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d8eb86-653f-4423-932c-a8b22e243169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ab35da-bb63-40fa-871e-d4c9590fedec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9266a015-81b9-40b1-b885-94edd3377d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689d9435-8b2f-44df-a660-5903bde37d87",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28aba1a-0fb1-448b-a4dd-2f1d93945ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace54070-de9f-43db-83bf-c075548bbefa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7df3e7-440d-4954-a661-f3d6b9aae257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab0d9307-4578-44cc-b2d6-efb081389ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb0267a-96a7-4b82-814c-4e6c095a2d7d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee86893c-391d-4935-80d9-7000a8af0237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f16b275d-4d11-41f2-a478-d2bdc50d3c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199bf87f-b164-4436-8f88-2f30572da4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a57a492-e679-440e-84b9-094f2b58d51f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "92126bfd-dace-41d8-b8cd-b59bfdf4817d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5770a0dd-9ef4-4b4f-897c-4f9b81ad94cd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a3c545-1aec-4d63-aae1-f38fcbb6f54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32e5a3ac-0989-41cc-a25c-8da22c561bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b432758-705b-404e-b233-3a69f76c198f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1b3a71a-5463-47a9-9b31-a89567cf4969"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52f65c8b-e643-4e21-82d2-9d842674f3b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "799f34c5-f74f-48fd-9170-201ff0afc302"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab4cfcea-b80f-48af-8592-ec30739e8214",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53ca5d01-4e08-497e-b887-1c3ce201cd4a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ba63f6c-5912-4c8a-971d-0a7dbc66b6ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a27ae1e2-2623-4a33-b050-0c215506fcde"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b850fb98-39cb-4e28-a0fa-df876f4ee7ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1cd23be-f33a-471e-94ae-8b79097ebe67"
                }
              }
            ]
          },
          {
            "id": "2070d1f3-fc0a-43b9-845a-ebf8ef10a9d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "174ef92a-3fb5-4848-a0df-750bb6808570",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "903bd656-edcf-4479-8191-3c80084bf6c7",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a869e5-2b7b-468c-a733-350b98b40284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bd7e4827-f45a-46a7-96e1-3f064e12f55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4642de8c-252b-44b6-a92a-84a67db223f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b5915b-c9a4-463f-a10d-8af56949826a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c295a7b-fce6-4a04-a1dc-dfd8d70e81a5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "905d441c-c3fb-4301-a017-e4a48844f83f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51bb9ad3-023c-4f9e-9e8b-2b06a05fdcca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "982660c0-a078-4d59-b01f-7ad4eea1e04c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "783786e8-c298-46f3-a43c-e0e1db5b4354"
                    }
                  }
                ]
              },
              {
                "id": "cfc21e5d-0bf9-44c9-af19-d3c66afea2f5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3413d75f-3c22-48c0-90cf-513d6eac1f0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63112755-0c08-4a59-8738-2810751519c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c836f2af-7424-4c82-95f2-5272500ff74f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ac6b4bac-8b36-4e07-ab83-e5473b9a53a9"
                    }
                  }
                ]
              },
              {
                "id": "a373c08a-4074-422f-a359-9c9c06ec2d53",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f89a952-f331-435b-812f-524304a60a95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92ebacc9-d455-48d0-9c6f-4f8809e65a05"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "376b2a17-fd1b-40ce-8fcc-ca49fa4efd48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "75c99f12-2e13-47f7-9815-833130a26bc9"
                    }
                  }
                ]
              },
              {
                "id": "6c74cf23-cbbe-4eb4-9e00-e4e9fc3ef238",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acae18be-5bf1-4114-848b-91280760ae4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad27551e-5f24-4e8f-8e42-14afcf90b32c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa5ca747-f0a7-4b71-b08b-7fa475ecfb98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ebdcfc40-6dd7-43da-ab87-ef9ce8772f1c"
                    }
                  }
                ]
              },
              {
                "id": "fd3dcf92-6fab-42e6-84a4-5121e7050c6d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50d64908-d33e-4bb1-8309-80b556b51bfc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5d16540-4f27-4718-8b42-a1b0b92abff0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96a50938-3686-47de-8851-f6974f2fa57e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fe298bc0-5c0e-4e18-8a7f-13eb24c342bb"
                    }
                  }
                ]
              },
              {
                "id": "e515c459-611c-47ee-bcb9-f926442124dc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "861ea6ff-33f5-4326-8874-1661f8544d51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "007f8c4e-acd7-4b24-a7c2-453ce681e2c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97f9f2ff-5d24-4de0-a696-dc17119703d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "efd383e1-fe77-451c-8bb2-3e3c3bbd86c7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "35110f4e-13ff-4bb7-af98-48cdbff6fd83",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39b21b40-a3dc-4c33-bfc1-0ae491dac9bd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d238ea4e-2770-4266-9fd0-70d3383edd81",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "417b4a8e-fb9b-4ea5-9810-1681ae7543e5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f47d1684-f420-44e1-9c2c-4c0b60db2058",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2ba257bd-c1e3-4f4a-8c61-1e1245a32d25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6898bf46-224a-486c-84cf-bc16251b0645",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b5e9e05-ebee-4e3e-b567-13629f0e33e0"
            }
          }
        ]
      },
      {
        "id": "f227df78-951b-4922-bb48-0b4614cd4d50",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "038e01dc-070a-4ddf-892b-132a9f70e54e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "39b66b2f-feef-4587-a837-534ee48b90c0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dcf71d2a-1cd4-447a-aaae-91c895a8ee4d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461325e0-9657-42dc-9e19-9cb66b998c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdef521c-2f50-44d2-ae0b-8db0a4c18fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d1a965-cf68-44e6-9cf4-f42938424640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "babe4ace-d956-41ae-8b29-0a01f0dec32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654d22c4-fe1b-41da-bbb2-0dd4c59fc194",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3632e23-4a45-40a0-b6eb-5e1ba988556a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279d83d4-3188-4c76-b7bc-565abebbb64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3893e6-7259-4736-b37a-f8292e92902a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dea5f5c-d2cd-4dbf-96a0-a39313790104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a153bf7-ecb1-43f0-bc4e-2ef21191ffcf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2015f810-c4b1-44f6-ab8c-c4583719dc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7601f792-9dd6-414a-beee-701eb4d7c31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74cc620-69d0-41b8-81a9-99f8fafe907c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef3eac1-441e-4f81-b533-ceeb414793da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5822ec6-2256-4bee-b156-96ee23c631ad",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45aadf6f-61e1-45f4-af91-f16a92f30126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e6a5e8-298b-46e5-a1f7-f2f08545a35e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9ff0f9-1ab3-4723-8019-f69e52a293ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef83af03-5eb1-4550-a61b-ac04cdb7d10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023dc8b1-f9ea-4f11-89db-05f3538e699d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a37192b-f6ca-4edf-a9d8-a8d39f02ec47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e03735-cb89-480d-99c9-9faee0c24b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bfdc10-c5b8-4161-bdaa-2b09f14d1ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02a6d0c1-9ddf-4804-a887-802c4b4cd1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431c3c24-b573-427b-8510-730634b1a020",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a45d79-10b6-4424-a310-f9ef88916535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7f096f-e4cd-4798-9b16-d821ec17c50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dea8ce7-f2c2-41f2-a6c2-11be804ea705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "48af029a-b677-424d-837a-cf0d2b554295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d859d3-5304-4adc-a8bf-0a2ea10b54b9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc4122c-8253-4ed8-8b66-5834a7598562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae17dde-75a0-43d3-a46a-c12b391f485c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0091894-6b52-4325-b56a-f5a73236fd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4479e71-1dc6-4b3e-bf98-092c70b0e14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12f9b18-577c-40da-961b-69a3a5d93139",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e45eed8-8c23-4f28-b2d4-d19974913640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f6bef5-ed2b-4a06-b304-72e01ffe2564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69dc612-2f9d-42f8-be40-47890c369b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5445e2c1-1cb5-4137-aa14-5e45e9fca87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab41686-012c-4a34-9a93-56889917312a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d637fe1-2bdd-4e0a-9eab-270235652fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff8a7f2-f19e-4c7b-b548-0736080079c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bde4da2-efb4-457a-804b-19b2e17608cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "038ff457-085d-44fd-b541-abb4ee48f753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46875929-76bb-4cca-a4f5-9fce63144cb9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1feb7848-d709-416e-ada8-0b8a659e459f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78c270f-f618-442e-a465-ec706e07713e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755929c0-162c-4b90-b835-2fa5cc690f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb68839-1806-4cf9-95b4-9e5b1b05a438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d04a618-774e-4785-b2be-e8cd514eb205",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa1d5e2-9c03-4465-baa0-a2553bdc6bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc35f051-4b26-4feb-826b-3067e9bcab19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889d8248-584f-4395-853d-da4b154299a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c7f534-669a-41d9-af0e-99e281f978e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd1cd86-2a82-4e3b-9277-3dfb4a62278c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75e1516-b723-4385-b945-7e79fe0b39ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7c9a59-e451-426c-94ca-0f3071668278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0d25c1-1380-45d2-a35a-c8eca86e2ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ead5c813-cdf3-4f59-9fa1-41f1178933c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095527c4-cb9c-49bb-bf38-648cee697308",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaa4fc8-958b-4bc7-8bfd-a01e5b37bfc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506ce049-c647-4a54-a654-af993168ec62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b4fe83-f8ec-4ab2-820e-ba2b33d76e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "52998739-5470-4b91-8879-4ef1ee5f3f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a393b2-277f-4b06-a25d-70e4ab231db8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aae60fa-5855-4935-8a76-fd9523e11a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd8f305-7d06-404f-b756-4abae45689d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7478f762-c5e6-43fb-9edd-f61280b088b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "980bb768-12d8-4951-a582-ca58ce6c1d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a46131f-63cf-4ca5-b7f6-7d74527e2423",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e6c475-0ad0-4ec7-b01a-5af363653b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2c8c09-376f-4d96-b260-65348dfa3827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f89856-76a3-4a0a-beee-8cb9ca80ea6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c580fd08-6947-4d4d-9e0b-fda847a4fd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7198b644-3300-48a9-9629-2f5676d20a89",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1a5f8e-3dda-457f-af15-13236b6279e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16783edf-857b-4e81-b3a5-8631ae5f827e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b5bd84-0741-443a-804e-ef3af387c145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9528be9c-c2ef-41be-ad71-1dd62c00c8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325911b9-76dd-455e-a3e1-d6b99a573233",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa267ccd-eb10-4304-93d1-e050606498d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b61f91cd-ab2b-4122-8028-9b9a17e343b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51604c9c-9d3e-45d0-99d3-e19803d05eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "eadcbfb2-9620-47aa-a7aa-d9634ee43aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b46da7-644f-4f26-ac52-83a2c7e05d9a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70401450-7b4d-4d4e-91fb-49723ba7f33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "537d4f8a-6307-491a-baef-531090d965bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47818ec8-1fd0-4c14-9ae2-037fbf0f18ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8182e84a-af8a-4681-84c3-784f7ebdbb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70afb38-915f-4c65-a7e8-3bf0588725ec",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfc68c2-57e0-4635-950c-14d74a86e997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "180d5f30-3b16-4e4a-841d-abd7d2b01b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddf7965-33b0-418c-939e-abba2426a7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3974d6c3-d5a4-497e-9615-d4bb75aeb6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807227cd-dcba-4a2c-95d0-f755e43e8ac5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c704d60c-642d-4e63-b7ad-69b73ddfc5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0be2e8-d4fd-43bc-9137-2071ce0f5102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667014c2-6033-4416-9a41-833b6059b20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d791a4-70f5-4ccf-abb6-f031cc5fe140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51478989-d53b-4b4d-85ae-9da64eb81036",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243edf70-ed3e-4ecf-aa39-1c5a55742f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d48582a-c24d-47a2-bb8c-a729d486d2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02824b9a-c012-4d14-adcc-4ac4149979c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11bbe606-badf-42fd-bc08-b8c0c7ed390a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c03749-8818-4606-b0e3-1e624e504f28",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ac5603-462a-4bf8-bd0c-2d735765b530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a2ffbd-54fd-4106-8ddb-94043e9d7d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb800e8-d57c-471a-862b-f276c2cb392d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6015e8e4-d49f-489c-a7de-78a746daa1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd328ae-3851-43d5-8c31-ed0248a3fbe5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a7212c-d549-4dc0-853b-dc327090ff62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc672cfb-3760-4d12-abd4-a4f6588da373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98dcf622-e5b9-4f29-a61b-5d1987f2c3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da151615-e32d-4fc6-a184-f6170b823fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049eb67c-f70b-4be6-975e-a3b0ec7421fd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d0c500-eb6f-444e-84ea-e48a890f09ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae739463-098b-4122-a0c0-6b635e929fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd36b2e-3ffa-444b-a611-5e8ce7fdf120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b02f823c-e7e2-42bc-ae06-7d0813cb64ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ac28cc-6c68-43ba-a684-ed589c871424",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e318417b-774d-4c72-8040-cceb11611638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a713fe-d154-493c-b9b9-efbf04726fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43347b7-1872-4ca5-a8e7-55b4204c341d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e49abae2-b9b4-4ca5-a211-efb7c552dc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1510a5-cc72-4071-921c-bbf371bf303a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f193c0b-7946-483b-ac24-1896d5d84ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d9ed72-4c67-4e09-b3a4-35cd38198c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59dc3cdb-f82e-4e2e-b863-ff7a7f54a725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be21392b-00f7-40c3-8334-236753d7b674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2651cd-29ac-4aff-9c1c-eba022dd6740",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1cb594-a5dd-4726-8290-e5d08fa993a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c58252-3a5e-4166-b882-f3770b2e31b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5a9370-9a7c-4d94-9fbd-44e5986b8767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e0ca772-c738-4358-adfb-01514dd398b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65e7f12-4d49-4400-8a7d-41514b2fd802",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d88b9e1-d22f-4880-97e9-5ca09b90af95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a99d55-797d-46d9-976f-02379d32fa47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5494e8b-bb72-4483-9990-169e2b05e2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2018187c-e4ed-4d9b-8079-9acf38ea569f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd438c9-5c54-457f-8e17-18187f4431eb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a7206f-9309-49e5-862f-93413e1c3688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548911f4-5d43-46cf-9476-9903c393c2d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7137d75d-f1d0-4cd4-abba-b02d1b1f04fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb16ac1-9611-427d-a460-983543e931f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c135edd8-9828-4bac-9cca-93731c7d586c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b32859f-2f69-4f1f-949f-fcf0e8b5693f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a0e340-76f7-43f7-b931-f973d380f378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db0b13a-b9d3-4d59-8017-f6c4ab201632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "039b0e1e-49bb-4fc1-a1bf-948b5eb6ddc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6f1a19-d50e-4a6c-bf41-b1a6d0e36f46",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49363e89-b5ba-440e-94f6-af3b70caef5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "470de3cf-42a8-4dea-b169-7e2ca84f592b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9162538d-9c20-4c57-a385-7fcb1d46a09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b34a78d-d387-41a1-9553-e9f918595708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb5d17e-c6ba-4181-a3cf-7414b53c0c9c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b015f4-7178-4a6a-9c46-cb902669adc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6e3380-441a-4ba5-b98f-6a45aa6de433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd380048-37e0-42f2-bf01-0dffaf3975a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8eb046-27ea-471c-b6f9-2b3f7a21a0fc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e14085b3-2925-438e-b0cd-67334428705a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf2e521b-419c-4483-abda-0d31293f1d8f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588b26c9-2130-4939-bc6a-016f264497c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ef884692-6ca4-4eae-b1c1-65962028cdd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c14955c-e972-4de1-8591-10f0b631229f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd8d0ee4-c15e-4b0f-b8ae-3e75c0359645"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e4d54be-038c-4a1a-af5a-3cfea0aa2887",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "680dbf13-092b-4b4f-abca-dbe50f506081"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "62c9c0c6-13ea-4f86-82f7-6c61e3650f0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "055a75ee-cba0-4e32-8514-df4f65f08f86"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4613d424-6f9b-44a4-b928-2e2fb8662b8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6a12c588-98f4-49d0-a32b-715485dca906"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05f644c4-eb00-45ec-87e3-0aec8095b04e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34a29718-159f-4827-be83-571d37239ab1"
            }
          }
        ]
      },
      {
        "id": "800f6389-16b4-498c-991e-0cf97e84fa63",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ee4ae1f4-2b70-4292-b0ce-6d753b6194c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1eff0f5a-3bcf-4f7d-b408-467e26c65f7a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fab684aa-b8b8-4e64-bbb0-d2070ab4751a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6da7ea1-f110-4790-bb80-93f9a60657b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e5759dd-623d-431c-b5c3-c89a056d41f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9923c6a3-3431-4b52-8ee2-19e93ad011bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4cd0a2-07a5-4fc1-a863-a3dd0ef4e95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3629c23f-0c39-4708-8aeb-f7a307fdf998",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523dc1e1-3d23-4da2-b952-79259ea5a866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9566dbe8-e3ef-471d-863d-cd23d19f0efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a560a7bd-ef55-4e46-891f-842beae111e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "58bcc71f-da04-4057-a2a3-00af6f99b098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e221474-5ead-4042-ab35-9533b435bab2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6571e5e-db75-4307-90c6-af37a7a9c123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e29161-4d96-4050-8836-a676fd72b15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ddf04e-eb89-48e0-913c-7af035569b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ecf8c8f-f845-4deb-8a05-875c7fe4fcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2b5ab9-6da6-4b9a-8c01-2652debf9323",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3dfac3a-3ffc-42a5-a442-ef0c300c6260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2367468b-9442-4119-9bb3-84cb8529d694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c99615-588e-4f62-a37b-47b2e6ff97f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92daac6b-818a-4f75-b919-7f015d7146e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c8804a-faa3-4e68-8080-77dba6bb5244",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97ea9ca-e0a4-48ca-94b5-84955a246502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f30bce-9332-4505-bbbd-c99feaef78a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b41669-023b-4a3a-ad98-ab6202cf8c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73327b03-47d2-43d7-b6b0-e80559bcd1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd67efaa-47a0-4937-b509-307a849b2ca2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d0c3a9-4ff4-44d5-aab1-e4c17b6586a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7587cdcd-c5d3-4440-835b-994e9aba4831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8964dc7d-d48d-4cdc-bb94-252c9a4a38f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e426af34-0f8a-4c49-804e-c9ed036f9901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfd9f7d-c68a-4bb0-b724-706cf2b69455",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594c72ce-7b62-40c3-a22b-d3f90fada098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb5880a-1109-47f1-aeb9-67a468eae6ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6bfac1-5a06-4936-b00b-8ba50cc12ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f696ae9a-3827-4842-a600-d50ba3f3d3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36755e4-b8e1-46bc-aa83-e07f945074b6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488ca9bc-49e7-42f5-bfba-88b7467fae19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adc24a3-63fc-429f-acae-6d4238d7cb48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af193c1-1781-457c-8802-444a7b23afce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7448de-ce2b-4e8d-8b39-f52404cf9152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34807971-ba95-41f1-ab48-0551dd15e01f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a0cec6-ebe0-42f3-b596-b1e92c8682d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7a3afe-c9aa-4a05-9a9c-8b3c4ec2e4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ffaec7-7634-4da4-89c1-47ca7d52f9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca864ac5-94de-4e7a-9e8e-cb1644ce790d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e812fc2d-ebc7-401d-bd8d-a80d021d8211",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5154b5cb-5246-4633-8774-63664bfb81a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3639ff-0c85-41dc-98fe-3da91158030c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37de5d57-f707-47f8-ae08-c87ee54b9b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f80ef8eb-b7e1-40a0-8edb-0cda90c59686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12347be-4b95-4614-9087-05336c624878",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee0b589-58a2-4fc2-865b-80a038b559a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6a7404-9800-45f9-887c-7a78e81e2387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236d6057-9763-491b-82a7-31b6452515bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "484b90ce-483c-4e4d-9303-e7651e6fc270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93afb73b-85bf-4163-be49-ac0e2c8c3fdf",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70ebd02-73fa-4fc8-b1cd-679b949cedfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63f6601-9414-4816-a76f-2d62347a5687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05b8b6b-65a6-44de-90ca-fa24d4e8c8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce57b69-c012-4b38-b448-ad85b211797c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1dd4d7-ce06-4f71-ac31-ac35e4e9b805",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99474dbd-ac65-4632-948f-6ee7fa622f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d1df45-ce4f-4575-9295-ca987a0c6a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0af9994-f7a0-4b4e-a35c-56b346da6e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc76df0d-6d6a-4708-90c9-0b2d925e7da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a82f48-4b69-4230-b7ee-0cc60d768edd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9543901-eef0-479e-b27a-7d09c6fb0f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11fa1b22-0030-4553-9804-ae4cf56589bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdb40f8-fc31-4d4c-9fb7-49534ccac358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "441add6f-dd7f-41b6-ab2e-69d7bd70e9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9264f569-302b-41de-99e1-2e6b20ae9130",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5e0177-d687-4d26-80b0-018cf25da73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1453237f-20fe-4c09-b1a0-d58012fce7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920105bd-3947-4ea3-8497-651d79ffed80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1598aaa8-ed3a-44f3-8cd9-88e6c628d489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91377dd6-26ea-4b6f-87bd-c7d7f84590b5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64376ff-5302-4d49-9992-1a2d6633fb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6aef6cc-d59e-4810-bfa1-6f8bdc2aba3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b829694f-0a0d-4b62-8244-e764efb87efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd70bdd0-5ef7-4444-b8e5-56e0ea3b78a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b63fec-b5cf-4697-827a-9f5017603120",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f678b801-c06e-4422-837e-8894ae81454a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5def88-2f9f-423b-96b3-d26925f2fc4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf8ff8e-254a-456b-8777-e7c3358369ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "31b42709-513a-47c4-b1cb-0dd8da23a980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb7ce30-aa3c-4ef6-b6fb-bc1addb0c0c1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78485207-9eab-45e6-818d-2580d1f3c112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d1a8e3-28ef-4c79-879d-3b2153e67b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45413539-e32b-43ae-b37a-95e4ece31a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7903db76-32a8-43dd-bb44-4ef182b654f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4704869b-36e6-420c-ae0c-e00130b6804b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166f65ae-a2dc-4e48-a08c-dfce1680b565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a09661-98f3-43c9-839e-8dd7c0f89371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f02eac-98c8-418f-a087-a88f6d7034dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6a10ff-da0a-4363-8359-13e7387eb7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf95a78-60f0-4223-977a-aa4301e60db9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f10e8c-711f-4bdf-acf0-c6425698d2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "335cd752-56a4-4017-beb1-3e893a51c692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a260bb-887a-4274-ad93-9ea750701240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cdd4002-35e3-472e-af4b-099ccc737a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d07739-ba49-4459-b31e-146f4227bee0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53180de4-ce88-4fb8-bbf0-1d1c72d9c18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4008185c-75dd-40de-9bb8-dfbe7cd556e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e2307f-ad76-4acd-9435-42aa51a96bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b08a95db-07a1-4aff-97c2-cdc40cd00d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d876e639-fa3f-4674-9d2e-dd44b5da3ed9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d15110-ddf9-43eb-ac62-06f91ddac7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53efde57-e5d1-47fe-a89c-01c029088738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7fa4ac-f028-4a5a-b2ef-7e9e13434651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fe48c0f-1b87-4f1a-adbe-34a429527adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8785a68-76a1-483d-8486-f9a5a73c9d4d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8321444a-ad28-4216-bfa2-94301f0d7469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530d8105-be5a-42fa-ad15-5e02f96dc061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247568fb-5030-4b20-a7b8-652c47f99d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff582426-b169-47b1-a3a9-5cb0ecbeddce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9dc74a9-40e6-4591-8abb-3ae958eea04c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8baad3-45b8-4048-8881-9013144542c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e339c6ef-c8d7-473b-977a-ea06548f18d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3dec8f-fee6-46b7-9ab9-efb7993f5118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5adbd5-6dd7-4b5d-8a7a-dfc6841fa19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed300c6a-ee23-485d-b9ad-84ff493f774a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33604eb-1089-431e-8261-32b83939db0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c15842f-07fd-4fe7-bebf-d5b97908b3f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054d20fa-fe60-4c95-8602-8e5aea319c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e03deccb-2749-4a5b-9e4f-28392a86d82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50ab57d-5a3a-4b6d-9084-8b07bbff5304",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3917b4d-0cf1-4416-b314-63cf7c6291c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42473a0-6a10-4970-a7ad-6db8b6e1070f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f51cad-b0f7-4ffc-b115-b1d80ad0df28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93e9e6ee-0ceb-4eec-8168-7ac313cd052b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee214d2-2718-4e85-9b1f-87306bf36929",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c49b67-a0d6-4b1e-9d25-be3ea81f1fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64eb87be-4e78-41f4-8126-60fdc78a04be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bb0518-2d97-4501-8809-4e6c04a4ca82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c58faa1-86fe-437e-90f1-e892064857d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101be231-1388-4b2d-8978-0bf06b2ead55",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa048245-2e07-4d03-be94-35638ad0f9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e336597-0b9f-4b1c-a1a3-038cef016308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835e362b-f910-4e07-b9bd-edc7dc8a5858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3db8213-6d18-4088-ba3e-f13feec52cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a776989-0951-4f42-bddd-a1108c959a12",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab57b831-e6ee-459b-b1b1-66535906c37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66b4b68-252b-405b-9e3c-259b45e6bc57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cbeabd-d799-4d32-a0b4-5fa6d9090495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72dbf1af-a466-4db4-aa79-a33c8392ff6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6260e3-856f-4441-abf0-a2d2f58551c1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3238157f-3dff-4487-87cd-d649468c6c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efd23db-8bf5-4a12-b58b-9ecb6df5e047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61adb3ee-17d1-4321-92c0-28c7bcb423a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc09376e-883b-4be3-972d-1e898570ccfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272db83f-a293-4e14-b65a-615eb2afe61c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5939536-5bda-4055-b9ca-7d66009c0597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7faa2e-88a5-4e9a-8712-bda8ef670e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09c32e2-2217-4182-9c1d-06b564158b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aea08dfd-3e48-47fa-b020-e972343c4bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01dddb90-c575-4006-a11c-24a24cea1649",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d160fc-6751-4f87-90c5-c14370d8d0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "933741c1-ac45-4bfc-80b6-7c918a458554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844ef006-ecde-49e5-82a0-27e8b8036c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55f9d1a4-b29d-435d-b4b5-57ff6bf3ddc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6c485c-dfec-4b95-991e-b3a61bd4be90",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade2f7cb-3b16-4f82-9f0d-3407522849b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc56580-d6d0-45f4-8062-339d057787e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b009285-94f1-4788-9294-345b10f62f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f11a6ee8-e0e2-4cf9-a0cf-57f5b631bf68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a989566-5fed-4423-af11-b155f33712ac",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2676e932-5a09-429b-9223-dcc8133bcb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa60afa6-261e-4d60-b239-d6f90b124538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0d62ad-d377-4dad-9696-ec88f59d7e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c803fa24-607d-4f29-a4fe-30bb71152ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7d8643-38fa-473c-9963-f5d82d629d7c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b6d1d1-c2bd-480f-acfe-3da432952451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc115d8f-3100-4a3d-a5cf-e3cbe7bdde81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c4ac08-c4fd-4d2e-9329-6ea7514e1bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e72f9c4-03bb-4992-9acd-f4883ea1f1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db830c7-67f1-4094-b4d1-bcc5978dadc3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534caadf-77e8-4a6b-8125-53ec4ddd6450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cda5827-6419-4e0f-b575-cdc2f5510932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1156af-3bc4-42e9-af89-60127b0358c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46572da6-5fe8-4a37-a4f3-b1c449ec68f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edacdd8b-db1a-43d5-a4a3-c6d66c5a5b4b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80831462-e5f7-4957-acf2-dc40cb35b4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2d6479-073c-41d8-b80e-539838bc1245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90bb8ef-cfc4-4ef8-b6e2-0c3f843819c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95334e7a-28d3-4171-ace7-873b8ca85ce1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1f52c486-8d42-43a8-8827-943ef736494b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8b02b3f-d639-4846-bf0b-24c764c0215d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39cb88e-34af-4884-a3c6-6a0d38aaccbd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bf1ea381-2f64-4bab-a7dd-707c8d0a63b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76558f94-0129-465c-a532-9b2ba79d32f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08933c8e-6f25-4fe9-9783-5e33b0883e5e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da40be68-3989-4e61-be6b-1e9290ddb41b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e77c721e-0bf6-45cf-bf96-e7cfbe922d38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1185f28a-c7ec-4bf8-9020-9ff28d1348c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbdd35ba-b4ce-4e43-96ce-0cee83661d2f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6305cc17-f701-4a1c-b4a7-9e989283ed65",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fcc3f732-3d53-4361-a2f4-7228ad288049"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2609a10b-cc68-43f3-9c8e-5d87dc132ca6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb31c3f2-3d8f-4ca0-a65b-f7f47d972a5c"
            }
          }
        ]
      },
      {
        "id": "397072a0-81c9-44c1-8a76-592b31570dda",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f400347f-8a60-4f1c-8666-35611b943e4e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08f47935-b9c3-4772-9108-721f83fc25cb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "97bdecb7-76ef-48c7-bf00-1c5c6f76c563",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb3af3a-d11e-4a5a-bbee-3a5cb08cdf2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c169bfc-dc72-4826-b8e6-83c76c5711f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39dfcea0-a50b-4bf0-893b-27dee61ab798",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e93514-57ba-4064-b53a-195e98ca0dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2245f0b0-8a55-469a-a8ef-b52e89b22e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e077e38d-0e7e-4ff5-94a4-828c165da5f5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f771e5f-ad03-4a20-966a-f2f60c53a121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe9b2bc-81a5-4ff6-a4b7-fde84c01cc96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1a662a-a69c-4c9f-baa9-0e0efdad9686",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fffa8b-4573-480e-9312-cd710c34cf2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77bede9a-1ac7-4922-8d10-c179feed1cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bb223f-40b8-4e83-97d0-db5162c6d9a2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461a9e6f-d517-471d-8ef4-bdb29cc2aa02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d62fb7-8b02-429b-8b4d-820de15f41a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106ebb8c-fd06-47c1-8536-c714c6fb7546",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6bfaf5-4890-4ee7-a0a3-78deb564558e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23bb6e46-c9ab-4611-a821-6c457fcc08f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f5a351-16fa-4272-844b-28e4e7efbbd1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5502ffe6-00ec-4669-ac3c-255730830bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8362c999-0be1-48d9-aef8-14562b237f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76747b06-0f54-4493-933b-6db0e5425472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da727428-5618-4c19-9f68-cd4249f94028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a387efe-9161-4e77-adf4-5c9b7c0aa116",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743e2e96-b19b-40dc-913c-2935bb9cbf42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e257f3e6-88fd-4232-b7c5-98d72ec38d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af517063-a078-4a44-a114-214f9cddc46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493618e6-945b-4a0e-93d5-7094bf36f89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e13fae1-6e55-40f7-aba1-c64e6f20f681",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac963f6-2e23-45d6-878a-0f984e79782a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "697c982c-a978-40c6-93bf-da4ce010d6f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2352b24-066e-482c-b746-abcadc45773e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c881aec3-e5c5-43e2-bed7-d9bcba124f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfef03ce-3ace-4ecc-b6e0-c733383c0e7d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9b19c0-d02b-46d6-b348-d30c16698965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84ef92bb-4d3d-4ffe-88ca-9ca62dcde2cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb25ddd1-1b4e-42d4-b4cb-183fb5ae65d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292c9f41-919a-49f8-b2d3-23d26148488e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0229c982-47bc-41b3-afc5-750f2f90449b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b215931-c065-4e9c-a9b6-784a9fac8f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbdd4c6e-0cb6-4602-8aaf-cdd1ddb8d7c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbfed85-c8ab-44f9-af5b-ee25eab88cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21d71c0-bf26-4956-9b3e-ed4872840565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16d2798-0f72-4c5d-b853-b4d48392618c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cb2e99-6244-4f62-b859-31173e45a9b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd02ba2-45cd-4bcc-b3fa-e5fdc60e768a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f197550-6994-441a-9e32-bd3875f7c735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdab0a48-a15e-412b-a25f-14f4aa449641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4458c5b4-80e8-4a6c-afca-8e09fa7b5e4e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460a9eee-4f14-4849-9748-caa0cd2bd1cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efccf322-ad74-4a61-8d87-ba188b212889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e46db0-7ef0-444d-bf3c-3509e639456f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be3ee4db-a554-49dd-89e8-e195b13c3629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3060423-1920-4742-92a5-bcbc7307596b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed62fe35-1d97-4fe4-acb7-5db3eef9d98b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c04444ac-e8c7-4677-ada4-c67d9c2d96af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e48da65-a2e1-48b5-b08e-914aeb2d995f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b72feb-0d0c-4ead-bcc2-21d4ef87df87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512bc9f7-4a63-499f-98a6-11a340d028cd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ccf726-5453-4b74-a4b6-5b1864153aa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10aaff8a-ac1f-440e-b227-0bbbded005c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c23c1f-40c9-4a97-84d1-af00601e42f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4868469e-48f0-4624-b5b2-c181a897465a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbddefe-0244-465e-a251-130e9a702649",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a07e22b-e349-45fc-bc34-b180fa3bb0a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "260f05ab-c53f-4a5d-a8b8-a845ccb00656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66979f1-2db0-4d09-a669-70022e9f890d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68abd019-112d-4096-b399-8944c1584953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2168e3-f4d4-4b62-bd55-78a204bc9921",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a400d207-f724-4591-8166-1f6440eabb21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c72d81-3508-4a79-bba4-37c9e9b0742a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0a501f-74c6-445b-a246-2a96454d2c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a008d19-835f-401e-9b82-c29f95f7faab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2faf466e-234e-47ea-bb51-2f4c1bc1d761",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ab0ca6-f220-4a17-aef5-83131249d4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8d529d-6efa-41ff-a052-e1bdf2d15dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c274eea-b54d-41d3-a60e-e6e0756ac18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329f6687-8d59-4f9f-b1ff-da3d45ee78a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c920c84-7b5a-4f20-ab34-e4da46db6da2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ccffcc-8511-4c47-a8a1-3ac1150fe072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be273a56-5f66-4b20-8c0d-37d6e9694320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf3ca76-98d9-4dee-b37a-e20f61e70385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135193d0-f582-45a7-8708-adefab318999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e136254-7c48-4119-8f23-7ad8c9539ca8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51c729d-a2a8-4047-80dd-d1afedf3d536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3bb368-7054-4d0b-843a-e37112f87e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2128185-f883-4edd-8dd1-d169e6ccdd04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71a4293-7085-4375-b3b1-aef66a626b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95051661-4ffe-4043-8782-55b058071d32",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc231a40-7790-4b09-9a86-505c8491bbe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b866688b-6b93-40b6-b8da-26d6fa38a345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14f0e41-dab8-4af7-9931-0f07816a32e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d15a809-830e-4b6a-baba-6815fff8187a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af53aeb-30c8-445f-9618-d9f1a7b58910",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df43f5c-0aa7-491b-b2c8-3d4c783290e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c486d976-0285-40c9-9e29-d17459ad03c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a197df8-1928-47be-b33e-ada96f72e262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3534b955-b8ae-4136-b7b9-d0ffa95aa6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc41aeec-8b9d-424e-adbb-cc29dc6025c9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791e16cf-99ea-42f1-a0fd-ed15bf6d1f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2648e768-233b-436b-8523-13aaa0431e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c03968-05c4-4eb3-a384-e3a3d3b7dbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b22228-747f-4f30-92f0-02360f7216ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffdd24e-4cc9-41c6-abf6-26ff8af49c70",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aac7a9b-d1de-4290-85b3-20290af075af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "925d64ce-7ff3-4929-86e0-7d0b4a94faf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07be9493-dcd9-49c2-91ad-7af2a820e1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d29e70-5992-43d3-86da-ad2ef1f9710f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450becb2-415c-4fd0-aec2-ffc8d9492967",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45e3251-90e1-49f8-8b45-30df197cc88e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0cf953c-00a0-42d2-a002-5c0796940b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7a235f-4701-4acf-9e01-8b5deae666d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e3e1b5-3152-4486-9fa7-d05910171be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e888b8e4-8690-4edb-8aff-c75f9c347c7f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473c70b4-9ef4-44da-bc70-d76fa74cae9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9254d18e-3a7a-4031-b852-62e39bc661f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e308f7c-7f81-4233-b9d4-ad06efcc4e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e089af-1171-4cb0-a5f7-c9907ab21eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d3742e-48dc-4fd6-903b-1e7e9781be62",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb80f2cb-6930-43a6-8577-7489889e52b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33699e91-fc9d-4548-aea4-c95a7618de36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fbaedf-8380-4d6d-956e-bbb2dc919f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3cc548f-5543-4933-9cd4-201259bc7a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dd5d8e-7f3d-4ad4-b504-912cad8bbc85",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca61c43-984c-498f-9de1-9b6be72b9a0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7d042f-b65b-4cab-8f60-9fa568db2053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9d8976-6550-47f0-9739-f628a926ef2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157c29a0-becb-47be-8a3e-100c7c39fc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4ebf5c-72a7-4423-9c3a-3a6e331076ba",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00257541-d33e-4b06-957f-2b7646d06a1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d06cca1a-b8af-4eff-8b38-541538b06eca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b58c16e-c6a1-4375-961c-f79ca224bbcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a44ce55-549f-4947-b037-93761e5aa5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a353f8ec-1f4c-4cf2-9317-46b1c0f1b4ea",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e3d2e7-d8a9-4b3f-b7b8-5f9e325808d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f61bb12-ab8e-465d-b8c4-0d381b55df39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f2636f-c17c-4344-aa65-06ceba2dba07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a705d010-e410-4185-8803-8faf98f3142d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97b1da8-b8cd-481f-9f11-7fd277db29b7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8bf76e-1c21-4970-be61-4c50a5d99ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "015f8b04-8d64-4324-b4a9-d279466f7868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0bf3dd-7b97-4271-b672-cc41b9cac70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ffc359-3eec-4102-b8f9-58ecb2f48196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af86d6bb-898a-44ed-b952-045112508f44",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b511b3d9-063f-4b40-8284-6f7490f8904a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fcbc47c-98bf-4e75-abfc-d72e6d70a693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f700b7a7-7930-4b82-ad07-d5ed86ea5a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41019bdc-e3f1-4437-88ac-8388c1f67424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afe6277-74f3-426e-a562-5bac17fe9f40",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df75cde4-715b-4a88-967e-94a130537fa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff5f2b7f-f7c9-43d9-958d-e8697e4230d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d29a97-d85d-41e1-a3ae-8fb02b549560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa34aab-3889-4a38-9c16-4ba9ae03162a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da2222d-ec39-491e-a594-ab9f5fdc8728",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a12d99-f2c5-47ce-b060-3f4dd435da21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "460b29f0-867d-452d-b722-f2f98da96cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef73f2b-233a-460d-af5c-86cc8b7fe4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd2f37a-fd5f-441f-a85c-8d3676434575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb3f910-c5e5-4d73-886a-11956e0d7ab9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acb9f02-5d9d-493a-ae62-56fcd78002d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce2c0f1-48f7-45aa-858c-be7441fda3bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "443dfe8e-bd02-4479-856d-b88295017b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95cb6ab4-5cca-4354-8927-e237e0126af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0269c9-a9e8-4c28-9283-563537751bbc",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d240f4b3-eb40-47b7-bec6-9c919556e047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643a6285-f4f8-42a9-8de1-5bf3feb53679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e21c060-038c-4589-beb9-96ee4bafd796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14c2598-e13b-485e-b9a5-90366370f90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e73e20-4929-4251-9754-4eb047c65e0b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f85a281-276c-4207-88a2-35d6491a52e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90855d6e-cce3-4d5f-8848-08d87cc9fe08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7050f061-6fed-47ff-8c21-433ea22a664e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78309b49-ddde-4940-93e3-5946922dd82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76a97a9-451a-44a6-ba71-8aac56d2cacb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5c3e5d-781a-43d1-9f68-68fe29357436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d80286a-e182-4502-bf78-4598734f0b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2f2cef-c5fa-4432-8f68-1339dc9f4699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d946550f-6009-4451-8cb8-d34f9664d392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ecd92e-4b41-44e8-8b3f-c80d2a5a2aa5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a184d44-f25a-4d74-95b9-fa2785fbba73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc66361-a6ad-4270-a588-c65b0c75f00d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e90f9aa-a3c2-47e5-bffb-e6ef100b2382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0ae930-a608-4dd0-8423-b28ff083a354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cf9ddd-539f-49eb-a078-0a08170a5e8e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e86e2e-ba08-4724-9b6e-a562b3e20db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df54067d-91d6-4467-8a57-f9a7fcdc02ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa5bfc0-ae7d-46ca-9024-42d7cc0990ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ac12e0-ab80-4d37-a504-68cf13d2a20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ef3433-9135-4eff-8bb7-6470a752a7a4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae99ce0b-62ba-4eee-b2c5-80526d92eae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f1e7d4-d266-47aa-83e7-92991d47b687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181aafbc-1f25-427a-a52a-e5240082100c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a83af8b-4b25-427f-a6e2-0e3d88a2b616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cb3b21-28a6-4369-b213-26a605635010",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3987d09-1a7f-4834-93d0-8de9e2ab325a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c24c4d2-94de-4be5-8984-c248e63cbcf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914e2226-4307-48f6-99f0-64399bbdcf0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe2e688-1888-4bb5-adc0-7a0cfc447cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483daf11-c486-42d2-8726-c527894c816e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46faeee-efb6-462d-9301-b617d7cb3306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ff58e8-f430-4843-80ae-c9e723afc456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cdb3e9-3b59-4996-9048-5829c140de52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972f91db-7992-4c50-bf9b-0bdedcc11b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50029bfa-6ca6-4d0c-8e16-322dd8759c9b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93c4fc3-67f3-47f1-b0b6-6e3cbb5a6d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fcedc4d-37af-48ba-9499-af2654e8049c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6706b1ea-148f-4043-9ac1-c624a2c40397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4557faa-a86a-47cd-abf5-628e7ed07701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c86012b-83a2-45de-ad4b-0f6fbfa2b839",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a02287-d0ee-4490-8343-6e8a93a969d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b177fc5d-173d-4565-ab72-60caae5ad81f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "556d64fb-1ff8-41c4-b414-614b79a13a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf39ae1-afef-4d2e-a6a9-ad207a3091e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050f1e0b-115d-4706-b234-88436eabad04",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a071cbd8-8f0d-477d-b7f2-47e15d74389c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ba7576-5068-45c4-9ded-8aaef03679a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88a440e-5468-41ea-a227-43197be41e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "820dd966-33e7-46b7-aed0-de4a83e70409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8178a1-b76e-4784-836a-a4dad2a787f5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58ced20-b8ef-4120-ae61-b1bae81d6f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c555df-3b2d-4230-bc44-0c2749970558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4bb98c-216e-4a46-a65e-fa9242e0e9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50dd329d-3e1a-4573-9ba6-8b237a890b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f506c9e-3ab5-4f82-93bc-ecad2eb6a826",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d149dcb5-df9b-4d49-9e99-b6453dcc5338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d286ebbc-abfd-4bf4-8cf4-9267adab0505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb4378b-b25f-457b-825c-986e2dd52232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21392af-498b-4f3f-84e0-316956f8c941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ed6141-4eba-4252-a8d3-70e5a66a2d66",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ebc98e-c7eb-427a-a640-ad1376cff0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8360b800-96d2-4dcb-aa9f-f9e7af2dafe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caecf3d4-4f63-4968-9b5d-6dfd82c0d491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a8f5c2-900f-4365-a645-bf6bbc83317e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af09c9b-6b07-4972-a42f-67cb5fcd67bd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e3ff28-7677-4cbb-9015-5cb7e83c708a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "423e85f7-401c-4ae8-8d94-549d27622281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2bdd3f-7ea0-4ead-8e8a-5a9ff0c451fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d0e0ff0-3c6d-42d6-a97d-2c50654a49c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f03a328-7f9c-45ad-90a5-b27ac7d27823",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bec607b-2f18-47ad-aaf7-ad9a18da424d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975fa737-27b5-4304-b889-2db70412e297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6908e3f-18d5-482c-a2bd-8bea8cbdd015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5399300d-b003-43dd-8d40-9239676c6c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059a66c2-ce75-4aa4-90eb-a8820c119a86",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deab19e5-edca-44e0-9a30-7533ab000de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535cadc6-1af7-4639-8a04-418f8c765602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec32d8f3-76ac-4b32-b0a4-12da2a839ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8e2fbf-8788-46e5-8e8d-60ce632a087c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74be9a54-386a-4cee-856b-2aee82eb6806",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a77075-dda1-44c9-8490-14bee8ddf80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad249af-b37b-4ced-aa4d-c82d6401e7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fb140e-e628-43f2-b19f-36cfafc765ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca05ce49-a933-4827-adc8-e9a3458028ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0260988-d9e0-4d78-a8a0-55c351810393",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d02154-098d-488f-ba60-82fbe9445cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c84f22d-a6f1-463e-b830-3836d1e5bbe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ac6700-e03b-45f4-9790-619dbdee839b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7018fb1d-b830-4e87-a79a-f848363368ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbb2d7c-2b31-48bd-983c-05aeedb23f30",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c00b555-3c71-4f22-9c1b-87c38738ad98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e92a8c26-aa62-4609-86c5-0362b165856b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c488e4-8d50-4126-b911-5836bb711218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac9c402-1ec9-4e34-ae5d-9e7072c2e2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a02da0-9142-486a-99a1-908654159190",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa08476-86cb-4d37-929f-0241a536f9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e6774d-0e8b-4e4d-8080-e5baf7090466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83684f4-c499-41b1-b3ac-10dbb46510bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a4fa81-b84c-4a75-83ee-b7d5962d2253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0fff9e-e50d-4c2f-a85e-84e7d77cfe50",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f66b23-94c5-4811-a2b9-38f9aa3882fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7811b5cc-3de1-4252-a371-3ed13509150b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e902e6e-46d6-4d6b-acd3-5d3cdf93bd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73aad8d-950b-487d-9cba-98ad4e53f710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d41e202-f117-4e24-9f38-f46ff48a1bde",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a637969-f664-49ca-bd31-401d06959446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ae8b1b-4060-45fd-990b-5f1820cf0835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "665e56c8-f10b-4f7b-9150-2ba8b44d2b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ba0e5f-4825-4bfa-97d4-884f490ef329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17808c44-d345-40c0-a4ee-71aeaca0b430",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3b1897-0735-490c-ac15-2d0bda7dd75a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e5fb3c-82c6-4da4-ab72-cbc59c9e6273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c45ce92-3d91-4cdb-b9d4-5b93c3e6414d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17661609-b965-4ccf-9ec8-9f29e9381236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a3c95f-3cb0-4ab3-a1f7-bf61c11e5d66",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ed3e6d-257a-428b-974e-f91e161fba9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f97cd5-9955-4711-88d2-5a1560ec6a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06fce5f2-e015-4325-826b-62a4f2e21428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37e4419-ec1f-4027-8dd9-c02195822c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3816c9d-d01b-4773-94e3-c4937a2df87e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679d4f59-c92e-4df3-a43b-0ab349064d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8ba53d-e344-4fed-ad21-0e371c41cd84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b185d4d9-37e8-4ba8-9832-e3103a7a5a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e356a2b-df6f-40a5-a74e-cf07b85ef9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4540432a-44df-4ed5-b9bd-2957577f4276",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4aca89-2209-427a-b4e6-063c74b14f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d49d10-9310-4168-aadc-40e67dc5716c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01fbd38-1e0b-4ac5-9325-04a9cd564b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0928046e-ce07-489b-adb9-86be6bb23001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ea7fc9-e7b8-4e0e-9a18-7f8bad8c88ab",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16168f9-cde4-4cb9-9b42-9f74d719ee93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd32e96-860d-4c5f-b04a-8c1898de7a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e703cc-1d2d-4a5c-a55d-97db2b7a252a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1a9173-efa5-44f1-90e9-b7cfec91e7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40de8e92-a32e-4240-b70a-f83fb9b451b8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07cc18b-3d4d-4452-905b-d497380be9c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69069a77-7d15-46e7-8171-a031f70bd7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dbe911-d322-4bce-8e1c-605076e1cce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e70807d-6780-452a-a1c6-07f6625b23c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07615ef0-111c-49d0-a385-26305aa5cd7f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eda6b83-1a79-4a99-9d3a-8645d7b75eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1379fd37-9915-48f4-8f0e-b6739aba1321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fa4e0d-bbe5-4e94-a20e-0293d1f40ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69adfe8-d95d-42df-acd9-bbdc589d3738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6e434c-1613-4ff0-a03c-4dab3af28a10",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7aaa499-d54b-4465-8197-e83cc16f56e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8918a477-5f5b-4d09-9cd6-375c23a4ca3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "295663bb-760d-4751-88bf-34b366fe3840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b927265f-b623-400f-8e34-fcb84fb64ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbcece3-f36f-4523-907c-833897cde477",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c9e19f-ebfe-4e32-a20e-b2b9f3cbb519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00bf047a-d60c-4628-b80b-50d2fc9ed045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a32fc56-cae0-4908-8241-a3dcf55c4a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ade6fee-8218-4630-886e-8d9d72d2b2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb22071-f0f4-4a30-97e0-5c0f7c851534",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1984c0-0229-4ac9-9268-29c5a6221a7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bced0ad9-b098-47af-986f-5ac1397f01c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd86ace-0c3a-4f36-be8d-05ab30edef9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c474a2-94f4-411f-82cd-11f713030e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f492758d-5137-42ae-b27c-0ab4f960edde",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7eefc2-ec8b-4d19-b1e2-b10f32b743b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "752bb631-858b-4d60-bd4e-1ee7b20e604f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428f8c83-6487-49ae-908d-02f6be40dcd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9123b30d-80f2-4f9a-bb9e-58106edc0260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2769992c-74d0-49e2-8a31-445219d15a4b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eaf432c-1fd4-42e0-b5a4-720de0bf8c65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12ed1fc3-eb0e-4a50-89c7-236dc6deed77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a601404d-ac28-4322-9fe5-c20e06c74b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9948d36-ff5f-414b-8321-5ad41e853a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d168d277-b022-436f-8ae6-99bc36fe0f3d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb014bc-ca00-4a24-a843-414d1dad9a02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c475f61-d59d-4554-98af-e4e0a6e377f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c999a1-8694-442d-ab45-4ad18ea2d2c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2383e9-9a53-4ee3-9122-02ff6d8b7ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f18c7e-57fe-438e-9761-457901673bc3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea10c2f-0f48-439b-b7ec-a59ed5f0bf0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc717966-6aa0-4403-a7f9-16b919c758b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc59a2d3-c1a0-46d1-bc24-8e2d4d86078f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70048e01-a01d-406a-a542-f18deba9e569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36159d0-8b2b-40d2-a745-5c8f65988737",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20925ab8-527f-412f-adef-49793fe686ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcc969d8-07b6-46b6-87d0-83b4545308ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3dc70f-d06a-4d3e-a454-1e2fea9c6214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f082db71-c6c7-472f-a3c5-6a1c0160b2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748fa333-39b2-4162-b407-95c75120d5c9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585c28cb-9d0c-4978-9c63-5a23055ec4eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b8bd597-60d7-4460-802a-5db14ee4f749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "341bee72-04e2-4aaa-a4e6-491ed2ff4f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94612c04-3819-4d7c-a82e-78b95fcaa612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa5ab42-37c8-4e42-83a2-0a7d78f036a6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659ce6cc-74d3-4125-8455-e4ac6381178e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9da3c276-8faa-44bf-ba3d-72e34259c66d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "576e6527-21b5-4f92-bea2-73ea84bf963a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4c505d-dc60-474d-82f3-2a98055537ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8feebf-37a9-46d8-8f27-9b9186ac8444",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84f7e02-aa66-439b-98a3-c80827e7f4cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18acf639-2884-43f0-8e5e-e3e0aa02bc41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831dc92b-f423-42e1-940f-ccb6deda47ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec4a8e7e-a6d2-4743-9817-7c89683aae4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9203f7-192d-468a-989a-0074b0cc67f7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d82bf6-909d-4aca-939c-282a502c1980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5deca21e-aa23-49ba-a5e7-cc6a3a9a057f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7700f9-1ed8-424b-918f-ef41f97aa365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838eeaa8-ea95-4eda-9c5f-238099b2e7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775b9e12-c464-4952-b42f-c304f4dd0c91",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8495a6-122b-4bec-9401-a0c6d608f6e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34152464-46f2-451d-bc49-4514229400fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29f9db6-d8f1-4a6c-ad84-f68abcf3a29e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82ef849-55b3-4b43-8d44-b323ee34f1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab4f2bd-4af9-4d9a-a05a-e952d61c1ba5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12169c6d-dbb4-4299-bcaa-a3f7f345e902",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afa2d537-ad74-4dde-b106-22929afb3ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0b49e1-0405-43ac-99fb-d5c6fa2b3900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1828096c-d73a-4ee0-9148-9e49df50cd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf22475-ecf8-4c4a-ba1c-d6b69f6cd8c1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7cb95f-4185-4ff1-bf46-9672c18d1495",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73112bcc-9138-487f-b055-e5826c07d12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b077332e-535a-4eea-a104-df22e6671d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65bbef47-db42-43cb-89b6-ee7788f76ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3cba0d-23c2-4cbf-9de0-ea09f5c8d10d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24f3b93-a08b-48d5-9144-0fda5f83f128",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fc039f4-d527-4e49-bce0-48684a801829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d5d470-50fa-4fd9-ad71-253705eddbe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6390c3f-0e6a-41b1-a74c-8d29277d123e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1453676c-d49f-44d7-8fb2-b9b965408432",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f1a866-4fd1-4f23-b95b-71606eca5300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96729bb0-9b9b-4513-943b-cba6198534c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0b00ff-4933-4793-be48-fa8077a94434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33509f2e-ce1f-4161-a01d-dc074838df61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82df0d7c-919e-4f5d-b822-3333061ff5d3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb65df8-8f3b-42e9-a259-34e8e46db04c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74bc7837-189a-4756-8fa2-a41ff4a43a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bb6b7c-60ed-4c8a-9b6a-2f42f211280d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e20ac3-b818-4839-ac33-5750c804ccaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606cd0c2-0feb-47ed-974b-42f9acbee7b2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9249808d-1e6f-4a38-ab54-9d2a9565cd63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "088ad54c-cb5b-4468-aeb1-423b3e5e0ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3bd2ce-b6af-49ad-8821-334937ff37cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b4d92d-91de-4a06-bf11-d26ae23faa8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951af305-a347-4239-9da4-c0302753f74d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96e6f3d-6ad6-4286-ba99-39196d26868a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6db9b4f5-c107-4238-b44e-c6ff304a2a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c05c533-22fe-4211-9900-68052b49da11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16afd12b-ad74-45e3-b8b1-3fb19ff5682a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15849653-9d69-4dcc-9d5a-6889fb3170cf",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5aaed18-0452-40e9-ab10-22c686d5b4f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f3bb6a7-fd7f-4dbd-a143-031a75829bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3705ac-a0ac-4609-8033-b2d4b84acdab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ced1de-40f0-4ac7-ba88-b170282c0f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f484cf9-bd46-482c-9aa9-62ca3248be7f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46559a8a-9610-46ea-963e-d1e15c2aeb5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f4a1901-649e-4df0-8c6f-ac423dba34ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a310b54-8e56-4541-949e-a1909f291870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12930a7f-6cf3-420a-8842-b10cbbe13b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c746a2-a1ca-4b27-97b7-77f15bc0185c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed848ad8-9f91-41be-b64e-e11710868b3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75fd01e1-5798-4e73-9d35-52076dc85bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aee218f-7694-4a37-9c50-3cd90357921a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf81bb5-2a7b-4b15-9496-c4553f17abb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ff014c-befe-45e8-b42d-cd6ec19546dc",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf9a141-fd1a-4364-beab-7d37260a5a52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe29ccdf-7915-4a9a-bb53-877f02fb3251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7843a3e3-d720-4faa-810b-44ee8f90b41f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c2746b-bccf-475c-9910-e94dff8b0f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d843b40-2134-4d7c-9f67-f0ab46c0c098",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c74d659-2e89-45f8-be96-78a079d4b8cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79affb2f-5ec2-4dee-8e33-438630d65941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227e01d4-ee72-491c-a0e8-ec55bf3e316c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c605d2-c7cf-4148-981c-13edf56531a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ed8c01-72bc-48c2-82c7-b4be0d5e4926",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6032a6-c868-495f-b15a-cfb599038bad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd95025d-337a-4328-9e85-79035276aa06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4534bb3-c346-4b73-b5ae-dd84ac64a930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e3d1c91-b499-4e2b-8aa8-727047dc564d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66101046-e4c8-430c-8801-309457dd6de4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5bb3e2-3ae9-48ee-bf86-aeff3fd976b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a7bd01e-53eb-4fa5-b220-16ccd1c9dcd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "698157ff-bce5-43f6-9d82-4c6690cb4f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd25542f-eacb-449f-8410-377d9c8afe73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec929552-cf75-43da-ae91-c2454659d294",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60c0f46-f078-4800-b99e-d3ea67e4ec82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb8c5068-3e56-49de-b1f3-e08372683aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90d794d-6f0a-46b1-9a6d-318748776dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce996798-e266-44cd-a31c-e443ec0c3db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395abb43-9a0a-4f73-a707-8b4c89712693",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710259de-61fa-4a0d-ad79-c88b7a6346e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "546a3aee-15d4-42d3-a3ff-d1668f92e0e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab188f6-e133-442c-a642-adc7106d9c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9465a29-a9f9-4981-a87f-c2135ac8b777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b114dc0-4bd1-477e-b935-34cceb8fc30c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c4ff61-71bf-4785-abcd-b0db04d5eb9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b185f99-1b1b-42ae-9615-e6950f068958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8bf6614-72df-4f9e-a896-51a7e9d3ff96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ddea55-b705-422d-a243-e039743c65c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde871c6-0c33-45b4-bfb6-7de0de71c662",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079229a5-0c47-4f11-b37c-ba683b87e518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdb175d3-62e1-432e-ab53-d9af94c593d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac2abee-48d3-44cc-9302-2742dcb52a8a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58886a8f-da53-4c5e-991f-b4ec172f8e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6b0163-8480-4cd9-85c2-c313e94284b0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b154b21-c27b-46d4-bb16-9069fbbd3827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4214a9f-1e8a-410e-b5a9-cbc0a96f6349"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "198a6354-3faa-4a39-9b4f-fb7afb3e625e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b512195-3df3-4e0a-915f-ae2490baa406"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d844be36-d459-4d62-bd05-50d6b85e8b78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9043125f-4772-4aef-a0e9-44a85e2824a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcfb934e-3fbc-4e14-ab7d-1a3aa720db23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "087b15aa-bd20-4db4-92b1-1b9c03dff636"
                    }
                  }
                ]
              },
              {
                "id": "58974210-24f0-4a9f-a8a2-1205a501b984",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fda61c70-70f3-4f47-8c7f-66ec9aa70e83",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb70f564-e081-408a-91d7-27dd45e5675e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4ebecc05-1d29-4cf4-a8ef-292419d45a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f099ff4e-0d34-4d5b-8b66-68d88306fcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "125ca2a8-0a65-4ec2-b551-0b445f69d3e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c4e1fe7-9639-43c6-954e-0991b9db45bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9e983cd-3b29-4776-b561-f97460b0eba0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c98244c5-4d7b-4277-b717-13d48f23d36f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2057c79a-a395-4781-85b6-ee950b0d01c5"
                    }
                  }
                ]
              },
              {
                "id": "24881db0-ed15-4565-93e4-82d7bd233c0a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "97f64776-e4c5-4a02-a198-600423b44006",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a7e810-5ac0-4158-bed3-7869be4c9dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "43f53349-94bd-4263-8d53-0d104dcd916e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21d695f-1b43-4802-ba73-6f2d46f5cedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb39fab6-6fb1-4c23-9f68-3a6cbadf0b10"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8e17d03f-93a3-4248-9ff6-7b429e9d5541",
            "name": "Positive Testing",
            "item": [
              {
                "id": "59af4118-f243-490a-914a-a7e6811076f5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8359a21-fb9f-47ea-a096-af336a9b1e76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a8298540-6a34-4b79-9220-9fd45063a9ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afe607c4-763c-4d24-a623-0fe2186233fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb2441ca-3058-4ff7-b728-1d44d2604cd3"
                    }
                  }
                ]
              },
              {
                "id": "07fe908f-3547-41af-921b-55b661a93a98",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1165355e-752c-43b7-b410-ad6fd51d15d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cf82bf41-baa1-4efa-99af-e004c0118606"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e15ac1b0-cbf9-460a-b776-2d4d68666b72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f350bf1e-cc28-480f-96b1-4cd8b87346e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6adbffdb-bc85-4620-92fb-15788d657dc2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "212ea4cd-7119-4801-b77e-3c641d153115"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9bea73be-f5e4-4464-be83-8bbc7cb93360",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d90ee59-120f-492a-8432-950bb53fa321"
            }
          }
        ]
      },
      {
        "id": "9cf7ab5e-77db-4118-8c92-65e1586b8fda",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f43c7ce1-de8d-48c8-bdae-103f4242a9a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6396380-2783-48a7-a1fe-6f57011badec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9fa3cfa-65c1-4824-8bca-4492f4fcc6c5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b5d3cf-e592-446e-83f2-d18a11931d0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "80da452d-f1d4-451c-a7d7-c8df611826bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f89436-4727-45cf-b47f-3292c383eb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c997f9f-07c5-4b9b-b9db-cbc652ebc1a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3aef203b-d83d-47b1-87f0-037e5bb8d03b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "278a10bb-1fe3-4204-912d-1ee1b7425468"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56470953-1f4f-42c0-975a-782c11d7487c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3afe69d6-a683-4879-8206-5cd174aed924"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0b1ffb8-cd64-4800-aaed-b067d8bfea8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f079870a-a669-42c0-83d3-72b012bb7c7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55dacec6-a9c4-4d55-9d47-d1116d78dc8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0003a837-8d9d-4d39-99b5-32ce3bc37704"
            }
          }
        ]
      },
      {
        "id": "d4b2e6c0-eac5-43a5-8df4-e7d7ee3ec233",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "40d17a65-5a12-4729-9267-237f81f14d8e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5234cf43-5569-4521-be23-13fa395fb477",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec13afc1-0c04-49c6-82df-4a3506f84455",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc8bdcb-ede1-46d4-8f36-e7ddc028cd47",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90308aa9-b768-4b73-b699-4f221561f718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e918d1e5-16e3-4dc6-b3be-467356234ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98e6459a-9065-4379-b345-7b88904babcb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6167b2a-ee95-429b-bd3d-4b286191bd58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51383004-ef2d-48ab-8a92-a0220ea47eb4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7450d45d-28b4-4a10-a8f5-51e6b67e9bca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c63fbd8b-58cd-4e59-94d6-cfd076a08a2a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "501e7d86-5ffb-46bb-a275-c27834b503fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2df21454-589a-4f73-bb0f-b2deb26b7b42"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2474c8df-0435-4c2a-9156-e7b8ef2c12aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "59d544f7-1e6d-4184-b695-422d63f4b268"
            }
          }
        ]
      },
      {
        "id": "0dedee0d-aa91-4222-ba35-745bebfa7130",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ea20c466-72a5-48c7-a4a6-7da9531a66e5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f85201cd-a3ef-4ae9-ad3c-ee0f02b9fff7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ee42968-f6b8-452a-bed1-ff5a14f03b14",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbbef9c-3335-43db-8c05-9056a3dde35c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "841ed476-df4e-4782-a154-96a1188f197f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0dffd1-9ed3-4b89-83fc-62b4d39355ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b835e5f9-e64e-4e87-8fc0-51aae0294ed5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "347023d4-0985-47de-9dce-91a5a191474a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c43dc111-4c92-4dcc-b52d-c4fbdf63ae98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e58f364f-d0a7-477f-8fc2-42194f48c5fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaff03c8-8a94-4e93-944c-9273ea31a393"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a77916c0-243a-4833-bff8-80b964ab25ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9c169111-40f6-4f6f-80cd-65661f758391"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "696f7bfe-e830-4ac0-bbc6-d0cac86538bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08973c32-5c34-4af3-92a0-10041d3f6586"
            }
          }
        ]
      },
      {
        "id": "534dbab6-2004-4b8d-ae68-eef596b76530",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25cea356-078e-441a-8c6a-69a5e118818a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d6cac8f-1126-4bd3-b5ea-fc42ec6d1d4d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f24370da-c28d-4403-9ac1-502755b15574",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cec3560-6795-46b9-b075-ce541d061845",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3bed69c-6380-4c4d-ac58-8889ecf9cfc2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 60.72631578947371,
      "responseMin": 10,
      "responseMax": 554,
      "responseSd": 67.62052664146206,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700959076139,
      "completed": 1700959102591
    },
    "executions": [
      {
        "id": "3bc75751-6dd9-4835-b052-6264e4c29553",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3a882b94-0f66-4472-99ee-49f3a5684798",
          "httpRequestId": "bd2092d1-b9bc-4107-9dc9-817095dd34ea"
        },
        "item": {
          "id": "3bc75751-6dd9-4835-b052-6264e4c29553",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "35cda836-fd4d-4e9e-ae52-4cdf620dfc88",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "0f31d11c-b02b-4092-91e7-a53e92e310cf",
        "cursor": {
          "ref": "d0ee6cdc-2777-4f76-9da6-eaae3e5381ad",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5e37ca3a-a2ac-4315-b386-266241e41c91"
        },
        "item": {
          "id": "0f31d11c-b02b-4092-91e7-a53e92e310cf",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ea05a52e-7465-418a-9710-4dd2dc40a42d",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "a87f710b-568b-4da5-882d-b6dbfdb85d31",
        "cursor": {
          "ref": "9f257fbc-ede6-43d2-a2bd-6bf411522625",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a870fc87-98c9-4f48-842f-48cae728e4a1"
        },
        "item": {
          "id": "a87f710b-568b-4da5-882d-b6dbfdb85d31",
          "name": "did_json"
        },
        "response": {
          "id": "17bdc63e-f214-4daa-84c4-636aa932fd27",
          "status": "OK",
          "code": 200,
          "responseTime": 452,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3776df-f8bf-40b5-a796-8f729d6f57f6",
        "cursor": {
          "ref": "afe5957b-f542-4fbc-99c5-ddbcba0d2919",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a81110b9-94b5-4054-8802-1d5e4c868dac"
        },
        "item": {
          "id": "4d3776df-f8bf-40b5-a796-8f729d6f57f6",
          "name": "did:invalid"
        },
        "response": {
          "id": "d8b44109-480e-4722-88d6-afa611cbea92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3776df-f8bf-40b5-a796-8f729d6f57f6",
        "cursor": {
          "ref": "afe5957b-f542-4fbc-99c5-ddbcba0d2919",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a81110b9-94b5-4054-8802-1d5e4c868dac"
        },
        "item": {
          "id": "4d3776df-f8bf-40b5-a796-8f729d6f57f6",
          "name": "did:invalid"
        },
        "response": {
          "id": "d8b44109-480e-4722-88d6-afa611cbea92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d83f567-5ae0-497e-8571-37218b4aca0b",
        "cursor": {
          "ref": "957b4a6d-db6d-40fe-8db4-42c3fbdf06be",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1771f012-8ed2-4c91-a2f2-0094ea5b6b72"
        },
        "item": {
          "id": "5d83f567-5ae0-497e-8571-37218b4aca0b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "42140ed4-f6c7-49f0-998b-670ff435658d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 87,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f81853-a74f-4bda-b5de-141f79d79113",
        "cursor": {
          "ref": "b5676e94-8997-4d0a-81db-ecee87b2ceb5",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ef829bcc-821f-4c0b-9ccc-191a13155a3f"
        },
        "item": {
          "id": "79f81853-a74f-4bda-b5de-141f79d79113",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4cb59719-4843-4244-8ec4-a95bb22752d2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74cda783-f2e5-40da-bf78-902963d024fe",
        "cursor": {
          "ref": "4221a57a-b114-4126-a6e0-d1ebbb28bbf7",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8d967ae5-d08f-42d9-873b-5d63e7babada"
        },
        "item": {
          "id": "74cda783-f2e5-40da-bf78-902963d024fe",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0bd8c323-51f7-49c2-b56f-df0e94f7c26b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ce8bae-f11e-4141-9406-e494567a945b",
        "cursor": {
          "ref": "3a63a1b8-5280-46df-b08e-bd519968dd1c",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "28166ead-d0a5-4611-bb9a-ccde8d59c2a2"
        },
        "item": {
          "id": "91ce8bae-f11e-4141-9406-e494567a945b",
          "name": "identifiers"
        },
        "response": {
          "id": "ba672110-7191-42bb-b357-c53812a2f7f6",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bec6ccb-0ae7-4ca0-b5cb-6a75e6c020ca",
        "cursor": {
          "ref": "d028bce9-fc11-42b6-8f44-3d95f7634ecc",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0fe444e1-d047-4e0b-b19b-bc1f57af89c7"
        },
        "item": {
          "id": "9bec6ccb-0ae7-4ca0-b5cb-6a75e6c020ca",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "08844e08-a5ad-4d71-84a4-f2d6481ed0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6fa766-a6c1-490d-9908-413e7438f930",
        "cursor": {
          "ref": "0e8deaa4-f2bf-4039-a547-1469fc69ee62",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6cc0646d-722c-420f-97c6-bd13e4de6a74"
        },
        "item": {
          "id": "4c6fa766-a6c1-490d-9908-413e7438f930",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c6f3868f-6f37-4580-b76a-62ac993c6c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5aa768-d9c4-452c-a3d5-9d873ab4d48b",
        "cursor": {
          "ref": "3696c7ae-934d-4bc8-b35b-00bec7833aae",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a17d9ee0-e2f0-4868-a9bd-eafe04c232e4"
        },
        "item": {
          "id": "ab5aa768-d9c4-452c-a3d5-9d873ab4d48b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bbbe3667-450d-490a-b7c4-b1148872dbf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c768eaa0-87e3-4e07-9240-d18d030c8d66",
        "cursor": {
          "ref": "da013d81-8a74-41e2-bfbc-da6c4f3e4775",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "68cd12a2-8a7b-4e88-a4dd-7905d7c55738"
        },
        "item": {
          "id": "c768eaa0-87e3-4e07-9240-d18d030c8d66",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "68949c1e-2712-4994-bed9-5f9bc06c1063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455ae671-a5bb-4aba-9eab-d442a0466a05",
        "cursor": {
          "ref": "457a8fc8-1667-4e1c-b7df-25a0b5faf70d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9aa21609-518a-4a28-8bf5-ae1b4e4c9df2"
        },
        "item": {
          "id": "455ae671-a5bb-4aba-9eab-d442a0466a05",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7121c1a0-ea67-4882-9be7-9810321c1aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3433ab1d-b50f-4eb7-8efa-45aee4b7d3dd",
        "cursor": {
          "ref": "3082538c-ddc1-4b9f-b9d5-69ac28d78861",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fcc55fca-0c02-4e93-8c5e-db2ce16124fa"
        },
        "item": {
          "id": "3433ab1d-b50f-4eb7-8efa-45aee4b7d3dd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3618e88f-64bb-4ccc-860c-396b2eb36374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4191ad51-2431-48fe-897d-142ade690509",
        "cursor": {
          "ref": "68fb6dee-a11a-4a4b-9001-d07942dd4868",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "731ac960-450f-4c81-96bb-7baf082e08d9"
        },
        "item": {
          "id": "4191ad51-2431-48fe-897d-142ade690509",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b44f9819-ed82-4c95-8b13-ade03b427e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddac1407-2543-47d2-9c37-df64c500ee2c",
        "cursor": {
          "ref": "a1b913d2-d282-4883-8f0b-fc77840aa154",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a09e7a4b-23bc-4669-962a-0505eca247dd"
        },
        "item": {
          "id": "ddac1407-2543-47d2-9c37-df64c500ee2c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9921756e-48f1-4879-b6b1-8586ca188022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8a1dc5-5958-44fc-9723-b1f2c4f86892",
        "cursor": {
          "ref": "44795bbd-694d-4e8b-89ea-3d33a2019296",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7e7822e3-1456-4e4e-9ed2-9e55e511af25"
        },
        "item": {
          "id": "cb8a1dc5-5958-44fc-9723-b1f2c4f86892",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3a31fb72-51b1-4bee-8800-ffa9a4f39703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a93097b-4e8c-4a43-9496-d51f54be9101",
        "cursor": {
          "ref": "30854a56-d27f-424c-abe2-13c745de0ec3",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a94f2f02-f724-4044-8e0b-931c11a29e0f"
        },
        "item": {
          "id": "5a93097b-4e8c-4a43-9496-d51f54be9101",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "72b64d35-d9fa-4d40-9b01-d6583521e22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992d6aa7-0885-4d0d-92ac-8a49698aa14d",
        "cursor": {
          "ref": "6e8b10fc-888c-4766-af90-1ef3d34a0a6f",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8107b5df-2b13-4b3a-9739-f76e35b3bc42"
        },
        "item": {
          "id": "992d6aa7-0885-4d0d-92ac-8a49698aa14d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3c2d7b35-7d38-4c96-81bf-2f82a46081a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec49a2eb-50c3-4ea0-a4b8-327d0acea267",
        "cursor": {
          "ref": "3e7d5f5a-f859-4f2c-8c0b-cc38558a5da8",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3a1344f5-da5d-403d-8259-a8d901e95f56"
        },
        "item": {
          "id": "ec49a2eb-50c3-4ea0-a4b8-327d0acea267",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "edda3b7e-abc6-4529-af5e-4079d8f6fb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466dfbfb-e70a-4e43-bf54-cd8d1c7aa3ac",
        "cursor": {
          "ref": "45493fb5-fcf8-43b7-a4c2-aa223f125410",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7300eb37-1e44-460f-b6f3-8dbcf41def14"
        },
        "item": {
          "id": "466dfbfb-e70a-4e43-bf54-cd8d1c7aa3ac",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1040f41a-7476-4ded-9be8-619e1becfba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d97fe00-2cd1-49b4-80fe-f4646e732443",
        "cursor": {
          "ref": "dc3b8bf4-ed2a-4d11-9c77-ed0c4d37663b",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5602b35f-de05-4441-ae6c-c5e49682e8b3"
        },
        "item": {
          "id": "0d97fe00-2cd1-49b4-80fe-f4646e732443",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e1d80f23-b4ce-403c-ad0b-2a0c42d03abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99eedfa9-677a-4071-b691-c5b79b750bd8",
        "cursor": {
          "ref": "725eafe9-5f07-4606-b07b-e16fb91aee35",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6aa3c302-7dae-458a-a161-38573f6357fd"
        },
        "item": {
          "id": "99eedfa9-677a-4071-b691-c5b79b750bd8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ba10c9d2-b5bf-46ed-b504-01942b933968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e428ed-c677-4c22-988b-f40faa05483c",
        "cursor": {
          "ref": "531e993d-a987-4d6a-9223-0de952435b79",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "829a0d1a-6a48-4ee6-ac79-c3a770befa6d"
        },
        "item": {
          "id": "16e428ed-c677-4c22-988b-f40faa05483c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "90f41ec3-b36a-48be-a88b-8156857bc350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51721ec5-75ed-4043-b4bd-c714e8703fc2",
        "cursor": {
          "ref": "e8f8dae6-70e0-4d78-9045-de47e2f2c894",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3844edcc-eef7-47cd-9841-9e7ba91d27f1"
        },
        "item": {
          "id": "51721ec5-75ed-4043-b4bd-c714e8703fc2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9da60a4f-aa9a-4885-8f7e-d9480f82042d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36dbdc8-5fb9-46f9-ae4e-ebe50ddd0cc1",
        "cursor": {
          "ref": "02372d8e-91af-458c-aa00-b23f0b188ddd",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "14795e2c-daf7-47a6-ae88-108d4c5c4a8c"
        },
        "item": {
          "id": "f36dbdc8-5fb9-46f9-ae4e-ebe50ddd0cc1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d4fdda22-c5f2-405c-881a-ebbb5d5c976f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e47af35-037a-4a18-b0fc-fec6304dda24",
        "cursor": {
          "ref": "8547300a-1700-4a6a-bc01-7d7a3381e32f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "72c6dae1-21fe-4bba-a961-3af173915d1c"
        },
        "item": {
          "id": "7e47af35-037a-4a18-b0fc-fec6304dda24",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c97e53c9-0cb1-412e-8275-f350c8e5cb15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f266c30-7da3-4656-afbb-a099c04e5aed",
        "cursor": {
          "ref": "04cb75e0-4152-40d7-9ca4-39efcdd812da",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "25ad2c46-73a7-458c-a95d-33a911388b08"
        },
        "item": {
          "id": "9f266c30-7da3-4656-afbb-a099c04e5aed",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "57247126-3129-4030-b6ec-1ce5ee44cb67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39686577-43c3-4013-a590-0cb2b37551c5",
        "cursor": {
          "ref": "a38adb24-df78-4a2f-8a63-63843d239877",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bcdd4a06-f73a-4e03-84e3-f57fe5224173"
        },
        "item": {
          "id": "39686577-43c3-4013-a590-0cb2b37551c5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "94575c52-caf7-46d7-8088-b396b57509d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3160b8-f8d4-48db-8c60-cbcc124d7b34",
        "cursor": {
          "ref": "40b5973d-fe05-4dc3-9ebb-bc41680d771b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3f893add-f537-4af5-b60c-411285aaa975"
        },
        "item": {
          "id": "9b3160b8-f8d4-48db-8c60-cbcc124d7b34",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6198829f-8bba-4589-8a91-9986ca8dd09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16a4bce-0c1d-4412-aa8e-ba8cdbbc1fa3",
        "cursor": {
          "ref": "8b771184-db6f-481b-b530-6f6d94b19f7b",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a88ccce9-cf16-472c-827b-2321fdc1eec7"
        },
        "item": {
          "id": "c16a4bce-0c1d-4412-aa8e-ba8cdbbc1fa3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b4078ad3-db7e-4b45-b70a-1b65fa747e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cf40a9-069f-469c-9616-83c02df79565",
        "cursor": {
          "ref": "a0eccb5c-c3cd-4749-b7fb-c823b7956566",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a6833571-d7f5-486a-b34a-ae549620cf9a"
        },
        "item": {
          "id": "87cf40a9-069f-469c-9616-83c02df79565",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "911b7ce0-a81a-4f8b-95ff-30e89ebc2d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb0dc15-a5a1-4410-a735-8d15021e0956",
        "cursor": {
          "ref": "df45b2f3-09f0-4830-9318-fab5b43efe52",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9942166c-1eb9-4232-9994-0feb95a38903"
        },
        "item": {
          "id": "aeb0dc15-a5a1-4410-a735-8d15021e0956",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b6f25818-3554-40b9-bc1d-8cb1b65ddada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a492ee9a-071f-41c7-bf61-d1650a87f8bf",
        "cursor": {
          "ref": "ddf21f02-a7e9-4e70-bc13-30e392a2e3ec",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b0e676a1-35e2-49c4-bf5c-5a50622d9bf3"
        },
        "item": {
          "id": "a492ee9a-071f-41c7-bf61-d1650a87f8bf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ec4b31e1-efb1-4be2-bf86-3f1955af296a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d033a348-4331-4646-84cb-3b511e008815",
        "cursor": {
          "ref": "5603ffc3-5d61-4c98-96e4-ebb8386b183e",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "08251797-4ae3-4268-be0c-abbaa0f4c47d"
        },
        "item": {
          "id": "d033a348-4331-4646-84cb-3b511e008815",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b75008a8-6951-4e3c-826d-6da68533ffde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7939eb4-35fe-4f9f-b472-2614cc63f923",
        "cursor": {
          "ref": "44289b21-bcb2-4f63-83cb-30dbfbf02e89",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "32b28714-fb98-4530-9d58-0b04235eeae6"
        },
        "item": {
          "id": "a7939eb4-35fe-4f9f-b472-2614cc63f923",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2fd43dac-c6b7-4758-bd17-1328b33b749b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf97ee07-5d92-4497-ad7e-dcd89a7f901b",
        "cursor": {
          "ref": "4586a83b-47fa-473e-bf19-4abaa1b3ac28",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e618cb74-5fda-4ec9-b6d7-dee34c288496"
        },
        "item": {
          "id": "bf97ee07-5d92-4497-ad7e-dcd89a7f901b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a4b15d5b-7411-4fc7-a553-0725777be92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b45377-b840-4ee0-a868-de1efcb1e478",
        "cursor": {
          "ref": "8c904fff-f864-40e2-aea3-4213825afe8a",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "250d8ea8-d6c8-47fd-b342-4386cb563ca8"
        },
        "item": {
          "id": "b4b45377-b840-4ee0-a868-de1efcb1e478",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "eb89639b-6368-400c-9843-41dcd46e5e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de08764-507b-4063-b669-f4176b16ed4d",
        "cursor": {
          "ref": "26adbeca-749b-429c-a894-f8a67691f786",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f232dac0-7e7b-435a-83ea-13f8a0eda273"
        },
        "item": {
          "id": "3de08764-507b-4063-b669-f4176b16ed4d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ccb4f3e7-ccde-4754-b310-263096bccee6",
          "status": "Created",
          "code": 201,
          "responseTime": 554,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "76dc2d2a-9d95-4067-a4b9-b8b6344af8d4",
        "cursor": {
          "ref": "77a18804-a4d8-4dd5-a82d-de4f2b70ff40",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a6059f8f-1945-433f-8a4f-3fb08adf3361"
        },
        "item": {
          "id": "76dc2d2a-9d95-4067-a4b9-b8b6344af8d4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8d463834-fe37-4705-833c-7167a8c97f22",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "357a3161-978a-4dd2-9497-fe9b21f781a8",
        "cursor": {
          "ref": "870bdc1b-c4c9-489d-9fd7-ac61c1daf76d",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9a7974cc-8aa3-43aa-a350-b106ac1750a5"
        },
        "item": {
          "id": "357a3161-978a-4dd2-9497-fe9b21f781a8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "abc1bebb-713b-4598-9bfc-42048228ae9f",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e1dc5cd1-6bd6-44fc-b0dc-2806dab47c91",
        "cursor": {
          "ref": "889cf702-f7c0-4e9d-8c70-29cf10386e97",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7982ea30-3653-4064-80c0-687f76614c6e"
        },
        "item": {
          "id": "e1dc5cd1-6bd6-44fc-b0dc-2806dab47c91",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "713bbf5e-60b4-4aa3-8445-76de6120c242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d9c7ab-2691-426c-9d37-d114298a5525",
        "cursor": {
          "ref": "4f672e3e-7028-4b8a-8170-a967fcc16bae",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "099131b3-ceb1-4b17-a615-eb7af6ae1be7"
        },
        "item": {
          "id": "68d9c7ab-2691-426c-9d37-d114298a5525",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "be320e14-6f3b-4a13-898c-93c4d25af55b",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "02d4d67c-8452-4700-86e7-585e7a7d2b10",
        "cursor": {
          "ref": "0209d7c1-f7b1-4c1c-a5a0-19a2e3c8851a",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "41ed292e-512d-4798-9257-796826f27144"
        },
        "item": {
          "id": "02d4d67c-8452-4700-86e7-585e7a7d2b10",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "79c3bf0f-5564-4a21-a102-c44b5faf2f35",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8a01fb85-2726-448f-a621-fe6fb3278924",
        "cursor": {
          "ref": "4ff949b7-f615-4c96-9f77-5fbe3f72b244",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2cd8a79b-af56-4c8e-9ecb-0de4da6f82c2"
        },
        "item": {
          "id": "8a01fb85-2726-448f-a621-fe6fb3278924",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c8ecdd5d-3096-4080-a7e9-f4c09e971063",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "247be295-41f7-4142-b9c2-29d14bb4b422",
        "cursor": {
          "ref": "f0f6540a-89f9-4804-8031-a92e218eb7c6",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2c394cd3-a2ed-4de4-bc60-5a644fc308c0"
        },
        "item": {
          "id": "247be295-41f7-4142-b9c2-29d14bb4b422",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a621e928-9ff0-44d6-9a47-946ee1c3a925",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7457fafe-936e-4c9f-a4d8-ab6cb11d0ce7",
        "cursor": {
          "ref": "3600a04b-2623-4ec4-8123-5132805f014b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b5b089ca-64c8-4fd0-8d9d-b4628428c343"
        },
        "item": {
          "id": "7457fafe-936e-4c9f-a4d8-ab6cb11d0ce7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e4bd2f28-5616-4db8-b5bd-d270ae94ed09",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5108f309-975d-4cdf-b31f-2975b49ab90a",
        "cursor": {
          "ref": "7e09b453-a576-48ef-88d5-1b9eeb5f496a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b93cb17b-5230-4aa4-9b95-fc3dfb75c1cf"
        },
        "item": {
          "id": "5108f309-975d-4cdf-b31f-2975b49ab90a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6692bf1e-22d1-480f-a65f-c3c36ab1d689",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ccaafac3-9630-42cb-abf1-0289d273af74",
        "cursor": {
          "ref": "748a1675-9f4b-4d2b-9891-5334c9a3f264",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "403a6566-5891-42ad-9970-792452ed1a0e"
        },
        "item": {
          "id": "ccaafac3-9630-42cb-abf1-0289d273af74",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "47f5165c-56bb-4df2-8c1e-97d51c09a02d",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7f78525a-cb5e-4033-a415-127348f19fea",
        "cursor": {
          "ref": "10a4bd68-00f2-49c6-a894-c01eca424310",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "25e86538-843c-4e5f-ae6a-89a9d180e379"
        },
        "item": {
          "id": "7f78525a-cb5e-4033-a415-127348f19fea",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cd96a4f0-55c0-44b8-847c-4308324f3183",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1092a8cd-88dc-4889-b983-f54dfcc823ce",
        "cursor": {
          "ref": "7be217fa-e545-4d10-8879-536208c24583",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5bb693b0-4afb-477b-a23d-41c311f64dca"
        },
        "item": {
          "id": "1092a8cd-88dc-4889-b983-f54dfcc823ce",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d4fa315f-8fa0-47fa-91f6-3b649ba9581e",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "fce5198e-ab3c-48e7-821c-b388f7429f08",
        "cursor": {
          "ref": "d59baf56-ba66-4a8c-bc66-4160484b1973",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "15ab76d7-8fd3-4499-971a-a501da46f2eb"
        },
        "item": {
          "id": "fce5198e-ab3c-48e7-821c-b388f7429f08",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2a02e693-f864-4326-aa42-414957ce1d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10093413-d2e7-4db9-bb31-ac4f9e043096",
        "cursor": {
          "ref": "c7cf37ad-a190-42f9-90e7-d6bd5bffbcd8",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f0db649e-22ab-4b45-8aa5-db5ec9edbe2d"
        },
        "item": {
          "id": "10093413-d2e7-4db9-bb31-ac4f9e043096",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3fe0a886-588d-4dba-80d1-8c85a4ff73b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1136bec-d647-4ef8-965d-0075a5efb9c3",
        "cursor": {
          "ref": "9a27f6b7-85f2-49b1-854e-b98020e3a8c1",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d8bda281-12ea-45e5-b46d-85f69f00a723"
        },
        "item": {
          "id": "e1136bec-d647-4ef8-965d-0075a5efb9c3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "42856fd2-45fc-4188-a611-dac473cbd9e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f39530-c82e-4b76-aaad-73ac505f3a3c",
        "cursor": {
          "ref": "a05dd2c0-f147-43bb-96c0-eaabebf330e4",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "774ca799-61e8-4896-ab3d-a2731e7a2261"
        },
        "item": {
          "id": "58f39530-c82e-4b76-aaad-73ac505f3a3c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "937fa867-c8c3-457f-9e5e-eb83982e88d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedb7d3c-65e5-491a-aab5-f70931327977",
        "cursor": {
          "ref": "0f3d8e12-309e-4725-8366-4324c8f4c258",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4885d8aa-9fd2-4380-b73e-0685863533d1"
        },
        "item": {
          "id": "cedb7d3c-65e5-491a-aab5-f70931327977",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bc20f8c6-82d6-4d4f-a487-2f7efe8dbd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17411d9-4b1d-4cea-8b56-eaf1dcb5d05b",
        "cursor": {
          "ref": "f249e1f3-1683-466b-9d22-11e5ae56c1bc",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d11b8c0c-a033-4793-8d04-703a2ba11e5c"
        },
        "item": {
          "id": "e17411d9-4b1d-4cea-8b56-eaf1dcb5d05b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d18d76f1-3b7b-4754-b6a3-8ce907e1dfbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529a1434-3251-4dce-a739-662c10c31a3f",
        "cursor": {
          "ref": "203c5568-ef51-4f40-a54b-84482caebedf",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8aa89931-862b-4329-a43e-a0d9a75ce3ab"
        },
        "item": {
          "id": "529a1434-3251-4dce-a739-662c10c31a3f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b35db957-3127-4cde-8bf2-7e7315b21864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143b41d8-a408-4822-b160-bf48971cae47",
        "cursor": {
          "ref": "0edb9da5-f973-4964-95fa-3bf17c5ce0f9",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f33ac542-cd25-4697-b6f2-5257815886d9"
        },
        "item": {
          "id": "143b41d8-a408-4822-b160-bf48971cae47",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dc7e9daa-7b60-4ca4-86ef-46f4be872206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefb77a5-71b5-4aec-9873-01995e58e6c9",
        "cursor": {
          "ref": "8f0536f1-a875-4300-b173-0bd4cc99ba76",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a8a16914-904c-4e23-b71a-58359eda4dcc"
        },
        "item": {
          "id": "fefb77a5-71b5-4aec-9873-01995e58e6c9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5c18926d-16cb-47ff-b727-c91ac50a42b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9584bd35-e341-4258-85ce-e6b5a71dd762",
        "cursor": {
          "ref": "20c29136-63b7-40e7-a531-85bdd257a81a",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "59ddd2f6-7d5a-473f-9093-44d1d3d0e113"
        },
        "item": {
          "id": "9584bd35-e341-4258-85ce-e6b5a71dd762",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8b3f582e-a6fb-458b-9f67-642cf1ac4f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0396b758-d64e-41bf-8b12-fc1bebcc7bde",
        "cursor": {
          "ref": "1a42a0e3-1e6e-481d-9944-95ba2d4a820b",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "538cd898-1285-46b5-ae42-bc9f306f506f"
        },
        "item": {
          "id": "0396b758-d64e-41bf-8b12-fc1bebcc7bde",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dfcb3a02-d03e-47e8-9a60-c239c41c3c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b504cc7e-6b42-4a8b-845e-bc54fb763dbd",
        "cursor": {
          "ref": "d592194a-0a34-4615-a401-ad0b94fb259b",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d8f09989-cc53-4f34-9b17-c7e7d63d266f"
        },
        "item": {
          "id": "b504cc7e-6b42-4a8b-845e-bc54fb763dbd",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "988c31be-3eab-4cec-b24d-931ceb001c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea91dfe-496a-4f95-85f3-fd4ca65f5be8",
        "cursor": {
          "ref": "82d56cbc-7d61-43ee-92ae-1187d39cd18b",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3593566c-5322-4b08-9a65-b6699ae7b34a"
        },
        "item": {
          "id": "6ea91dfe-496a-4f95-85f3-fd4ca65f5be8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f9088bdf-193b-48b1-9bb8-ee889c158ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea21a3f-e408-4936-8a12-2f032eca3620",
        "cursor": {
          "ref": "616c9329-2e03-4245-b0ea-12cababf2f77",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f811610c-3dc2-4648-a43a-12abd79db2a3"
        },
        "item": {
          "id": "cea21a3f-e408-4936-8a12-2f032eca3620",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "39c93c3b-4f55-4b7d-8bbc-737037f5c219",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "676bf4d8-fcde-4d23-be23-1fde3601ceb5",
        "cursor": {
          "ref": "39b4cbc2-be8c-49dc-97b0-d319c61c2f44",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "342ab324-167d-47a6-ba8b-0bfad24e16ed"
        },
        "item": {
          "id": "676bf4d8-fcde-4d23-be23-1fde3601ceb5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f317d6a9-1247-44d4-a376-b47d7bc954b6",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "47ba22e5-e385-481c-bcfd-a0467d26df39",
        "cursor": {
          "ref": "a56a130a-3793-4c47-ae2b-aadd020ed0cd",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "14331733-0ba1-4ac6-9e2d-8f1528f642e1"
        },
        "item": {
          "id": "47ba22e5-e385-481c-bcfd-a0467d26df39",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "72790d6d-f11a-4503-a074-8999c38807f7",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "604d68d0-7eec-49ff-bc60-134c87945235",
        "cursor": {
          "ref": "b54f9740-8599-4b01-8b54-666b8b96f918",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2adafa9f-c861-46be-ae71-80674f39962a"
        },
        "item": {
          "id": "604d68d0-7eec-49ff-bc60-134c87945235",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "35f5840f-bbe0-446a-92e3-4a562fb4e05b",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c542d2c1-a624-46bb-8bad-a13111e8eae2",
        "cursor": {
          "ref": "459231ef-8c93-440b-a987-e4407fab69e7",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "90d2921a-43e6-4cd5-aad1-63a1c211321e"
        },
        "item": {
          "id": "c542d2c1-a624-46bb-8bad-a13111e8eae2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "461ae87a-5402-430a-8158-319696848434",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "79027362-963c-42c6-a174-c9046abc8d80",
        "cursor": {
          "ref": "c59e8170-c24b-413c-9d69-59cbad6c442a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "eea30527-976c-4022-96c0-1d79ac65ad3b"
        },
        "item": {
          "id": "79027362-963c-42c6-a174-c9046abc8d80",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "92dfbbcf-e6d2-434b-b3d9-d2c1cb2c9cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9596228a-53a7-4020-8226-a65609804ae4",
        "cursor": {
          "ref": "227b6e38-d0c3-4eeb-9073-e4ef88f8484e",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9a6277a6-8ceb-4c71-9aa4-0a7cce458454"
        },
        "item": {
          "id": "9596228a-53a7-4020-8226-a65609804ae4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "18f78edc-73da-4d02-b21e-33108afcff43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d3c209-9a6c-4aae-93f6-5e0846942a85",
        "cursor": {
          "ref": "cf2da0a0-9e9f-4b35-9cad-69494da9d21c",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "89120055-0bd8-48dc-a196-394af1593712"
        },
        "item": {
          "id": "98d3c209-9a6c-4aae-93f6-5e0846942a85",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "52934e90-2dbb-4c34-bdd6-160bfada9603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854dd2e1-919a-451b-935f-7884a2efc6f7",
        "cursor": {
          "ref": "fccead17-0e70-4ecb-abbb-9363ec185b12",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9cd85113-a48b-41cb-a62e-e3f6913ac07f"
        },
        "item": {
          "id": "854dd2e1-919a-451b-935f-7884a2efc6f7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "164d4b19-88db-4eeb-aadf-66404842ce6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d71268-4aab-45b9-9395-272b2515f884",
        "cursor": {
          "ref": "8236ab86-d527-4506-be9c-4efa08916026",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bd96e38f-391c-44fc-8d06-ffcb865f79e7"
        },
        "item": {
          "id": "c2d71268-4aab-45b9-9395-272b2515f884",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6ac67138-351b-492b-8f6e-a7e015c32fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7545890-8ce7-4fc7-b6ae-22b6ed5a6bee",
        "cursor": {
          "ref": "3c4dc49f-f766-428c-8e5e-46847bc40bf5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8d109267-27ad-4cd2-878c-4bc71c246888"
        },
        "item": {
          "id": "e7545890-8ce7-4fc7-b6ae-22b6ed5a6bee",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d4acac62-683d-4201-a920-3d96a13aefd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d86758-0390-4aa1-8440-f0eab21091cf",
        "cursor": {
          "ref": "1ca941c0-a140-49bc-9a10-8d1a3ed7c9f0",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1b4fb37c-0af5-43c8-9618-18fbc83df333"
        },
        "item": {
          "id": "f2d86758-0390-4aa1-8440-f0eab21091cf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e15a4e86-ab6c-4ae8-9976-9186d90ab3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aaa39f2-110c-4e5b-bc33-bdd5a54b6577",
        "cursor": {
          "ref": "00847331-d7e3-4315-ad45-d24e281bbbff",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "00e2d0a0-6a7c-4bd5-95e1-aca803ba24f8"
        },
        "item": {
          "id": "1aaa39f2-110c-4e5b-bc33-bdd5a54b6577",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2295f89d-8a8a-48cc-a427-c9f0dbb4ec62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9866b3bd-8291-44eb-89ea-9f29eb027d25",
        "cursor": {
          "ref": "79110eca-6feb-4ed1-913b-3468086a0e23",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4b5c6c9f-b52e-48ba-92db-cb04d26ab7c2"
        },
        "item": {
          "id": "9866b3bd-8291-44eb-89ea-9f29eb027d25",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "40ec9659-918f-43f7-b196-23d7f8f39419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09c4d0b-d0dd-4659-9bfb-4ef1762979b1",
        "cursor": {
          "ref": "f8c030fa-b0e0-4c2b-821b-898451381405",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f9f1f54d-45ee-4f3a-983c-3a31eb344871"
        },
        "item": {
          "id": "e09c4d0b-d0dd-4659-9bfb-4ef1762979b1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9f5d0561-490d-4186-87a5-7585dd876b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abd368c-e20b-4a26-b5fc-8e8f26d4a7eb",
        "cursor": {
          "ref": "649b7040-f3d3-4fdf-9248-4822ae77652a",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "96b4a252-6650-45f7-be46-88a90257e2bf"
        },
        "item": {
          "id": "2abd368c-e20b-4a26-b5fc-8e8f26d4a7eb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "37207314-7b5b-498f-b538-50b3a1789659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2664bf-c832-48f9-8c52-7a0dd87b12a4",
        "cursor": {
          "ref": "89a20af6-cd77-444a-ab67-f54a511769cd",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "50a002f5-8651-4b8d-b282-60833f8cd09c"
        },
        "item": {
          "id": "0a2664bf-c832-48f9-8c52-7a0dd87b12a4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e15361b4-bf65-49bb-a4f0-8f21b5140a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5681e61c-83f8-40ae-a861-80a2a8ba8dac",
        "cursor": {
          "ref": "f25430cf-012b-44e4-af87-aac50f2dc0ff",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8b35dc2c-520d-4d9f-b8b5-fae2286813af"
        },
        "item": {
          "id": "5681e61c-83f8-40ae-a861-80a2a8ba8dac",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "51d28683-efb6-4af1-bf11-c1e4818da8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419b04ef-0702-4648-a5c0-89b6c970a809",
        "cursor": {
          "ref": "fa64ad04-034d-4043-bb9d-00d2d77c1a8f",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fe135b17-1ec2-43b7-a049-50ee91015b96"
        },
        "item": {
          "id": "419b04ef-0702-4648-a5c0-89b6c970a809",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2ec81be3-e7a6-4f5d-82cd-dc10352b4ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28589ba1-0260-404e-8713-f18c4bd28cf4",
        "cursor": {
          "ref": "9d4f87b4-be0c-4df9-ac3a-bfa827432b0a",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fb113845-046a-46c7-a846-7e4977f5202c"
        },
        "item": {
          "id": "28589ba1-0260-404e-8713-f18c4bd28cf4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "db0baf3a-6945-45bd-a7c4-6842a2c229c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cb71e2-b621-4186-ad78-21de95fcb3a4",
        "cursor": {
          "ref": "b1d20bce-c017-49e2-b339-a96b28f87960",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6f0a2983-e38a-4b12-9d05-0d96436686b2"
        },
        "item": {
          "id": "29cb71e2-b621-4186-ad78-21de95fcb3a4",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "88dab107-6df7-43f2-b384-e7cbdd59af2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5c24db-0c10-4a4d-8845-58b31df9075f",
        "cursor": {
          "ref": "2577c241-c09a-43a8-acc6-c7f74f70aa29",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c705c986-7a71-4cfb-ae74-1436b72f4df1"
        },
        "item": {
          "id": "bd5c24db-0c10-4a4d-8845-58b31df9075f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3454d6f1-c5e1-41fa-b686-305fc4b86095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5303255-ddb6-41af-916e-27d068edbafb",
        "cursor": {
          "ref": "895aa4c7-0856-4b48-ba8f-1eded527351f",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "dca0a62f-c825-4192-9ded-ca0d80d8cec7"
        },
        "item": {
          "id": "a5303255-ddb6-41af-916e-27d068edbafb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "be8ec674-1d39-4e3a-831a-29ad81abf682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e57d423-5774-4650-b415-e9a616d04a36",
        "cursor": {
          "ref": "b1187bb2-4659-463c-af6c-52aa8f5f00f8",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "30653d60-d978-49f1-bc00-9c414b98ecc5"
        },
        "item": {
          "id": "1e57d423-5774-4650-b415-e9a616d04a36",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fee95046-f9a3-4cc3-b746-5564ed649c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43895048-9df1-4796-b915-67122256d3c4",
        "cursor": {
          "ref": "4ff3a5e4-039d-4075-8803-ff4b2308cc3d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d37d3136-efc8-4a71-aa8c-a3d39da484e6"
        },
        "item": {
          "id": "43895048-9df1-4796-b915-67122256d3c4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f4464aa9-a98a-4bc9-b2e7-128af0b6e08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c08561b-074b-4484-83c7-4c08eff0ef98",
        "cursor": {
          "ref": "4c79b0dd-573d-4979-8385-031e6062641e",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "923135fc-7fac-4e14-8066-b3607193740b"
        },
        "item": {
          "id": "9c08561b-074b-4484-83c7-4c08eff0ef98",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2cda80b4-e6b1-46a1-897e-0c8120084491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f79f61-c56f-4d52-9bc8-ba6f81e2896d",
        "cursor": {
          "ref": "1c4ab880-54aa-468c-9118-472af13fc47f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7bf03b9d-75fb-44da-907b-5a65ca82edc1"
        },
        "item": {
          "id": "30f79f61-c56f-4d52-9bc8-ba6f81e2896d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5bf6d710-a2e7-4c05-9979-fcc5ecb4633e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91121217-288f-45f8-828e-a9627982b67b",
        "cursor": {
          "ref": "b9785f00-42ca-4cd9-b879-ec92cf5260ea",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0d60daba-5b1e-4e28-9a34-3822fa88b06d"
        },
        "item": {
          "id": "91121217-288f-45f8-828e-a9627982b67b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2e05f5fe-be3c-4ffd-a436-c043ef032620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3fd1a6-b5b3-48e2-91c7-f335376737ee",
        "cursor": {
          "ref": "cb27311e-50c3-4b5a-b865-7a287ef58453",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "62b217f1-707c-4394-9386-d211366d7c82"
        },
        "item": {
          "id": "0f3fd1a6-b5b3-48e2-91c7-f335376737ee",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5ce1006e-a896-4c7f-ac62-4b27415ef7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5a0a15-91f7-43ab-86d0-562477918428",
        "cursor": {
          "ref": "3585acba-40b1-43d1-ac00-fc83d03263ac",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2143b5ee-6c31-49a3-8daa-98e2cc63eb9d"
        },
        "item": {
          "id": "6e5a0a15-91f7-43ab-86d0-562477918428",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fe4139bf-f6f0-47ec-abed-0a1bca9afaa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a2fbcc-2305-4853-84e4-c8bc285d9465",
        "cursor": {
          "ref": "20780b39-52b6-486f-88aa-9372cdf2e954",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2c45880a-ca3e-4086-a2c6-fdf5a2b8f84d"
        },
        "item": {
          "id": "15a2fbcc-2305-4853-84e4-c8bc285d9465",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9d41c88d-b4c6-4b9e-b249-fa01812e9a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c9c168-65de-4b48-b6ea-05d52a54929e",
        "cursor": {
          "ref": "080f5810-6451-4169-bb50-c00730eaa94c",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0724f756-c8e8-4bfd-9471-555d38c0b41e"
        },
        "item": {
          "id": "02c9c168-65de-4b48-b6ea-05d52a54929e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "88cdda03-29f8-471c-964d-0927cb413457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61320182-5f81-4b06-b614-91d1faffb8cc",
        "cursor": {
          "ref": "de89d527-6a41-41df-99fb-46e97695e746",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0361c498-fe1e-44b7-bc09-90636f6f6722"
        },
        "item": {
          "id": "61320182-5f81-4b06-b614-91d1faffb8cc",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2a3a7a66-2aba-4a43-860d-298e8f5e368e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988389f8-36a9-4c47-935d-ccfada65f201",
        "cursor": {
          "ref": "3ea09b8e-d167-403e-9d0f-2b4fb9e7c23e",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "df5c9dab-01f7-4bc6-9eb9-64af837389c0"
        },
        "item": {
          "id": "988389f8-36a9-4c47-935d-ccfada65f201",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a3ac91d0-27d8-40a5-a8a8-3e828e426ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689d9435-8b2f-44df-a660-5903bde37d87",
        "cursor": {
          "ref": "a991f14f-7338-4d6d-85ce-1691fee9e006",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bd8e3f98-f75d-4a43-8eac-661973f4b05d"
        },
        "item": {
          "id": "689d9435-8b2f-44df-a660-5903bde37d87",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1fe7b31d-42f5-4613-8a7a-4a046f30bd4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb0267a-96a7-4b82-814c-4e6c095a2d7d",
        "cursor": {
          "ref": "f026bfe2-26d2-491c-85c1-7ffb2abe6a2e",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6ece90c1-8085-436d-8f70-62d4e935fdb5"
        },
        "item": {
          "id": "adb0267a-96a7-4b82-814c-4e6c095a2d7d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ccaf7534-9d1d-4f42-83c7-c1944efed16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5770a0dd-9ef4-4b4f-897c-4f9b81ad94cd",
        "cursor": {
          "ref": "da088700-e2f9-4441-bc1b-c44260e80317",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "36431274-eb87-4f64-a3c6-a9f8415f8104"
        },
        "item": {
          "id": "5770a0dd-9ef4-4b4f-897c-4f9b81ad94cd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "57ad5377-4da4-4da8-b021-b63abd645fbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903bd656-edcf-4479-8191-3c80084bf6c7",
        "cursor": {
          "ref": "6f2cdfe8-40fb-4f6c-ba9a-bbd7937f688d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7c2e4f9b-82ef-41e6-938e-00236b6b15b9"
        },
        "item": {
          "id": "903bd656-edcf-4479-8191-3c80084bf6c7",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "0e1df0d2-64a0-4f2b-b012-9c7df51a41f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "2c295a7b-fce6-4a04-a1dc-dfd8d70e81a5",
        "cursor": {
          "ref": "ab5f4dcd-0961-483a-abda-e8790b34d747",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "37461aff-ec7c-47c6-a98e-fae6e204cb5d"
        },
        "item": {
          "id": "2c295a7b-fce6-4a04-a1dc-dfd8d70e81a5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7b77b7d9-c84c-411e-a0c4-ef36b6543b69",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc21e5d-0bf9-44c9-af19-d3c66afea2f5",
        "cursor": {
          "ref": "687c206e-b8db-453b-a51b-7dac35b1a206",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "48d7c26b-a447-49b2-81ee-714332ae49e3"
        },
        "item": {
          "id": "cfc21e5d-0bf9-44c9-af19-d3c66afea2f5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1793f62a-c23d-4a47-bdb3-c2fffb064924",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a373c08a-4074-422f-a359-9c9c06ec2d53",
        "cursor": {
          "ref": "59d05cf3-9afa-4cf4-9170-941662749a49",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e1317950-10a9-4e8d-b01c-5c694c965ece"
        },
        "item": {
          "id": "a373c08a-4074-422f-a359-9c9c06ec2d53",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b51a5ceb-0a62-4418-95ef-cebf0e3f93ce",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c74cf23-cbbe-4eb4-9e00-e4e9fc3ef238",
        "cursor": {
          "ref": "0b4fc32d-9b4b-456a-82cb-658e8d53910c",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "989d655f-b862-4715-9784-670e9f5bfcdb"
        },
        "item": {
          "id": "6c74cf23-cbbe-4eb4-9e00-e4e9fc3ef238",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ccfb3395-763b-4c34-92af-33d2792092cd",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3dcf92-6fab-42e6-84a4-5121e7050c6d",
        "cursor": {
          "ref": "b477a591-8a25-466b-ae93-8159feee227b",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3836a89b-c79c-43c1-8abd-dc61b3adcecf"
        },
        "item": {
          "id": "fd3dcf92-6fab-42e6-84a4-5121e7050c6d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "66ee2efc-aa94-4ab6-a5e0-454abb26c2df",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-26T00:38:09.209Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-26T00:38:09.209Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "e515c459-611c-47ee-bcb9-f926442124dc",
        "cursor": {
          "ref": "913f5dee-25ec-4449-bc5c-56ba3d99dee1",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "87f163e0-803a-4f2a-8979-75ec1816aaf4"
        },
        "item": {
          "id": "e515c459-611c-47ee-bcb9-f926442124dc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "38c3fc36-0b52-485c-808b-da12d93b9e9c",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf71d2a-1cd4-447a-aaae-91c895a8ee4d",
        "cursor": {
          "ref": "a6cb0e95-64f6-4c1d-982e-e4e6f58cbf03",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3fb4ab56-e3d6-4600-80da-78f104e1dcd4"
        },
        "item": {
          "id": "dcf71d2a-1cd4-447a-aaae-91c895a8ee4d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8bd59005-6203-41fe-a499-d1e9bb45b073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654d22c4-fe1b-41da-bbb2-0dd4c59fc194",
        "cursor": {
          "ref": "9f2cd768-72c0-4a93-8210-b8f886db4ab5",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "882b85c1-fff0-49b7-bfe1-f7dee5053607"
        },
        "item": {
          "id": "654d22c4-fe1b-41da-bbb2-0dd4c59fc194",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a05e1cdc-c530-4fbf-b4b1-a3dcaa7d1b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a153bf7-ecb1-43f0-bc4e-2ef21191ffcf",
        "cursor": {
          "ref": "f2f2ce69-2a18-4186-a7a2-09c2691d6e89",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "074f1766-3172-4974-95ea-79520e4b0421"
        },
        "item": {
          "id": "5a153bf7-ecb1-43f0-bc4e-2ef21191ffcf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d2d54990-5c3f-4b8b-8b3e-1494e51e87b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5822ec6-2256-4bee-b156-96ee23c631ad",
        "cursor": {
          "ref": "2c0527d5-fcfb-42ae-a559-62c006c472bb",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a249caa6-cddc-4fc3-8ae9-7d469019fa7e"
        },
        "item": {
          "id": "b5822ec6-2256-4bee-b156-96ee23c631ad",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "53bf2ca1-09be-47ad-86d5-875eb75df1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023dc8b1-f9ea-4f11-89db-05f3538e699d",
        "cursor": {
          "ref": "40cc1dea-9b19-426b-baf0-fd6890b3a10f",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "731ca5b5-d3a9-475b-bfdb-a1a5467c4dc2"
        },
        "item": {
          "id": "023dc8b1-f9ea-4f11-89db-05f3538e699d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1c374a2e-cab1-4714-9a00-fee6824373f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431c3c24-b573-427b-8510-730634b1a020",
        "cursor": {
          "ref": "d58bdec3-79c9-4b0d-a6b4-e6c0bb9c0726",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "42c39dca-6410-4912-b235-b62d48999d81"
        },
        "item": {
          "id": "431c3c24-b573-427b-8510-730634b1a020",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "02fd5477-307a-4f15-865c-7cd286ec98b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d859d3-5304-4adc-a8bf-0a2ea10b54b9",
        "cursor": {
          "ref": "521a36a8-ac29-49a3-b4b4-9a4b137b6e29",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b89b9be9-5f90-49f1-a956-b8a1d824412e"
        },
        "item": {
          "id": "d5d859d3-5304-4adc-a8bf-0a2ea10b54b9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4323ceb1-6ba7-4656-9182-84c9ee54b616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12f9b18-577c-40da-961b-69a3a5d93139",
        "cursor": {
          "ref": "48866a95-87fe-4d43-b4be-98f38b3136f1",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0e91028b-b344-481a-99a3-8cb0ed7c215a"
        },
        "item": {
          "id": "c12f9b18-577c-40da-961b-69a3a5d93139",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5588d9dc-b35a-4c5d-bed7-def6f339627e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab41686-012c-4a34-9a93-56889917312a",
        "cursor": {
          "ref": "f70f12e0-f877-4108-802b-13a50f966fb2",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "294a5e00-b8a4-4177-95f9-ac376cef755c"
        },
        "item": {
          "id": "dab41686-012c-4a34-9a93-56889917312a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "24ad36ec-8aa3-493c-8630-8c8b9a8f9a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46875929-76bb-4cca-a4f5-9fce63144cb9",
        "cursor": {
          "ref": "5dbb2fae-1a9c-47e1-a102-4d00168a6589",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "791828e8-6ea3-4ab3-88e1-76b917472f93"
        },
        "item": {
          "id": "46875929-76bb-4cca-a4f5-9fce63144cb9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "81795cce-8608-42f6-8ab9-1683c22d7553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d04a618-774e-4785-b2be-e8cd514eb205",
        "cursor": {
          "ref": "4550918b-d907-4769-9f6e-c695dafbd1b5",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8bf997f1-6aad-4a84-bad1-4d295ea7dc22"
        },
        "item": {
          "id": "8d04a618-774e-4785-b2be-e8cd514eb205",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6b972f95-9fe3-47ed-83b2-bc7c3f423c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd1cd86-2a82-4e3b-9277-3dfb4a62278c",
        "cursor": {
          "ref": "09ac6f5e-1032-444e-9bb5-c24e50fc4dc6",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ed77e37f-4196-4901-a281-a2b0c1c20607"
        },
        "item": {
          "id": "8fd1cd86-2a82-4e3b-9277-3dfb4a62278c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a816a6c9-ab2a-455f-ab32-214aa7981841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095527c4-cb9c-49bb-bf38-648cee697308",
        "cursor": {
          "ref": "32111c1d-b29a-476f-841a-1e7e7de89a9a",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "16108334-764d-4ea3-8573-5e4014470944"
        },
        "item": {
          "id": "095527c4-cb9c-49bb-bf38-648cee697308",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cba1c074-58f7-4b54-ac63-caee477588c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a393b2-277f-4b06-a25d-70e4ab231db8",
        "cursor": {
          "ref": "83cb37e8-ed9f-4fe9-9011-d006163a01a4",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2430ea7a-c7e3-49e8-8b19-7d6b60a03e79"
        },
        "item": {
          "id": "95a393b2-277f-4b06-a25d-70e4ab231db8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9206838b-5496-4f18-aa5b-471628ebef1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a46131f-63cf-4ca5-b7f6-7d74527e2423",
        "cursor": {
          "ref": "3f9cd16b-33d8-40db-85ba-eff4fb0c160f",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "50e4743e-be4c-4f75-9f02-28264289c0a6"
        },
        "item": {
          "id": "6a46131f-63cf-4ca5-b7f6-7d74527e2423",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "18796d50-fde3-42f3-9177-bdafea8fa416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7198b644-3300-48a9-9629-2f5676d20a89",
        "cursor": {
          "ref": "3b813a39-a998-417c-8ef3-11bc26ccb84c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "870db3f8-4968-47ee-bcca-f2ddba6dbab3"
        },
        "item": {
          "id": "7198b644-3300-48a9-9629-2f5676d20a89",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "906c91cb-ccb0-472d-b613-2a9aaad4e99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325911b9-76dd-455e-a3e1-d6b99a573233",
        "cursor": {
          "ref": "10456194-d705-4238-b76b-77180df58c4d",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4ca7498b-1cc9-4d4a-ac53-ef4ac4f2afe6"
        },
        "item": {
          "id": "325911b9-76dd-455e-a3e1-d6b99a573233",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5c23789c-a300-4672-a80e-cd2328c8a9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b46da7-644f-4f26-ac52-83a2c7e05d9a",
        "cursor": {
          "ref": "3761c7e0-b0d9-43ec-93f2-537ef5d708e0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5c8b39d3-55e7-4add-b45b-a79edd2f1ca7"
        },
        "item": {
          "id": "b9b46da7-644f-4f26-ac52-83a2c7e05d9a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9ddfa477-e50c-41bf-8f6d-5b1f0842b59d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70afb38-915f-4c65-a7e8-3bf0588725ec",
        "cursor": {
          "ref": "41735ef2-2817-4f9d-a2bf-298be0ea5bf4",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4670064f-58c3-4ab1-8dc4-bd3713dc25cb"
        },
        "item": {
          "id": "b70afb38-915f-4c65-a7e8-3bf0588725ec",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3c438001-f15d-42a3-9e2a-c4c8ec41162d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807227cd-dcba-4a2c-95d0-f755e43e8ac5",
        "cursor": {
          "ref": "a04abe0b-5ee4-4753-b606-bace7644a8df",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "107a3488-abca-4eb2-aa3e-5c06efede995"
        },
        "item": {
          "id": "807227cd-dcba-4a2c-95d0-f755e43e8ac5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "38c49e0c-b76a-4a63-86af-33a94777182c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51478989-d53b-4b4d-85ae-9da64eb81036",
        "cursor": {
          "ref": "6b76792e-c3f9-448f-98a6-2e5d305768a6",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "32567fec-1db2-4a1f-819d-11d21a380052"
        },
        "item": {
          "id": "51478989-d53b-4b4d-85ae-9da64eb81036",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "af872f1b-0c49-437e-b3d3-fe295229b463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c03749-8818-4606-b0e3-1e624e504f28",
        "cursor": {
          "ref": "99f3bd9f-a70b-4725-8b7d-1a2ba3765c47",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "44f3a1b7-4cc4-49f6-9d09-0061dea6a9c5"
        },
        "item": {
          "id": "c8c03749-8818-4606-b0e3-1e624e504f28",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "792370b9-f5e2-4619-9b31-5b6f5e15c640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd328ae-3851-43d5-8c31-ed0248a3fbe5",
        "cursor": {
          "ref": "c7233e35-2999-46af-be62-ae418a2d007c",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5a11017a-9a78-4408-abd6-62cb278524b5"
        },
        "item": {
          "id": "2dd328ae-3851-43d5-8c31-ed0248a3fbe5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f1690e35-d646-49b5-bea1-f051ac32350f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049eb67c-f70b-4be6-975e-a3b0ec7421fd",
        "cursor": {
          "ref": "f81f1938-f4a5-470b-9f77-07d55654f673",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fefe1868-ae33-4151-b8a6-b35ee00ee869"
        },
        "item": {
          "id": "049eb67c-f70b-4be6-975e-a3b0ec7421fd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "eba3573a-b222-4a7d-b05a-2433b659d186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ac28cc-6c68-43ba-a684-ed589c871424",
        "cursor": {
          "ref": "371bf554-52b8-4fe2-af45-eed365001594",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9413cc5f-74e9-4c46-900d-87e053fc10b3"
        },
        "item": {
          "id": "95ac28cc-6c68-43ba-a684-ed589c871424",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e8748168-7c61-46ed-a84a-08d52e022e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1510a5-cc72-4071-921c-bbf371bf303a",
        "cursor": {
          "ref": "33abde49-dd3f-4054-88fc-aa04d1c6cdb5",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1dee6bd9-cb4d-4060-9199-89fdc4c4780e"
        },
        "item": {
          "id": "8e1510a5-cc72-4071-921c-bbf371bf303a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fc9f5dea-993e-4cde-b9ad-9c7d72fe7332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2651cd-29ac-4aff-9c1c-eba022dd6740",
        "cursor": {
          "ref": "b3a46b0a-8e20-4442-ab9d-48f635141745",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6d75a3e9-ab66-4d76-8904-7b3940f78560"
        },
        "item": {
          "id": "fa2651cd-29ac-4aff-9c1c-eba022dd6740",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f15f1a63-2a80-4432-af62-53319d70263f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65e7f12-4d49-4400-8a7d-41514b2fd802",
        "cursor": {
          "ref": "6490802a-ca33-4106-a02e-255e33d0d205",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "04a79c0b-bdee-40e0-a487-27e3f91d069e"
        },
        "item": {
          "id": "d65e7f12-4d49-4400-8a7d-41514b2fd802",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "51b26cf7-e832-48a9-a207-7170fae584d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd438c9-5c54-457f-8e17-18187f4431eb",
        "cursor": {
          "ref": "1dd6b698-10dd-4154-b343-0fca7fbecf03",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d4569cc3-e8be-40fe-ab76-b0038d488ab7"
        },
        "item": {
          "id": "5fd438c9-5c54-457f-8e17-18187f4431eb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "00d9f5ae-e6df-481f-94e2-49b05fcf934b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c135edd8-9828-4bac-9cca-93731c7d586c",
        "cursor": {
          "ref": "e228f343-a177-4e95-b6ec-36e8636ee1ad",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a8e656de-de4a-449a-afd2-caa26cda66fc"
        },
        "item": {
          "id": "c135edd8-9828-4bac-9cca-93731c7d586c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "265044eb-0127-4008-b719-fd957b921de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6f1a19-d50e-4a6c-bf41-b1a6d0e36f46",
        "cursor": {
          "ref": "df4381d9-eb2d-4907-8592-9325004f3954",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d1d5d27a-ae88-4e29-9478-c816d3df1757"
        },
        "item": {
          "id": "8d6f1a19-d50e-4a6c-bf41-b1a6d0e36f46",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7c7b45c8-48ba-46f1-8372-cf0abcbe19ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb5d17e-c6ba-4181-a3cf-7414b53c0c9c",
        "cursor": {
          "ref": "10547641-5cee-4abf-b21a-fddb50ba67c7",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4fcadb7e-f931-4998-9942-557623d58454"
        },
        "item": {
          "id": "ddb5d17e-c6ba-4181-a3cf-7414b53c0c9c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4b6848a2-e56f-4faf-9ea7-6f72f315c119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2e521b-419c-4483-abda-0d31293f1d8f",
        "cursor": {
          "ref": "67fae47b-73fe-4e04-9e15-ab7b7fcf6b07",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "737dcfa6-56b5-4633-814c-5182e5e846a6"
        },
        "item": {
          "id": "cf2e521b-419c-4483-abda-0d31293f1d8f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "60a49905-7985-4141-9aee-109286f98e9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab684aa-b8b8-4e64-bbb0-d2070ab4751a",
        "cursor": {
          "ref": "f3738953-1758-430c-a8af-a7cc3ccb5860",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5f602223-c8ec-4717-9e00-b684d1c54390"
        },
        "item": {
          "id": "fab684aa-b8b8-4e64-bbb0-d2070ab4751a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5ce3cdd3-c58a-41c3-97f8-68fea0e4ae4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3629c23f-0c39-4708-8aeb-f7a307fdf998",
        "cursor": {
          "ref": "14eae202-c9b2-48f9-b19f-76b7c5190378",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "28e7d5a7-6dd6-4c72-9900-3047715315a9"
        },
        "item": {
          "id": "3629c23f-0c39-4708-8aeb-f7a307fdf998",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e8f8c805-b783-4880-83a5-b7e7239c7399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e221474-5ead-4042-ab35-9533b435bab2",
        "cursor": {
          "ref": "730669f3-e3f1-4ee7-9ed1-9b117eaac510",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7e1f3828-9ae1-4c2d-9222-005b88f2a28c"
        },
        "item": {
          "id": "2e221474-5ead-4042-ab35-9533b435bab2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9a1df996-9c95-487d-a345-741e0d7b7ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2b5ab9-6da6-4b9a-8c01-2652debf9323",
        "cursor": {
          "ref": "3c354ba2-c739-4fb9-9e00-fad4a7cf1fc8",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "70fc1e80-8547-42a1-a36c-f95325a0d85d"
        },
        "item": {
          "id": "7d2b5ab9-6da6-4b9a-8c01-2652debf9323",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cb6fce6e-9500-4150-8fb0-25f32a864e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c8804a-faa3-4e68-8080-77dba6bb5244",
        "cursor": {
          "ref": "228ff5dc-aadd-484b-b0fd-c40c6ed03f4e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ae30ad81-b71c-497f-b3b6-1c9843357c7d"
        },
        "item": {
          "id": "83c8804a-faa3-4e68-8080-77dba6bb5244",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9b69c603-dc1e-4cc0-b778-9adb84f68f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd67efaa-47a0-4937-b509-307a849b2ca2",
        "cursor": {
          "ref": "17309a11-cb45-405a-bb91-03ecd5e394eb",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e9aa4276-d4cf-492a-b7ed-9c03279ec9a5"
        },
        "item": {
          "id": "bd67efaa-47a0-4937-b509-307a849b2ca2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "325109bc-4a60-49ef-ba28-18fe5df5463a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfd9f7d-c68a-4bb0-b724-706cf2b69455",
        "cursor": {
          "ref": "3d1569d0-69eb-4fc3-8318-e47f58268577",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "18cc907d-4866-4a83-9971-3ee9ae89751e"
        },
        "item": {
          "id": "9dfd9f7d-c68a-4bb0-b724-706cf2b69455",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e3cd15a2-1517-4c31-b1dc-80973dcdd323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36755e4-b8e1-46bc-aa83-e07f945074b6",
        "cursor": {
          "ref": "8f0ca31f-15f2-42dd-9197-57e3443253c2",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "75519402-033a-4318-acfa-f52867ef2da4"
        },
        "item": {
          "id": "d36755e4-b8e1-46bc-aa83-e07f945074b6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1729137a-2c66-4604-af56-6bfd9030d15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34807971-ba95-41f1-ab48-0551dd15e01f",
        "cursor": {
          "ref": "31c22134-48b3-4ec1-99fd-aeee1e412a02",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b43598cb-7383-4ede-94be-6d2da2118927"
        },
        "item": {
          "id": "34807971-ba95-41f1-ab48-0551dd15e01f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "89c1f941-527c-41d4-b784-df0299462262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e812fc2d-ebc7-401d-bd8d-a80d021d8211",
        "cursor": {
          "ref": "6f2dfd96-9241-49c5-8125-b17374680c54",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2876fcad-7529-47c2-93e1-fe97960ece55"
        },
        "item": {
          "id": "e812fc2d-ebc7-401d-bd8d-a80d021d8211",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "64a90d65-02e4-4c3f-ae67-9e64059e1f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12347be-4b95-4614-9087-05336c624878",
        "cursor": {
          "ref": "c883986b-92e0-4212-935e-c5b219d5f31d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "282a14af-7e52-4a0f-a1c1-70b6a728ef68"
        },
        "item": {
          "id": "f12347be-4b95-4614-9087-05336c624878",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ce162bd8-9440-4cac-8ec1-cf235ed31d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93afb73b-85bf-4163-be49-ac0e2c8c3fdf",
        "cursor": {
          "ref": "e51b20ac-71bb-4621-bcdc-6b3e48431c76",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6aa4e8da-894e-4d47-a7ab-5fcf987f9e78"
        },
        "item": {
          "id": "93afb73b-85bf-4163-be49-ac0e2c8c3fdf",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7620f53b-0954-4473-ba2d-1cdfbaf9530b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1dd4d7-ce06-4f71-ac31-ac35e4e9b805",
        "cursor": {
          "ref": "0462a01c-968c-421c-9aa9-c8817d7973dd",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "09c8a010-81a0-42e9-a463-f98414ad5868"
        },
        "item": {
          "id": "2c1dd4d7-ce06-4f71-ac31-ac35e4e9b805",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b9d91cd5-4dcc-4a6e-8508-40ce4e74b1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a82f48-4b69-4230-b7ee-0cc60d768edd",
        "cursor": {
          "ref": "632c30c4-7300-4153-ad12-e3107a36f6e3",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a29aec18-a346-4155-bda9-c0c24754996d"
        },
        "item": {
          "id": "76a82f48-4b69-4230-b7ee-0cc60d768edd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bb7bf3dc-c0a9-4156-9e66-e6644ef0a17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9264f569-302b-41de-99e1-2e6b20ae9130",
        "cursor": {
          "ref": "d1eca5e6-26aa-4cc1-846e-88497129ef6e",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "41722b31-5ed8-4e60-97ac-c28fea700629"
        },
        "item": {
          "id": "9264f569-302b-41de-99e1-2e6b20ae9130",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e0fee525-dcf4-4ddc-a240-e31a72fde16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91377dd6-26ea-4b6f-87bd-c7d7f84590b5",
        "cursor": {
          "ref": "f3812191-dbd9-4297-b2d2-f0e8f17ae95b",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "afd2fb79-79b6-4caf-95cc-480012708184"
        },
        "item": {
          "id": "91377dd6-26ea-4b6f-87bd-c7d7f84590b5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b9820087-e924-4886-bf59-80c2d3eb8f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b63fec-b5cf-4697-827a-9f5017603120",
        "cursor": {
          "ref": "fe48ec7d-30ed-4911-9fd5-557317325f70",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4aa62c50-c428-480e-af59-130529812ee5"
        },
        "item": {
          "id": "30b63fec-b5cf-4697-827a-9f5017603120",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7ac22c7f-9db1-488c-b2fd-fcb7145c0e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb7ce30-aa3c-4ef6-b6fb-bc1addb0c0c1",
        "cursor": {
          "ref": "1083423f-265f-46a3-b6b5-487990c57ff1",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "57218aef-9bcd-4650-af58-f918a15900a6"
        },
        "item": {
          "id": "ddb7ce30-aa3c-4ef6-b6fb-bc1addb0c0c1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "af294775-f95d-4ec0-8b4f-f47bdc87b5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4704869b-36e6-420c-ae0c-e00130b6804b",
        "cursor": {
          "ref": "ddc1634c-3b44-4582-9386-ba8557c28328",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a1b6a722-e4a1-4357-8d44-673dc01b5c54"
        },
        "item": {
          "id": "4704869b-36e6-420c-ae0c-e00130b6804b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "aa4237cc-45d3-46ae-a324-fdd5d434d58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf95a78-60f0-4223-977a-aa4301e60db9",
        "cursor": {
          "ref": "2b1a1042-1330-4639-acc2-df1c7c5dfc99",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3058cafb-aae6-4146-9fb1-195c661051b0"
        },
        "item": {
          "id": "bcf95a78-60f0-4223-977a-aa4301e60db9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6ac086ed-9622-408f-b499-1a63b982aa97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d07739-ba49-4459-b31e-146f4227bee0",
        "cursor": {
          "ref": "96604c6f-b521-49d2-b5fb-b87fa6e79a95",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c7e4c512-6f0b-4b33-a086-7bde25fce011"
        },
        "item": {
          "id": "21d07739-ba49-4459-b31e-146f4227bee0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "759fdee0-3952-4368-aad3-39376ca5dea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d876e639-fa3f-4674-9d2e-dd44b5da3ed9",
        "cursor": {
          "ref": "c3036616-b9c9-44f7-8a47-2f801a617c0c",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "30d5e37c-0971-40ee-b3f0-1809453cc973"
        },
        "item": {
          "id": "d876e639-fa3f-4674-9d2e-dd44b5da3ed9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "af0dcdda-96ce-42c5-b9da-5125f7edb57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8785a68-76a1-483d-8486-f9a5a73c9d4d",
        "cursor": {
          "ref": "945e43fd-f025-49e3-9ee7-fc787c0918bc",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6f128765-4944-4be8-a726-5e240d39dc74"
        },
        "item": {
          "id": "c8785a68-76a1-483d-8486-f9a5a73c9d4d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "97680bd4-87e0-412a-9b4b-d80203722e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9dc74a9-40e6-4591-8abb-3ae958eea04c",
        "cursor": {
          "ref": "27cdfd78-f4e9-4e0e-9ec3-3481df87672e",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a73c63b4-8b1c-4ebc-8a4a-7bcff39a3992"
        },
        "item": {
          "id": "a9dc74a9-40e6-4591-8abb-3ae958eea04c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "25a3f25c-a9ca-491d-9651-f15d374f8fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed300c6a-ee23-485d-b9ad-84ff493f774a",
        "cursor": {
          "ref": "b1476f14-5650-4058-af4d-1c38f2482098",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ed12ae76-ffb0-408a-953d-d291a93011cb"
        },
        "item": {
          "id": "ed300c6a-ee23-485d-b9ad-84ff493f774a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "88b556f8-055f-4135-89e5-a6e249ff901c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50ab57d-5a3a-4b6d-9084-8b07bbff5304",
        "cursor": {
          "ref": "72ff8b96-b853-45bf-9890-423a7f14c342",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b9456971-c0bc-456d-bdab-93bf6119ee5a"
        },
        "item": {
          "id": "f50ab57d-5a3a-4b6d-9084-8b07bbff5304",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "482e3804-9999-4bd8-82da-22a2bb7ea7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee214d2-2718-4e85-9b1f-87306bf36929",
        "cursor": {
          "ref": "9427118d-0a9e-40bf-b242-05462c97e1e1",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "142e7fad-286e-44f1-8ef5-01d2578aa482"
        },
        "item": {
          "id": "6ee214d2-2718-4e85-9b1f-87306bf36929",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b56ad5f8-4741-46f9-8db5-0bbdcb91eced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101be231-1388-4b2d-8978-0bf06b2ead55",
        "cursor": {
          "ref": "8e170c03-a750-4d78-ac41-4205092b27bc",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f4c0fe98-678a-4886-91ae-da7825441aa3"
        },
        "item": {
          "id": "101be231-1388-4b2d-8978-0bf06b2ead55",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "af30860e-bbf7-410f-961a-e2db71d7fd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a776989-0951-4f42-bddd-a1108c959a12",
        "cursor": {
          "ref": "de6b4570-c226-478a-8f7f-e914e0b3c143",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a76e4936-e2f8-4dee-b591-9b508801de84"
        },
        "item": {
          "id": "9a776989-0951-4f42-bddd-a1108c959a12",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fce0b911-325c-4e0d-a4cf-bba0b54600ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6260e3-856f-4441-abf0-a2d2f58551c1",
        "cursor": {
          "ref": "005f5cd8-9dfd-44a5-bae9-cbd021275a2c",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "761cad59-7331-4eb2-a095-c0094ccaa6d4"
        },
        "item": {
          "id": "5b6260e3-856f-4441-abf0-a2d2f58551c1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2d06e665-51a0-4e49-819f-5e6c4161cbde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272db83f-a293-4e14-b65a-615eb2afe61c",
        "cursor": {
          "ref": "0c6255e3-1ea3-41f4-a7ae-27c97e96b9f0",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1321bc07-94c9-4d9a-afcb-adf4b743181e"
        },
        "item": {
          "id": "272db83f-a293-4e14-b65a-615eb2afe61c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "83d5893a-1922-4022-8f71-8b294fe0035e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01dddb90-c575-4006-a11c-24a24cea1649",
        "cursor": {
          "ref": "d7fe4d88-60bf-49b1-9441-3e430c310bb2",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f1feabd5-610b-4248-a11d-f263130f4d97"
        },
        "item": {
          "id": "01dddb90-c575-4006-a11c-24a24cea1649",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ae263349-affc-439b-812a-730bff34330d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6c485c-dfec-4b95-991e-b3a61bd4be90",
        "cursor": {
          "ref": "cc64da5a-1421-4930-a8be-a72f51480ea4",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0a638778-2d10-4a5a-8f21-df84a9fea07a"
        },
        "item": {
          "id": "7f6c485c-dfec-4b95-991e-b3a61bd4be90",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "864d820e-99ea-42a2-b8ca-0d4a80569646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a989566-5fed-4423-af11-b155f33712ac",
        "cursor": {
          "ref": "47202717-0ff7-4a4a-b9fe-058e6c2a137a",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3cfcf2bc-491f-4e63-bb2a-b2025d6d9917"
        },
        "item": {
          "id": "7a989566-5fed-4423-af11-b155f33712ac",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "690a49bd-b4a3-4e4e-a6ea-a9b74f184054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7d8643-38fa-473c-9963-f5d82d629d7c",
        "cursor": {
          "ref": "447b637b-7c41-419a-a3e8-e5dcef5018aa",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6ee973a7-102f-4d02-84ae-100b7faa986b"
        },
        "item": {
          "id": "3a7d8643-38fa-473c-9963-f5d82d629d7c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d556220a-ba4d-472c-9d00-01da7e0f051d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db830c7-67f1-4094-b4d1-bcc5978dadc3",
        "cursor": {
          "ref": "d3a710a7-ffed-43c2-ac6d-ea1cbb95a693",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "211213e3-ecce-4304-ac2a-5b12cb41a9a4"
        },
        "item": {
          "id": "0db830c7-67f1-4094-b4d1-bcc5978dadc3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b8cbcc74-6d1d-406a-a774-1608cd3acd58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edacdd8b-db1a-43d5-a4a3-c6d66c5a5b4b",
        "cursor": {
          "ref": "e96122dd-28e2-4dc1-b544-5ecf7acb848b",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9295854d-4321-46c9-a906-023c1b1bd1b4"
        },
        "item": {
          "id": "edacdd8b-db1a-43d5-a4a3-c6d66c5a5b4b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "bcfab34a-fd5f-4d49-9354-9faa24f2e5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b02b3f-d639-4846-bf0b-24c764c0215d",
        "cursor": {
          "ref": "69ee5d60-302e-44b7-8f81-3e20fb0ff3e7",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "320bed95-2a22-4c20-8570-98648ff51582"
        },
        "item": {
          "id": "c8b02b3f-d639-4846-bf0b-24c764c0215d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "82429fdd-d6a4-4824-a255-9d9709da70bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97bdecb7-76ef-48c7-bf00-1c5c6f76c563",
        "cursor": {
          "ref": "4094d8f5-c0ce-4fd9-9328-6bb2c7628684",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "31f89ac5-8d72-4bc0-907b-3e6c131cb373"
        },
        "item": {
          "id": "97bdecb7-76ef-48c7-bf00-1c5c6f76c563",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "66c27174-50a9-4d36-a1ed-0bd9f323b03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dfcea0-a50b-4bf0-893b-27dee61ab798",
        "cursor": {
          "ref": "c7b8256a-1e86-4b55-9d71-85474bbaeb29",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8b9bccaa-cb53-4db6-a83f-5f4ab1adff1a"
        },
        "item": {
          "id": "39dfcea0-a50b-4bf0-893b-27dee61ab798",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c7b73821-a1cf-4997-801c-78cfc74f0c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e077e38d-0e7e-4ff5-94a4-828c165da5f5",
        "cursor": {
          "ref": "ed6b5ad3-8241-4866-9ccd-56c67028319c",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ddf9066e-4196-4e76-9bc4-b8190db4c973"
        },
        "item": {
          "id": "e077e38d-0e7e-4ff5-94a4-828c165da5f5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c6fa19d0-f1e5-4a6b-8c37-57c6a5460a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1a662a-a69c-4c9f-baa9-0e0efdad9686",
        "cursor": {
          "ref": "747c9efc-762b-4f51-b6a8-3f4e228e9d7e",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "bb9e21a6-5e8e-4bd1-b41c-3456faded79a"
        },
        "item": {
          "id": "fc1a662a-a69c-4c9f-baa9-0e0efdad9686",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ccfa1c0e-9a20-498d-82de-e214a9c1820c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bb223f-40b8-4e83-97d0-db5162c6d9a2",
        "cursor": {
          "ref": "e053e26f-8d56-4532-a1e2-8140cc60a879",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ccd14206-dee7-4863-a7b8-72cf14c0f6b7"
        },
        "item": {
          "id": "93bb223f-40b8-4e83-97d0-db5162c6d9a2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "73921d60-650b-4631-8a65-22a4a97f501b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106ebb8c-fd06-47c1-8536-c714c6fb7546",
        "cursor": {
          "ref": "8cb92b50-736e-4c34-bc7d-d1d536251c25",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ac87ea0d-d627-44f2-b416-0cec0324cbe2"
        },
        "item": {
          "id": "106ebb8c-fd06-47c1-8536-c714c6fb7546",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dcc95bce-20be-495b-9784-8c0f744ba379",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "54f5a351-16fa-4272-844b-28e4e7efbbd1",
        "cursor": {
          "ref": "42be3c5c-ec27-4626-9ea9-874b869aa904",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "861e8825-aa1d-49bf-95f5-9546573a3183"
        },
        "item": {
          "id": "54f5a351-16fa-4272-844b-28e4e7efbbd1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bd4d6925-35a3-4b6d-aaeb-97cf07b79a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a387efe-9161-4e77-adf4-5c9b7c0aa116",
        "cursor": {
          "ref": "f6e9986d-87a3-4e9a-8339-5f557f72e557",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2477b89d-4401-46c4-879f-121274f8d8bb"
        },
        "item": {
          "id": "4a387efe-9161-4e77-adf4-5c9b7c0aa116",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5111cc06-0e99-450a-8cfa-a1a50dcf3544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e13fae1-6e55-40f7-aba1-c64e6f20f681",
        "cursor": {
          "ref": "1235408b-71ee-4a17-838e-2503dce3242f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bbfbd4be-4ee6-487d-b259-fc1f95192a47"
        },
        "item": {
          "id": "3e13fae1-6e55-40f7-aba1-c64e6f20f681",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d4522f13-6b0c-4b77-9854-893c33f61d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfef03ce-3ace-4ecc-b6e0-c733383c0e7d",
        "cursor": {
          "ref": "2cb765e2-0f8a-47e0-aadb-f4b83e2b73d2",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "afbb3fb2-2ef0-4222-bf30-c80439fdb4db"
        },
        "item": {
          "id": "dfef03ce-3ace-4ecc-b6e0-c733383c0e7d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cad82a80-5e3e-4b7a-8641-ac6676b8141e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0229c982-47bc-41b3-afc5-750f2f90449b",
        "cursor": {
          "ref": "d8098032-6998-4e0c-9d60-1cefa1f2cfb3",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "89c7065d-814b-4556-b650-f36e4df614da"
        },
        "item": {
          "id": "0229c982-47bc-41b3-afc5-750f2f90449b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "918ecdd2-f728-44dc-8090-0a07145d5000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16d2798-0f72-4c5d-b853-b4d48392618c",
        "cursor": {
          "ref": "f414e332-748a-47e8-a170-03ed46dc95a7",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dddabdef-2a96-4d44-9ace-1bab228553fa"
        },
        "item": {
          "id": "f16d2798-0f72-4c5d-b853-b4d48392618c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "db909202-6c45-4bb9-aeac-179a60691fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4458c5b4-80e8-4a6c-afca-8e09fa7b5e4e",
        "cursor": {
          "ref": "462f8b77-cb17-45b2-9c4e-a4deb416f251",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7b294645-c5a8-4121-bff6-18f6e9587275"
        },
        "item": {
          "id": "4458c5b4-80e8-4a6c-afca-8e09fa7b5e4e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "caac85fe-6cf9-4d19-805d-e734b94838dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3060423-1920-4742-92a5-bcbc7307596b",
        "cursor": {
          "ref": "3250aa7e-ace6-462c-bf45-280dfe5237f9",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9e36a3af-1239-4d97-b5dc-a8c949419149"
        },
        "item": {
          "id": "c3060423-1920-4742-92a5-bcbc7307596b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "932b6f08-494c-4848-a1c6-a483b585ead6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512bc9f7-4a63-499f-98a6-11a340d028cd",
        "cursor": {
          "ref": "b388b8f6-e0cc-49ef-ab6f-770412f037fc",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c7370623-4ea5-48d0-8018-f2af0dafcab0"
        },
        "item": {
          "id": "512bc9f7-4a63-499f-98a6-11a340d028cd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "944bb9b9-4bf7-4032-99e3-f68c74401a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbddefe-0244-465e-a251-130e9a702649",
        "cursor": {
          "ref": "99fc30f5-fbdf-4f0d-9e49-7dbae6250584",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "eb04425a-060a-4dd6-9430-51666f6f9a06"
        },
        "item": {
          "id": "cbbddefe-0244-465e-a251-130e9a702649",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "99e759b2-acae-4825-b99f-c59c07797441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2168e3-f4d4-4b62-bd55-78a204bc9921",
        "cursor": {
          "ref": "9ffc521b-1f77-45a5-b681-b9359f528de1",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "961374ae-1834-4193-9caf-02058724978e"
        },
        "item": {
          "id": "bf2168e3-f4d4-4b62-bd55-78a204bc9921",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2cddfac6-f206-4086-8c30-441e49eab200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2faf466e-234e-47ea-bb51-2f4c1bc1d761",
        "cursor": {
          "ref": "eca28f20-f222-42e2-8a3c-24852303aa9a",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "16c555a5-7c0f-4575-8cd0-35872dacabd8"
        },
        "item": {
          "id": "2faf466e-234e-47ea-bb51-2f4c1bc1d761",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0f1150cd-9d6a-47b8-81bd-0631c704639b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c920c84-7b5a-4f20-ab34-e4da46db6da2",
        "cursor": {
          "ref": "64507112-9655-4594-9bc3-f259eab18131",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9e2b4c95-3dfa-4da8-b474-2f179470d3f9"
        },
        "item": {
          "id": "3c920c84-7b5a-4f20-ab34-e4da46db6da2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b3fb8b6f-a3ed-47dc-bf7e-ee59711c329e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e136254-7c48-4119-8f23-7ad8c9539ca8",
        "cursor": {
          "ref": "504ede3c-73d8-4837-b6df-ff2d423141d1",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "963ae90e-5539-4895-9e20-019910e1b234"
        },
        "item": {
          "id": "3e136254-7c48-4119-8f23-7ad8c9539ca8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "88baa039-410c-4960-9d84-05e4395a37d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95051661-4ffe-4043-8782-55b058071d32",
        "cursor": {
          "ref": "b22c257c-937d-4a2c-a1b3-cffe8ceaf83d",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "bf865260-0b24-4cf6-b68a-d02bcafc9ebd"
        },
        "item": {
          "id": "95051661-4ffe-4043-8782-55b058071d32",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a227610a-765e-4031-a02d-f5103caf09c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af53aeb-30c8-445f-9618-d9f1a7b58910",
        "cursor": {
          "ref": "23260370-20f1-4ed9-8f52-a0bf197c42c8",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a4d30254-99ec-4a07-b7f9-dffd55b8a01a"
        },
        "item": {
          "id": "5af53aeb-30c8-445f-9618-d9f1a7b58910",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "958c611c-8440-4645-924e-578f17108ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc41aeec-8b9d-424e-adbb-cc29dc6025c9",
        "cursor": {
          "ref": "8d40c92b-8dca-4ccc-866b-c64960db4c5f",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "04f7a4bb-10f8-444b-b104-5434af0d467b"
        },
        "item": {
          "id": "dc41aeec-8b9d-424e-adbb-cc29dc6025c9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "72be1520-730e-4666-8ff5-41e46f737516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffdd24e-4cc9-41c6-abf6-26ff8af49c70",
        "cursor": {
          "ref": "1f292a45-b56f-4af2-a1c3-dd10a9f3dd0d",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9ccb701c-bb9d-4727-ace4-1d590b202ea8"
        },
        "item": {
          "id": "0ffdd24e-4cc9-41c6-abf6-26ff8af49c70",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9b6e247f-badc-4797-8986-da56f7dab414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450becb2-415c-4fd0-aec2-ffc8d9492967",
        "cursor": {
          "ref": "d064be97-fe00-4ff1-a49b-0a9d62f9654f",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3dc6bbdf-44ea-4c22-acfe-d5b3977876ce"
        },
        "item": {
          "id": "450becb2-415c-4fd0-aec2-ffc8d9492967",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cdb27bc7-fe73-4900-a92e-e0f8b1aa14c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e888b8e4-8690-4edb-8aff-c75f9c347c7f",
        "cursor": {
          "ref": "366b4706-faf7-4b12-8eba-f6585d4a7c81",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ce1d4814-37bd-4ae6-99ec-55866c2920bc"
        },
        "item": {
          "id": "e888b8e4-8690-4edb-8aff-c75f9c347c7f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f3d6661e-b7d9-4988-8db1-ad175a5b3398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d3742e-48dc-4fd6-903b-1e7e9781be62",
        "cursor": {
          "ref": "26dc16d3-be22-42cf-a4b0-ab6236878ebb",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3b239a7a-f876-4633-bfca-1c1f990fb2bb"
        },
        "item": {
          "id": "22d3742e-48dc-4fd6-903b-1e7e9781be62",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a4229763-cfaf-4304-87f3-597ed871d723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77dd5d8e-7f3d-4ad4-b504-912cad8bbc85",
        "cursor": {
          "ref": "13e6736c-07b5-4d3f-b71d-636613116a77",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6f21a078-6bff-44aa-b118-e655348f4ff5"
        },
        "item": {
          "id": "77dd5d8e-7f3d-4ad4-b504-912cad8bbc85",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "92fcd517-257f-4e2c-9cf0-6c29f3b8f184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4ebf5c-72a7-4423-9c3a-3a6e331076ba",
        "cursor": {
          "ref": "60f37358-f4dd-4dec-84ec-1e2e1f44ecb4",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d67a27ae-893a-4ccf-8459-a8b6a8edad41"
        },
        "item": {
          "id": "2a4ebf5c-72a7-4423-9c3a-3a6e331076ba",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cddd25a9-5de8-4bcc-8b22-01401258a30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a353f8ec-1f4c-4cf2-9317-46b1c0f1b4ea",
        "cursor": {
          "ref": "707714b6-abc1-489f-8608-8c1ab22b8033",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "68489234-b082-4493-a3b0-c5febf4165f4"
        },
        "item": {
          "id": "a353f8ec-1f4c-4cf2-9317-46b1c0f1b4ea",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d9ed5090-208e-472e-b844-a5c6610439ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97b1da8-b8cd-481f-9f11-7fd277db29b7",
        "cursor": {
          "ref": "78bb11df-ca5e-4a75-9a72-dda9cfd2f443",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d7773a52-d7e7-4ef1-b037-7a8b39ec144e"
        },
        "item": {
          "id": "a97b1da8-b8cd-481f-9f11-7fd277db29b7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "46c2aa72-8f1f-4aa4-82ce-e2c7b3168cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af86d6bb-898a-44ed-b952-045112508f44",
        "cursor": {
          "ref": "e22a17b8-22ab-496d-88a3-f39f48772340",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f9832d24-a8be-4b22-b96e-8ccb3e854b21"
        },
        "item": {
          "id": "af86d6bb-898a-44ed-b952-045112508f44",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "77472e2f-9723-42a1-a633-066c6fdd5b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afe6277-74f3-426e-a562-5bac17fe9f40",
        "cursor": {
          "ref": "ee9ed2c9-e7d9-4090-88ef-9a2dd1e0c764",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e0f65636-8bb4-44f3-881d-ca3a5e194f48"
        },
        "item": {
          "id": "0afe6277-74f3-426e-a562-5bac17fe9f40",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "58dd8ae7-56c6-4dc8-bfcd-ceb4eb7c3229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da2222d-ec39-491e-a594-ab9f5fdc8728",
        "cursor": {
          "ref": "65db3c5e-991e-47f1-ad04-6589a7d40cb9",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3efb2e58-7658-4c53-bc2c-dca82d1045a7"
        },
        "item": {
          "id": "7da2222d-ec39-491e-a594-ab9f5fdc8728",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "10e97598-a3ad-4128-a6bc-26192132a897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb3f910-c5e5-4d73-886a-11956e0d7ab9",
        "cursor": {
          "ref": "bc54dad9-cdb2-4e19-9a10-b3efa9d2fe74",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "959550f5-4efc-49f0-bfd9-5bf5a7e78e02"
        },
        "item": {
          "id": "4eb3f910-c5e5-4d73-886a-11956e0d7ab9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9a69b47c-762d-4656-9890-10110305a2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0269c9-a9e8-4c28-9283-563537751bbc",
        "cursor": {
          "ref": "80975267-88c9-4775-af16-ec0ae871efcb",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "07516a3a-409f-4ac2-a76c-d88010e9cda0"
        },
        "item": {
          "id": "fe0269c9-a9e8-4c28-9283-563537751bbc",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ffe77903-e878-4001-9165-ebe333089dd0",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "74e73e20-4929-4251-9754-4eb047c65e0b",
        "cursor": {
          "ref": "9a78df97-87e7-4aea-9244-dc9eda48d6ca",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b2561276-b716-4df0-af21-d81065f6fa9b"
        },
        "item": {
          "id": "74e73e20-4929-4251-9754-4eb047c65e0b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "00561814-f557-46cf-a162-4993c04a8d7d",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d76a97a9-451a-44a6-ba71-8aac56d2cacb",
        "cursor": {
          "ref": "323f0418-b898-4b07-9a6a-c1cd1a467c6d",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7fed7a95-eca4-47d5-9f8b-bbcf059cb107"
        },
        "item": {
          "id": "d76a97a9-451a-44a6-ba71-8aac56d2cacb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "67fd01f0-aaaa-42fa-bf83-cecb0a1d29ca",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "86ecd92e-4b41-44e8-8b3f-c80d2a5a2aa5",
        "cursor": {
          "ref": "4c2542b1-50d9-4373-bffe-633f4196c147",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a9f59b99-24c4-4879-b8b1-595fa9e5d37a"
        },
        "item": {
          "id": "86ecd92e-4b41-44e8-8b3f-c80d2a5a2aa5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b4ea9e39-1409-4dbf-88ee-093b04cc8cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cf9ddd-539f-49eb-a078-0a08170a5e8e",
        "cursor": {
          "ref": "17650542-56db-42ad-8e67-f7bdaa3ef3bc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "278fa0fe-6f2c-48c6-b573-bf37b6a57af6"
        },
        "item": {
          "id": "25cf9ddd-539f-49eb-a078-0a08170a5e8e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c0e111b1-79db-4ac6-b513-f9ad00cbf506",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f5ef3433-9135-4eff-8bb7-6470a752a7a4",
        "cursor": {
          "ref": "745ce9ad-f0bc-4587-b3c0-5742dc8b07b3",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9995adf7-ce6b-4531-a874-07dcc53220e6"
        },
        "item": {
          "id": "f5ef3433-9135-4eff-8bb7-6470a752a7a4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "46b71067-20b6-485a-9f06-f639cf62aaf0",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "e6cb3b21-28a6-4369-b213-26a605635010",
        "cursor": {
          "ref": "3a05d774-55b6-4d45-b4b4-83dc4b2ce771",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9bee6382-ec1f-4c11-86a5-4ffc09e05550"
        },
        "item": {
          "id": "e6cb3b21-28a6-4369-b213-26a605635010",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cb5f7339-8672-49a1-8ed7-995e0a675f31",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "483daf11-c486-42d2-8726-c527894c816e",
        "cursor": {
          "ref": "b7160f12-83bb-4639-b1d4-8b8a34dda60f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f9bef966-f9c1-4b5f-aaa2-579741c34716"
        },
        "item": {
          "id": "483daf11-c486-42d2-8726-c527894c816e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3e855618-e3ba-48a1-91ca-07c54f90fcf9",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "50029bfa-6ca6-4d0c-8e16-322dd8759c9b",
        "cursor": {
          "ref": "17b0f6e2-b5b1-45c1-aea5-3472ae927b1f",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4ddc6678-7054-41bd-bfd8-3a0e1178e5d8"
        },
        "item": {
          "id": "50029bfa-6ca6-4d0c-8e16-322dd8759c9b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3a0097a9-c143-4139-a045-0b96a7fcf480",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "3c86012b-83a2-45de-ad4b-0f6fbfa2b839",
        "cursor": {
          "ref": "1ed9b67a-7432-4687-b158-e71a81e1cfbe",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0174738e-5958-4729-8d4f-a2bc5049f727"
        },
        "item": {
          "id": "3c86012b-83a2-45de-ad4b-0f6fbfa2b839",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cbfd3ff4-c9e6-41f2-9f27-a2cbf9dbaf0d",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "050f1e0b-115d-4706-b234-88436eabad04",
        "cursor": {
          "ref": "cf093ee5-66c2-40f0-85eb-5be32da200c6",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cc20d881-a2cd-418f-9177-42b8092634f8"
        },
        "item": {
          "id": "050f1e0b-115d-4706-b234-88436eabad04",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "24114e46-079d-4582-b8d5-8d181fedccba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8178a1-b76e-4784-836a-a4dad2a787f5",
        "cursor": {
          "ref": "0fd61b02-2ef2-414c-a765-f31405d6b0e3",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c7f20801-846f-498d-abde-87a2b2353c61"
        },
        "item": {
          "id": "3a8178a1-b76e-4784-836a-a4dad2a787f5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5ab2d724-c1c6-4995-9132-1a8604fb3d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f506c9e-3ab5-4f82-93bc-ecad2eb6a826",
        "cursor": {
          "ref": "3daaae46-e5d4-46ea-9239-ede368fda24b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1d7925b1-a64c-4474-8174-f28e75d261a9"
        },
        "item": {
          "id": "8f506c9e-3ab5-4f82-93bc-ecad2eb6a826",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "92dfa6bd-4a17-4fa9-9a12-c0cb3ebd3fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ed6141-4eba-4252-a8d3-70e5a66a2d66",
        "cursor": {
          "ref": "554f590e-0486-4407-b28b-37dfa6f066e1",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7893dbdb-d8c7-431b-b597-bf9db74bcece"
        },
        "item": {
          "id": "43ed6141-4eba-4252-a8d3-70e5a66a2d66",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "bad3ceb9-95a9-4676-957c-d9753beeb0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af09c9b-6b07-4972-a42f-67cb5fcd67bd",
        "cursor": {
          "ref": "4ef34f9a-2de9-4f97-bcd2-b7db38e58907",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "78ecc984-8b91-4d1a-99ec-4a2ae1dbe810"
        },
        "item": {
          "id": "2af09c9b-6b07-4972-a42f-67cb5fcd67bd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1caa8789-609d-4d3f-8786-606077c3e331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f03a328-7f9c-45ad-90a5-b27ac7d27823",
        "cursor": {
          "ref": "508a7b41-c0fd-4265-b48e-2c24ed88600e",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "715a6a0b-97bf-4e34-b2fe-86c169b2ee4d"
        },
        "item": {
          "id": "7f03a328-7f9c-45ad-90a5-b27ac7d27823",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "85405de2-d4f8-4ee4-946e-9e831af1fb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059a66c2-ce75-4aa4-90eb-a8820c119a86",
        "cursor": {
          "ref": "72f84e80-90bc-4e68-82c7-31128a19a760",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "645c2225-ca82-4850-af6b-7d0da65c301f"
        },
        "item": {
          "id": "059a66c2-ce75-4aa4-90eb-a8820c119a86",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "01258e69-129d-4fc7-9a99-679548b23631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74be9a54-386a-4cee-856b-2aee82eb6806",
        "cursor": {
          "ref": "c45f5e8e-d98a-4abb-b833-9d669b1932b4",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bd5cb504-2254-4254-b87f-304dc14a0fc2"
        },
        "item": {
          "id": "74be9a54-386a-4cee-856b-2aee82eb6806",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f3f59005-67c2-4952-8e82-afef0dd57e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0260988-d9e0-4d78-a8a0-55c351810393",
        "cursor": {
          "ref": "09991a75-3b44-41a0-80cf-c84a01054bcd",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c1ad14f3-d84b-4bea-a942-074c4fe71690"
        },
        "item": {
          "id": "f0260988-d9e0-4d78-a8a0-55c351810393",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e646c20c-0764-4daa-94da-a4ccff315172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbb2d7c-2b31-48bd-983c-05aeedb23f30",
        "cursor": {
          "ref": "e7f4af3a-6091-4d8d-a2ab-a4d3fa20fe07",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7bd7ad72-df2c-49ee-a1b6-9aff382f421e"
        },
        "item": {
          "id": "6cbb2d7c-2b31-48bd-983c-05aeedb23f30",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a7359f70-4c15-4799-b521-a5eb4011bd2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a02da0-9142-486a-99a1-908654159190",
        "cursor": {
          "ref": "f7d4d87a-10d8-4eb8-b210-830cfe9c13a7",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "64692352-1f3e-4cd5-8bb6-0e28c979f35a"
        },
        "item": {
          "id": "09a02da0-9142-486a-99a1-908654159190",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e72653c7-2b7a-4d42-99a8-aba2be785834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0fff9e-e50d-4c2f-a85e-84e7d77cfe50",
        "cursor": {
          "ref": "e173056e-c0f5-4f60-b346-241f3faf4574",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "66f2650c-46dc-4cba-bd33-9d675451235a"
        },
        "item": {
          "id": "ca0fff9e-e50d-4c2f-a85e-84e7d77cfe50",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "69a375cf-44aa-4010-b1ec-772a2365ce20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d41e202-f117-4e24-9f38-f46ff48a1bde",
        "cursor": {
          "ref": "eda796cd-056b-4dfd-a5b0-d10055c3142d",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c71bd9f2-7378-4df7-a687-d8af651f4d03"
        },
        "item": {
          "id": "8d41e202-f117-4e24-9f38-f46ff48a1bde",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "58400c8a-c0fd-4368-9bb5-bda44174e660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17808c44-d345-40c0-a4ee-71aeaca0b430",
        "cursor": {
          "ref": "ee599993-7dde-4640-95da-7b923db51167",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a3f99f1d-a4cf-445e-903f-a47c7f675e19"
        },
        "item": {
          "id": "17808c44-d345-40c0-a4ee-71aeaca0b430",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c53b2b7e-6f4d-4cf2-9a21-c6977647e6e1",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f1a3c95f-3cb0-4ab3-a1f7-bf61c11e5d66",
        "cursor": {
          "ref": "79cab48f-3835-4501-9cb4-195808ff6434",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9cd4bced-6f96-40b6-b88f-f4024d2712ce"
        },
        "item": {
          "id": "f1a3c95f-3cb0-4ab3-a1f7-bf61c11e5d66",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9a3ed8cd-be21-4061-908a-263339264701",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e3816c9d-d01b-4773-94e3-c4937a2df87e",
        "cursor": {
          "ref": "c5db8bf1-7412-4fee-b22f-f16f37ce2b62",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "27805d7d-907a-4ccb-b24b-ddf0da7a3d8f"
        },
        "item": {
          "id": "e3816c9d-d01b-4773-94e3-c4937a2df87e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5503c988-a841-4609-aa49-3e2e73ac51d6",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4540432a-44df-4ed5-b9bd-2957577f4276",
        "cursor": {
          "ref": "0b742850-7dca-4f54-a407-617eecaedddc",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0271f842-3c7a-4376-90c0-956291982eac"
        },
        "item": {
          "id": "4540432a-44df-4ed5-b9bd-2957577f4276",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "68df9dc9-ccf5-4e90-a8a9-d900164c1f9f",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "72ea7fc9-e7b8-4e0e-9a18-7f8bad8c88ab",
        "cursor": {
          "ref": "bf6c90aa-50e8-4859-8fc6-d1339b4e31b9",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "09810d09-e793-4a58-9c67-6ddf58ac7167"
        },
        "item": {
          "id": "72ea7fc9-e7b8-4e0e-9a18-7f8bad8c88ab",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "26c5e10f-6692-49dd-9671-3a982f2ecefb",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "40de8e92-a32e-4240-b70a-f83fb9b451b8",
        "cursor": {
          "ref": "00e3a527-a8c5-4185-a769-1c9d4a98b7ce",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6fc817ed-6231-4bed-a0e6-c6594a7fd29b"
        },
        "item": {
          "id": "40de8e92-a32e-4240-b70a-f83fb9b451b8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "44383018-b6c7-45b2-9c08-25de946d23f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07615ef0-111c-49d0-a385-26305aa5cd7f",
        "cursor": {
          "ref": "854964fc-93ab-42ea-aa93-6f31558acaab",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "12edf58e-e150-4586-a969-787232d0e278"
        },
        "item": {
          "id": "07615ef0-111c-49d0-a385-26305aa5cd7f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bcf5685f-8d52-4ba5-af62-d50d6ea3f9b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6e434c-1613-4ff0-a03c-4dab3af28a10",
        "cursor": {
          "ref": "aa703073-3f2e-472f-9dbf-433687352a9c",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "83125036-fb47-4f91-9528-82973fff0a09"
        },
        "item": {
          "id": "ee6e434c-1613-4ff0-a03c-4dab3af28a10",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "213c6348-55bc-41ef-b1b0-6d2434f8cea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbcece3-f36f-4523-907c-833897cde477",
        "cursor": {
          "ref": "bab2a413-f06e-4bfa-ba4b-3538034f683e",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4ce0b084-d2b4-4922-8096-044226a9793a"
        },
        "item": {
          "id": "6dbcece3-f36f-4523-907c-833897cde477",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f178e52f-780c-49a3-aecf-6cea4d0cd74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb22071-f0f4-4a30-97e0-5c0f7c851534",
        "cursor": {
          "ref": "797220c1-0cd2-49ce-9ee5-038696270c1b",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fcc7efa1-bc3c-4c63-a419-1b9c68ebfa9b"
        },
        "item": {
          "id": "fcb22071-f0f4-4a30-97e0-5c0f7c851534",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5f8ce238-abe0-482b-986a-26c972054776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f492758d-5137-42ae-b27c-0ab4f960edde",
        "cursor": {
          "ref": "cbd3ad0e-02ae-496c-8747-0378d8751f21",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f0f3da46-325c-4bac-82cd-6591e6cdc89a"
        },
        "item": {
          "id": "f492758d-5137-42ae-b27c-0ab4f960edde",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "052efdfa-fd16-46cb-9eb7-d364b9868b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2769992c-74d0-49e2-8a31-445219d15a4b",
        "cursor": {
          "ref": "3dcb018c-772d-4d18-b911-3e7ad12b48de",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b0ee1a1d-ccc2-404f-a491-2d130e6e73aa"
        },
        "item": {
          "id": "2769992c-74d0-49e2-8a31-445219d15a4b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8563517e-82ad-4a4f-acad-a912bb815fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d168d277-b022-436f-8ae6-99bc36fe0f3d",
        "cursor": {
          "ref": "31726e41-75d7-470e-82f6-30ea093c3819",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0ac6c4d4-f056-4a0e-86ca-825bd64ccbaa"
        },
        "item": {
          "id": "d168d277-b022-436f-8ae6-99bc36fe0f3d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d5a1ce40-3374-461a-ab74-c355554ab9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f18c7e-57fe-438e-9761-457901673bc3",
        "cursor": {
          "ref": "3845efd1-57e3-40a4-866b-a9ef558dbaeb",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b5ae8d65-5256-4be5-b4be-62916f670aa5"
        },
        "item": {
          "id": "b1f18c7e-57fe-438e-9761-457901673bc3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c1eb23e4-168c-4440-9265-85cf304e63ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36159d0-8b2b-40d2-a745-5c8f65988737",
        "cursor": {
          "ref": "d5f553d5-51a0-4e9b-89f1-dc2920520e70",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "96a31597-4c8e-4675-bff3-e4d0998233f5"
        },
        "item": {
          "id": "f36159d0-8b2b-40d2-a745-5c8f65988737",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c5842fec-f644-40ea-bf2c-92b9cb10dd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748fa333-39b2-4162-b407-95c75120d5c9",
        "cursor": {
          "ref": "b0c272b7-30ed-46d5-b4df-3e5f2e85054b",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e800dd01-4c7d-46bf-b55b-d3de5533aa14"
        },
        "item": {
          "id": "748fa333-39b2-4162-b407-95c75120d5c9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "46efb8a9-c1c0-442d-8868-fd0cf60c4ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa5ab42-37c8-4e42-83a2-0a7d78f036a6",
        "cursor": {
          "ref": "9af5c830-cc97-4f80-af33-07a269bc46a0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8cf52316-fa23-4263-9b9a-5a2e6215a20c"
        },
        "item": {
          "id": "aaa5ab42-37c8-4e42-83a2-0a7d78f036a6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57315071-d1e5-4710-b50c-6c5b297c9f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8feebf-37a9-46d8-8f27-9b9186ac8444",
        "cursor": {
          "ref": "16d7e66b-58e4-4dcc-a61b-ad519710cfe8",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "83e19b8b-946f-4d57-a0cb-af124d08ee2a"
        },
        "item": {
          "id": "1f8feebf-37a9-46d8-8f27-9b9186ac8444",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "38822251-5def-4c7c-952e-775cd6b2684a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9203f7-192d-468a-989a-0074b0cc67f7",
        "cursor": {
          "ref": "c830e73e-7c5b-4526-8dba-c8be087a5189",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8fb73b3b-57ca-4b9d-b3c7-541d3e7875d8"
        },
        "item": {
          "id": "fb9203f7-192d-468a-989a-0074b0cc67f7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f3f21c8e-48b7-4eb7-b25d-748acbf02fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775b9e12-c464-4952-b42f-c304f4dd0c91",
        "cursor": {
          "ref": "c539a535-4a43-4abe-9c52-f67fd43a0fb6",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "669d409d-a7af-4466-befa-11ce4d6df6aa"
        },
        "item": {
          "id": "775b9e12-c464-4952-b42f-c304f4dd0c91",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b810003c-c659-4124-85c2-74509544a8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab4f2bd-4af9-4d9a-a05a-e952d61c1ba5",
        "cursor": {
          "ref": "f8198fa3-5b9e-4542-b36c-e239e15831ed",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "54dbf4a1-c580-4405-bc4a-a91bc8b017d7"
        },
        "item": {
          "id": "9ab4f2bd-4af9-4d9a-a05a-e952d61c1ba5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2fa5b1c9-d2cb-48ce-a7fc-a3c2b89f29b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf22475-ecf8-4c4a-ba1c-d6b69f6cd8c1",
        "cursor": {
          "ref": "3efa3485-37cb-4a0f-8f50-5683f042f9ae",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b3be88ae-2300-4b65-978a-8be7343c53db"
        },
        "item": {
          "id": "ecf22475-ecf8-4c4a-ba1c-d6b69f6cd8c1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b5ad1e89-c6c3-40fb-8db5-1fc182c2ad1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3cba0d-23c2-4cbf-9de0-ea09f5c8d10d",
        "cursor": {
          "ref": "8de81a19-7551-4bf4-94c5-86217acee510",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ca5bcb2c-9711-4bc1-b6c1-4181406b8ef2"
        },
        "item": {
          "id": "4a3cba0d-23c2-4cbf-9de0-ea09f5c8d10d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7d98499d-ee3a-4f88-b569-174a3e462df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1453676c-d49f-44d7-8fb2-b9b965408432",
        "cursor": {
          "ref": "6767a8ea-c278-4bfd-a2ef-ac12f600d524",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b5ee755d-87c1-4f55-a89d-88a63698788e"
        },
        "item": {
          "id": "1453676c-d49f-44d7-8fb2-b9b965408432",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b566f3f5-efe4-430b-98ff-da4eedb40712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82df0d7c-919e-4f5d-b822-3333061ff5d3",
        "cursor": {
          "ref": "029b2fba-81c5-44b8-84fa-6689e4a6da7a",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "36b8c0ec-4745-48f1-9821-317bf37ad303"
        },
        "item": {
          "id": "82df0d7c-919e-4f5d-b822-3333061ff5d3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "16ac288c-5516-4fd6-8db4-1c6c80608df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606cd0c2-0feb-47ed-974b-42f9acbee7b2",
        "cursor": {
          "ref": "f951cf98-1fa5-419a-874f-678e20c60680",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "d62ab181-70cc-4a45-9d32-5e97ec948f80"
        },
        "item": {
          "id": "606cd0c2-0feb-47ed-974b-42f9acbee7b2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "63e71d8a-c834-4538-823f-69112999482f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951af305-a347-4239-9da4-c0302753f74d",
        "cursor": {
          "ref": "8bfd6b87-43da-41e2-b0e8-9ee74c7dbb9d",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "dac7559a-c29c-4e99-8008-e81189300224"
        },
        "item": {
          "id": "951af305-a347-4239-9da4-c0302753f74d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7b6c4c6b-67f0-40a9-b3fb-0ff3b48ed292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15849653-9d69-4dcc-9d5a-6889fb3170cf",
        "cursor": {
          "ref": "a7215ca9-cd43-4701-8b07-66efbfe336bf",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "fbdeeaf5-d1f5-4d49-b36f-0573a25566a2"
        },
        "item": {
          "id": "15849653-9d69-4dcc-9d5a-6889fb3170cf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "efc02efe-8141-4eee-95b5-ffeaaf132ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f484cf9-bd46-482c-9aa9-62ca3248be7f",
        "cursor": {
          "ref": "ff2f659e-7da8-4720-a28c-120f6555ec7b",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "046cf6d7-54d5-432c-8437-1816ca381ea5"
        },
        "item": {
          "id": "9f484cf9-bd46-482c-9aa9-62ca3248be7f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8d4145c8-1cfb-48c3-a184-d8279151b4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c746a2-a1ca-4b27-97b7-77f15bc0185c",
        "cursor": {
          "ref": "e244079b-65a4-4bfd-9a3a-bdf9c445a028",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "baaed8fe-3709-4afe-963f-6b0e9d93cac7"
        },
        "item": {
          "id": "f1c746a2-a1ca-4b27-97b7-77f15bc0185c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0cc29dca-0f7e-4afd-916b-bb50e3e011cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ff014c-befe-45e8-b42d-cd6ec19546dc",
        "cursor": {
          "ref": "e56a5e9a-bb14-4cf2-8a1f-8011e23c0b05",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "af74502e-dce7-45fa-8a67-4575a5e211d4"
        },
        "item": {
          "id": "a4ff014c-befe-45e8-b42d-cd6ec19546dc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6bf53fec-4e47-4b7f-9f50-08971f8884ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d843b40-2134-4d7c-9f67-f0ab46c0c098",
        "cursor": {
          "ref": "d1606661-784f-4a75-ae04-7824cb9e5ceb",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "4f0a5348-068f-4513-80b3-dbb175aa1868"
        },
        "item": {
          "id": "9d843b40-2134-4d7c-9f67-f0ab46c0c098",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ea2d6f22-30aa-4b1e-88be-999e0414aba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ed8c01-72bc-48c2-82c7-b4be0d5e4926",
        "cursor": {
          "ref": "02b07740-4987-486d-95c3-0b3a974f4429",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e5750e39-e3eb-45a3-b0d0-72d7bb089b4c"
        },
        "item": {
          "id": "72ed8c01-72bc-48c2-82c7-b4be0d5e4926",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c6406455-a1df-422e-b9f4-8fb339dc4881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66101046-e4c8-430c-8801-309457dd6de4",
        "cursor": {
          "ref": "f78569cf-289d-40e5-be79-9f937f2416c9",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1f672b81-8c1d-4f55-8f5a-201685e66e76"
        },
        "item": {
          "id": "66101046-e4c8-430c-8801-309457dd6de4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "46748708-4461-4b59-a1f7-2ed5e1f28458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec929552-cf75-43da-ae91-c2454659d294",
        "cursor": {
          "ref": "09f442f2-4769-407a-9bc9-df13850132c6",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1c59fc68-31ea-4b4c-b12d-d2beb4b84781"
        },
        "item": {
          "id": "ec929552-cf75-43da-ae91-c2454659d294",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "93b09b3a-519b-470b-ac12-0b770510bae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395abb43-9a0a-4f73-a707-8b4c89712693",
        "cursor": {
          "ref": "ee994654-47d1-4959-8949-9b654c9f8289",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "22bf2004-17f1-45c1-9e56-9e91c7c972ab"
        },
        "item": {
          "id": "395abb43-9a0a-4f73-a707-8b4c89712693",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b193d32a-2b67-4dd4-b40b-abd0ed620bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b114dc0-4bd1-477e-b935-34cceb8fc30c",
        "cursor": {
          "ref": "e59d3391-ba98-4635-abb8-c367ac96e046",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "cbd11280-35bd-48c2-b511-a3902c6058d0"
        },
        "item": {
          "id": "1b114dc0-4bd1-477e-b935-34cceb8fc30c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3a0cb93a-3c47-4e7c-8533-8073608ecf07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde871c6-0c33-45b4-bfb6-7de0de71c662",
        "cursor": {
          "ref": "1e6c1bb2-ebab-49af-970a-709633b6194e",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a0bd313b-03ab-4aec-9fb0-887293bdc7eb"
        },
        "item": {
          "id": "cde871c6-0c33-45b4-bfb6-7de0de71c662",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5e9277c7-ba3c-48a0-b58e-ccc5b58b6d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6b0163-8480-4cd9-85c2-c313e94284b0",
        "cursor": {
          "ref": "dcbe53b7-cce9-4900-82d3-873ace0d5a47",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b3b4913b-fb6c-4c9a-ac48-df7647630d57"
        },
        "item": {
          "id": "1e6b0163-8480-4cd9-85c2-c313e94284b0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0f515c41-3b9e-4c10-becf-8e3e78d1d651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda61c70-70f3-4f47-8c7f-66ec9aa70e83",
        "cursor": {
          "ref": "37456470-84c5-4abe-b4b0-83bb8e7066b2",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1d4b8989-1b1a-4225-9820-52befa004761"
        },
        "item": {
          "id": "fda61c70-70f3-4f47-8c7f-66ec9aa70e83",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f6c08cdb-ceae-4f3b-ac65-c0ee38746f39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f64776-e4c5-4a02-a198-600423b44006",
        "cursor": {
          "ref": "54457591-22b7-42a7-9bd3-c15a068ee63d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "50c3dbba-dc59-4e92-b638-67e9ce0a1073"
        },
        "item": {
          "id": "97f64776-e4c5-4a02-a198-600423b44006",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3dd8dddb-cddb-46f3-bd82-73afba3ffcc9",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "59af4118-f243-490a-914a-a7e6811076f5",
        "cursor": {
          "ref": "d7a35e89-d900-4da4-88d2-36ad7685f6be",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "40ecec68-d348-4610-a3c1-eee47acd17bd"
        },
        "item": {
          "id": "59af4118-f243-490a-914a-a7e6811076f5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8d4d784f-d8db-4448-8250-40bdaaae6bdd",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fe908f-3547-41af-921b-55b661a93a98",
        "cursor": {
          "ref": "4c9dc5e9-5c03-4ad9-a699-4c0fd011a0af",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "af14aaf0-c727-415d-9498-787eb27287c4"
        },
        "item": {
          "id": "07fe908f-3547-41af-921b-55b661a93a98",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "67d27e55-ae2f-40ab-9a9d-fe19c3eb7411",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fa3cfa-65c1-4824-8bca-4492f4fcc6c5",
        "cursor": {
          "ref": "fdac2d9f-8e84-457b-837f-a07692a24dde",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "363c0b4e-9ba3-4056-ab24-69eb3ddc6a7f"
        },
        "item": {
          "id": "e9fa3cfa-65c1-4824-8bca-4492f4fcc6c5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "efcac99e-ea31-45c3-92f5-0d74d8b6224e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fa3cfa-65c1-4824-8bca-4492f4fcc6c5",
        "cursor": {
          "ref": "fdac2d9f-8e84-457b-837f-a07692a24dde",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "363c0b4e-9ba3-4056-ab24-69eb3ddc6a7f"
        },
        "item": {
          "id": "e9fa3cfa-65c1-4824-8bca-4492f4fcc6c5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "efcac99e-ea31-45c3-92f5-0d74d8b6224e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec13afc1-0c04-49c6-82df-4a3506f84455",
        "cursor": {
          "ref": "866796e8-bdd8-49a8-8249-4f6512f6e4b2",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f905b743-1aa9-4742-82ad-3b66d82c86f5"
        },
        "item": {
          "id": "ec13afc1-0c04-49c6-82df-4a3506f84455",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8ee73f3c-f25e-4115-8d08-bcaad5970211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee42968-f6b8-452a-bed1-ff5a14f03b14",
        "cursor": {
          "ref": "14465c6f-355f-4b9e-95ef-7ad985d5603f",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "d4ae0aa5-45fa-4301-a9fa-7fc9b2a0a577"
        },
        "item": {
          "id": "7ee42968-f6b8-452a-bed1-ff5a14f03b14",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4aaf4556-c1fd-41d6-877a-29e74cbb9043",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}