{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "45a5dabc-85e4-4492-b9b4-8e2d17072c62",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a073dbf5-eb19-4bd3-bebf-63489dc304b3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23ecb847-2a76-4d5b-af44-d68f213b6a98",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5b57cbb2-f13d-4ea7-aa7f-33db373a9e43"
                }
              }
            ]
          },
          {
            "id": "1a05b9de-c6e8-412c-a598-90a8302354e1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "28e06d5b-fdf7-4ecf-9220-ea594775505b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "12b4449f-f776-4885-a218-5ed8d8939c5e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "99ecb243-d363-44a4-b14f-5cdd491b218e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "45f3d63c-bc27-43af-af19-fc220695c469",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db79f190-227b-49a4-9be1-5f03eb8c0549",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d2a24d6-7241-4c64-be94-d834c1bee075",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f8d8784-b911-4098-afd3-9da0a0cafbf7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac1026f8-dcf5-46d9-9a2c-23591f260f83",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "54bf4946-1f74-45f9-999a-bb20da297d80"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f98b5638-d401-4b67-bf29-395de2be389b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b57d0298-5a77-4a3c-bdfc-5b9b8220f31f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a291c3f-68c5-4b25-84bf-9c3170f7f139",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0fcb1d2e-b017-4f1e-a200-e2b06bcffa90"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f18cca63-cbaa-4f98-aae8-bb928324fe8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97ac8065-75c8-4511-95eb-b96aec7f8d1c"
            }
          }
        ]
      },
      {
        "id": "39552999-da19-4877-9a33-778170cf3fb5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ea12c3eb-d177-4754-b5f4-6774ba91db0f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5f933e0-30cd-4d58-8b0b-3747a1763b0d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5ecce224-0975-4654-ba55-3ccad2bfbf22",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2640bbf-e6ae-487f-9019-f40b52ceb9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "792ad5ef-e449-4528-b6b8-e3c53322218f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b16470-e03b-4721-b897-d482b6eb02a1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a074068-0d47-4e04-8fcd-70c3b1c82e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f91cc43-a1dc-4c82-818b-7492fb3e76c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d12a39-1e98-4354-b9a7-ea1f27c5c4c1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ac977e-705e-4a64-afcb-74b00c444e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cfa468a-3b3f-4601-ae1f-7a3c60f1da62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1f8c8d8f-daa6-4f54-8838-3d5c902791b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "972c77be-0e8d-463a-9f23-9721e27a6319",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7ffb3c-ba22-4584-a18b-6c87bfeee0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50513212-ac88-4006-b602-2a781517fe85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168c3ec3-9c09-4415-ae22-664aea1cc2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69032d40-ab1b-4579-8ec3-27a06ee6c79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4142bdc3-4017-41f5-9021-74638763320a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e5402c-6001-47c5-9237-0f3afadb99b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bd33ab9-712c-49a9-9ac7-b011c844e782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0d7bea-132c-4b49-8f78-fcfa46df445d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9692f990-5bd3-4de4-87f4-c3da5ce36096"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e313ac34-348a-4221-a93a-b1e42c63d255",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c5f46ffd-9947-47ae-98be-2603ee727201",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd82ace2-689e-4220-a856-c1b9a568f8c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "39ef5a52-e5de-4180-9755-09289d805353"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11990056-4727-4000-9200-6732f57046d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "71beaf28-f771-4a0d-9825-eac6e12580ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5aaef6af-5f99-4b61-aff1-1d32f01e36d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2847d69a-7318-4b0b-bdf9-6abaadc21dc1"
            }
          }
        ]
      },
      {
        "id": "3cd6384a-6b87-4c98-85ec-6e2d1a897bc1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a2abfc25-ba9f-4777-8458-b5637c94a290",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e73033d-827f-410e-8933-459ed3ac81fa",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3d3f7f27-bfe5-4f35-8071-bc4ba7aba295",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca0167c-e972-4850-adeb-6f192ebc6792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ddd2c2-5a1a-4be0-95c8-e80b586d584c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62781aa1-820b-40cb-b5b5-1a607a0a74a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "536bf534-a39a-4710-afaf-5515a264eda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9924c862-ae76-45f5-9305-bfb10ee8082e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4e5f3e-77cd-4d23-bdf7-9829858a0526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e102b2d-2ed5-4705-b767-4f81c0be1820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b2fb44-ea1a-4696-8e48-7926d85c4520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdff980f-2653-4460-9136-08b82e646539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbebefa-ea29-4485-9b44-dfa75c15ab4c",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f7184e-646c-4919-a3d7-a2d4e0c3aa73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf7cf5a7-bbf6-4124-a026-c6bdaf024d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d54c8a-bb76-4983-b05b-b1053df0cc37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dc821e8-dab6-4828-8bf8-19b4d73e71ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a0461b-67cf-4d0a-b3ef-370d4e456919",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c78551-dbe6-452d-9604-97730592cf28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e067ba7-9118-4230-8efd-79223e7bcb12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dae0985-220f-41f0-a4ff-a1b8fd5bba04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80d5a329-e6f0-4ca9-95b3-625ebbf47ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b17563-9c98-4463-9daf-715fcc56a446",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a44c7f-5bab-46fc-8dcd-1d9a9a6b3779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14d6632-979a-419f-8988-c85e452a1ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efc2a45-c843-417c-bfe8-94d838fe9e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cde1807a-73d8-49fe-ad2d-2056a5255a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c31e6f4-ffb9-4585-b297-36f4d21bf194",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9818a025-66a4-490d-98c7-d30575a3020d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cebe35c-4f98-4684-9ddb-d516f1425eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6f962c-f8dd-4415-8785-6ce8252284cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88cdeb07-6c1a-4c37-9f6f-d6916c0eb182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f27172e-c93e-4e79-a66f-6b4fb0490ef9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601acea9-b22f-440d-aa9b-8ad779ae198b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026a6561-130c-461c-8a44-9464a52b3e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78c91e1-acc3-47eb-9cf2-f2b63507a8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26f0d7fd-a571-4d8c-9cb0-b02d532295f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88390192-cfc6-4090-b19c-d1f64d79114d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e09785-1372-4bd5-bbe8-88e78a28eec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97cd87e-fa4e-498f-82a9-af1afa6a4bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08aad01d-5344-416f-8528-de3f87036576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51e85a8e-57b1-46de-8d77-fb8560b378cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d4c1ee-ae9f-4d3b-b566-c875b0af0ef5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e620bf9c-1cd1-4dfc-9d98-b9f833352db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b9e5286-f87a-452e-a46f-0ff7a518bbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5859505d-a5aa-4287-ae7e-9c92c2e7d90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f69aaf5-e70d-40bf-a83a-a670899fa3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5b6143-fc2b-426e-9b8a-b58cb12bd70e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cac9a8c-6e0c-4c66-99cd-7b67be69e088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40624042-8320-4930-834c-712772a19dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981a33cd-c7ae-45ab-93bc-efe27ac4b58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50d7543a-67cb-457f-80a6-a29c148a9188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1a956f-10d1-450b-b1c4-3214e037bda5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b8675a-824a-4714-bfe4-5b6734a595de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a2bfff-6ee3-482d-831c-791cb5bf018e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da884a5-f2cc-4e4e-b5a8-8e51fceb33de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5072ac21-24a2-4f0b-a9fa-ea364a2f89a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c303c496-e5c4-4baa-ba3e-5606fc1d4f0a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b46682e-9b15-4e56-adb7-6de833b9ec08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd2c21d-4731-4718-9cc0-73549d43382a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa99ca9-5c55-4106-90b1-e0c7811430a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0efc1c38-2f91-45c7-9582-bc5383222045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29396f54-1208-4c38-98c8-10906d70c43d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37745756-557b-46af-ada1-2687024adbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789f38ff-3cf7-4ac4-a7ca-d35de0fd0604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06cd088-7c1f-48b8-a5a4-3b9492bb5538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4948c660-e389-40ff-becb-e643c891aa13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d77e67-e78d-4971-898b-935440a673cd",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0785c9-6b42-4dd9-8f68-d6866d253ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e3e6e3-e6d4-4826-9c92-35faaf8cc2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589e070e-03ee-46ca-9b23-1c3a62ab6a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "46c59adc-798f-4a4b-beb6-9455c88bb7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e286e5a-f86d-45e0-87c7-dd5e27ce3101",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe18e6b-f618-4672-9bb8-5537bbb38961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c4d1e3-bffd-49ca-bbf4-00eb749fb07d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d73c936-f993-497f-ac0e-3a8220b94f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd3611cf-b4a0-4b39-9117-a8a84def91e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af1d879-2e9b-414c-ae92-89cd1fb2aa7c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374d9e15-5101-40a2-8635-0b7d598e53e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e61cf8-9da2-4fe0-8481-1544a0492679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbd79c9-1de6-4f1c-a082-4a975f357306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97af1137-4bef-48c3-9cc3-6c44cdad90be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a214937-85b3-4ac7-8fd9-0123f429d461",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5625b098-9722-4ecd-a80e-ca5a9f559936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3b01bf-bcea-4619-9e33-c94314e03dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd674c0-814f-4404-8a2a-d8b696fe8200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "977d504d-d1f4-4853-8c15-f25af6da9a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cdb1dd-aae8-4596-8edf-683333cb994b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eeea605-1727-4dae-98f9-6fb402bf3465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa215bef-d99b-4346-8645-459eb43b5ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39aef2ee-c023-4c24-90b6-eeb7d4dbd472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8c72658-61d4-4d04-9a4a-07514797f5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc832a4-b327-4366-b892-67e65b443c47",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c550a9-bfb5-4ee3-9438-23897768c47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ca0aeb-1831-454f-83c8-3e2ee36c83f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5640a22-1e27-4f9f-b4d8-e4bf5f46042c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42e3118b-0230-4cd9-a217-98db2d2701b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258ad9b8-602c-46be-8011-ec910f8e528b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6d893e-d504-439b-8fb0-e5bef2323b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b407b62-935b-4730-b076-77a520a7f083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d94167-7d33-449d-9f9b-660e2ab616ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "87ae2735-5cea-479a-9580-8e20993358ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5439a70f-3c5f-4c4c-969d-fe86760e9baa",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bbfd2e-b1f6-4224-a960-a48930a62eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb28851c-b820-4679-8798-65478c26e2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c365e1b1-b470-4c80-99ef-622847440625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a40ae3-d348-49bf-a4ef-f51a813ebe6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a395ace0-94cc-4b9a-92da-3063d0beb4f9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2ed8d8-aaf3-4d04-9321-7dd83bc09e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9a5cad-f4a0-4371-be4b-7c0fa7b17c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2bd95d-7e10-4b49-840d-a37c3074fb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20e3e522-6cd0-4f72-85df-473d5939ee7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1102b4-d488-499a-be6a-fc7d3120931b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243b769c-1aa8-4ed8-a04f-fca62075f2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7dd78a-5360-4a25-bf92-812c5f05fc58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3154c63b-79d8-4617-b0ee-bc63bb7e3b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa99d8cd-3ece-4a64-ba16-dad0f1060f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9542a1bb-5a19-4a7f-9453-183dbcec1e9c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09db040-51c7-4d2d-b747-ac156d4e9e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949809df-2c3b-4e7f-a03c-ec8cd5aa98d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b97b86-e4b7-4b51-9038-cd1021606313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf67b26-e9a9-4a42-b9ae-8943ce94f9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc64b6c8-b267-4213-8174-ec7ad465755a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c42fd4f-877a-4ab3-9610-d9072578bbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9249792-d92d-47cc-8e1f-5a57dc8ece04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed480aa-822f-4a5c-98f0-3faee3bba00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8471fc79-1e10-431b-813c-c694610e3f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84cdcabd-1388-4538-876a-1a9d909f8ab9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f08f184-69ed-475d-8760-555274e97c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ceff02-de47-462d-843a-e407d78384ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142f6987-ab75-4f83-8ca2-2d7807044923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "23522fcf-2828-41f3-8519-cb1d82dbe24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be39119-43df-414c-a967-954f0b0652bb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ffbb2c-7945-4676-82f9-935839ed66ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd085d1b-ab8b-4d73-98e3-8c1739421d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8c4981-5992-4707-a38d-3259acf1e85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbed61e5-2f21-4de2-b247-77c92b2cc372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7889d1b-e03e-428a-997d-8e24a2712454",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09dc0171-9fe1-4b4f-9c02-f384ea0c9752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fbbb813-4e7b-4fca-bf12-74000da0f9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf11e5f9-6b66-45aa-9c56-3f8ebf1a8106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab22649c-5f4d-4063-8c53-b62df66f01e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67387890-8c61-4843-9803-f53674465b73",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e7150b0-f18e-485d-a2d2-ff6838d60068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d6f529-2e79-499f-a630-b44ebed3d7e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6352c37e-7cf9-4574-bb49-6a16de04e20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc4748f-978d-4e06-b1d8-8f2ba3737b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4537d1b-2823-4cc5-9b21-cb0b3d1ea9d4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880665e2-e80c-4874-87e7-d5a652ed1956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad5b058-a975-4cec-a84b-3393a3f95684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467c3c71-7d01-4871-a36e-286dfc44dc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2640ce4-a96f-49b0-9afb-2d64ad770f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162ba6ec-7136-41d0-a8e3-71cef6c1e02c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558e08d0-c359-4fe6-9554-4a7cc0595d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ffb249-ef5b-478c-9991-54fe95b4b43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31221360-9687-4a29-8125-0adc041540e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be2f3da6-bda4-426e-b388-758c8d480f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef3d074-9f99-429d-bc0d-b952d42d9cf7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35596e1-8254-4337-a5df-289b599d1968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d706161-5898-4f4e-9511-61d6f8f01c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a77cf9-a7e2-4566-b6e6-803cbe285b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "adbc6e95-166b-4084-b09e-d3c4e567d44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5041459f-b604-4160-87d9-4cf193406f4e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30f867d-4e3f-493c-be83-3466d7043892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68c3b92-a4bb-431d-8410-e46a5619ed79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030ed65b-af98-447e-a07a-6d8b512bd127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13c35864-ecc5-41f1-a81b-d651b8cee62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8691ad93-f17b-43c6-b108-094cae465f24",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf75275b-cd47-4823-8aff-113cedfb1152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59674602-0a4d-4963-ba11-f19431eaaf0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bccad93-11cd-443a-86be-f99dbe375cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "649445ef-099b-4ad8-8a90-e4b4fc6f8bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99a8610-7e50-4109-be91-cdd6bfd5e9d8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b20c53-0ff9-474c-a891-bed2f6c0f201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b315ae1-1172-4b06-8813-b249ddc0f4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d3a5df-c428-468b-bfaa-be6702c8ad17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba8064e-bc27-4111-8e4b-fc91de7a7a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5b187d-2dfc-4f3e-809f-358429526673",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e074bd-bd0b-413b-96d4-ededb5d8c63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58aedbdd-d5ef-45c5-ad43-19353f70ab6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdce2f3-5674-4b99-a665-5e5f3eac917e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0797955-afca-4f6b-b710-786e03713439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb13fbaa-7ce6-4038-9cf8-e5c977e203b5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483fc0e1-115c-4fe9-b372-dd9b7333adef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7456bdd-bbda-46b4-a6c3-976eb385792c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d96c30-e42d-43b5-9ee2-24be643d3944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9dbb27a4-61fd-4402-a287-3d0cf9cc6615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48be33bc-8b46-446c-a315-1f8a70a25b94",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91478b7-716b-4c65-b7ed-d14b76c1ef91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0dc51ee-e277-495f-8011-6f78679745f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72957fea-4ca5-45b4-9738-52c763cb8c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "637e9a03-aeca-4074-bf3d-40e38bab916d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1c290a-5528-4a80-8694-71d01e92467e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85719e98-189e-405c-96b8-45dff08828a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f86f92b9-03bb-4ffd-9d1a-09697bdfeb26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba52cdc-3896-420c-b751-06dfade9a0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24199f43-cd2f-44c5-a9d7-578f076b8bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af80aa8-42a8-4032-ac64-f293cf04fc41",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e681c5dc-aaa2-47f9-8159-bf0e44994000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a26164-389a-4093-9edd-4927af6af0f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87697653-3b56-44f8-b6c4-f6e5d7cd5e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d2694ba-0c52-43fb-8075-a51097371d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a512c3-536c-4751-8489-b11e37959d89",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3824be53-9723-432d-a9fb-35f47f88c85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a81f3c07-0816-4ec7-adca-6be64295d9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6a31e6-ac1d-4f4e-a835-21445346799e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bba65c94-f6a7-45e5-a45a-5281383241b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986970d1-dfc9-4713-9f06-0f3c60e94e49",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582dd497-6840-42e4-8d98-dd8c787a9507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fefde36d-d236-4ace-9957-febd75f494d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4ee999-6d22-4a43-9975-f6b275a1cf37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a4d99c-fa30-4ff9-838a-0dda1601995f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e605e13d-5a00-40c5-a5c8-b96dc098bc0a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313e34b4-a765-4d2c-8d17-20ecdb1840e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef655bbb-106a-4658-9127-ac8a55df2f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d36cec-d1b3-4fd1-953c-8c5a626a5a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "23ed293a-b1f5-4160-a5c4-d284a4115f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18db8e2b-4cac-4ec6-bedb-388d9dd714ff",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8598be94-1bd9-4d55-90a7-2a362c2f0b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25cb0682-db52-4e06-8faa-1226e7a56f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad641118-1cac-4a39-868e-cb2085a0f5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd777c2-b923-4d3c-a98c-be7676587144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe69201-d6fb-4f62-bb7a-ea7d53a4c6cd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e64e72-e698-41a9-a7e7-4fc06d75c0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a169a09-7c09-48a6-a376-47070169eade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2458ac9-5a04-4fc6-94a3-90feb45e08b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "665f5278-fac9-4294-a082-3d63fa187c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd295be5-2159-4203-85ed-0a8252d50596",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47d24b3-9b7e-4555-962a-40d66d447115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1791c302-c5d4-4eaa-8f66-cf88e4104a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982d0eb2-c7da-46d2-be04-b7a1fa6a1023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1e0f12-e183-46c0-a702-c84d4e01cce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7be17a6-3442-4268-9834-29e75cbcdb04",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac4d3a5-0423-42bc-ae3c-50abd50184de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a1fb20-a221-4b13-b2b1-7444dd525184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9eb115-7e77-4d0e-b9e7-9ef9a23a86ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21016815-9efa-4e87-a0cb-d2b05e17df35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4919474-57bd-46f2-9d64-fb0b511a90c1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21eb9730-c0d5-4311-8add-58a8dde9f0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f392fa-5ca7-4405-8c0a-20962a4133c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3654dfb9-874d-4265-9a5f-a9d0df12883f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0c207b-65c7-41ea-9c86-0e22479738cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82facee-15bf-44ba-b59b-695859e2cd1a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "031852c2-47d9-497d-8ae4-44e42e7ec551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2948346a-40fa-49ed-b00e-2608e83e27bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524c1631-559e-4f68-ab45-41c21d92cc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "549c254d-6f81-43aa-aab5-fc31dcb8eb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fd6fcf-d6ca-4238-b8e9-ffe37769ca82",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f925eef-4f73-4e9d-9243-923802430b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "675e49f8-bfb5-4a8b-8988-3b537c28d6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6405dbcb-5f65-4cf1-b38e-4b1b75446db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2090817b-3d98-4a16-b477-58004c66b4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb143250-4329-4f52-97b2-9406eb80ecb6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c65279-f808-4c5d-85c7-d1027f54b55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8da6383-60f8-403c-8ea2-9aeacdd46acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d6e157-ca16-4286-be2d-670e82637d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aae31a8a-d264-4647-a762-235ab3a2a731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716e5595-d1b7-4122-be8e-ef4e27b9877f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b922e82-22f1-4c58-a0ef-66f414afca58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007b8bf8-a4e1-4d39-9a29-34c0d378c016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1c2946-ef51-40a3-87d0-972f380d7445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe74581-acc9-4efe-a3a0-17614f2d2e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0b2054-cdf1-4090-9d96-f9217e818582",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df09bacc-f950-4c26-b202-798865d36416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519e80f5-73b6-47ae-a1b0-7609faffd3e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a685a311-dcde-4454-8c15-676e22d3370c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7ad238-ec40-4ec0-bb0f-2979f251fcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d89e16-9958-4386-845a-de7889105a8b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb299f2-292c-4775-92db-7bc466d4a4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b5e298-e97a-404f-b54c-3c1da0b40471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725352c9-738b-4942-90ad-3f129cff142f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "feeb7aeb-b47d-4e56-ba3a-001da49e9fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52823a28-fc91-4566-879d-1e0959a1fd20",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce95b101-a663-4022-ae38-b1e16cf8efdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f962408b-263a-4172-bbdd-1d0bc3acd33b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0766836-111f-4860-9894-88f89a3c1e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4c5313-5a8c-49af-8ec4-3e92fb009864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9c02b3-c137-425d-be6e-8ab4f4c2c7e0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba12924-d1cb-419f-8b0d-62cb0eafed61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d79940-b8ed-491e-b50e-29f1f1aeead6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2caa2b-c759-4d48-97fc-078b17d778b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6719770b-13fc-4167-9f86-53f3aa454403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba9e38e-55e8-4814-a631-50867cb56de8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff28d6e-fd34-493d-96c4-798d3d1b5752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3e761e-4344-4c9f-90d9-961a95db61d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb14c9e-656d-44b6-834f-1345bf52f06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0324e761-03a0-4fda-824b-e091e0a93652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f66971-42bf-47c0-b9d8-2216558bbf0e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b2569d-6e89-4ef5-bb94-4774dec9bdfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71676776-6936-4417-8e0a-e6562c5c7e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89e3955-7960-40b3-988c-fdd2f4009e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2be50cbd-79dc-4d67-8791-862798e80d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030de912-f9ee-4b6c-9981-08359c3a7689",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1996b826-ba0e-4d5a-8c18-22295cd9d255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033a36cb-aa0d-479d-83dc-5a5c6ed7173b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e608ab-98d5-42a9-8ff6-f7eb28edac90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3de9d39-3a5a-44d5-a9ba-9aea4f36a0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efce62b-f8aa-48da-b629-5a576c4a9e14",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2dd8d0b-20fc-4b88-8c2b-ee0de451cffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a8383c-70be-4a30-bd4e-5b7a33979c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcc6f02-99eb-4af1-a733-b700926b6106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "01e6a270-82c8-4de3-a05e-56f971fa150d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7e99d0-3b9b-4c31-a1f4-8e41c10b6d09",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61ded58-80e4-46a3-b897-1727d11c322c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3715fd79-25ae-449b-81ad-00cca6010c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1110e2-9e56-4130-99b6-72b416876acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f26c2f73-3c88-46e4-a2bb-e18dae5eabcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adfbf02-062c-4235-a10a-7b9842a37c8b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3bbc0e-5625-4607-bb7e-b5b4f2aafc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68b5bacd-0ed0-448b-b5e6-878d7b6af287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d5e4e0-d907-46bd-a924-6a3b0a4e4495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "adc7e0e8-c50c-41bc-86c8-d997a8361ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4a266c-75c2-43c9-8b68-18ad3eed2e72",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2746e6d0-0b21-4319-b5ed-796f519f2dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b7931d-19c5-448e-a9d6-061807997f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d9c47f-2490-4a23-8232-7ba30c8b0fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2a5fc4e-fded-41e9-a6cf-53c923cec149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef381d27-4f3a-48d5-842b-110f4c80d413",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae09c9f-041d-4fdb-9908-918633a8ca1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2368fd75-4906-4316-ab04-1bfeed61c80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce9358c-8fd9-40d1-8234-209003553480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cac034f-b226-45f2-a133-677f20705ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d7de4b-5350-4cca-971a-f69b04322e4f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13199b15-5080-4952-a75e-85af6e73650f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ea70b8-e7de-4504-80d6-dd6a0e630ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a506fec7-2787-43ea-ae15-cff9567010f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b30d1a-568d-4eea-ad1b-b03679515d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc2f87d-095d-4d08-acbb-c0815d0b1aca",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b344561a-7110-4ca3-b215-e49d0e0bfb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f151251-ac2b-4280-8bc1-049cfbbfd538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a651cd-fde8-44f9-bf99-c190be4b2233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9800ec2a-5d8c-4715-a1ac-896f23a81c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288f7dd6-30d2-4464-8a40-ba6cf84ef05a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ba39e9-c77d-4dd3-9183-7f495597efe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18615a0-fb2a-4de8-992d-bc2490c4dde8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d4147c-69c1-4cea-ace6-33a9ff953bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e19d6937-7108-40a6-8968-1329c22231d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c17050-786b-42d3-8228-dced36f330e1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769cba69-9ed5-41d5-ba4b-84bee0b197b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b32bd16-471a-474e-9b6e-35572195b204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0dbc255-0df0-4d8e-9f11-9cddc9a718e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e95da104-9e19-4d1c-ac43-a7e9f2eeeb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f94209-8d02-4613-81b4-63ebe99dfdb3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad29fcd-9449-417e-8b2c-ea0346b52b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37eb3fc7-b4ab-49b6-b6fd-b1a902b6c0f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512045e8-ed88-4082-96cf-5389d5d40371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06522601-08f2-45a9-b362-08432252f1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af8de87-b822-441f-bc22-93a6f355add8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0054593c-d8c1-4bb2-8ac0-547cd87f8b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f63ee29-907c-4887-9271-929d706794b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc5b1ed-d423-4129-aac4-bde32be62a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d85298db-0430-4848-9a56-c7d275d37f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971f21f3-eaf0-4d04-a2d1-18b29e9966fa",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18903ad-f62f-40ea-917b-c12490799d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7515620-fa53-4ac8-ad51-7f017de66371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450b2fcf-988d-4152-8b99-8cf69dc55038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1bf8a7-19ae-4d27-bc0f-433c7f3a39c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4bb847-0153-4636-8492-fb67c2c22278",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7033a2-2cf8-4fdc-b8c5-d4dd549c38f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239d1dd2-7e15-43d2-9021-d29597dcd3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4381d53b-174f-4896-ab40-547fa2ad3fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7701e59d-2e13-405f-b923-b2cc9eb26590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fc26ca-e3ab-4850-9c81-a25d9066f542",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e594cf-70c5-4991-b154-343b63381601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aeaebd7-eee7-472c-a918-71fd9873a420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f501f8-b339-46d6-bd32-a9d10773c732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcbacbe7-05f6-4ab3-82ac-c21c0ba9aa1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e438017c-290a-4d87-b425-9cf26f23c8b4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f56ca6f-50b0-4f5d-ae9d-7659406c7886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497245c8-1517-4f56-8620-4edc57f7fa0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb08122e-4e18-419a-99e5-003c17fec98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a95361e-4fa2-4472-b710-743c1b085623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2690973-5eb9-41ed-9861-46a2db439932",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2369e2d-0816-46d3-b8d9-d6e17c3451d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f676003-f002-4b52-b7d8-907c49f5bc6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf9cafc-f403-4a56-a82a-81a9330f90e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "947d25e9-ad37-4d4a-98c9-33a46343b824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2959afe9-e044-42b6-bdfe-001aaf02d6f7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64101145-1441-43d0-832c-60fcca4bd931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02493b33-04df-43ad-b10a-0cf90281a225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6a8cde-2c49-4e38-bc0f-d0acee8a988d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b904a9-8b6e-47b7-af6f-e115234fb2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309b309a-47ff-4316-a722-030d21d802af",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8657ec6-7531-4ed7-921a-f6908b7288e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b93e8124-1895-4c97-b51f-9dd4a22972fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665088bc-0a57-484e-bd96-4c7e6afaf5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc57a48e-9f57-4dcd-add3-19a800395715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9a7e14-bd11-4bf0-9fbc-1beb93dcb6c9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861b0c6f-8c6a-43dd-9db9-47c68a62c4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ca5faf-a8fa-4691-a3ea-8f3002895ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef502b5-cf5a-4c7b-9008-6813d7a78633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f584db5-592c-4e7a-9e17-a56ea2f43c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8abee13-6b02-4356-8eae-9a087a1263e3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5602f56d-bcd7-4540-a7d2-07bd8a53c24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8cd38a-0df4-4f75-8a97-68d3d7121e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2780386c-ceda-461b-b2b8-a3634eda0b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c05ad6b-2128-4bdb-9091-821c0b50eac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3413dd3-5436-4372-9ddd-fb9034b742e0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317f70c5-22bc-4f63-bd0a-577d743f59b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4a09e1-65b0-45ec-bf9e-13bdf8681bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d2fd9d-a9e3-4914-9baf-d0992c13a684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "634c8212-69db-4ec5-95e2-fccd42af946f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f14a545-8d35-4bde-b050-dbfb1f3a92c7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aeb69c7-3a3f-4fbe-9f23-4f06371aef26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82980b93-73c3-40ab-a7ba-c1958032e3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5043fa35-c095-4a3f-b900-4cb97adf66df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "51cf8366-9152-4e14-a957-44a4b2b1cca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a8cdc3-6f09-4c29-8e5e-2fc311d92fe1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd84701-5842-48cf-8f1b-976480fcb899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0e8cdb-fc23-4fdb-82cc-645f526a4770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2b48ed-8480-494a-92f7-5869a107de7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5b82d7-2f09-4f92-9457-1edee105e0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a98e95-f8fc-40d7-afb9-46a505f6ee64",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aac7681-6eac-459c-bf7e-277cc58e7538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5b4582-b038-4f29-b1a3-050bcc35ba91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec3693b-92a1-4959-b354-10d1d4778bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c4b161-1c1a-495c-8234-da373a4ef4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a931860-d258-442c-9c43-20f841e4690e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afb8932-ae98-4c7f-8de1-7828e0d096aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c6596c6-7ac1-47a5-b7c0-c68f0d0ff25c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a62a39e-2ea2-4c30-9c5f-d7ef5384170c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "810c210c-cb2e-4aa0-b784-dddd3eb7383c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c736cb13-8515-4f5a-bfe3-4272eb2bf390",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4802e858-a2c9-489a-a4cd-1c4ce38778f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6670b512-5be3-49cb-b03b-5b57f3129522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7c397a-7b58-4262-8692-1688f486889c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc421f38-1f9c-473b-861b-862de0c7f989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7247c23-4863-44b0-b26d-0006bce6735e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5500fb-e6eb-4c71-879c-1360c5b7e698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9194150-bdbd-4b6d-9a8d-c7b618f43e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbc67bd-3cdd-4d6d-9ef8-da4fa9f9941c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c87e4803-1416-47aa-9527-0ef63677f2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d54eec4-e42e-426f-bd30-97b2fc63f2f1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82ddfbb-cf13-4df9-84c7-1d3674840f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c5afa8-c4ae-48ec-ae0b-a6daff3c8a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fc9e5a-7f4a-4114-9617-1156c31f8692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b7f373-1b00-4b7a-b89b-20ce3485b0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbf5687-bf03-4eaa-aa3d-a2952b53d243",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9511458f-f16f-4329-92fb-83aa0d6e6fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fded63a0-8b9f-4ce9-90b3-7dd3e6673229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b69d45-c4e0-43e3-bea0-47cc0f8103fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "513c0578-a2db-4000-86d2-b83044be89e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ff11ef-e392-47b1-a7f0-5d645de6aeb0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f5ca89-080c-4744-8145-484c013d1b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326dbb93-1851-4084-bbd1-7e7349402ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a189e243-3697-4b41-be78-43b31aa4edf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4691205c-fddf-4bb5-8e36-ad96594677f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf6f1e6-5aec-4f22-b520-d5e92246a17d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f65cc3d-4fba-4fc8-9f06-875e5eef9c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "627dc0cd-7fcb-446b-a408-630ba4f24dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8b0329-ec94-45a6-b0e9-26d98575844d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca68dd99-48a2-4cc3-acc3-6491d931da22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3228351-bc77-4e8b-be10-bf936f1928c7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78c192e-f1b6-4099-8e7d-f31fa366c992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9262593-9521-40f7-8591-cf12d9308d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af47e70c-6fb5-4ca3-b9ee-011c52d0d6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e662e70b-cda5-4953-8fb9-06cd56e7e9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d986a188-4657-4726-bfa1-6797d62c097e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53a1feb-f758-404c-8ab7-9254032af590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd480d27-f116-44dd-80f3-64092925513d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d87a4b8-ba3c-437b-b374-1efdf3b720d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "97dab45c-424c-42be-a11e-804297493f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7872084-4b34-4ee6-9ac8-efc7f06db7b4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8454a81-df3c-45d5-9dc8-176844487202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a901e4b-d41d-46fc-9bf7-b87b927e234a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a79d9e-ef00-4f47-afef-5b5a92a46c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5660973-453a-4475-a6f3-03f3a5ff439e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378618d3-283a-4155-9ea0-07d20da99e64",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bebbb6-7197-4567-9a2b-3d1c44bb357e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5cc7be30-53b3-4ec4-915b-57158035679b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e55ef87-38a1-4e26-b6ec-6672f22a8b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3912ed9-a72b-4109-afc6-829fc46e214f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "41a2d65d-30da-49f8-b618-bb25ce952c45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc704de8-7dfc-4cc0-99ca-115a0c52f619",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a995c6-ef47-4f59-b696-f407259948aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4762348-8553-4608-8e6f-76656853880b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a904e2-1760-4e25-b479-626e470ef22f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0dd5cdba-5281-4d26-87a8-0d7651cf6bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb018298-2f1a-4d5d-9e34-c038fda17902",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e1fa59-c674-42dd-ae5a-7337478ad77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "871b13b0-b185-4fe6-9112-dc4e37f16dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487ba1a3-ad0b-4dde-96a9-2e129c0b49b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c0b9d289-498b-4118-bb03-4af5a81ff8cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6026b245-26b3-48bf-9d1b-ca4d8e00f6c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cab8fd3-2d93-46e9-8ca4-df19412909c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e42c8a77-e2bd-4a59-a828-c4e95262b939",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2807e7e6-2e8a-47d5-9067-6354b5ca3d69"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "72cc4160-9371-4a03-bc3c-a098a132abd0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f8bd8dc-8924-48e7-89b3-55e796d759cb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "512e4e78-8479-4e32-b458-36c4e5c9b7de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d29bc220-d063-4be4-acda-d13e74a04032"
                }
              }
            ]
          },
          {
            "id": "a06c900c-f501-4ac7-b109-66d44fefe6d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "240365ee-d04b-4f56-a07b-534459e88eab",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "324e42a5-8917-4c5c-98cc-f02b167b0332",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "254c071f-1e1f-444b-ac2d-c9939c0f9867"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c798f323-22c9-4ec0-bba7-9d07e6d781b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f05e0dfc-1bc1-4b85-85d4-0aeeac00454a"
                    }
                  }
                ]
              },
              {
                "id": "56248209-d38b-4a65-9583-08b635a27dc0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "890fef6d-4cb9-441f-887e-e24af9353412",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07f8208c-5170-49d4-bc2b-84ead141b971"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d8ac2ab-c298-4002-856c-eb7e67efd6eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2c1af036-8e0f-46f2-a356-b75c8d45a457"
                    }
                  }
                ]
              },
              {
                "id": "a1e5c7c9-4084-49e8-9d46-e9a89fca6e6b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca71a457-bff0-440d-8e75-c7f8a852c2f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9bbe9446-d8ad-43c3-8de9-1942c764e301"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdce94cf-8d01-476a-ac55-7febd2513b91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f1f34649-bbc4-434e-9fec-c5144a023225"
                    }
                  }
                ]
              },
              {
                "id": "4daad83c-fcfb-4b29-b789-a2b378dfdfa3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7cd974a-fa04-41dc-92a8-bce2249e7b52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74e094fc-92fe-444c-9416-dbfd822fcb17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aaab6408-5d73-4a72-a267-f5f21206ee0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d4773379-572c-4dcb-993d-28158cea9468"
                    }
                  }
                ]
              },
              {
                "id": "2fd19e66-3c79-478c-900e-d014c20ccb82",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a425b77-2604-45be-b958-a018bfbb412c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8270deb-529f-4cbf-8cc0-b50e466a571e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b549715-d919-41f7-8814-fcc61d9f38c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b12f2327-c37c-42e0-9376-b9e118f20194"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a5542a2-953e-438d-ab73-a5f1e13eda2f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "596bdd56-bdf7-4110-9cd0-ba0434b90ac2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "40982b70-d3ed-4dd3-b1ed-94ecd35118af",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c1a25f2-002e-46e5-b928-674d0eb15515"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "065cb124-1800-49c9-a089-5a755d25f793",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "74aa9b1a-89cf-4702-82ed-3ff79e12f633"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9d08553-0f00-46ca-8b22-31c1d9d78a9f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ce67f4d-bd73-4f5d-8da5-7b4d64b8d94b"
            }
          }
        ]
      },
      {
        "id": "c607a3ac-ad68-4c43-bbfc-56083be4c986",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7e336b8c-983f-446f-9667-9ca4efad7bd4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d79ed504-e713-43ce-a40c-e610e9543cde",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ead68999-36f9-4aed-8111-87ab4b7b5829",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9944b717-07d6-4215-8fba-2b2c708ee9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48f31bc-fda9-4060-928b-7b4f30b746cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ce4e88-9cf3-467a-9227-04b5277c25ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6811d806-7485-4502-acb4-0a6014755d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b21dc5c-0d52-44e6-b2a5-cd11988f5d71",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587256dc-da2b-4541-85ca-32a2cacd8163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37717eb9-88d4-4f1b-8596-509affb8c0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e010c91b-a49f-48b2-b668-9962bd3bcc16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "150e748a-0f0c-4ba2-b1b1-c4a104b61a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8d16af-998e-4bf7-bda5-91e6cda6e8d2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf348df6-b623-4caf-aed6-6eb94e738962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc3205a-bfa0-43a1-ac86-f9cca5e8ff9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f3ba99-a274-4bf4-b6d6-1dd278f0b860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "815142d0-7fba-47c3-9361-081ce6cbb493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6dbc1ae-3a31-48f9-8c41-8cb5b8dc404a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15deed27-b152-43b2-a8d4-134e2f925678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f37f715-8402-41dd-bf59-2332b7ce11e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b60b47-39b0-41f8-bf0f-32aac8647a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "757dd15b-117c-4948-8a0d-1639b4698054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3e007e-88f5-47dd-b4f1-d9c82a4aac4f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edae5cc7-40f9-4a23-a855-d215f4aa6a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa57cf4-db79-43f4-b5a8-52995f301783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f244f1c-882d-46f3-a0b5-d38844985038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f88462-c43a-4d01-9383-9b66eb284ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2b322a-5ec1-4773-ab82-cfea57deb51c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3763fbfa-537f-47b0-a43f-48c985c1adca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d13caa-471d-4660-b8d4-14454da7873e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c4cc34-ea31-42d8-935b-a144ecc59335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f203cf0a-1043-42ce-9654-d92a7d93c864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e8e1a4-f1a6-4304-a903-2bd11867e6d2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ab1ff9-36ab-40ff-ba41-2a5c86e891a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ace35ec-33fd-4f9e-a5e0-27831c6c5c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c765439-5f43-4f03-b130-ce601655e3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "498b1925-c094-4e58-ab49-24f16f9d2ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a88170-4855-4a29-a148-453d38ab19b1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8235b108-24c1-49b2-aa5d-22002104c150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef376b1-644d-4b59-9b34-ecd99f5ed1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dad6dc9-eed5-4ef8-8a39-95a18c28e220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a00844-8c34-4172-8e94-9aa4caf85011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c142213-b5de-438e-a001-026b8d1439d9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd0a328-14b8-4eac-84d2-e6f1792abee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee70cbe7-1fa7-4a88-b7d8-11f91d104a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bc4dba-ba06-4df9-9520-e21b86e8261e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4967817-0392-48c9-a551-a25ee6ea1bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a9697d-f4c1-4fbf-9a62-2b05751b778e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cdb676-b297-4c07-ab29-77fe7659a1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef032613-3276-4d55-a427-6221598feb64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ac9c2a-8e00-4ed6-aa22-f29eee98764f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25429fe1-cf56-4cf0-977c-68924c3c7ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3607d34-3f7c-4267-bc77-3f86e34ef78e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6249826-2a88-4513-825f-dc8c47cf5f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82446a9f-11d5-4a20-bdd9-3c32ecae8022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf9d2c1-03b2-4e89-b535-714ec877fbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "007e038d-0827-41bc-9562-294ec45e5a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7427a53c-2831-49e0-b59d-733b99d9dba6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd929074-34df-4111-8959-a62c31dffa71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f751a0-8f5d-4ce1-ab33-3d5645aaf5fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61e7019-8c03-4344-a972-3032b2525ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4eff85ed-0581-426e-9dd2-0c234bec271f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444be246-8364-4e32-a352-d7e2fe812071",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b2e1f9-b7a9-45eb-9afb-e8c345539a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f24a4ec-f08c-419e-8c45-d0020b435834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecee2ff-9818-49c1-b5fc-059708176edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c86a5175-ae54-48a4-8cbf-232b77610e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d55858-f666-4874-bca4-410d941b2275",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ca17a6-2834-4061-ad05-9d790bcc5df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26cc79f1-9c81-43e2-b0b3-3038f13add08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20847b6-9647-489a-a362-805d013b4302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdeda4b-87f7-479e-b619-21b47a622574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba1b454-234a-4e27-9fd6-5b4bea10eefd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bdd44d-c922-4506-96a4-d0c877663a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed2893f-1f68-4502-87af-2dc60ef19d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3087559c-53da-41cc-a8a6-c1a28621e421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3da83824-2da8-4e44-86d9-55be5918ec61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76da8633-3865-4988-b345-12bc8044ff93",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2b89a6-6f62-487d-a6d7-aa7190829beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbca62c7-b1a0-4cbb-a135-043e15c90d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32eae73e-a103-47e4-b3c3-883272e71ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "93ea4caa-c64b-41ee-b35a-f2eb804fa3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af24c686-8c9e-481f-bb24-9a8b4dcd38e2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52979dca-cb34-4c13-b0b5-ee8688a5831e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5a5eac-fc32-409d-aba8-41a83ab30513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a8b6a9-099c-43ae-8f6b-f31ecac2db5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b412c7b-5d71-4b20-bd73-5cc3f8a48582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a3e802-9b6a-46e8-9d79-e390413e61e9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80eb2f39-6079-4e01-b74c-0984b2d45b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec33c085-0967-4386-8d8f-2139bde20658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e490c5b-5dce-47b0-b024-5ffeddad900a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fba86a0-978e-4ad4-ae06-a0e12ef3a01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc426788-9c5c-4be9-866e-55d2f3957356",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6fe4b62-98cd-4ad8-a5ff-7e129ba869f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5008fa2c-1655-479f-9d90-6798a69483f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5e2851-7977-4780-b8d1-c6abecc10307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "964bd1f2-c033-42c1-9771-35cb174b39ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751e9b88-7d40-41a8-a885-950ef00ea599",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed0e289-f1f2-4f54-9810-2e465edfd6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33699d4-db77-41e5-b3b5-dea59bf2b7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51aa2b7-5cbe-4ebe-88ad-354b9129d1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41fed218-319d-4631-9204-45dac322563a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89cc1a6-2f03-466a-8a3c-9090bf6f6fe3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac16379e-6c6a-4b19-ab33-f78858a1838d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cdc651e-cbcb-4f26-beef-ef66987d872c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692e640b-b60d-4f8b-b544-fc0e16a873da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8733a81-bebb-4caa-980d-0d0e530f88ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793e02fa-9382-4138-b531-fdff0683310e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f552511c-3958-4130-a326-8854fcf57122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ad2a0a-02dd-4762-8104-6465f352df2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5876a2-0f6a-410a-aaf4-6ab7f83279e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abf5c02d-406d-4631-be74-c1f97cff532e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d202d1e0-6127-4f60-901f-12307b363c53",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef90397f-677b-45c4-b2b9-2891ce1f8ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da96b724-e8da-439a-9da7-a5d73b872c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b7b872-b655-4a5f-bb93-820032bd9136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f546d59-8c95-4427-a4ab-bd160cf04143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e4e93a-80d7-4564-88de-a9fa97c74c54",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80512763-9a7d-4c9c-a5e0-c2b7f1f103c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a098a0-2150-4dc0-818b-961b32bc0a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f7db2d-fca1-4e9f-b493-c9dc491c116f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7742d08b-d60e-4920-aea8-24910884ef89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4f1480-0c01-4a23-b723-012b7b6e34c2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac59e7f2-ae17-499e-93e3-970e94302705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf9cc83-fc56-484c-af15-77e257e18b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe826e2-d09e-4a21-9ae0-6eeefbe7d7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fce78ac5-e1f0-4d19-ae6d-725e3e4fd6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84447ae9-43db-467e-8ea1-b1e491c371a4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee8ad74-42cd-49dc-be40-02be4149a260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea9e9c1-596f-4ff0-86e9-f6e2c28e5389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f78d1a9-376c-4561-af50-28e5313d6613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f407494-aa65-42ed-b6db-0a42521a9a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c14284-5f39-4c19-8bad-169fb26aa13f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4be0f3e-8530-4c72-ac31-00e378dc1a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe76d9a-e384-4216-8063-98bd6d7e82e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9694e148-e6ac-4807-ac4e-a79e591fa516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4facf4ca-be54-45d6-a61f-65d283352689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a022e4-2a19-424c-a0f8-28d423d8d76b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d4baa0-2023-42d8-a018-b491f32c9686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c6c4aa-e8da-4549-bc64-4df63bd46957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f6229d-5e55-480f-ba1a-040e4509d3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf9ea59e-8fe9-4602-92e1-c686fca3639e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba5ff9d-9fdc-4ea7-bcdd-25b5c39a9a1b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5679b7-7a14-4a99-afc1-8fca8edeb9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a960b9-79e8-4f2e-b493-39c5bd53f5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1d0eeb-9a29-4c7a-bd9e-87e2f5c3d331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6443316-185c-4975-9183-f3593eac6df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd26875c-16f4-42e0-a95e-d698a7a25581",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce8c610-446d-41c3-9786-f4105b6f90ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a08444-d072-4110-8bb3-1fe32cf89dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781b4e11-45da-4d93-94fb-8551fa48c122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a339d4a7-75c5-465f-a567-d003a0b744e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8e1dab-a83d-4093-b7cc-3352e2aa2956",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c15479c-baf0-4b13-a10b-ecd914a4ae49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e45365-6d17-4500-a7f0-8da9ea0a4ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcb3b42-207a-4d6b-9f15-9bff6f95a965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b83cef6b-44b5-4a45-ab12-1a95bf0fd432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed01c7a-6eef-42ad-afeb-08210c6f705e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc931a4-3012-4ae4-82c6-85b06f22dc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c6aa7d-904d-4907-86db-ead716de1f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c66ba5-1e9c-4815-9c56-ac54bd26c58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "206b51f0-c4c3-4a3f-9094-57df577f7f9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b0e22635-684e-41e7-9ffb-f305d7116fee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04b12ae9-ab16-4bbb-b45c-08792d710e2a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd689a08-bf83-40f2-b07b-498aa61c98d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae3cf1c-a4c0-4e33-bb5c-6e9435bb6f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1edb914d-54c1-44d1-be4b-ac287e825d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "590fe0a9-4985-4f2b-85f7-bf9895324e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5cbe39-4c8a-46ce-97fa-d1f992f3d4ff",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4993824-a071-482e-abfe-63b59aa58da9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "40c0c1db-140d-4342-bf34-b22d05861c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d3fc13-7b27-4c78-bc23-e40e80d7d45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43876bb2-3c76-4152-b610-99a01299395e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d8715d0-1ea9-433d-9c10-63dd7e9d86ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "259f62b1-8596-4505-8ce9-4a758953da2a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "895af430-b5f8-48a5-8e22-cc4934ab80ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7de9a86d-a39b-4f8b-9ff2-f6566d20224a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8e625ca-492a-42d4-a185-3019cdbdeb24",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95b80850-c6ee-4f0f-ad9f-db25dbb378d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d56f1fc-dceb-4947-919c-3d5187e00f4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "63761fee-78d9-4ab3-bbf4-a10dfbabeff4"
            }
          }
        ]
      },
      {
        "id": "9689a16c-f6f0-4370-9a11-d832f3a72def",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bdf2b1fa-7e6a-4b32-8b23-f9b887737349",
            "name": "Negative Testing",
            "item": [
              {
                "id": "68b1e3a3-5f47-40c8-9973-02be64326cf0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ee30cb08-8ddf-4d8b-89d7-7676c68628b6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302fdd22-4dc6-4da5-ba87-2b1d7209cca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e97b55-f7e0-4994-b7fa-35709dff420a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05e11b4-8521-4873-b994-8a4de7d453bf",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092b4a34-9448-4d48-a3a8-385ff99b9de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de20372a-ee26-4d2e-a647-a6b9a6b84cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93029a4e-f478-40d5-b3d0-af4078e47f61",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619f0a11-2ce2-4604-88b3-8ddb48194653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4763a249-ac89-44bb-8fee-d1f53f880c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1b10db-2cb3-407d-a1b9-2c11e6b15a5c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c642d203-9e99-4f47-ab14-30582e5aae74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ea869c-11b6-43c4-9423-d975b1f74b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1866e8b4-27a3-4304-917d-160d45b8315d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf5e20c-2511-454a-a507-c226176caff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2918d5-b8b7-4d46-a157-562fec835e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfb4518-33b9-4274-9c0a-a1d70a3496b4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041664a5-3698-494e-ae23-08c687e28baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734397ad-25ad-45db-916d-5b82e5407871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e89cf9-0891-411e-a442-c88f12c82d48",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134b51c6-70ae-4319-9c62-e3318777d9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70c6342-9d63-499e-9737-2e5eaf3948d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1b5f1a-8662-49fa-b5f5-e49756ce06e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8679a7e-aaa3-4714-b5bd-3ecf321988b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504bb740-d61e-4d16-b210-de317cb8467e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3059e023-f923-43e3-ad60-a5ab599d6132",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41324d1c-4c58-4ee8-bb06-f1ffd7031be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686e6f9d-24f1-47de-8a49-a7df167918af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6740fa39-7f03-4e68-a21b-f505344b7282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42978cd0-dc88-4fa9-be1d-fd3ea051c39c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea5d721-edfd-4a74-935e-f300bc6a3d7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b118677-f5be-4915-8f8d-f1d8a7d10f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bfc44e-65c7-42bc-8c51-3fa3f0cec5d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7533ba0f-2bae-412d-88ea-f58e13a7c256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3c8f1f-04ef-446e-a299-f5561c44d91b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7511ca-f13c-4359-a221-5eee868c8d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af1d0936-7b90-4f53-9e68-89e92a76e653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74d652d-aa7a-4a50-9d9c-e61d0535fd70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70e53b6-9363-44a0-b410-e8f3073609d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ad51ac-9b18-426b-bd37-875f1b314700",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e62d40-4179-4b06-a3eb-df9863b36066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc03547-acc3-4b03-93ae-ad087f67e1e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331c48e2-4402-48df-9d85-9cae3a7bb538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47880bee-6c77-48fa-a6ee-9f09491cf80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4a2f58-a036-481a-95c9-5233edd83ec3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c908dc77-705b-48c9-8def-c829057b0186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57127f60-69d0-4ed4-9384-72001480e719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d76a79b-f055-47ce-8bde-713d8cecadfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa7fc89-ae11-4d6f-8dc4-b2c6a3cb19a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbab0a7a-7780-4880-93dc-3111aa9a6dcb",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4b4f0b-c500-4bf2-aa72-5334ba5192f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5cce0fd-2a79-4e68-8ae3-9e5c3712db7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0d2d91-1ca1-4567-8d07-41446e2414a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0fda5ef-ef64-406b-806b-0f9b75231253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b470d361-4ffb-49bf-9e1f-da4c89ef9755",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb0d05d-1e59-43a0-aceb-62d87740884d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1da03301-bbff-4d18-be4e-6add9d138b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "219a74d6-5a3f-464b-8cd9-9838f7ffc3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c0279e-8997-4a89-91fa-67afe3d22c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343eb080-af59-4cf9-84c5-c617f1e6979a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d602d7f7-fb83-4818-91fd-c690552a4312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5d4d0bd-694c-4df8-ba50-eb44947f3a9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0075fe-a1c6-4868-bc30-ee51c560a11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c55c47f-dadb-4a2b-ad6a-26c6f4058308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ebf4e3-5413-4c47-bf80-07c70c38ac95",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e301d9ad-86e2-427e-a7eb-5902886d86da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c78efce-cb78-4255-affc-45a44aab5268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7315232-83a9-445c-a29a-92e47aa6fad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9a8ca9-208e-4323-9a29-4c66f6660174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986bb914-0c89-4711-a6b6-5889627a9adf",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525d1176-be7f-431c-a380-8720bf0e3749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07716cef-bb87-4537-9d0b-6c6cee59d019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae561deb-b1ec-4cd9-b803-59afc4d0e666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24fa1b09-5167-46e4-b1bc-507e173d3f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c9734e-2268-495c-9d7e-25d32572d102",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fa0926-ad7f-40e7-94b1-21729d95fd55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f9f7bf-c416-4749-bb8e-92a53c8f83c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f3e9c0-324e-426f-897e-a1fe946e9633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6047c4-08ab-4c7c-9573-afbd6128d852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9fc309-e8c0-4a32-b4ef-6c90ccdb25af",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023f46d8-9b7f-4156-9913-ba9acb62d7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9ba41f-81b2-4e13-a6db-1aa3a6905d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8c08ac-04bb-4005-9e52-d59ed96be699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfb1507-bb73-412b-87db-c404a3eaa3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0dc1ed-eb31-4b2a-9def-c191ea75e1d8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df292f6a-84b8-4f25-93cf-a660e55f9b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec10bd88-8afa-47a7-9c20-0b2d74455922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26d8e37-fa5f-43fd-a6ae-01f9e43efa41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc63c4a-2aed-4a1d-bbe2-b276529ef5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c26725d-7944-4d69-a7de-dc55f73b98a1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd43a033-1709-4d71-93f6-b7dca6c0cb1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8268973-88cc-4e1a-bb3a-052332f8126e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13bb008-c805-402a-a812-7daaf1c2d154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ea934e-33a6-4b88-9467-cf8bf125fcb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88d2295-e443-4cd0-8d82-56977af7b216",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c4c943-e750-45f6-8190-bd751051a3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7eeef5c-a1c0-4cbc-adb2-9694c03f7d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16195150-1179-493e-afa5-8d6ef3169293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df84f684-1c1b-47a6-a493-dfc6d9cb827d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b24ed8-f58b-4ed5-bddf-6c76f0d6bf2d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13c09b0-0345-4413-89dd-915d1efdd9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82333554-4bb8-4a3c-946a-b46ca392c6b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "664b241a-131f-4c2c-b8d8-3a8065b1c7f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aabfc50-3a29-43d7-9889-43138d0d2c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f5c1c2-5e69-43fa-9ffc-f55d9065c107",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1769e8b2-ddd8-4320-bbde-0d99a087ca1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ff5820-f7a8-47fe-a78f-43b76d3898c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c821d6-4e37-4306-97a3-f0265c5b422d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4752d389-4b40-4d09-8a1e-089b37263c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5d0535-37a7-4e7e-835d-df2ac1dbb265",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a6f05d-f17e-482c-be27-0f6358967061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a18c98f2-2380-4184-9c41-d0076fced478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab5c9e0-2a65-4a4d-b42e-e817173fffcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6890c67d-d969-42c5-bdd5-3a28fc25f4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94efe3dc-9422-4948-ad19-1844ab79d92e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2ffc7f-8f3a-4e7e-8fcf-5ff788dfe273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b158bc0-e78b-4579-9a15-0afe9938f3da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fb5659-f09a-427f-9bf6-02baf32ce477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34ee06b-5031-45a2-8822-9a6dde5cae43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2052326-222f-4f31-b849-2b94bac3dc1f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8ee4ee-44a8-42a8-a73a-ac1660e2a50a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d748e9dd-b466-42c2-be53-fb9637125a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d632a34-9c59-4eff-b78f-39967bd125ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638187b3-6c0d-44cf-aeca-b05101caefef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d75eb2-7cc3-4282-aa31-163863c3f887",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0cd14a-12b1-4ba5-aee4-f790184ba6c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a814725-150e-4ab7-b0e3-783e908c505c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a23362f-0406-4de8-b0ba-a4cbd52e30ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fac11e7-19f4-47e6-81fb-f3067df3787a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592f6302-6f76-441f-8b5d-7254add719e9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9dee65-fa24-484c-b8ad-564df5ee3d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c793f3d-488d-4a12-9198-cc3edee50429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8b62b9-86af-4186-a818-ef80741c6cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b0d1c1-fd05-4aa3-910c-e74ab4575216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2cbdc8-db67-433c-a731-717b5511e7fb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2170c0-278d-4490-8fd7-a13823f10143",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77ec4fa6-cb1c-48d5-9829-2b460de3cb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2018ddf-cd96-4cf2-b1dc-97265d7999f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5086de-07f2-46d4-a21b-e304a9e05d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b50480-37a2-4a6e-bce2-68c8b42848c5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41128bd-31e6-48e3-bff8-52695ee4abe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d496a41f-b076-43d0-bdb0-02b7ad3bc391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6716cf2e-3e52-4f3c-9e69-c9151866f799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf2739b-ac48-4fbf-821a-3bac8d1fd8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11ddff7-943f-40e4-9375-f64759861135",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195066ba-711b-409a-90d1-82360aea8f30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abd184e0-d233-4fa1-99a3-054b22fc292c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab8dd13-8d11-4262-8dcc-335bc17254c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d22e41-8963-47cb-9a3b-75689544086c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148b3a08-ecc9-4e1f-99c0-004d3ac4e6ae",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df01d076-6650-4017-950d-a60a9cda4a01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18eee6be-00f8-4619-8d16-f6ca590a71d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ba69e3-cea8-4f3d-80c7-dc3ed6a28777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad0aae0-9443-4735-ab09-f7275e8c6edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb24e57-bf2d-479e-bdcb-5ea09c08ebe8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c183e503-520a-4708-9fa9-c348bae71d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "104446cb-ce3e-4b3c-aeed-a4b13cd5bc89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370c9352-7ac4-489e-8eed-ae958f2b0a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef345c8-82cd-4476-b1a6-5cf777ec1d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb73dc6-3727-40df-bad6-37362947115b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcafe88-7606-462f-9312-fcca008eeb9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "324cd2e3-aebf-45f3-aae3-9b4e7dc9dee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469fbbb5-cf89-4215-8e66-97266d5446a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b14300f-7865-4f65-999c-b66cac25aee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b778984-3b46-49cb-860b-d2aec2911613",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef002c65-fbc5-49a0-949a-468c22768174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee28e68-3927-46a2-916c-84988b26be9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877c0d59-a73c-4b3d-81bf-6f4c21e5dd9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4bbeaa-e388-4952-ab34-b001ec2f2389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ff54a8-93d5-46c2-a89f-29fdabc4b213",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8892b8-7a0e-4936-a610-dff00c277cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f7e105-2be2-44d5-8578-ca5ed90e8895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa602c44-d7ad-4536-8ee0-9d3f8c36bd3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4d30ef-8fd7-4adb-bbe2-32ea5f7b6f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c751d8d-152a-4624-a090-6bf9e042f8f5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e604a9f-e8f2-4bf4-a020-9ec60a72a94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7244d4b2-6ad0-4176-b88f-427aec4e2b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "714ec32f-0e0c-4145-a65a-f52bcf5e3642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8453d2e5-c9d9-44af-9b13-136964754479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ae13f2-389c-43ac-ae04-fafbfcb4bf7c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b3a591-89ba-4b70-8124-41e2e59ce1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07ea0e9-80ac-4b37-b152-3444ad522775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "682b44fe-128b-425b-9315-2bf977f2c35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0baac57f-bdc5-48a2-ae59-197217b7d452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5ad4f6-77e5-4d3f-a3ea-e1c8306cb01b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5debe006-9558-45a1-81ce-5630cf5226c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32274b9-167f-4b60-898e-cd2bc6d9ef49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f8a752-ed1d-420c-af04-1307db910721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae9ab9a0-b474-4ff1-9e1f-00f4125efa40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c1f2f4-02c9-4dd7-8bde-a817a85f0e68",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4effa468-b7e2-4904-910d-57c7deb5413a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44541833-eff8-4f6b-9d1b-8b920c51f6de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f995789-0479-4e87-abdf-cdd440d76955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758c2079-1ace-4505-9536-535fcb2df941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b27f26-4be9-4bbb-8e3d-b2461e9db017",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3c4775-3056-4082-ae17-ec542c26acd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02e0564-b0f3-4e49-ac46-80597006b17b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a5ff7e-94b4-41f9-b9e0-603349b685fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9348cad-95c6-486a-9fda-8553e8634cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9902e66e-a0f0-4586-821d-ea4951786f29",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f9ad48-65fd-4058-9d71-f268f1d59440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e603f941-9ec2-4087-b2a5-884820b0d10c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c7a2c7-2d4d-48a5-8a1e-729006083fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b237a0-c837-44e7-b987-2fffa854bcb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaaca5d7-0922-4405-a8c3-9dec27ac53ba",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cf50ce-1fab-47f2-92ee-6664ebc3b534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cf0bfd-d023-4b1a-9ee5-58d08d8257bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2fca67-14f3-4b85-8795-090cd092532d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679beba5-0364-4965-8789-32428cb39bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92cc53b8-c875-4724-9a51-336f2f51482a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a77a360-db6f-4aa2-aca5-fd7fa08c2d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c28abc43-e61d-4d7c-98c4-d7920648e31b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6438069-45db-4538-b24f-f3fb24bbee16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc97a42a-7f88-4099-9992-e5cf20a3866b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc64738c-39b6-4071-b95a-9b97b01516c9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6dfa2c3-e4f5-4d53-8837-8233eaf95b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcee1530-a120-4356-845d-03a9d3d4c637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efff9787-f1bd-4422-87ae-d10371685068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5669c785-7591-4db6-b65e-0b4a4502f52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdb922f-1da6-4830-91b8-ef063b58e773",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe64b9fc-718a-43bf-b0ec-6da28d9dd3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cdceeaf-391b-4dbb-99d5-022f8879149c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5abca2-743c-4982-93a3-56c1b6c2eaab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aadc52d-fa70-419c-b545-8d146676d92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4945383d-0911-430a-b7a0-1c68866c94d8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215452bf-9cbb-429e-afa6-39f18ed7daf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636282f2-a2ed-4734-a0bd-3dbf99994afc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df20bbb9-578e-4901-8a23-e61d6e48acc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6030e46e-c290-4631-98e2-3dd40c8362e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd44c9ab-b6af-4c9c-8ae4-9d69397967ce",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3abd46-525f-4581-9521-28602ee642cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21def664-3ff7-41ea-89cb-8c285bb28c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1aa75f-44e0-44d4-babf-761817e70308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c3f801d-1191-4845-9dde-a95617fa8b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834a9660-b5ad-4c4c-8c34-da95f739e885",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee926853-eafe-4242-bb50-851db31f239b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fddc74a2-897c-4ad3-af3d-cf9def0ace45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d720969-dd82-4503-94a2-1fb1250964ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955caafb-6269-4b9a-bf69-509b24d923cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badcaddf-280e-419e-b18c-0c6b05e8bab9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f3b195-d03b-4a07-a0e5-80421f8aa81a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75cf3dc1-ff6a-4212-b6ec-0f0910ca6df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea535d89-ac7e-47c9-aae5-2d2329ab2462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0c604a-c6d2-457b-b0ed-480105c18f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09790af2-d3fe-471e-9600-ee42058cbb9d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fcbe368-f78f-4235-be09-bdbcbf39e581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f18323b-eb78-4738-b4b4-4a83be0b8e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafb8d04-fee9-4c4c-a439-ce0a1c02f248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba002c6b-78bf-44d7-a846-7c5f1871e202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6272cc-bf80-42a7-9ab8-d218a82343f5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34b0c7a-45f9-4f1b-ab98-74fac0c5ee8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8606b4b0-3736-4d52-b84d-9ecd39c81405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45904f8-0087-4a03-b17f-b03556ceac9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550bc970-2e99-42b5-bd57-0f7ee4e76af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df15d0b-94f2-4f09-ac5e-62dc72fcfd7f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7180f4b-6771-4df4-aad2-1c0cad8a832d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8dce54-3359-4e09-8a0e-e86986e6e314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87dbf7aa-63dd-46a9-a940-27cd23ca35c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8bd1e6-b2d9-474b-aa06-11c4fd6aeb3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69504422-c569-4ef1-9b77-eafbcf2441e6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bf98a4-21bc-4ac6-86a9-a31e6b3ab1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f662761-ea04-4082-b9d2-cc6a7b28e926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b613e348-9242-4dd4-bd4d-dbc7c8038a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48786d50-7d19-40cf-8357-47a38afd6a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bf8502-c709-4416-b366-c512c539855a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82b4b0a-65e9-40c7-80ee-68d7d08298c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54750780-ec04-49f6-9b3b-27427fb78f10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa969beb-2357-4426-a228-ed807b77a57c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d970bc00-4210-49b3-b2c0-4ceaa496dde6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd9bf31-428b-44f2-a950-b39938e443a9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4099783e-a433-43ad-b248-bb41024f7333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800b4f63-c552-4f01-897d-45567934158b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a149eda9-9ad4-495c-9e69-410256744811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b497e94-9739-4175-9b59-9e42ea8a8398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d856514-5a9f-4e30-82a0-e867d991229a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc7c163-9dcf-4d49-97e4-15a27d190d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9e716d-be3d-4018-a2f4-d90aba6c4498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35a9dce-24dd-47b1-9af9-5f802f91074b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07833d6-38f1-489b-b0bb-f0ad84590518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd580405-f38e-42f0-999a-74dff51fe679",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91237198-fab2-4a39-84d4-83972882b19b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcbba672-745a-4cbc-a789-f6c0640437b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24745f27-bf5b-473c-8984-6318b66f1382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c69382-5ca0-443b-9260-6d962f153636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10cf4b2-c21e-446e-b68a-b03931b39475",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e3a9d5-fbcf-40b0-9420-98cc2beed94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec346309-c807-4433-a3be-5e932b4b884f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fd1de4-3777-4fcd-9a68-1a1cff0a95fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae437111-5651-4610-a3a1-446aca42a580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884f7892-2865-44bd-8a35-7b45e103e87a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ad53dd-d563-45f3-8deb-b459e9901b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b82daa4-8912-4c6e-861d-b68030abbeba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "791d2cb0-e3cd-4a89-b7e3-a1d5b16b8edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1cedabe-4595-4af4-855d-3a8b1ddfa84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9a50c3-83c3-40f2-a90d-bbf376dafc32",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518d9b67-7608-43b2-928b-9dbf5f64e79d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfe70e0-e2c1-409f-90ab-62ac8eb90b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f636f737-fd3d-4b16-8970-8714f57ceb54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "695d432c-e5af-4c71-a60d-de82eb42a183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa418fb-1d6b-47bd-abc8-29c5134176c0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7043701c-3c75-4037-a7ed-439dcd47a415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47186d1-81e9-41d6-a6de-380fd1588ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee271b07-2e42-41e6-b1b1-498fd6d2547e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ba8024-33c7-40b6-a79d-35e481f84027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f1fdc2-69d3-4a41-9d57-658721f953ba",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04176697-412e-433d-ac8a-de4ae847d62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1959449c-7971-46c1-a731-6bb268251d6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03421b25-7582-4694-bd3c-88f84b108fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198d21c6-d5fb-42ed-8bd1-a9784b0c4103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25ebb9f-7fbb-43a9-93df-2a404daf13ee",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2333fd-5c4c-49b9-8865-7a0c3d96d957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d86dbfe9-f849-47d2-9f00-ce964d88e5fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b1b725-c57b-4441-8bfb-4b60d0a3a152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bee2e41-d801-492d-823c-3faf9008efe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c3b0fc-9724-4703-87cc-9d70a5204368",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba8e5c8-f265-4d72-b0ef-8bbae84233ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb9b3579-dabe-40f7-b9d0-e45d186bcd33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9668f43e-edfe-491d-a3b2-089d73751ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8667ba7a-9022-4be5-8943-89581b884838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960e04d9-3d48-4617-948c-98c463797851",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac4f233-a8d6-4fcf-b54d-d685b5b1e3ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8d7dcbe-97cd-443c-a61e-916f6a6af79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7f8804-0a83-4c2d-a03d-1388e726b890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f776b8-f7c4-4ee1-8d6a-f98ec5e2e7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a55b50-8022-46ae-a3ed-c88e89ff6f31",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a465ad-f33a-4363-8045-05c293fd3a52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60728f89-eba8-401d-b9be-c32eea495430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42dc9b48-1462-423d-ad40-81816b209f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29af367-85a0-4a3d-8d94-7073cf83ca55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26597253-6d3b-45d3-af4f-c86ae6e544ee",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77218d55-3dc9-4140-962d-927fae096117",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "779486b8-0445-42a8-a150-c3da730a9da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08eb3d7f-3468-4d87-b42b-901dcbe6c579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49967f73-872d-424c-80eb-8484585a6113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856830e8-08ed-4d3f-9fbb-c2e54196ac6f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e8dfa5-32f1-42da-a221-9226e260b924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b9d2363-0b65-4502-8716-8140e37a4ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b9c004-0173-43c2-a555-504a7a3f94e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0784a222-1fbe-425c-82ec-5f07cfd60165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4c4c1e-a356-4a0e-9727-a2edb8100f63",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef5cce9-e44c-47bb-bf5c-32dc3d4a4c62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7c6915d-7a77-4ca4-ac98-d36467508e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cbdb40-1be1-4921-91e6-efcadfff2dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aef38f4-72d3-4b99-af3d-2b78acce77b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0eae68f-c695-4ddc-840c-c1efd974abaa",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03543ea-8525-4181-aa43-4d80ad294179",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b58f595-6be2-498d-a4a7-0c875aaa893c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7904a401-5977-4c62-8fd8-503be3b8d8c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98432b7e-b360-41be-b47f-c8f36d41768f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6f4308-dce2-47a3-9e6f-7602a1ee18e9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742285f7-b9a7-43b3-8798-3c88f297451b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "372c7e31-1072-4e77-93ea-2c31b0be880d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7205251a-38ca-4f5c-a31d-1dbc72374cee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed41c9e3-642e-48d4-b83d-f64671081b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29836d6-a064-412e-a943-2a88aa23ef32",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52abf37-4a6d-4b66-b319-f3c7af13126e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ab1042e-dffd-4214-b41b-94d766a72c66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13162fc-a736-4e44-84f0-1966f57ae62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c74edba-bed9-4acb-a2ee-c6d1f163764e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22637fe-e0a9-4c06-9769-321e8fab3189",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f79e77-44d0-4142-bc20-d94da4a3ca6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7fc3229-ca69-4a90-8281-4b2746677625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f598d9a7-5de7-4f7b-84cb-f23e5cf94ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c9382f-71b1-435f-ac87-5a7c89d27010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6c6424-cc1f-4259-8eba-8c8c53904390",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5c2617-5012-49b7-ab24-761ce95a7086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "349db92f-bc54-4136-b4cf-e1296540fe31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd22a161-f04f-4a62-9d16-54d5a2e85717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4bbb54-78ab-401e-ad08-6e58da35204b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d4fc5c-7784-4be8-8f80-2ee222d8a222",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9fa543-485e-4f7e-b775-5af4241e7f49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0871b2a-78ac-4f84-9d40-e75c7c14776f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecedc17b-3686-4af0-a27e-4437a28c3da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61da2ad-ea81-429d-8682-5f039b1278e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ffa438-d6a1-4969-ba9a-85c47df91e2b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd642ddd-56b7-45e1-9d0d-de584f216b51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f485d634-7cdf-4564-8c5d-166017f273ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c679d2b-da47-42e7-b108-2016c2885796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6aa4b2-7dbe-46df-869b-a331fe8fe743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c374734c-230e-4d36-ba7b-c1748d4b05ee",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54d25cd-f065-42ba-a20b-6f1584d99490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bd1cbca-908b-441f-ac87-902650c30750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "706c8b40-529f-4f6f-ae92-76f291c79c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a674927a-a0c5-48af-98f9-40b0fb8c1d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601c6e8d-85d4-4f0f-86fc-d62633071119",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e15717d-08d1-4eab-a584-b6c4f131ba19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87f91c96-0b82-4f61-ae1d-cabe8453b0f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f84a43-78a2-4a58-b0e8-43dcf8357630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8cfbbb-b2b6-42e7-ad5d-47933be6c709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766a8882-2a4a-4003-8d40-2182084498c3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf900f3d-5940-4497-94c2-adafb876d4bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fb66217-33ef-47af-8d64-4b4c14f34bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74c8e3f-6a8a-4ae6-840f-a4dab455f84d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f881a33d-0881-4151-99c4-43e87e6d6415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949163e9-74d1-4f83-a335-ed4b4fda7bc5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01985a87-f7f6-4de4-9b43-4317a27108bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2265836-4798-47f1-a2bb-e4b0dae3cae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad38ae9c-770f-4ef3-9d75-213a03bc1cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b45555-9349-41ac-a768-7f7f1d3cd323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea066fcc-b81e-4f55-8b01-cf336fa0764d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bf30e7-b40f-48b6-9781-d0e095d8550c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab58b8e9-b52a-43a9-865e-10a297721097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e4dc63-97f6-4a92-a5fe-8946ed7ff66b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "690da2c9-19d2-4b6a-8657-be7b2acb889b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00631ef-068b-491f-812e-7a67703d3f97",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc20cfa5-40aa-4e60-bb48-ec4d5e6b0b1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "730308c4-60f0-4f1f-aa33-05c6c317fd2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c697500f-c906-456f-950c-a474f17501a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc0c0d0-ff23-480b-aee9-eba232dcbffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e9f480-9b95-4004-ba3b-6e14f1b88ff9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c5dc29-554d-4bc8-b20c-5e4ac786f346",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c80b2b-51b1-4394-b180-eea3feba7527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d4361e-60b6-45dc-8c1b-720b88954363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f80994-d8a8-489b-9340-54b4734f720e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4ba6ea-5c8c-4040-9d1e-51dfe2321713",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92420f86-7d6a-4626-af2b-7f3a7efbe96e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3191d9c-1a6f-48cc-9d04-e60ee8ee9fae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f258a761-6fba-461c-90c1-5a50d6fc2d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c295ae2-de7c-4d11-967a-3421b12ea64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee740243-38d3-4645-bb20-e4b02a58ab7f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c27928f-d282-42d2-aedc-e777c754252a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "139c9ddf-4790-4f9a-a97f-f2ab0f794a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b608a6b-6198-4362-8700-76c73e39ef4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2656fc9f-0050-4461-90ab-df1dfb8b6d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae230de-d03f-42fd-a2ce-34c1c0a1cdf0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6ea6cc-22bb-474f-9014-ed30cbe4e497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d495d325-dbef-4d67-a33e-fad11a771539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c43521-643a-4786-87d4-3714bfc9d314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297d7b5e-8944-4301-9298-ce1345943d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b2c70d-c49b-4c31-bf02-3bc40ed2ea6a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bba86e-075b-4be4-9630-b1da5ea701a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0979d825-c671-4c67-a1fa-7029f0257b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566cca2d-098e-4ee8-ad85-36600d43b293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7804f0a5-c7a1-4e81-97e8-3e871cfb8e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7611ec97-5d14-49d4-826a-df62a98f19a0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e064fca9-b254-4c68-9c6a-8db0d247e1a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b8bcdcf-97ff-48c3-9306-f4dc41089aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35772e76-baa9-4801-993a-71813be4e491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6c5f5d-1058-4553-8b51-37e2725cb791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bda45a-8822-46bb-8e79-af851ce0fcce",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb43b97-602d-443b-8a5b-d6c309f29542",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a33b844-62db-4cac-81be-025c1d5dcf73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69ed3b2-74b8-4dfc-a4f8-800d3e13f023",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f414f0b-3484-4c4b-933a-cc0432945031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7069b0fd-0a77-4528-87ba-039fcb24458d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5c2789-5627-4ee0-a675-d693ecd7767e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9ca7b1d-c6e6-4ffd-bcb2-28b1c9d6743a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86aab4e2-ff42-4fb5-903e-82baded4bab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70669b1f-cafa-43ed-a072-ae30466eaf12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f131317-927e-4c2f-9cdd-1360810c79c1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708da023-f6ac-48d8-bc7b-b9d89049a28e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b60945-f0dd-426d-8a49-75109a9de3f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7631fa1-c7de-4df9-8abc-6c0b7a9bc43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e7ff00-b2e6-47aa-aefe-e3372c218e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fc5e6e-9d79-480d-a4bc-bd78c3b856fd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6eb04d-b452-472f-9b06-30ff1f5c07a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "255f0ab9-801f-4194-aeaa-ffc06333f441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e233def8-a49d-4766-b23e-9862481929d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f111dd-1358-4e6e-8188-fcacf35c7dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30689ee6-9cd2-47d4-bf27-6e49906b0172",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56676fc2-7915-46bc-a2a2-769ac0d50d39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c8b262c-9a11-427b-8a3b-0f7027a44d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28860bae-8659-43f6-936b-3b9e31aff799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2795ee54-df35-451e-976b-6d86bb70fc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31382ffc-7516-478f-bf56-4278ddbf83dd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec5c790-d82b-4318-a42a-53041e5fdf15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd07943f-099b-4060-8331-b48073fbf747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c50a356-89f5-4067-bf10-099baccd3e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1181635a-9f43-422a-b71c-0925edc8c9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fef21cf-0e37-487e-9beb-4c817f45b4a6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a9bc55-b93a-41c3-add5-5a94335b7d25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dc119cc-e094-4e2c-8b32-023d507912b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a86056b-3993-4bfa-9693-abdee7a7ec16",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bedcc37e-6c95-425a-b599-ef9d3a525851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae2ba9d-7b31-47fa-abc5-77e2551cfcaa",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2134ae-4ac4-47e2-b302-c80fcf581c2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b905ca4a-d59b-4b7a-ba5a-ef30bf02159a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb1e3b6-640f-4bd2-a564-b1941ed58b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190559d4-f72d-4185-89d7-06ef2e5da337"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "499694af-1731-48b6-abbe-56f62f33f5a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c92679c-1ded-4018-af9c-9e3c3dd6a69d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93eefc21-85a0-4621-94cc-5d44593fcd2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "787716d5-b62e-4163-b30c-ef574cfcd136"
                    }
                  }
                ]
              },
              {
                "id": "40bfe0dc-1fc1-4f3c-a027-a43430dc4b9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0e566ed-5c7d-493a-ac1b-f1add8a21413",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380bee8b-b1d1-4c90-88ce-a127bd566b59",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "25df60fb-8dfd-44b5-ad6c-7fe4757a9c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9918de62-d505-47c8-99d2-aa2b3ee519c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb5a66a7-3265-44e2-8a5d-86e848d5f8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0788a368-3a67-40cc-8d0c-07daa0e78e89",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab340a64-3ed4-4248-9135-fac175f90e8b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f265371a-e29f-4e4d-a2bd-e42e3118a8a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc30216a-01dc-4f77-962c-a158c607ddd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe830bb4-4c91-456c-9a28-6935ab53ee15"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b56d69e-a028-4346-a66e-192439e03bb7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1720ad1-b310-42e1-b3f7-11261ffe6039"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ff242ea-e2cf-41f4-895b-9bb4f4607abd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35220193-fe03-4af6-a42b-5a21add333a3"
                    }
                  }
                ]
              },
              {
                "id": "148313a3-ef21-4378-be6b-8bbcdd7e439b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "86597ed8-69fa-43e8-b941-dac4753b75d7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e99a6c7-899a-4d31-9571-5d37c2e5a678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4e503e73-dd18-4828-9878-afa485e8c81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bffd065-598d-4537-8e1b-66092918033f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94bbf5e-23e0-48ce-a64f-e0072f83e10b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8185f077-cc55-4de6-98e8-b46f731d366c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "209ebc99-d06e-4bfa-81b3-602abcc68885",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f232daac-bf7f-4d8c-b234-7f35e1ff819d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2598197c-a712-480a-bec6-c98629961b55"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a265574-36f6-40b2-a274-cb880e4bf398",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2b9772d-e66c-405d-9f76-e1aa84e73fe4"
                    }
                  }
                ]
              },
              {
                "id": "da0ea327-fc6f-4915-9e66-8c92b0a8be29",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "39798a20-42ff-45b6-b1ba-04535f4f1c76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c26d0622-19d7-4b23-b6a1-18e83f081fcc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9aa44b41-9d5c-426d-ae4c-12ee9e4504f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f84e2e0-2bb6-46bd-b66d-9929dd588a06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f48d113-0bab-4518-8704-49bee0eed110",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5911b5fd-74ba-4404-978e-094e302a4e96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be50d4bd-9b84-4cd7-857a-8444f0880cd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "092a8988-ae20-42c4-9e18-ba3820555bd4"
            }
          }
        ]
      },
      {
        "id": "031a6719-e6a1-4a30-98dd-2d2917012a19",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7d8a0bb6-95df-4cad-98e3-5d16d0518c3a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81e31ca8-6bcb-4d15-9c36-98686d4a59cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "798b6654-ce5b-4008-85e0-0e4e3970917a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e0cdc2-d363-4d7f-840f-9300a1e6c7e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d4e28b01-9d4c-4ea9-a818-78c4d4130107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bb40ff-7cbd-4d72-b63d-34c755a2066f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e13810b5-caaf-4837-9750-cd578a976b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea6246a-0d54-4799-a183-7baa30e826f2",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63d3146-745a-448a-9ca8-4eb3e6567fe7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b3b39716-2c29-4219-9be2-ae3508cdf490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04620ff-a1d2-4a12-9ee1-16d3b7c760f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69540b3f-8ac8-4e05-84f9-876c2164f97d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8050a8f-1c47-486e-8c3a-537eaffc00ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5577b31f-fa94-4356-8aa0-a7005b038ccb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58ab1a8b-0351-4058-838c-4991aa3d0610",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee2b9f94-50be-49ba-a5dd-677fd61fe87b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4cddcee-3f07-4699-a84f-18df76397b4d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "55561b4f-07d3-40ab-b1ec-41034ab5133b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d180cf13-64d6-4d47-b9e7-4842bbc9d1e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9990c1e9-3a66-49fa-be2d-f67ef0220fdd"
            }
          }
        ]
      },
      {
        "id": "77cf1acb-bd3b-4116-be8f-8fe32c0e6e8e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "10bf0e23-b5bf-478e-a723-460b239ec153",
            "name": "Negative Testing",
            "item": [
              {
                "id": "041d795a-2eb1-4260-9afe-b52657724075",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88b4a925-ad1b-4c03-abbb-fee08f22dd6c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c484d490-d384-4937-a300-8ee077d4e8bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cdb725db-3ad3-47d1-a21e-344bb4740893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8331f3-a166-4e22-b0d0-25aa24dfa1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a0fe250-a526-4be1-80ee-8d40618cb8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e8ba2f-39b9-4a61-a897-79cbf3311e8f",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30c60a4-beac-4c1a-9614-9966c3555d09",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "218be4a6-0667-4401-9a79-da386e704a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "221194aa-cbc6-4fa9-b63c-abe6f5f5219f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7f59354-0c82-4ec9-ab4e-0e3af73163ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "665a68e6-cfeb-488c-b6e4-7ebd073a3177",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8799dcbd-3529-4ec0-b3fa-7f72fd75cfe3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d44f8153-c733-43a6-be0a-cbfd8726c03e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3458b433-6766-410e-a221-58d40497a07d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bad131cc-a55e-4171-b965-3f66320539d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "da2ddfe4-adc7-4673-b509-320588d56108"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ec30aff-daf3-4909-a747-469ccdddf94a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76ee2308-79a9-469c-9661-f2bec43a7d2c"
            }
          }
        ]
      },
      {
        "id": "1eefdd8e-2265-4e68-b156-878bdf347727",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "29a4f3e2-8c66-46d1-a6ea-594c55c1f260",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0f969c8e-6ed3-499a-9cb8-4242194076cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f210483b-db50-4754-b2ab-db902e0e832f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b710eb22-8266-44f5-a9f4-c19362cc4907",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b85f1137-4e15-4214-bbcd-66ccd8061e33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d71f68-89f5-493e-a752-0e25283d5321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00d053b5-0000-4f2e-bff0-0cac237c470f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c0949e-a1d9-4cc9-b066-55c11d960584",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd3537c-979c-471c-a15c-feefa148fca0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c13dc01c-a028-42de-b0ed-41bec82d0873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2b40dd-9fe3-4446-934e-a6d3181d02aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2214967c-4602-4d9d-98f0-c30c5e29ddbc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ed42b58-633c-4b12-be3b-0cb324caa64f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13332c99-cbed-445a-a143-011e6d698095"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89a3ea2-4ce2-409a-9b8c-e09b1be59ba2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e0c8bb8-7e3b-472c-bfbd-b49ca4227e44"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf9f774b-4716-4aeb-94f0-049d9e6be2e4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "06b6ddd3-18e9-4961-a643-ab4667a8e75c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d8f6e02-7627-4848-9083-20257fdca2ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e46c1f6-9a53-4912-9ba8-467f7c3a4085"
            }
          }
        ]
      },
      {
        "id": "76ad14f3-dfce-40cc-b0f8-7ce2ec405e88",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bc7a5c9-9648-496b-9c5e-1a6b81785acf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67bb2e15-b5ce-41bd-8c39-7ec6cf86163c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "db1b9f79-0806-4e60-9a43-ad8856b5eefa",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9b6855c-d925-4793-bc6f-d02ea2209d41",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e07a2282-b72c-4faf-a7e9-f0352d5c0a21",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 137.66793893129775,
      "responseMin": 6,
      "responseMax": 873,
      "responseSd": 152.98633016175884,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674607119387,
      "completed": 1674607169776
    },
    "executions": [
      {
        "id": "a073dbf5-eb19-4bd3-bebf-63489dc304b3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9af165d3-34da-446e-a58e-525ae4f38625",
          "httpRequestId": "674b7d56-0c9d-452c-8295-2bf9462a831b"
        },
        "item": {
          "id": "a073dbf5-eb19-4bd3-bebf-63489dc304b3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "dce5002a-cc0f-4cc5-804b-2c34276f1c4c",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "1a05b9de-c6e8-412c-a598-90a8302354e1",
        "cursor": {
          "ref": "9b5ca4ca-cd35-4969-9910-60b5582da079",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "48c8fb83-1669-43dd-a78e-10ca2c811866"
        },
        "item": {
          "id": "1a05b9de-c6e8-412c-a598-90a8302354e1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "94358af0-f6d1-4a10-8cf3-a821e5e1f6b3",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "db79f190-227b-49a4-9be1-5f03eb8c0549",
        "cursor": {
          "ref": "fff016f2-ef2e-443b-acb4-74c98ff097bf",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "75a680b5-c269-42ca-8662-9fc783338368"
        },
        "item": {
          "id": "db79f190-227b-49a4-9be1-5f03eb8c0549",
          "name": "did_json"
        },
        "response": {
          "id": "7f7924c7-fc8e-40d6-a5d2-9344a3cbaf44",
          "status": "OK",
          "code": 200,
          "responseTime": 212,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ecce224-0975-4654-ba55-3ccad2bfbf22",
        "cursor": {
          "ref": "752fdbd5-01b1-4a47-9f9a-153a80a22fbe",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "03aa3f7c-ceb9-4bdb-924f-47d19e98809d"
        },
        "item": {
          "id": "5ecce224-0975-4654-ba55-3ccad2bfbf22",
          "name": "did:invalid"
        },
        "response": {
          "id": "dd5bc5c0-189f-4406-bf4f-d6a941438497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ecce224-0975-4654-ba55-3ccad2bfbf22",
        "cursor": {
          "ref": "752fdbd5-01b1-4a47-9f9a-153a80a22fbe",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "03aa3f7c-ceb9-4bdb-924f-47d19e98809d"
        },
        "item": {
          "id": "5ecce224-0975-4654-ba55-3ccad2bfbf22",
          "name": "did:invalid"
        },
        "response": {
          "id": "dd5bc5c0-189f-4406-bf4f-d6a941438497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b16470-e03b-4721-b897-d482b6eb02a1",
        "cursor": {
          "ref": "80351a5a-bc96-4057-9415-07f0bf4b0c21",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "00d87a84-a2f3-4131-9e48-49511f076958"
        },
        "item": {
          "id": "c8b16470-e03b-4721-b897-d482b6eb02a1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d8866276-36e5-4a82-b56f-b82620f1096d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 110,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d12a39-1e98-4354-b9a7-ea1f27c5c4c1",
        "cursor": {
          "ref": "e910d62d-2d9d-4be4-8877-7c3a40f1d646",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c7665095-cf8a-4ca3-9392-3e36acb7024d"
        },
        "item": {
          "id": "96d12a39-1e98-4354-b9a7-ea1f27c5c4c1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "349e4c1b-1e2c-4dcd-88b4-5aa42316c08a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972c77be-0e8d-463a-9f23-9721e27a6319",
        "cursor": {
          "ref": "92f6afc0-e5b1-443e-842b-b74309c8fd09",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "13aad4b0-c3c3-4fb6-abd5-849c27b2481d"
        },
        "item": {
          "id": "972c77be-0e8d-463a-9f23-9721e27a6319",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bd0e4b7d-ee10-4d67-a047-09eb3252f7b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4142bdc3-4017-41f5-9021-74638763320a",
        "cursor": {
          "ref": "b0fb066c-92f9-4585-89dc-5ecabf7d5797",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "237fd90f-f292-4ee0-b8db-2de9e1a7fc00"
        },
        "item": {
          "id": "4142bdc3-4017-41f5-9021-74638763320a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "07314351-2d2c-4667-ac71-a0e84aabcdf1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4142bdc3-4017-41f5-9021-74638763320a",
        "cursor": {
          "ref": "b0fb066c-92f9-4585-89dc-5ecabf7d5797",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "237fd90f-f292-4ee0-b8db-2de9e1a7fc00"
        },
        "item": {
          "id": "4142bdc3-4017-41f5-9021-74638763320a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "07314351-2d2c-4667-ac71-a0e84aabcdf1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f46ffd-9947-47ae-98be-2603ee727201",
        "cursor": {
          "ref": "18a41e08-bf86-4db7-8e14-dc16af8db2cf",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5c605682-0c96-4235-845f-36913d98c0f3"
        },
        "item": {
          "id": "c5f46ffd-9947-47ae-98be-2603ee727201",
          "name": "identifiers"
        },
        "response": {
          "id": "aff1c3de-ae32-4911-8ad1-162023e33a1b",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3f7f27-bfe5-4f35-8071-bc4ba7aba295",
        "cursor": {
          "ref": "4623df8d-ee56-47b7-90e0-db9e95d6ba7f",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "63a28eb3-7ddc-4185-8f66-0532a125337e"
        },
        "item": {
          "id": "3d3f7f27-bfe5-4f35-8071-bc4ba7aba295",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0b82605b-6f4d-48ce-8cde-966dcffad47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3f7f27-bfe5-4f35-8071-bc4ba7aba295",
        "cursor": {
          "ref": "4623df8d-ee56-47b7-90e0-db9e95d6ba7f",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "63a28eb3-7ddc-4185-8f66-0532a125337e"
        },
        "item": {
          "id": "3d3f7f27-bfe5-4f35-8071-bc4ba7aba295",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0b82605b-6f4d-48ce-8cde-966dcffad47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9924c862-ae76-45f5-9305-bfb10ee8082e",
        "cursor": {
          "ref": "bfbc6f10-23bf-42f3-8049-d9de7ffc9c6c",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cc84b662-4b28-4d0f-8334-3b2ee06cbfd2"
        },
        "item": {
          "id": "9924c862-ae76-45f5-9305-bfb10ee8082e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3ac22cf7-7b79-45cf-8a5f-0e85e7bfdc47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbebefa-ea29-4485-9b44-dfa75c15ab4c",
        "cursor": {
          "ref": "2d50075f-6d39-40a6-80ad-30a0316ec714",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "14797d25-4f67-4a13-9812-51c820710490"
        },
        "item": {
          "id": "1fbebefa-ea29-4485-9b44-dfa75c15ab4c",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "e1c115c1-aae5-43e4-9e25-58c02d0bb797",
          "status": "Created",
          "code": 201,
          "responseTime": 723,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "58a0461b-67cf-4d0a-b3ef-370d4e456919",
        "cursor": {
          "ref": "157114a8-8139-463e-aacd-35d997a0d0ef",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d8e461d0-47d5-4320-9c99-2ab2971fc80f"
        },
        "item": {
          "id": "58a0461b-67cf-4d0a-b3ef-370d4e456919",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "eb7dfb38-c90e-46f5-8a92-6d9a4ecb1069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b17563-9c98-4463-9daf-715fcc56a446",
        "cursor": {
          "ref": "7cfc0945-ac04-4b94-abe2-aa0afd4fa725",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9f1ab636-a7e8-4d66-9eb7-ca1e3b1f81f6"
        },
        "item": {
          "id": "e3b17563-9c98-4463-9daf-715fcc56a446",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cb501bba-c722-4a4c-baa5-a3853a7ebf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c31e6f4-ffb9-4585-b297-36f4d21bf194",
        "cursor": {
          "ref": "255dc223-db1a-45cc-94d0-555548761092",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "732623ec-dcb6-434b-96f0-b13c5260f6c3"
        },
        "item": {
          "id": "5c31e6f4-ffb9-4585-b297-36f4d21bf194",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4270e23b-0654-4873-9bda-9f1c2bbd7dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f27172e-c93e-4e79-a66f-6b4fb0490ef9",
        "cursor": {
          "ref": "9b7aef27-80cb-4b22-8375-39811f8a3041",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "241b6835-15eb-4638-9dbe-bc500bdfddb4"
        },
        "item": {
          "id": "9f27172e-c93e-4e79-a66f-6b4fb0490ef9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fd94d0f1-d99a-48c3-a1df-f9eee3f2fa59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88390192-cfc6-4090-b19c-d1f64d79114d",
        "cursor": {
          "ref": "88c0cd7b-291b-4bac-899c-bb7eb4357fad",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "62d0a0d4-69d2-4403-aad7-de18ee48cf4b"
        },
        "item": {
          "id": "88390192-cfc6-4090-b19c-d1f64d79114d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "86b6634a-71be-45ab-9f81-4ca63aef47b9",
          "status": "Created",
          "code": 201,
          "responseTime": 522,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f8d4c1ee-ae9f-4d3b-b566-c875b0af0ef5",
        "cursor": {
          "ref": "906bc9ed-4dd3-4fb9-a250-50fc969c189a",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "385bf84d-ab9d-44c2-b36e-d0d16a6c259b"
        },
        "item": {
          "id": "f8d4c1ee-ae9f-4d3b-b566-c875b0af0ef5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2fe83391-58a2-40a0-9f3a-4bba9b5332e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5b6143-fc2b-426e-9b8a-b58cb12bd70e",
        "cursor": {
          "ref": "a3ffe694-6b7d-4418-8345-f6ae2d8f7245",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f60350c2-c463-4f02-9d7f-1337b5bde079"
        },
        "item": {
          "id": "1e5b6143-fc2b-426e-9b8a-b58cb12bd70e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ecef2b66-7c45-451f-b39c-2080678ad843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1a956f-10d1-450b-b1c4-3214e037bda5",
        "cursor": {
          "ref": "eac3a5da-949f-472d-bf1e-b9b45ac75391",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "731f42da-707b-44b7-8207-be16f8875a79"
        },
        "item": {
          "id": "dc1a956f-10d1-450b-b1c4-3214e037bda5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "79557d5f-fb3c-410c-9754-d87a7f615cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c303c496-e5c4-4baa-ba3e-5606fc1d4f0a",
        "cursor": {
          "ref": "8e50badb-252f-4f76-a96b-a8b55f37d7fd",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b93b4df4-94cb-40dd-b486-5e0dfb2ef63c"
        },
        "item": {
          "id": "c303c496-e5c4-4baa-ba3e-5606fc1d4f0a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e55d3427-8bc3-435a-91dd-877d35f9b401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29396f54-1208-4c38-98c8-10906d70c43d",
        "cursor": {
          "ref": "a8e0da00-a67d-4411-aeee-195afd6fd3f6",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a94ba502-8121-405f-aa33-21a63e752d05"
        },
        "item": {
          "id": "29396f54-1208-4c38-98c8-10906d70c43d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8b0735b4-ffab-4620-a297-b497f500e7ed",
          "status": "Created",
          "code": 201,
          "responseTime": 599,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f9d77e67-e78d-4971-898b-935440a673cd",
        "cursor": {
          "ref": "bd3f461e-9d95-45f7-89c0-b19007067f51",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "901a8bb8-f6d0-430e-ab97-630c3ae16f5c"
        },
        "item": {
          "id": "f9d77e67-e78d-4971-898b-935440a673cd",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "d84bb7ea-6709-4334-9e0a-c7fc2bd2f8a1",
          "status": "Created",
          "code": 201,
          "responseTime": 873,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2e286e5a-f86d-45e0-87c7-dd5e27ce3101",
        "cursor": {
          "ref": "cef2afa5-a74c-4769-a749-f44819b1d1a0",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "10d00c25-8e6d-4b53-97f8-8c6f6b9b8d08"
        },
        "item": {
          "id": "2e286e5a-f86d-45e0-87c7-dd5e27ce3101",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1fcf63eb-7e79-496a-bee6-395c7cdd732c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af1d879-2e9b-414c-ae92-89cd1fb2aa7c",
        "cursor": {
          "ref": "9ad37d80-06ce-4173-b100-34f7d083ffd2",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "af4ba542-a9f0-4133-b55e-3cd4a5f9ee06"
        },
        "item": {
          "id": "2af1d879-2e9b-414c-ae92-89cd1fb2aa7c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f83f621e-de56-4105-9b47-cd2f49fdfc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a214937-85b3-4ac7-8fd9-0123f429d461",
        "cursor": {
          "ref": "8241f0a3-5a02-4996-8ee2-406fca752b5e",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ff7f625b-2c9c-474e-8255-e18035f5da2c"
        },
        "item": {
          "id": "9a214937-85b3-4ac7-8fd9-0123f429d461",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7260ac8d-d27e-49c1-abd9-b2bca520dcbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cdb1dd-aae8-4596-8edf-683333cb994b",
        "cursor": {
          "ref": "6bc82fc0-c675-4e35-8ff3-176a61df4223",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d6e58dd8-a16d-4995-bf41-927e73f870cb"
        },
        "item": {
          "id": "39cdb1dd-aae8-4596-8edf-683333cb994b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b7a323d0-034f-4e88-ada0-599a6ddd3c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc832a4-b327-4366-b892-67e65b443c47",
        "cursor": {
          "ref": "b9409349-6443-4a4a-ba73-1536af083792",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "80b869e6-f469-40d5-b250-305a8c0dc21c"
        },
        "item": {
          "id": "afc832a4-b327-4366-b892-67e65b443c47",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2c73ab44-6b64-4a7b-b1ab-4322e7fb1efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258ad9b8-602c-46be-8011-ec910f8e528b",
        "cursor": {
          "ref": "85d04f5a-a0d9-411e-b4a9-599033100e17",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "60d0009b-cbff-46f0-8603-3ea7712cca02"
        },
        "item": {
          "id": "258ad9b8-602c-46be-8011-ec910f8e528b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a3060452-cc46-42f5-981a-950a02fd1330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5439a70f-3c5f-4c4c-969d-fe86760e9baa",
        "cursor": {
          "ref": "0a66b322-7e45-4f2c-9f79-157e3a48633a",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "12251afe-880c-448a-918c-1443c2dfae0e"
        },
        "item": {
          "id": "5439a70f-3c5f-4c4c-969d-fe86760e9baa",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "aed9612f-9425-46c8-bafb-7cd93944e53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a395ace0-94cc-4b9a-92da-3063d0beb4f9",
        "cursor": {
          "ref": "6650da03-cafd-48b4-b1b8-759b502c921c",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "acc19cd5-8f79-4c1b-81be-043c5fc52252"
        },
        "item": {
          "id": "a395ace0-94cc-4b9a-92da-3063d0beb4f9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0516ceec-e12e-47aa-9c15-513047ab87a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1102b4-d488-499a-be6a-fc7d3120931b",
        "cursor": {
          "ref": "83b34b3b-e781-4f92-9ef3-74180f5ed082",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "727b0dbb-d17e-473e-b547-976cbd897323"
        },
        "item": {
          "id": "8d1102b4-d488-499a-be6a-fc7d3120931b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "03235be3-5c10-4277-b1fe-14252c9d4439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9542a1bb-5a19-4a7f-9453-183dbcec1e9c",
        "cursor": {
          "ref": "f6973f2a-c1fd-47e3-a025-2f6b0b01a0d4",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c1879aa3-e9fd-40c0-ab0c-d7487650da71"
        },
        "item": {
          "id": "9542a1bb-5a19-4a7f-9453-183dbcec1e9c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "71b620d2-53d6-4849-b1dd-9e5734851846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc64b6c8-b267-4213-8174-ec7ad465755a",
        "cursor": {
          "ref": "5faed82e-a4d5-4da0-ae92-7ee0beb0c715",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0aaec065-dfaf-426c-b366-11ba9b3a457a"
        },
        "item": {
          "id": "cc64b6c8-b267-4213-8174-ec7ad465755a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f18b72bc-7441-48ea-8bb4-9fbe41774e46",
          "status": "Created",
          "code": 201,
          "responseTime": 685,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "84cdcabd-1388-4538-876a-1a9d909f8ab9",
        "cursor": {
          "ref": "8cd5dbc4-6364-41c3-ac03-bd6a53768622",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9fa207b8-d89f-47ff-b89d-c9886fe4c67f"
        },
        "item": {
          "id": "84cdcabd-1388-4538-876a-1a9d909f8ab9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7be4441b-783d-43d3-bc35-e1f878d033ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be39119-43df-414c-a967-954f0b0652bb",
        "cursor": {
          "ref": "d337809f-8221-48b1-9488-02b74228d655",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "886c29b4-3f5d-4fe2-8234-a7210b4e2a45"
        },
        "item": {
          "id": "7be39119-43df-414c-a967-954f0b0652bb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bc753735-58e7-478e-9a44-e1076484b772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7889d1b-e03e-428a-997d-8e24a2712454",
        "cursor": {
          "ref": "547f6e1c-8fd8-411b-a2a0-cf07d1c2d250",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c08f639f-80ff-4c5f-bbc5-59753921db92"
        },
        "item": {
          "id": "c7889d1b-e03e-428a-997d-8e24a2712454",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "14a8016b-7b1d-4cc7-ac76-9bc95deebedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67387890-8c61-4843-9803-f53674465b73",
        "cursor": {
          "ref": "fe42714d-f16d-4b49-b08a-597a29825ab9",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "29daad8c-5fe5-4434-933b-aaa2b652f05a"
        },
        "item": {
          "id": "67387890-8c61-4843-9803-f53674465b73",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c124e87e-816a-47e7-8708-9e601a3f5233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4537d1b-2823-4cc5-9b21-cb0b3d1ea9d4",
        "cursor": {
          "ref": "ad025975-c305-476c-a485-f50eecb09285",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3e618c0b-f361-4a1f-b15b-ff8fdf246ae6"
        },
        "item": {
          "id": "c4537d1b-2823-4cc5-9b21-cb0b3d1ea9d4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "318f5019-2cf4-4a85-be21-05eb3178f46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162ba6ec-7136-41d0-a8e3-71cef6c1e02c",
        "cursor": {
          "ref": "9a00115a-a7e0-4a1d-b854-c2781ff54da7",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "aab8ac4c-1eda-4f5c-8079-1caea2981dab"
        },
        "item": {
          "id": "162ba6ec-7136-41d0-a8e3-71cef6c1e02c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1624f5f7-9ecb-41b3-b20f-3df70f67fa7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef3d074-9f99-429d-bc0d-b952d42d9cf7",
        "cursor": {
          "ref": "0ff289bb-d041-43eb-8975-1e18c145884c",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "aabead7e-dcae-4319-96c9-9df589f8805e"
        },
        "item": {
          "id": "6ef3d074-9f99-429d-bc0d-b952d42d9cf7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1d9a01a2-b7cc-4c68-89ad-4bc8eb24f356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5041459f-b604-4160-87d9-4cf193406f4e",
        "cursor": {
          "ref": "988ffc0d-ee2f-4592-a169-dbb2bc6919d8",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "647e100c-5fe3-4cc4-9376-d5addeec47de"
        },
        "item": {
          "id": "5041459f-b604-4160-87d9-4cf193406f4e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d9cc07f6-eb8c-49e6-87f5-a567587cd0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8691ad93-f17b-43c6-b108-094cae465f24",
        "cursor": {
          "ref": "e84fb89d-373b-4f5d-a431-148e730c2272",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f82cde08-c9e7-4d18-be81-d5da17cc01d5"
        },
        "item": {
          "id": "8691ad93-f17b-43c6-b108-094cae465f24",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "53f6a258-b5db-4e07-b748-67ff9834a299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99a8610-7e50-4109-be91-cdd6bfd5e9d8",
        "cursor": {
          "ref": "de371908-ff70-45bc-b295-094c1ff58c18",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "95643348-ba3f-4b64-80cc-728e68f52742"
        },
        "item": {
          "id": "f99a8610-7e50-4109-be91-cdd6bfd5e9d8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "44441d81-ab34-44ee-8499-7573c1ee52b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5b187d-2dfc-4f3e-809f-358429526673",
        "cursor": {
          "ref": "48e7cc22-3eee-4915-bfbf-6bbedf1b8484",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1ee7f86a-b28e-4fdd-b7ae-b3233f246201"
        },
        "item": {
          "id": "1b5b187d-2dfc-4f3e-809f-358429526673",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7ee66601-2e39-44ec-926c-6bc094545def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb13fbaa-7ce6-4038-9cf8-e5c977e203b5",
        "cursor": {
          "ref": "c076575d-aa55-4839-a3c5-a26455c875ea",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a6c31b3e-5d3e-4c9e-a5a8-d88174aa0bdc"
        },
        "item": {
          "id": "fb13fbaa-7ce6-4038-9cf8-e5c977e203b5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "59316397-2721-41b4-a562-c6ef33168de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48be33bc-8b46-446c-a315-1f8a70a25b94",
        "cursor": {
          "ref": "ecfbf8bb-de5f-461a-83da-d7011b8cba3e",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0c4dbdf6-dfe4-4977-8e7c-a202b3941df0"
        },
        "item": {
          "id": "48be33bc-8b46-446c-a315-1f8a70a25b94",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "df4d6630-32b0-45df-bae4-f2943f46fa9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 360,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8d1c290a-5528-4a80-8694-71d01e92467e",
        "cursor": {
          "ref": "85e690cc-d4ea-4446-b8ec-bcdec7d68fff",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2127d451-6bc6-44cd-ae33-adebf221c9b2"
        },
        "item": {
          "id": "8d1c290a-5528-4a80-8694-71d01e92467e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b99f71f2-99d7-41e5-b03d-4dbfecd6e952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af80aa8-42a8-4032-ac64-f293cf04fc41",
        "cursor": {
          "ref": "f44a9bbd-f643-4fd4-a7c1-f532fefc8939",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3ae44269-e9f0-47d1-b4f9-9bb0e08f927f"
        },
        "item": {
          "id": "7af80aa8-42a8-4032-ac64-f293cf04fc41",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "74776466-b762-4753-a860-064b66a5eacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a512c3-536c-4751-8489-b11e37959d89",
        "cursor": {
          "ref": "cce4d13b-ab65-49b1-a543-1fdc08403194",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "01bbf35b-24f2-4e90-b289-4261995f39db"
        },
        "item": {
          "id": "93a512c3-536c-4751-8489-b11e37959d89",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fa6580cc-8e3e-481c-8b84-90a31396dcad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986970d1-dfc9-4713-9f06-0f3c60e94e49",
        "cursor": {
          "ref": "5666cdca-5906-4fe5-a2ff-dd11216d29e8",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "881052e8-666d-45b8-90f1-0341672cdd86"
        },
        "item": {
          "id": "986970d1-dfc9-4713-9f06-0f3c60e94e49",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0b51e106-d960-4b7a-9a38-a3795cfc0a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e605e13d-5a00-40c5-a5c8-b96dc098bc0a",
        "cursor": {
          "ref": "d07c2345-c545-42fa-9c36-879cf9191189",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "601f8e30-938d-402a-baf2-8f097c8d68fc"
        },
        "item": {
          "id": "e605e13d-5a00-40c5-a5c8-b96dc098bc0a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e2b18287-a294-425f-96f6-069de077bee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18db8e2b-4cac-4ec6-bedb-388d9dd714ff",
        "cursor": {
          "ref": "3f5eadee-d881-4f70-bfd8-7f12a7900a5f",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e0266438-c44c-4ba5-93b8-6ea99fca7c75"
        },
        "item": {
          "id": "18db8e2b-4cac-4ec6-bedb-388d9dd714ff",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a7eb2bef-708c-4fea-92c4-870f8734a9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe69201-d6fb-4f62-bb7a-ea7d53a4c6cd",
        "cursor": {
          "ref": "8cb5e4f4-0cc9-421d-b97b-325c0fe502a7",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fa7d464c-6edc-4a80-ad38-edbb4dcf37b1"
        },
        "item": {
          "id": "afe69201-d6fb-4f62-bb7a-ea7d53a4c6cd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "eced2a54-a60a-44d8-8e8f-4b6fd60a831e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 383,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "bd295be5-2159-4203-85ed-0a8252d50596",
        "cursor": {
          "ref": "ddf318d4-ff9d-490a-9caa-4723be1830a6",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c8a340e9-3028-4ba9-950f-64032c2115dd"
        },
        "item": {
          "id": "bd295be5-2159-4203-85ed-0a8252d50596",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b4732c85-1e6c-4e56-b089-e103a372946d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7be17a6-3442-4268-9834-29e75cbcdb04",
        "cursor": {
          "ref": "3716cb2e-94e6-4ffb-8612-c5eaf579653c",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "139aad09-f4de-438b-b258-4e7e8f6ac99b"
        },
        "item": {
          "id": "d7be17a6-3442-4268-9834-29e75cbcdb04",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "620e27bc-dec9-49b5-bb42-9cb65255480f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4919474-57bd-46f2-9d64-fb0b511a90c1",
        "cursor": {
          "ref": "f065135b-6779-4215-a1bd-fd3961c0aa8d",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "70908942-ac21-4961-a3c2-9eb3a99cbca3"
        },
        "item": {
          "id": "d4919474-57bd-46f2-9d64-fb0b511a90c1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c1d4062a-4f90-45e2-a0d9-baf514f5199f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82facee-15bf-44ba-b59b-695859e2cd1a",
        "cursor": {
          "ref": "fcbe1c7f-fbae-486c-8474-cf8b35764d3d",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "631862a5-e979-473a-9ed7-fce886d00416"
        },
        "item": {
          "id": "f82facee-15bf-44ba-b59b-695859e2cd1a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "31b20095-4df7-4bc1-bde5-05f74e20ce1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fd6fcf-d6ca-4238-b8e9-ffe37769ca82",
        "cursor": {
          "ref": "8f9290b5-9beb-495f-931b-3df410253347",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4c08ba0e-abfb-44a7-a442-40831882ba33"
        },
        "item": {
          "id": "50fd6fcf-d6ca-4238-b8e9-ffe37769ca82",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6f0e16c6-c9a9-4449-91d1-2a6d2aa78232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb143250-4329-4f52-97b2-9406eb80ecb6",
        "cursor": {
          "ref": "9a0dc3b6-b599-4a35-a917-04f5ecf7b806",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1791085b-c1b2-4325-922c-34e46f1ba3d5"
        },
        "item": {
          "id": "fb143250-4329-4f52-97b2-9406eb80ecb6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "885a40a4-8194-48c5-94ba-4ccab2118f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716e5595-d1b7-4122-be8e-ef4e27b9877f",
        "cursor": {
          "ref": "ece3b07d-2025-48ed-b3a8-4b785a719222",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5d815a6a-058e-44a2-8870-a1d5a73b7522"
        },
        "item": {
          "id": "716e5595-d1b7-4122-be8e-ef4e27b9877f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7d0c40f1-6cac-47b8-9daa-701fadcd9290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0b2054-cdf1-4090-9d96-f9217e818582",
        "cursor": {
          "ref": "9b7c59a2-47f0-4e19-b3f1-2fa1bfd19c47",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "34fa6df7-90b9-4007-8a0d-4782e817c704"
        },
        "item": {
          "id": "7f0b2054-cdf1-4090-9d96-f9217e818582",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "16d09077-1f80-427a-a1a5-e81fcb0a473c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d89e16-9958-4386-845a-de7889105a8b",
        "cursor": {
          "ref": "c682fcca-a171-470c-b15f-6c31cfba3d7d",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b53498ca-e070-452d-8b2a-39181620b5c9"
        },
        "item": {
          "id": "63d89e16-9958-4386-845a-de7889105a8b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6c96c43c-cf2e-40ba-a827-07960d0ab4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52823a28-fc91-4566-879d-1e0959a1fd20",
        "cursor": {
          "ref": "c4d093fa-e927-43c3-b803-4463dac64fa0",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0f96c3f3-a4c1-4f3d-92a3-fa308e010ecc"
        },
        "item": {
          "id": "52823a28-fc91-4566-879d-1e0959a1fd20",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "832284a6-c490-4779-92a7-ac1e8e1c0f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9c02b3-c137-425d-be6e-8ab4f4c2c7e0",
        "cursor": {
          "ref": "0494f08a-216c-45c1-b2e4-956ee56eaa96",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d5edb75d-2a4d-4366-a465-bbe708d4d899"
        },
        "item": {
          "id": "7d9c02b3-c137-425d-be6e-8ab4f4c2c7e0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6557f116-0031-4ebc-a4e9-3f1d44a2ae45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba9e38e-55e8-4814-a631-50867cb56de8",
        "cursor": {
          "ref": "1019f772-2c71-42ca-92be-0f525b47ad37",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0d2bda00-0e8b-46fc-8d58-4482ea66c0f7"
        },
        "item": {
          "id": "3ba9e38e-55e8-4814-a631-50867cb56de8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d1e37989-84fd-4115-ad7a-e5266e0efddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f66971-42bf-47c0-b9d8-2216558bbf0e",
        "cursor": {
          "ref": "e8cc7681-0739-456d-9fc0-89a10c2a6cae",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2db8ba3f-30ca-4641-aec2-f1bc4837e3c3"
        },
        "item": {
          "id": "88f66971-42bf-47c0-b9d8-2216558bbf0e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "878a47dd-5220-40d1-93b2-ee087c0795bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030de912-f9ee-4b6c-9981-08359c3a7689",
        "cursor": {
          "ref": "5e7ba672-1d47-4867-aa29-96bcb237baca",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "11080bfa-f74f-4a13-a99a-1f4b2aa3f1bf"
        },
        "item": {
          "id": "030de912-f9ee-4b6c-9981-08359c3a7689",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cc21c315-29fc-497d-90ec-4acb5a3b4120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efce62b-f8aa-48da-b629-5a576c4a9e14",
        "cursor": {
          "ref": "58811754-7906-406b-b8d1-9294a1395485",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d4ea6fd8-96a8-44c3-b51b-9f42aae144c8"
        },
        "item": {
          "id": "3efce62b-f8aa-48da-b629-5a576c4a9e14",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "28b660d9-5feb-41e5-bc03-cedf2e42172f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7e99d0-3b9b-4c31-a1f4-8e41c10b6d09",
        "cursor": {
          "ref": "a656e3e7-62ed-4249-9601-5c0c5c1f2211",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "55561ec6-f52c-4806-98e2-4fde7fea65ab"
        },
        "item": {
          "id": "0c7e99d0-3b9b-4c31-a1f4-8e41c10b6d09",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "381eb8cc-70ec-403a-9016-40f86a2eccf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4adfbf02-062c-4235-a10a-7b9842a37c8b",
        "cursor": {
          "ref": "2f7c0dd2-ce67-4ce7-b8c7-d14c992e4682",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "67dfebe4-bb40-4aef-be45-26c324204fdf"
        },
        "item": {
          "id": "4adfbf02-062c-4235-a10a-7b9842a37c8b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4ab55620-ab24-48db-b772-d37127d1cde5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4a266c-75c2-43c9-8b68-18ad3eed2e72",
        "cursor": {
          "ref": "15c2bdf5-8478-445b-84dd-e6f902b75f93",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a45c3eef-de5b-47d8-9ae2-f6b8c024ca64"
        },
        "item": {
          "id": "8e4a266c-75c2-43c9-8b68-18ad3eed2e72",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0751a08f-97f2-4cb6-a6cd-205fa70fc5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef381d27-4f3a-48d5-842b-110f4c80d413",
        "cursor": {
          "ref": "9348eb57-641f-4d88-a5a8-4b3d2f671b73",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fb2fa8bf-2faf-463f-ba77-f0407f648dda"
        },
        "item": {
          "id": "ef381d27-4f3a-48d5-842b-110f4c80d413",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6758e60e-253b-45fb-8104-f1c077b865a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d7de4b-5350-4cca-971a-f69b04322e4f",
        "cursor": {
          "ref": "2a8caf19-c496-4fd4-94ce-b12569f17101",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d1444fd4-5a73-4575-8e28-3b623fd420b6"
        },
        "item": {
          "id": "a7d7de4b-5350-4cca-971a-f69b04322e4f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1edd57eb-dfe3-4d56-a5b5-94f55cd60b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc2f87d-095d-4d08-acbb-c0815d0b1aca",
        "cursor": {
          "ref": "d5b1613b-55c1-434e-ad17-5d203f928986",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bf7a8f59-cc6b-4f6f-8335-9964f1bf57a3"
        },
        "item": {
          "id": "edc2f87d-095d-4d08-acbb-c0815d0b1aca",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a557d321-c82f-4707-9090-bd0512f15929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288f7dd6-30d2-4464-8a40-ba6cf84ef05a",
        "cursor": {
          "ref": "d5f1bc82-6e0e-4410-86aa-611fbc327d0e",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5e6a09ff-8039-40d5-9f53-5949438633fe"
        },
        "item": {
          "id": "288f7dd6-30d2-4464-8a40-ba6cf84ef05a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5bd04d11-7d82-4d48-8dc8-fea7a7425849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c17050-786b-42d3-8228-dced36f330e1",
        "cursor": {
          "ref": "3a730c15-749d-4146-af87-d7614b02bc38",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "07eee49b-008f-4c7c-813e-2082ac5d98bc"
        },
        "item": {
          "id": "93c17050-786b-42d3-8228-dced36f330e1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "40f3b7a7-f16f-40af-9ee7-7cede9bbd1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f94209-8d02-4613-81b4-63ebe99dfdb3",
        "cursor": {
          "ref": "85bbd5f7-7c36-49ee-8ca0-d5c6241779b4",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fbb5df73-8ad5-486f-b2e4-f7e59643e93e"
        },
        "item": {
          "id": "78f94209-8d02-4613-81b4-63ebe99dfdb3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6869b069-8527-4fb7-952c-2dafd2b04304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af8de87-b822-441f-bc22-93a6f355add8",
        "cursor": {
          "ref": "fbd71c76-9c15-4a5a-8531-f7ad59c91360",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7fba0be7-1b43-4f09-b4cb-9b3aee4e5a73"
        },
        "item": {
          "id": "6af8de87-b822-441f-bc22-93a6f355add8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4462c155-ddfb-4db6-9085-a046521301ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971f21f3-eaf0-4d04-a2d1-18b29e9966fa",
        "cursor": {
          "ref": "cba231db-5698-460c-ba8f-45863721482b",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1b6003bd-afa2-44fb-9137-5ed41982e454"
        },
        "item": {
          "id": "971f21f3-eaf0-4d04-a2d1-18b29e9966fa",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7b0a9706-0cf6-4fab-bbf2-b08d378af58a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4bb847-0153-4636-8492-fb67c2c22278",
        "cursor": {
          "ref": "167a0507-430d-4795-b965-c4ffb3f1c75c",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5622b2ae-539b-498a-874a-0bbf9104f325"
        },
        "item": {
          "id": "9b4bb847-0153-4636-8492-fb67c2c22278",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ab40ff11-d472-4a8d-ad11-2d968d2ea989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fc26ca-e3ab-4850-9c81-a25d9066f542",
        "cursor": {
          "ref": "444b233e-5796-4924-9b78-b3eece63e334",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fa0970c4-f85f-497a-aad7-13ae5148d3fb"
        },
        "item": {
          "id": "e9fc26ca-e3ab-4850-9c81-a25d9066f542",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "130a3448-de97-4159-804c-69a90f816932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e438017c-290a-4d87-b425-9cf26f23c8b4",
        "cursor": {
          "ref": "d8350525-ba5a-490e-918b-9893adf31353",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "11f8c9f7-d6e6-4553-86d7-72a47bd0101e"
        },
        "item": {
          "id": "e438017c-290a-4d87-b425-9cf26f23c8b4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3f60e880-d573-4e80-9f2c-b0f2dcc701b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2690973-5eb9-41ed-9861-46a2db439932",
        "cursor": {
          "ref": "d6135e57-4cdc-4393-ad30-a136891aca23",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5e5264e1-a323-416e-9b1d-b262f3e1cbc6"
        },
        "item": {
          "id": "c2690973-5eb9-41ed-9861-46a2db439932",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8355dec9-cbc8-41dc-ae11-7d6b890dc369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2959afe9-e044-42b6-bdfe-001aaf02d6f7",
        "cursor": {
          "ref": "fa8be6fd-c3f6-48dc-9382-b8122d933587",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e1f2ddb6-d5db-49fa-8544-a47de101793c"
        },
        "item": {
          "id": "2959afe9-e044-42b6-bdfe-001aaf02d6f7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2ce2da49-fbdd-4e26-8fdc-ab6264ea115e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 381,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309b309a-47ff-4316-a722-030d21d802af",
        "cursor": {
          "ref": "068e3982-4087-489e-b8ea-c5b7828befcc",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3e9db36e-6252-455f-83d8-438a2b9ae47d"
        },
        "item": {
          "id": "309b309a-47ff-4316-a722-030d21d802af",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "169bb092-33a1-4635-8a89-94bdf63bde0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9a7e14-bd11-4bf0-9fbc-1beb93dcb6c9",
        "cursor": {
          "ref": "bda474fc-cf49-40ab-8b82-a3c109b89d3e",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2a3b9e6e-37c6-47a9-b3b0-afae93977a00"
        },
        "item": {
          "id": "de9a7e14-bd11-4bf0-9fbc-1beb93dcb6c9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9267009e-f5f1-464d-b6bb-fb78731b9d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8abee13-6b02-4356-8eae-9a087a1263e3",
        "cursor": {
          "ref": "30c4e0df-0583-452c-8a91-58cd4d4bd0a6",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "58447fc7-0a6e-4b4e-938a-30f1979da384"
        },
        "item": {
          "id": "b8abee13-6b02-4356-8eae-9a087a1263e3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "db174515-57cd-43b7-a933-4cb0c5d0a28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3413dd3-5436-4372-9ddd-fb9034b742e0",
        "cursor": {
          "ref": "49ba4595-778d-4cd3-b641-b4f1baa623e6",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5dac730d-df86-40a0-a709-7ada78186942"
        },
        "item": {
          "id": "c3413dd3-5436-4372-9ddd-fb9034b742e0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "93608d3f-56e3-4106-a15a-a02630231b8f",
          "status": "Created",
          "code": 201,
          "responseTime": 696,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "4f14a545-8d35-4bde-b050-dbfb1f3a92c7",
        "cursor": {
          "ref": "e0146854-af3e-4af3-8c38-61eb35fcd23f",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2ae2a255-1023-44a8-8bc4-bab2d5afb58f"
        },
        "item": {
          "id": "4f14a545-8d35-4bde-b050-dbfb1f3a92c7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "91dbb75e-4183-4099-ae29-d1fed9f2630d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a8cdc3-6f09-4c29-8e5e-2fc311d92fe1",
        "cursor": {
          "ref": "ae264f40-fd2e-49ce-a0c2-06e8982fb794",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b27c877a-17a9-490e-b92d-d77b2ac581aa"
        },
        "item": {
          "id": "45a8cdc3-6f09-4c29-8e5e-2fc311d92fe1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c945ab01-0584-4521-b587-3919e570d102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a98e95-f8fc-40d7-afb9-46a505f6ee64",
        "cursor": {
          "ref": "185d31fc-5743-4adf-9ee9-6b4c44166dcf",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3f8f9c47-31c6-4843-8eaf-127e87cd1382"
        },
        "item": {
          "id": "66a98e95-f8fc-40d7-afb9-46a505f6ee64",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "15143ad1-5648-47ad-99d6-d85794bb3d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a931860-d258-442c-9c43-20f841e4690e",
        "cursor": {
          "ref": "650e19d8-6a90-4e03-b5da-d5adff503b7b",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0ff279e5-f199-4a7e-90fc-dfe1e3014931"
        },
        "item": {
          "id": "5a931860-d258-442c-9c43-20f841e4690e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1ef787c4-58bb-4150-a4b7-cb8a01d8d1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c736cb13-8515-4f5a-bfe3-4272eb2bf390",
        "cursor": {
          "ref": "4a87fcef-3f94-4b11-a2b1-afda30bb8cc5",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8e3d8521-e358-4a99-9bd6-63339ea0752d"
        },
        "item": {
          "id": "c736cb13-8515-4f5a-bfe3-4272eb2bf390",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "aa857243-398a-4544-90b2-06d5a6934e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7247c23-4863-44b0-b26d-0006bce6735e",
        "cursor": {
          "ref": "ee5ef9f8-4baa-496d-8043-58e59eb38a9d",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "999e06c1-fe55-44e1-bb17-4dc426539a0a"
        },
        "item": {
          "id": "b7247c23-4863-44b0-b26d-0006bce6735e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "34741666-31df-4f1e-a8cd-f347c7918b97",
          "status": "Created",
          "code": 201,
          "responseTime": 709,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "9d54eec4-e42e-426f-bd30-97b2fc63f2f1",
        "cursor": {
          "ref": "dcf50446-c9fb-4404-957a-75ea4268fbb2",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "46d63c98-fa93-454b-9c6a-b466952e70ac"
        },
        "item": {
          "id": "9d54eec4-e42e-426f-bd30-97b2fc63f2f1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ebe6e76d-5b5b-40b1-a11f-3a00fca7b46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbf5687-bf03-4eaa-aa3d-a2952b53d243",
        "cursor": {
          "ref": "f590dc0f-8f84-4ef3-b61a-dcf6851f4cbc",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "805df718-5a0f-412d-abd8-0f5b7b9a4dea"
        },
        "item": {
          "id": "5bbf5687-bf03-4eaa-aa3d-a2952b53d243",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b07846f2-2b09-4293-898d-6673a742373e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ff11ef-e392-47b1-a7f0-5d645de6aeb0",
        "cursor": {
          "ref": "bf3d5172-f477-4eb6-a1dd-690ad340e6c8",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "18571dec-ddfb-4d28-b927-8048bc3148fa"
        },
        "item": {
          "id": "19ff11ef-e392-47b1-a7f0-5d645de6aeb0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "12455594-5ce9-413b-bf69-413e2f81fe23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf6f1e6-5aec-4f22-b520-d5e92246a17d",
        "cursor": {
          "ref": "a8cf420c-5fc0-4996-ba4b-7912dca8fcc0",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "86950fea-46ea-4f78-8f77-8b3824f967c1"
        },
        "item": {
          "id": "9bf6f1e6-5aec-4f22-b520-d5e92246a17d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f6cc5f5c-f492-4008-a008-b17a3860a54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3228351-bc77-4e8b-be10-bf936f1928c7",
        "cursor": {
          "ref": "2b8f5601-e700-4cd4-a731-9ee74cf4d9ac",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "dcf936bd-cb05-4ce1-b61d-253df0e09f1d"
        },
        "item": {
          "id": "f3228351-bc77-4e8b-be10-bf936f1928c7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7a0e1d66-5601-4a75-bc9e-1bc9fed4d331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d986a188-4657-4726-bfa1-6797d62c097e",
        "cursor": {
          "ref": "f9aac05b-4bd0-4332-8b45-3bf8446c0c40",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b449a9d0-d8e7-45bb-957c-e82ec13dfc1e"
        },
        "item": {
          "id": "d986a188-4657-4726-bfa1-6797d62c097e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "29593e89-1216-4ff2-865e-081bf9211fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7872084-4b34-4ee6-9ac8-efc7f06db7b4",
        "cursor": {
          "ref": "16ba9316-6a99-43bb-8dea-e9dd90df314f",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4635cdaf-8690-4d55-a37f-3e4765fc42d1"
        },
        "item": {
          "id": "c7872084-4b34-4ee6-9ac8-efc7f06db7b4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "510ed904-eafb-45dc-a606-8118aaedd4a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378618d3-283a-4155-9ea0-07d20da99e64",
        "cursor": {
          "ref": "80cf44f4-9401-45fa-bf28-b57cd1083a5f",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e4bafed3-c3bf-433d-874d-49dc4cbd75e8"
        },
        "item": {
          "id": "378618d3-283a-4155-9ea0-07d20da99e64",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "187a30c4-6369-4d31-ac2f-445e7273e6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc704de8-7dfc-4cc0-99ca-115a0c52f619",
        "cursor": {
          "ref": "92114ba2-dd9d-42cb-b4e0-452f2826e023",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9cb8c525-3172-4b9e-aa90-e803838c69b6"
        },
        "item": {
          "id": "fc704de8-7dfc-4cc0-99ca-115a0c52f619",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d01ebda9-f720-4930-80a8-d4622da741a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "cb018298-2f1a-4d5d-9e34-c038fda17902",
        "cursor": {
          "ref": "85a22ca9-7d71-488e-8cf0-163864be61e1",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "bc100c54-3104-47f6-b99e-0f6e5e2f1ad5"
        },
        "item": {
          "id": "cb018298-2f1a-4d5d-9e34-c038fda17902",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "40baf531-8f7f-49f4-9b2c-c1d9c4c8f02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "240365ee-d04b-4f56-a07b-534459e88eab",
        "cursor": {
          "ref": "83155b23-6903-4f53-be34-630fbd3597ce",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "74cfdaad-4e13-4730-ad3f-2aec67f76949"
        },
        "item": {
          "id": "240365ee-d04b-4f56-a07b-534459e88eab",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2ff5bf59-1db8-48a3-85a3-f51840dc0e1a",
          "status": "Created",
          "code": 201,
          "responseTime": 668,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "56248209-d38b-4a65-9583-08b635a27dc0",
        "cursor": {
          "ref": "ff585d5b-05f4-42dd-8270-37880109c43e",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "81712c99-5eaf-4ccc-b666-4a6d3f78ed5a"
        },
        "item": {
          "id": "56248209-d38b-4a65-9583-08b635a27dc0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "37219da7-0e21-43fa-9845-6f189f421bc6",
          "status": "Created",
          "code": 201,
          "responseTime": 545,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e5c7c9-4084-49e8-9d46-e9a89fca6e6b",
        "cursor": {
          "ref": "0045a029-980d-4304-a3b9-942a26c709ab",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ea3fd62a-e542-442b-9af3-2e1655ab8edd"
        },
        "item": {
          "id": "a1e5c7c9-4084-49e8-9d46-e9a89fca6e6b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2810eb72-eec8-401e-8ebc-9cedf24af9b6",
          "status": "Created",
          "code": 201,
          "responseTime": 553,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4daad83c-fcfb-4b29-b789-a2b378dfdfa3",
        "cursor": {
          "ref": "7eca655d-29f3-46be-a770-805cd327f647",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fd07cddd-c6d4-413f-b35f-26e557731f1a"
        },
        "item": {
          "id": "4daad83c-fcfb-4b29-b789-a2b378dfdfa3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f511cc71-9b2b-4cd5-9ba5-c32b171c737c",
          "status": "Created",
          "code": 201,
          "responseTime": 530,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd19e66-3c79-478c-900e-d014c20ccb82",
        "cursor": {
          "ref": "e769e498-9ba9-47d2-82e3-a1e8a77e9b96",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "44ef67aa-6d5b-4586-a812-2dbb3a2dbd80"
        },
        "item": {
          "id": "2fd19e66-3c79-478c-900e-d014c20ccb82",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a9ffb59b-5088-4cc8-8091-e16d71653b39",
          "status": "Created",
          "code": 201,
          "responseTime": 512,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead68999-36f9-4aed-8111-87ab4b7b5829",
        "cursor": {
          "ref": "19bdb200-7e71-4895-af73-0098bb0c4cc7",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c994265b-fbfa-44f5-949b-be21384a55a0"
        },
        "item": {
          "id": "ead68999-36f9-4aed-8111-87ab4b7b5829",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3a5e63ab-1a18-41d5-96b7-4d654cb01cad",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "ead68999-36f9-4aed-8111-87ab4b7b5829",
        "cursor": {
          "ref": "19bdb200-7e71-4895-af73-0098bb0c4cc7",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c994265b-fbfa-44f5-949b-be21384a55a0"
        },
        "item": {
          "id": "ead68999-36f9-4aed-8111-87ab4b7b5829",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3a5e63ab-1a18-41d5-96b7-4d654cb01cad",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "8b21dc5c-0d52-44e6-b2a5-cd11988f5d71",
        "cursor": {
          "ref": "3562e284-a3af-42a4-8ff1-7fce167b6248",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6ee28f0b-f523-476e-b03d-0e6234f226c2"
        },
        "item": {
          "id": "8b21dc5c-0d52-44e6-b2a5-cd11988f5d71",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "02cd9f63-1f18-4f6c-ad09-a82baeed6aff",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "1d8d16af-998e-4bf7-bda5-91e6cda6e8d2",
        "cursor": {
          "ref": "d159320a-e246-4590-a62c-b4f65c293bc2",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "845294aa-c881-499a-b5f5-2fe10f96c67e"
        },
        "item": {
          "id": "1d8d16af-998e-4bf7-bda5-91e6cda6e8d2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9f47e72b-2d53-4770-b548-70832ccdd6cc",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e6dbc1ae-3a31-48f9-8c41-8cb5b8dc404a",
        "cursor": {
          "ref": "c2680aae-9916-47cc-b80c-56ccba4c3e86",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a7e9adbb-656c-40d9-ba9a-f2bc7f9fb5af"
        },
        "item": {
          "id": "e6dbc1ae-3a31-48f9-8c41-8cb5b8dc404a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7d605711-f431-4473-9516-a93bc09e6979",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "fe3e007e-88f5-47dd-b4f1-d9c82a4aac4f",
        "cursor": {
          "ref": "eb2a053f-38e3-4411-8aeb-b97dec9d5fd4",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "66ea457a-520d-4527-8404-0ca7d74c79d6"
        },
        "item": {
          "id": "fe3e007e-88f5-47dd-b4f1-d9c82a4aac4f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8db685e9-51b1-4533-9321-b228b07db7ee",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7b2b322a-5ec1-4773-ab82-cfea57deb51c",
        "cursor": {
          "ref": "3b090500-1ac1-4572-b308-bc31fc51add3",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9d83c26d-857d-47bc-b2db-d8fabc5aaf49"
        },
        "item": {
          "id": "7b2b322a-5ec1-4773-ab82-cfea57deb51c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b3d655b9-aa76-4fe5-aa9b-d0edfe52b681",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "74e8e1a4-f1a6-4304-a903-2bd11867e6d2",
        "cursor": {
          "ref": "99f657e4-449a-475e-bd9b-53b404dfe0a6",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "895d74af-fbb6-4aba-a86c-fdf8c9f63abd"
        },
        "item": {
          "id": "74e8e1a4-f1a6-4304-a903-2bd11867e6d2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d673e531-67b3-4a99-8821-f66e1a690d0b",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c5a88170-4855-4a29-a148-453d38ab19b1",
        "cursor": {
          "ref": "6ba0a549-44f9-4f44-b9d1-9d2cbb42dc33",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "644a0723-37a8-46cd-8fd5-86e8aa02e116"
        },
        "item": {
          "id": "c5a88170-4855-4a29-a148-453d38ab19b1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4e65647a-1d14-42c0-83db-2f42d0d06e7c",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "8c142213-b5de-438e-a001-026b8d1439d9",
        "cursor": {
          "ref": "3cbea47b-a2de-4280-afbd-9793371542de",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "089838b3-ead8-42cb-af52-8d39e2edbaeb"
        },
        "item": {
          "id": "8c142213-b5de-438e-a001-026b8d1439d9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "43fc6719-4be0-4675-aac6-36cf39816516",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "53a9697d-f4c1-4fbf-9a62-2b05751b778e",
        "cursor": {
          "ref": "4491e038-d36f-4d24-90e8-ad335442a1eb",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "833cf6d9-bb46-4bf8-95ce-2e283c25ac8e"
        },
        "item": {
          "id": "53a9697d-f4c1-4fbf-9a62-2b05751b778e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b714fd24-f348-403b-bb03-f23fe638bf62",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "d3607d34-3f7c-4267-bc77-3f86e34ef78e",
        "cursor": {
          "ref": "1fddb3f2-48d3-4f0b-9fe2-6752442a26be",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4ac6605d-6f64-45b7-93b9-e7ce3fe30b76"
        },
        "item": {
          "id": "d3607d34-3f7c-4267-bc77-3f86e34ef78e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ecaab0c2-5337-471f-adbd-fce6ba059f51",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7427a53c-2831-49e0-b59d-733b99d9dba6",
        "cursor": {
          "ref": "49e1ff10-3f2e-4566-8880-49ea7f0c0311",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5538c99f-743d-4b9f-bd3c-178732b35c56"
        },
        "item": {
          "id": "7427a53c-2831-49e0-b59d-733b99d9dba6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f98800eb-84ad-4a95-a8c5-4b06cdc65420",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "444be246-8364-4e32-a352-d7e2fe812071",
        "cursor": {
          "ref": "78629014-5b40-424b-9633-3a8fdfc19059",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d987af23-dc07-403e-bb92-f65345bcae71"
        },
        "item": {
          "id": "444be246-8364-4e32-a352-d7e2fe812071",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e074cca4-bf4d-4b06-aa4b-3fe266a8de1a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "34d55858-f666-4874-bca4-410d941b2275",
        "cursor": {
          "ref": "bb2e75d1-8efa-4dd1-bd98-927968dd5c7b",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "83bd1d7f-14f7-4149-90f4-1b5fd913124e"
        },
        "item": {
          "id": "34d55858-f666-4874-bca4-410d941b2275",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9d22b31e-90dd-4d9b-962f-6876ec684e5d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "8ba1b454-234a-4e27-9fd6-5b4bea10eefd",
        "cursor": {
          "ref": "bbe059dc-b5b3-43b3-9ebc-83c1a03f89d7",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7ef3487d-81df-4c5e-b9ae-0faf36fcdbdb"
        },
        "item": {
          "id": "8ba1b454-234a-4e27-9fd6-5b4bea10eefd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "96979bf3-9f6f-4554-b3e6-b7416bbe52dc",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "76da8633-3865-4988-b345-12bc8044ff93",
        "cursor": {
          "ref": "2858f2f7-defd-4807-9a8b-8905350fd254",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "49d64931-9f68-4a0b-8ffe-17aa67428499"
        },
        "item": {
          "id": "76da8633-3865-4988-b345-12bc8044ff93",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d8321c34-0c46-4c9d-86f3-21c089ef39f0",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "af24c686-8c9e-481f-bb24-9a8b4dcd38e2",
        "cursor": {
          "ref": "9df6669c-634d-48aa-9deb-30247ad73da7",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5f3e928e-8bea-4280-a1ab-418afaa1f0ef"
        },
        "item": {
          "id": "af24c686-8c9e-481f-bb24-9a8b4dcd38e2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "daa20d3b-930f-4a61-95c8-52dfc0e2c01b",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "a4a3e802-9b6a-46e8-9d79-e390413e61e9",
        "cursor": {
          "ref": "a5401ebc-76e5-4120-8be0-8779e8a2210b",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "489882fb-970f-4a76-b8dd-0441e1b29fd7"
        },
        "item": {
          "id": "a4a3e802-9b6a-46e8-9d79-e390413e61e9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fd37997a-5f52-4e2a-ac09-487e17af7fdb",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "bc426788-9c5c-4be9-866e-55d2f3957356",
        "cursor": {
          "ref": "9a3a294e-ed64-444d-b2e6-800e2cfb4a29",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a5dd9df4-5c1a-44bd-89dc-10ff545f8966"
        },
        "item": {
          "id": "bc426788-9c5c-4be9-866e-55d2f3957356",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4b7286a8-6d4d-4f56-a1c8-ab0249813506",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "751e9b88-7d40-41a8-a885-950ef00ea599",
        "cursor": {
          "ref": "06d1b9ca-4ffc-4c7d-9232-59116ab2dfb9",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "88d5df5a-4207-4a2b-88ad-e5ddb35180d3"
        },
        "item": {
          "id": "751e9b88-7d40-41a8-a885-950ef00ea599",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c1ce8172-98f7-4b1a-a2d5-1ae44adff641",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c89cc1a6-2f03-466a-8a3c-9090bf6f6fe3",
        "cursor": {
          "ref": "f81b3036-8be6-4df3-a8c7-9537f87fff81",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "931db952-6933-427d-83dc-b56ea5a6da7b"
        },
        "item": {
          "id": "c89cc1a6-2f03-466a-8a3c-9090bf6f6fe3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ccde4855-c32e-4fe6-93f1-925484638bd3",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "793e02fa-9382-4138-b531-fdff0683310e",
        "cursor": {
          "ref": "38cfa8ab-7309-468a-8bcd-0c38735991cd",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3525d32b-4f5c-4607-a811-f1417a1b575e"
        },
        "item": {
          "id": "793e02fa-9382-4138-b531-fdff0683310e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "614e1b32-bed5-4577-a46a-67e65ec733fd",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "d202d1e0-6127-4f60-901f-12307b363c53",
        "cursor": {
          "ref": "137a9ab2-1a1b-466b-a29b-11d3be546433",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e285043b-4493-460f-b6f6-6a7d79bf6613"
        },
        "item": {
          "id": "d202d1e0-6127-4f60-901f-12307b363c53",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "08c41dab-aae6-4df8-889e-613b7928c1ee",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a5e4e93a-80d7-4564-88de-a9fa97c74c54",
        "cursor": {
          "ref": "97a6566e-90bc-498c-ae78-1bbd4298c535",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "145d5cd4-f3ff-47ad-898f-a12ffaa7f558"
        },
        "item": {
          "id": "a5e4e93a-80d7-4564-88de-a9fa97c74c54",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "73f2d519-a836-467c-a0e9-914649d8491b",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "9b4f1480-0c01-4a23-b723-012b7b6e34c2",
        "cursor": {
          "ref": "de53d427-5665-4bd2-b20e-c26fa1f4743b",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "36505395-ab66-46f3-b70e-2eed257b4301"
        },
        "item": {
          "id": "9b4f1480-0c01-4a23-b723-012b7b6e34c2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "da903f88-c1e5-40ba-99fd-0906e9d2bbab",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "84447ae9-43db-467e-8ea1-b1e491c371a4",
        "cursor": {
          "ref": "cc71ebbb-a2aa-4b18-b4c7-33b9f03df013",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f1f4b67e-2fc6-4d63-811b-8838eb3a5af3"
        },
        "item": {
          "id": "84447ae9-43db-467e-8ea1-b1e491c371a4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8b32d919-043d-4f07-86c4-79e79e99de17",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "90c14284-5f39-4c19-8bad-169fb26aa13f",
        "cursor": {
          "ref": "ef592d5b-bc36-4873-8d51-391028c113e2",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "67452c24-a98c-4c1f-8ce0-c8ed96e6c363"
        },
        "item": {
          "id": "90c14284-5f39-4c19-8bad-169fb26aa13f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "067da695-3de4-494a-ab69-5cd09f6bb59f",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "c4a022e4-2a19-424c-a0f8-28d423d8d76b",
        "cursor": {
          "ref": "9c5c3997-4cae-4b10-bd81-7b0e52b90b6d",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7b1c67ba-94d9-48b1-92f8-60f375ae89b1"
        },
        "item": {
          "id": "c4a022e4-2a19-424c-a0f8-28d423d8d76b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f4a0bc76-51de-4cea-97c6-d5e4b960e873",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "dba5ff9d-9fdc-4ea7-bcdd-25b5c39a9a1b",
        "cursor": {
          "ref": "31b1cbdf-d3a1-4b14-b1b2-49ebe7ba5f6f",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "21081081-7e59-4471-ae75-725dd11331b3"
        },
        "item": {
          "id": "dba5ff9d-9fdc-4ea7-bcdd-25b5c39a9a1b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "73b1ce07-0c06-4e44-9354-b360c8f698c4",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "fd26875c-16f4-42e0-a95e-d698a7a25581",
        "cursor": {
          "ref": "4b47a32b-72ae-4872-8006-b43e030e9dda",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "545d4453-cf0a-4da0-af82-fe5cc694a218"
        },
        "item": {
          "id": "fd26875c-16f4-42e0-a95e-d698a7a25581",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "262024dc-b853-43af-8bbb-d6a90b510f8e",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bf8e1dab-a83d-4093-b7cc-3352e2aa2956",
        "cursor": {
          "ref": "f2b9d023-58b7-4fd8-a865-dd80b6020e5a",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f1300107-6645-45e9-923c-73ad42dd17b7"
        },
        "item": {
          "id": "bf8e1dab-a83d-4093-b7cc-3352e2aa2956",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a94edf71-a78b-479a-a8ec-f9c5a101c654",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "3ed01c7a-6eef-42ad-afeb-08210c6f705e",
        "cursor": {
          "ref": "ac7f1f70-3b5e-41b8-adb7-e5190f732080",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c93b8a60-c0a3-47b1-ac94-451ea50546a0"
        },
        "item": {
          "id": "3ed01c7a-6eef-42ad-afeb-08210c6f705e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "be6dbdb4-ea7e-47b0-adb6-d0e33954d06e",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "04b12ae9-ab16-4bbb-b45c-08792d710e2a",
        "cursor": {
          "ref": "51a5075d-30db-4d05-9956-22c5607c1075",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a9e0f5aa-7586-4d19-86dc-12e16b49a644"
        },
        "item": {
          "id": "04b12ae9-ab16-4bbb-b45c-08792d710e2a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9ff85d1a-8d66-447d-8236-5b94202905b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5cbe39-4c8a-46ce-97fa-d1f992f3d4ff",
        "cursor": {
          "ref": "a40f926b-5e98-4779-801f-e010767d9bc6",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0bbbab54-f4cb-446c-b838-249a6ea23f32"
        },
        "item": {
          "id": "ed5cbe39-4c8a-46ce-97fa-d1f992f3d4ff",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "62e58cb4-9316-4192-ac81-be7a95f19a08",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee30cb08-8ddf-4d8b-89d7-7676c68628b6",
        "cursor": {
          "ref": "44509eb2-a024-458c-8e8f-f8d110a90631",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6fb6b0ac-232e-43d0-b7f7-d79f7dc28c20"
        },
        "item": {
          "id": "ee30cb08-8ddf-4d8b-89d7-7676c68628b6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e0f67c0c-109e-4d35-bf42-5becd7e92e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee30cb08-8ddf-4d8b-89d7-7676c68628b6",
        "cursor": {
          "ref": "44509eb2-a024-458c-8e8f-f8d110a90631",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6fb6b0ac-232e-43d0-b7f7-d79f7dc28c20"
        },
        "item": {
          "id": "ee30cb08-8ddf-4d8b-89d7-7676c68628b6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e0f67c0c-109e-4d35-bf42-5becd7e92e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05e11b4-8521-4873-b994-8a4de7d453bf",
        "cursor": {
          "ref": "8ea44958-9a3a-4928-b80c-ae064b75c357",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "929aec19-db33-4dac-aeb1-ec462692eed4"
        },
        "item": {
          "id": "b05e11b4-8521-4873-b994-8a4de7d453bf",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d1c20226-3fbc-4ae9-972c-efd767181661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93029a4e-f478-40d5-b3d0-af4078e47f61",
        "cursor": {
          "ref": "a667ab9b-7c73-4ca4-bb02-fe1030a52bff",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f015f3ca-e2f3-4320-b81b-fb225684be0b"
        },
        "item": {
          "id": "93029a4e-f478-40d5-b3d0-af4078e47f61",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fa67842c-5d8c-4044-a33a-6d899b356e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1b10db-2cb3-407d-a1b9-2c11e6b15a5c",
        "cursor": {
          "ref": "6b120fcc-ed40-4955-919b-48199a6064e9",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3ea964f4-7d7b-4193-8478-a1bb9bbe5085"
        },
        "item": {
          "id": "0c1b10db-2cb3-407d-a1b9-2c11e6b15a5c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0d3c3684-6f26-4ea1-b314-415d711bfd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1866e8b4-27a3-4304-917d-160d45b8315d",
        "cursor": {
          "ref": "8d2e81a7-156d-4d5d-ac7c-9b562115b92f",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e71f099d-154c-4bfc-832a-cf1f6eec6780"
        },
        "item": {
          "id": "1866e8b4-27a3-4304-917d-160d45b8315d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c118f4fa-be32-4497-b66a-4c45a3fbab8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dfb4518-33b9-4274-9c0a-a1d70a3496b4",
        "cursor": {
          "ref": "4f558e2c-aa18-4f82-9f2d-20ffdf6210f6",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3e3c5efb-6333-4586-84c4-1d1ffe0eebb7"
        },
        "item": {
          "id": "1dfb4518-33b9-4274-9c0a-a1d70a3496b4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1d5098dc-671e-407a-8669-a26ea40cf3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e89cf9-0891-411e-a442-c88f12c82d48",
        "cursor": {
          "ref": "e0b2ae0b-bdb3-47da-834e-f04841a679f2",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bde4658a-f2f9-4d82-bf8e-00b17e57a6c3"
        },
        "item": {
          "id": "52e89cf9-0891-411e-a442-c88f12c82d48",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "31938d39-c7e6-43a5-8756-07653d236833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504bb740-d61e-4d16-b210-de317cb8467e",
        "cursor": {
          "ref": "d2eb02e7-8a34-44e2-a3be-3d4f51057dc6",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5c4d28db-5435-45f4-816a-8b6025fc1c12"
        },
        "item": {
          "id": "504bb740-d61e-4d16-b210-de317cb8467e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1804b0bc-38bc-478c-8037-c198b3befa05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42978cd0-dc88-4fa9-be1d-fd3ea051c39c",
        "cursor": {
          "ref": "54a03c69-d6b7-411c-afc8-97cba0038300",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ddefd129-40c0-4761-8354-98b4935ab35c"
        },
        "item": {
          "id": "42978cd0-dc88-4fa9-be1d-fd3ea051c39c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dfd4fb85-3b0a-4958-b2c6-86b0460ef3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3c8f1f-04ef-446e-a299-f5561c44d91b",
        "cursor": {
          "ref": "7dd762ce-71e6-4e68-a077-2d1ce89f2a03",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "798f3f10-132c-43c3-af29-6cda6a4eb07f"
        },
        "item": {
          "id": "5f3c8f1f-04ef-446e-a299-f5561c44d91b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "268221c2-1fef-4907-b0af-d0fdb8668b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ad51ac-9b18-426b-bd37-875f1b314700",
        "cursor": {
          "ref": "26efb675-e67a-4dd2-802f-ae484d102529",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a73a74f1-418d-4314-b447-856b46336a9f"
        },
        "item": {
          "id": "19ad51ac-9b18-426b-bd37-875f1b314700",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fbc45f36-6b50-454e-88bc-871084f49d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4a2f58-a036-481a-95c9-5233edd83ec3",
        "cursor": {
          "ref": "de5beeb5-cbbb-4923-93fb-a84b1576ed93",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f19c0f87-33a6-4419-9a5b-c421a012ee11"
        },
        "item": {
          "id": "7d4a2f58-a036-481a-95c9-5233edd83ec3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "eb25be67-65d3-4e18-af75-944d34c68351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbab0a7a-7780-4880-93dc-3111aa9a6dcb",
        "cursor": {
          "ref": "fd9fcfb7-c53d-435b-b054-49b89426a91a",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9e5888d6-2d9e-46af-8bc0-e87b4e6db237"
        },
        "item": {
          "id": "cbab0a7a-7780-4880-93dc-3111aa9a6dcb",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e20413d4-cbfd-47f2-9cf4-7b8dc7503838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b470d361-4ffb-49bf-9e1f-da4c89ef9755",
        "cursor": {
          "ref": "7b72f9de-cc9c-4b68-afcc-b52c66acf989",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "76f99148-7424-48b8-b76f-d7aa3bfa0079"
        },
        "item": {
          "id": "b470d361-4ffb-49bf-9e1f-da4c89ef9755",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c0c9f6f0-837e-420f-8eca-2263d997f3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343eb080-af59-4cf9-84c5-c617f1e6979a",
        "cursor": {
          "ref": "193a6f8b-ff9a-409a-9a34-810ad5f58eee",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d7905482-e230-4122-b5c0-416ad3e7549a"
        },
        "item": {
          "id": "343eb080-af59-4cf9-84c5-c617f1e6979a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9e188b2d-4bbf-42ff-a2e2-01c55a385042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ebf4e3-5413-4c47-bf80-07c70c38ac95",
        "cursor": {
          "ref": "f396400d-1dec-4498-91da-b782471b5cc7",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8a858b8e-07f9-483b-9d61-1f424af70414"
        },
        "item": {
          "id": "40ebf4e3-5413-4c47-bf80-07c70c38ac95",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "569a0d44-1dce-4bd9-a3dc-0cefc1394155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986bb914-0c89-4711-a6b6-5889627a9adf",
        "cursor": {
          "ref": "69dea41a-96a1-4672-aab6-98a32e97c19b",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2332951f-2019-472e-ae9d-1b2dac20e987"
        },
        "item": {
          "id": "986bb914-0c89-4711-a6b6-5889627a9adf",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0046a13f-4775-4d67-802f-773420bcaac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c9734e-2268-495c-9d7e-25d32572d102",
        "cursor": {
          "ref": "7793b6f1-d009-4280-8890-73f2325b2b9f",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3aa59f8d-58bd-40db-994e-54c9d3f57790"
        },
        "item": {
          "id": "68c9734e-2268-495c-9d7e-25d32572d102",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "0e7f35fe-e070-43a5-835e-4c41a9888c5f",
          "status": "OK",
          "code": 200,
          "responseTime": 563,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "cd9fc309-e8c0-4a32-b4ef-6c90ccdb25af",
        "cursor": {
          "ref": "071dadc6-ae5d-4636-ad6d-8dfa7ca42156",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9e06512f-4d61-46e6-a074-a368236c0515"
        },
        "item": {
          "id": "cd9fc309-e8c0-4a32-b4ef-6c90ccdb25af",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1a677bba-4a06-484d-8843-9073f0627338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0dc1ed-eb31-4b2a-9def-c191ea75e1d8",
        "cursor": {
          "ref": "b5446ede-ae2b-43ab-90f5-7076344d7fb6",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "792b7963-789f-4109-9ac6-47f587a73794"
        },
        "item": {
          "id": "1a0dc1ed-eb31-4b2a-9def-c191ea75e1d8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "479bcece-ce57-4d20-a4e7-34153875f436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c26725d-7944-4d69-a7de-dc55f73b98a1",
        "cursor": {
          "ref": "401cdb6e-c99c-4aeb-ab6d-8dc04f84e096",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ffa3dc0a-398c-4d57-bdaa-5e9c4478a67e"
        },
        "item": {
          "id": "2c26725d-7944-4d69-a7de-dc55f73b98a1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0598ff74-815d-4564-9210-e12c18c542dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88d2295-e443-4cd0-8d82-56977af7b216",
        "cursor": {
          "ref": "fb2af62b-641d-46d3-bf0a-75f37d06ef98",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5354043c-801e-4400-89b1-8ab1db73e59b"
        },
        "item": {
          "id": "a88d2295-e443-4cd0-8d82-56977af7b216",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "171bbfec-755a-421a-bf73-e06b4ba7fb45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b24ed8-f58b-4ed5-bddf-6c76f0d6bf2d",
        "cursor": {
          "ref": "ec12961e-b78b-4cc7-b115-0289cdbd9db6",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "68e696b8-4c8a-4f3a-bdeb-87f28ccf02e2"
        },
        "item": {
          "id": "28b24ed8-f58b-4ed5-bddf-6c76f0d6bf2d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f7ac437b-aff1-4261-88f1-9f42c873b7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f5c1c2-5e69-43fa-9ffc-f55d9065c107",
        "cursor": {
          "ref": "93e6e61b-5245-4cf7-a468-a79a7d96c0bb",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7de5e381-cda2-4b66-98d3-deb5c5be3463"
        },
        "item": {
          "id": "52f5c1c2-5e69-43fa-9ffc-f55d9065c107",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6aa7360b-c544-492f-a2bc-d20890b7158d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5d0535-37a7-4e7e-835d-df2ac1dbb265",
        "cursor": {
          "ref": "6389584c-950f-494c-9940-a214754fc4a4",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bc6cbb46-c170-4722-ba68-9fafbbe7bbf1"
        },
        "item": {
          "id": "da5d0535-37a7-4e7e-835d-df2ac1dbb265",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "18c885a7-f7ef-4290-814b-12b581a183ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94efe3dc-9422-4948-ad19-1844ab79d92e",
        "cursor": {
          "ref": "22805f35-437f-4e8c-b5af-fdf5ae86e56c",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cf32454c-a86b-4829-b30d-a34fd0dbdac8"
        },
        "item": {
          "id": "94efe3dc-9422-4948-ad19-1844ab79d92e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f52911a8-f356-4a10-b2cf-15e3e5c1f8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2052326-222f-4f31-b849-2b94bac3dc1f",
        "cursor": {
          "ref": "6ca2634b-13a6-4a95-9e1b-bd68befe3986",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "03e25572-311b-44c8-9442-358d82fbf332"
        },
        "item": {
          "id": "f2052326-222f-4f31-b849-2b94bac3dc1f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d76e5b97-d5e4-4553-9632-81e3bf493aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d75eb2-7cc3-4282-aa31-163863c3f887",
        "cursor": {
          "ref": "6f38489d-ffee-4c84-9282-cb2faad8b675",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "14ef2699-5b1e-4c0d-a550-b192a068bc14"
        },
        "item": {
          "id": "95d75eb2-7cc3-4282-aa31-163863c3f887",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1f930e09-77bd-46da-8ad5-9a137ad17ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592f6302-6f76-441f-8b5d-7254add719e9",
        "cursor": {
          "ref": "e70f049e-df01-4ea5-9289-6b276cedaf5c",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "eafa1b61-7c39-4be4-99b7-ddd212db8d15"
        },
        "item": {
          "id": "592f6302-6f76-441f-8b5d-7254add719e9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "11f52ffc-976f-45c9-bf3f-d7ef96196c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2cbdc8-db67-433c-a731-717b5511e7fb",
        "cursor": {
          "ref": "b7caa5fe-090d-484c-beaa-818ee785d1ee",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "409c8ee5-53c0-47b1-baf6-2d0e523424f5"
        },
        "item": {
          "id": "0f2cbdc8-db67-433c-a731-717b5511e7fb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bfef2d1e-dd73-495b-90a9-24ec64ff5d71",
          "status": "OK",
          "code": 200,
          "responseTime": 268,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "15b50480-37a2-4a6e-bce2-68c8b42848c5",
        "cursor": {
          "ref": "41c3efe0-795a-49df-b06d-99a9f696293f",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3a1cadf5-d40b-4b15-b5ea-5d8dd7dfe8b6"
        },
        "item": {
          "id": "15b50480-37a2-4a6e-bce2-68c8b42848c5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4e340868-8b94-4d72-b5a8-559554e91da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11ddff7-943f-40e4-9375-f64759861135",
        "cursor": {
          "ref": "b9bf8cb4-7fef-41ad-b390-aece2b06a9e3",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "67d3bc15-6207-49fa-91d3-0fff60edac47"
        },
        "item": {
          "id": "d11ddff7-943f-40e4-9375-f64759861135",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7924397c-5b8e-4a30-a7df-bf53ec8e951c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148b3a08-ecc9-4e1f-99c0-004d3ac4e6ae",
        "cursor": {
          "ref": "3aa66738-266e-4c6b-b242-3870fd4b6b03",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7619b023-b0f6-4fd6-ba13-66109f371357"
        },
        "item": {
          "id": "148b3a08-ecc9-4e1f-99c0-004d3ac4e6ae",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e139595f-d68d-4017-b041-a46715ff02f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb24e57-bf2d-479e-bdcb-5ea09c08ebe8",
        "cursor": {
          "ref": "359ea0f5-bbf3-4d35-88e7-7d7029916028",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "44ea467a-08b3-4896-a5b1-787b6df753a7"
        },
        "item": {
          "id": "9fb24e57-bf2d-479e-bdcb-5ea09c08ebe8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1e871e54-99a5-4634-b0e9-ce174c4f1886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb73dc6-3727-40df-bad6-37362947115b",
        "cursor": {
          "ref": "00a9003a-b8c2-4e50-9dfc-0ae89b90751e",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cd5b7f0b-9a71-465b-bf4e-194cfcf3e5b3"
        },
        "item": {
          "id": "0bb73dc6-3727-40df-bad6-37362947115b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0a532ad5-1cca-4ced-8197-154395e6b065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b778984-3b46-49cb-860b-d2aec2911613",
        "cursor": {
          "ref": "17741dce-e4d9-4008-a483-200ed8047fc0",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a9cb2359-20b6-46c8-862f-9fd1ce91ea38"
        },
        "item": {
          "id": "6b778984-3b46-49cb-860b-d2aec2911613",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f5fdead3-1f0a-4500-a2f8-48948e8fa742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ff54a8-93d5-46c2-a89f-29fdabc4b213",
        "cursor": {
          "ref": "5c49cdc7-6048-48f6-b4a4-cd89d15d3e15",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5eeb642c-e72c-40db-bd70-3d46280a47b7"
        },
        "item": {
          "id": "77ff54a8-93d5-46c2-a89f-29fdabc4b213",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "07de6167-0e70-4f13-b746-14778928540e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c751d8d-152a-4624-a090-6bf9e042f8f5",
        "cursor": {
          "ref": "061ceba2-09a5-41e6-9a1e-562b9d9f794b",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a59cdb9b-4156-4d0c-a1e6-360a43669532"
        },
        "item": {
          "id": "3c751d8d-152a-4624-a090-6bf9e042f8f5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f90a71cd-605f-4f53-abae-54f48cd35e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ae13f2-389c-43ac-ae04-fafbfcb4bf7c",
        "cursor": {
          "ref": "073fe760-371b-4e12-a220-3847425759e7",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "92c3832e-af1d-4faa-bbff-421b4f1067ec"
        },
        "item": {
          "id": "55ae13f2-389c-43ac-ae04-fafbfcb4bf7c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2064f582-a4f5-46b6-8969-cb9123c98faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5ad4f6-77e5-4d3f-a3ea-e1c8306cb01b",
        "cursor": {
          "ref": "43e86b96-dcab-4c47-9bb9-f432b9036c92",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b66cdaed-80ef-4dfd-b897-e5d4513f17b0"
        },
        "item": {
          "id": "ae5ad4f6-77e5-4d3f-a3ea-e1c8306cb01b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ad56bea6-424a-45ae-b94d-95e733b830e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c1f2f4-02c9-4dd7-8bde-a817a85f0e68",
        "cursor": {
          "ref": "131ecc09-4ab9-4c24-8378-0fbce88015b6",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "969fc545-4e3f-4610-ab2f-8384c42c54fe"
        },
        "item": {
          "id": "90c1f2f4-02c9-4dd7-8bde-a817a85f0e68",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b78c816e-e471-4412-969d-4ab55b191831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b27f26-4be9-4bbb-8e3d-b2461e9db017",
        "cursor": {
          "ref": "3f8f2109-f8aa-4dae-8bd2-1be3cf606918",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1f707ce0-e230-4a5c-bda1-adc62be329d1"
        },
        "item": {
          "id": "e6b27f26-4be9-4bbb-8e3d-b2461e9db017",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "87d682be-1d8c-4b56-b7e6-2b4dadea6561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9902e66e-a0f0-4586-821d-ea4951786f29",
        "cursor": {
          "ref": "67723af6-556e-4206-a25f-44aa838829fe",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "49b033df-eb10-4f39-9274-da810ef94158"
        },
        "item": {
          "id": "9902e66e-a0f0-4586-821d-ea4951786f29",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9aef0e56-1fcf-455e-8f78-618341f06c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaaca5d7-0922-4405-a8c3-9dec27ac53ba",
        "cursor": {
          "ref": "6d164379-f20e-497a-9595-c4b7a9f62739",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0b5cbd65-fa0b-4ef5-b4ae-16d0e36380ec"
        },
        "item": {
          "id": "eaaca5d7-0922-4405-a8c3-9dec27ac53ba",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1911a435-872e-4f25-8729-4889b3311945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92cc53b8-c875-4724-9a51-336f2f51482a",
        "cursor": {
          "ref": "607be5ce-8baa-405b-b980-87f38b74ca95",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "312036ba-97d2-47ba-88f0-f48f0b95a94e"
        },
        "item": {
          "id": "92cc53b8-c875-4724-9a51-336f2f51482a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d20c0d21-9603-447b-b128-ff8f57667a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc64738c-39b6-4071-b95a-9b97b01516c9",
        "cursor": {
          "ref": "3da0283a-ee37-497d-a748-33e1c6bd45b7",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7fc93594-8188-48a1-a84a-fb81ee2bc04d"
        },
        "item": {
          "id": "bc64738c-39b6-4071-b95a-9b97b01516c9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "793d2b1f-bf81-4f93-bb87-2d74443e0328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdb922f-1da6-4830-91b8-ef063b58e773",
        "cursor": {
          "ref": "130b29c2-8883-4bb1-a13b-523bedab3d64",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "642da34b-1208-464d-9958-bfbdbe8edf1b"
        },
        "item": {
          "id": "5fdb922f-1da6-4830-91b8-ef063b58e773",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d7a9f27d-b095-4b18-b906-12dc5a7a84de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4945383d-0911-430a-b7a0-1c68866c94d8",
        "cursor": {
          "ref": "64d13c16-a9e6-42dd-be73-a90b7f5003e3",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e7e40f65-d0ef-4416-afee-98ca259e190b"
        },
        "item": {
          "id": "4945383d-0911-430a-b7a0-1c68866c94d8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "287876dc-1d4e-4dc8-8180-21aea6884dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd44c9ab-b6af-4c9c-8ae4-9d69397967ce",
        "cursor": {
          "ref": "ab7f8d2d-3f7d-4992-9d85-aba0bf7c08a5",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3dc9baa3-eff2-451b-a299-1a7812e91ef4"
        },
        "item": {
          "id": "fd44c9ab-b6af-4c9c-8ae4-9d69397967ce",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "04103405-245c-4016-883f-3bed10eba3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834a9660-b5ad-4c4c-8c34-da95f739e885",
        "cursor": {
          "ref": "1d52ad72-f50a-4121-a159-b71d41d22325",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d2c52033-5467-4d21-998e-e31ad6772009"
        },
        "item": {
          "id": "834a9660-b5ad-4c4c-8c34-da95f739e885",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5641c404-5e44-4f1f-9ab8-5817c5b57fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 571,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badcaddf-280e-419e-b18c-0c6b05e8bab9",
        "cursor": {
          "ref": "2f4f3a93-81c5-4c3e-a32c-9baa218b7f92",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "00d905f1-7413-4b61-8789-f2d34fe0a71e"
        },
        "item": {
          "id": "badcaddf-280e-419e-b18c-0c6b05e8bab9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0c00ca7a-13ab-4433-8b62-d39de25aeeae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09790af2-d3fe-471e-9600-ee42058cbb9d",
        "cursor": {
          "ref": "2d0a72f8-591d-4d4a-8b1d-2b65e551bfbe",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "46db6fed-6e9e-4353-bb9d-b6d306efaab6"
        },
        "item": {
          "id": "09790af2-d3fe-471e-9600-ee42058cbb9d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b1699ced-9b77-4f17-b96b-64bec1e754e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6272cc-bf80-42a7-9ab8-d218a82343f5",
        "cursor": {
          "ref": "4c9adf91-d2e4-4a15-848a-9e572bce20cb",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7e14ad7f-c944-4ce8-ae20-7e725c0c195b"
        },
        "item": {
          "id": "ec6272cc-bf80-42a7-9ab8-d218a82343f5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6304cf2f-8d8e-40a2-b9a1-41779d6aaaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df15d0b-94f2-4f09-ac5e-62dc72fcfd7f",
        "cursor": {
          "ref": "9b4e64b7-1b0f-42b0-a266-642a572bd7d9",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e28f8306-cd1a-4414-bdff-fe6fd2d92ac3"
        },
        "item": {
          "id": "3df15d0b-94f2-4f09-ac5e-62dc72fcfd7f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8bf25ccd-2cdc-4f91-a940-6cc32f20ea14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69504422-c569-4ef1-9b77-eafbcf2441e6",
        "cursor": {
          "ref": "c9baf869-a325-461d-8637-f09ffd27256c",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4d019b86-cb43-4b39-8842-67eb644619b7"
        },
        "item": {
          "id": "69504422-c569-4ef1-9b77-eafbcf2441e6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e7253f6d-a1b9-4556-8b45-05a056a08b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bf8502-c709-4416-b366-c512c539855a",
        "cursor": {
          "ref": "f9d158c8-51da-4d6b-9fb5-110fdad4d1c8",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "67682d64-fe1d-4801-9b87-afd0a8f7a5cb"
        },
        "item": {
          "id": "94bf8502-c709-4416-b366-c512c539855a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "74404fdd-3a99-4b61-a7e1-6f44b061519f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd9bf31-428b-44f2-a950-b39938e443a9",
        "cursor": {
          "ref": "2a0dbd41-121d-45f3-8684-6ca724ccdceb",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "13087276-a8e2-4da7-ab20-a026d527dbdc"
        },
        "item": {
          "id": "6fd9bf31-428b-44f2-a950-b39938e443a9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c856d297-89a6-4a96-8a4a-e92cc63f8fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d856514-5a9f-4e30-82a0-e867d991229a",
        "cursor": {
          "ref": "2ba98389-3875-4abc-af6d-e864365a1f3e",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e9fb46c8-8916-4276-8806-4a4d9588be70"
        },
        "item": {
          "id": "6d856514-5a9f-4e30-82a0-e867d991229a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c9c39fda-a121-4e2b-b0b1-42861ae85ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 326,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd580405-f38e-42f0-999a-74dff51fe679",
        "cursor": {
          "ref": "067d5c7a-e196-4c11-adb2-46166b22eb39",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "79247286-1bec-4ded-963b-0007f1868f6e"
        },
        "item": {
          "id": "bd580405-f38e-42f0-999a-74dff51fe679",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fb5157b3-07f6-4ea9-9222-91e05c41e1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10cf4b2-c21e-446e-b68a-b03931b39475",
        "cursor": {
          "ref": "fb97ec1f-7c0f-437d-834c-698c322d6dbd",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4a5e13b9-e8eb-4dd9-a165-2f8d1b0af9fa"
        },
        "item": {
          "id": "e10cf4b2-c21e-446e-b68a-b03931b39475",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bdd4ac17-9424-48fd-ac1d-fcb4d4af6b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884f7892-2865-44bd-8a35-7b45e103e87a",
        "cursor": {
          "ref": "6c36ff7b-0677-48b2-a556-967568467428",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c8b5f0c4-ab1d-4afa-bafc-0689ec83baa7"
        },
        "item": {
          "id": "884f7892-2865-44bd-8a35-7b45e103e87a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1a61796e-5935-4c6c-8a72-414222757d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9a50c3-83c3-40f2-a90d-bbf376dafc32",
        "cursor": {
          "ref": "423248cf-3016-42f0-bdef-d9a0abf03660",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a8aaaf26-ffe4-4b9c-8eaa-585f78a555ef"
        },
        "item": {
          "id": "3c9a50c3-83c3-40f2-a90d-bbf376dafc32",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a9bce0da-7fa6-4cb5-b31c-c53041568205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa418fb-1d6b-47bd-abc8-29c5134176c0",
        "cursor": {
          "ref": "77bfed9f-8861-4e5a-baae-b6acf12cbd47",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "47e36d9c-5cb6-4222-a199-f694be4f70b4"
        },
        "item": {
          "id": "6aa418fb-1d6b-47bd-abc8-29c5134176c0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a2cd3c55-a7cd-4595-a27e-71128a62ae19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f1fdc2-69d3-4a41-9d57-658721f953ba",
        "cursor": {
          "ref": "e1d0a1ba-bcf2-4309-9eca-2ac303ca602d",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0a23b2cb-51af-4230-a718-1d41bf17426a"
        },
        "item": {
          "id": "47f1fdc2-69d3-4a41-9d57-658721f953ba",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d60204ca-4952-49d4-86f8-a7442a2fde5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25ebb9f-7fbb-43a9-93df-2a404daf13ee",
        "cursor": {
          "ref": "2877d89d-8538-4f53-ae40-451808da8f47",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "33baee80-e878-47d4-8932-ef27e1b94f18"
        },
        "item": {
          "id": "d25ebb9f-7fbb-43a9-93df-2a404daf13ee",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1a8592c1-a90d-4be9-b4b3-b8353f40a387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c3b0fc-9724-4703-87cc-9d70a5204368",
        "cursor": {
          "ref": "b164e07f-8777-4473-9f4d-9caa2b426053",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ddf841c4-d806-4cff-8784-2512d3eadef1"
        },
        "item": {
          "id": "78c3b0fc-9724-4703-87cc-9d70a5204368",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "13c20e3c-dca8-482c-b5c1-5244fef070e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960e04d9-3d48-4617-948c-98c463797851",
        "cursor": {
          "ref": "6326ad8d-ccd2-482c-ac72-3e4f8dc11745",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ca3d6bb5-1650-4ec7-932e-2ebd7ac22ee4"
        },
        "item": {
          "id": "960e04d9-3d48-4617-948c-98c463797851",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f466fb6b-5c09-4ae5-9d62-2ea157c6e025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a55b50-8022-46ae-a3ed-c88e89ff6f31",
        "cursor": {
          "ref": "ca87dd54-6ab2-4116-a2b3-4ee6a1be97f0",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e24da4a0-0e61-45c4-ab3a-924dfd2ebcc1"
        },
        "item": {
          "id": "c0a55b50-8022-46ae-a3ed-c88e89ff6f31",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c8b7727c-a1ab-462c-9c43-ac11f7a13b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26597253-6d3b-45d3-af4f-c86ae6e544ee",
        "cursor": {
          "ref": "b88ab0b4-29ce-4c72-aeeb-76b5a892bf93",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9dcd0a67-156f-438d-bd8b-48ee8dc2af8a"
        },
        "item": {
          "id": "26597253-6d3b-45d3-af4f-c86ae6e544ee",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4aed3cc8-3286-4807-bd6c-4b36bf7f3f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856830e8-08ed-4d3f-9fbb-c2e54196ac6f",
        "cursor": {
          "ref": "2508e698-98ee-4bfa-8052-5c9ae22358ea",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c499af82-aa17-4767-9cbe-e9d445d13075"
        },
        "item": {
          "id": "856830e8-08ed-4d3f-9fbb-c2e54196ac6f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1614d4ef-a472-4a70-bae5-413c64600071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4c4c1e-a356-4a0e-9727-a2edb8100f63",
        "cursor": {
          "ref": "cad2b60a-213a-449f-85b5-66ee88959013",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8468356e-f5e3-4feb-bf85-21c0e9660efb"
        },
        "item": {
          "id": "be4c4c1e-a356-4a0e-9727-a2edb8100f63",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5153d340-ca4e-43fe-9fc6-d822770d2fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0eae68f-c695-4ddc-840c-c1efd974abaa",
        "cursor": {
          "ref": "60346e37-edd9-4100-bad2-3563ff778672",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "43d1eb00-fa66-4ea5-aac3-644defa86f66"
        },
        "item": {
          "id": "e0eae68f-c695-4ddc-840c-c1efd974abaa",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "09fcf93b-cc96-490b-93da-f6e2533ce0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6f4308-dce2-47a3-9e6f-7602a1ee18e9",
        "cursor": {
          "ref": "5eb65f92-e1aa-44a4-a393-272ac047d03c",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "64ea6374-c424-45fc-8628-a3d6d2234630"
        },
        "item": {
          "id": "dd6f4308-dce2-47a3-9e6f-7602a1ee18e9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "18a84801-ea37-4a83-879b-9293b8fe03e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29836d6-a064-412e-a943-2a88aa23ef32",
        "cursor": {
          "ref": "d88e6728-0cfb-4f0b-bb85-77fbfe40fe6f",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cefe29d5-09a2-4112-88b5-190a0fde4741"
        },
        "item": {
          "id": "a29836d6-a064-412e-a943-2a88aa23ef32",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "525dc236-017d-47d4-95ab-9df209c5db25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22637fe-e0a9-4c06-9769-321e8fab3189",
        "cursor": {
          "ref": "87405b54-6b84-4737-a232-92459b212da0",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ef7da56d-b07d-4823-bf4e-9bb200b0d705"
        },
        "item": {
          "id": "d22637fe-e0a9-4c06-9769-321e8fab3189",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cfce5a4f-c412-4ef1-a159-b4d12c7fc48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6c6424-cc1f-4259-8eba-8c8c53904390",
        "cursor": {
          "ref": "e29673d6-0dbe-47e8-90da-298c29bb59e8",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "51a2c7f1-98b6-4118-ba51-34dd65907256"
        },
        "item": {
          "id": "8f6c6424-cc1f-4259-8eba-8c8c53904390",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8c264e66-2c58-458f-9dd9-d4f8659ac59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d4fc5c-7784-4be8-8f80-2ee222d8a222",
        "cursor": {
          "ref": "872f664b-bea8-4846-a785-3a12fd6c34a6",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c47a66dd-0924-44d5-9c43-1f93fc477b66"
        },
        "item": {
          "id": "77d4fc5c-7784-4be8-8f80-2ee222d8a222",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "68ccfe38-ddbc-4178-b5df-f2c4aed7d427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ffa438-d6a1-4969-ba9a-85c47df91e2b",
        "cursor": {
          "ref": "ed168b09-5c03-4c2b-a166-8d89cb9d0610",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e7768d61-6c01-453a-8cb6-5297ff712e0a"
        },
        "item": {
          "id": "55ffa438-d6a1-4969-ba9a-85c47df91e2b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9424e6b1-b823-417e-8c0b-18075f4dbdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c374734c-230e-4d36-ba7b-c1748d4b05ee",
        "cursor": {
          "ref": "b7b86a43-4689-472d-b5e4-fd9b6d1f537f",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cff4c8b4-dd9c-4336-a07f-2229118c4a01"
        },
        "item": {
          "id": "c374734c-230e-4d36-ba7b-c1748d4b05ee",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bf7a6e7c-fcd5-41ba-aba1-8caec002e3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601c6e8d-85d4-4f0f-86fc-d62633071119",
        "cursor": {
          "ref": "a8a9f5ba-8514-48f2-877b-dbb42280dffb",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "77b4b2e6-57bf-4c9a-8dce-2cad6df9de67"
        },
        "item": {
          "id": "601c6e8d-85d4-4f0f-86fc-d62633071119",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "da261ed3-e7ee-45bf-b041-0a9e848d9cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766a8882-2a4a-4003-8d40-2182084498c3",
        "cursor": {
          "ref": "a8484089-6f5b-4f1b-8bb1-16f1ae9e7005",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e63a28a8-4ef4-45c6-b70c-586f892f8b09"
        },
        "item": {
          "id": "766a8882-2a4a-4003-8d40-2182084498c3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3c7f918a-d03a-48e5-b435-1b43c1cff17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949163e9-74d1-4f83-a335-ed4b4fda7bc5",
        "cursor": {
          "ref": "a80cbd2a-43a7-477e-be36-220061543630",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f2d4022d-c5a7-4c55-9e89-7eaf96966a44"
        },
        "item": {
          "id": "949163e9-74d1-4f83-a335-ed4b4fda7bc5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "35618dd3-8d39-46f5-b698-498a9cd0343f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea066fcc-b81e-4f55-8b01-cf336fa0764d",
        "cursor": {
          "ref": "cd87d95b-e05a-4021-b588-173e86af1079",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6a43c08b-eb6f-4f5b-923d-fe6dd26ff488"
        },
        "item": {
          "id": "ea066fcc-b81e-4f55-8b01-cf336fa0764d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c7dfbaea-6391-405c-ae3f-893d1faeb184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00631ef-068b-491f-812e-7a67703d3f97",
        "cursor": {
          "ref": "fb477632-3fef-4dff-bca7-15b093e5ca14",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "081b188e-30ff-4ccd-874c-329a2f2620be"
        },
        "item": {
          "id": "b00631ef-068b-491f-812e-7a67703d3f97",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "50adbf43-6902-45ed-b5e5-8803088fe88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e9f480-9b95-4004-ba3b-6e14f1b88ff9",
        "cursor": {
          "ref": "b73e0be0-cde0-4a90-85e9-533b519b687f",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "27426f8c-41f1-4ce9-8a09-34cf75ff590f"
        },
        "item": {
          "id": "a7e9f480-9b95-4004-ba3b-6e14f1b88ff9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "db9e165d-d454-425f-9a0b-cae933f61f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4ba6ea-5c8c-4040-9d1e-51dfe2321713",
        "cursor": {
          "ref": "b381de41-30ca-4bef-b71c-dddb566c6978",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ea31601e-32db-466f-85e9-770b713090ed"
        },
        "item": {
          "id": "8a4ba6ea-5c8c-4040-9d1e-51dfe2321713",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1ba8b1c4-4a41-4ef2-90d4-03b3c4f8e2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee740243-38d3-4645-bb20-e4b02a58ab7f",
        "cursor": {
          "ref": "11f38f16-a7ac-4f48-a1ff-7e3710fe9410",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b6d9b917-0af6-41c8-9d51-63bf21265c40"
        },
        "item": {
          "id": "ee740243-38d3-4645-bb20-e4b02a58ab7f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "69269526-a60a-4b3f-98c2-777772b88db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae230de-d03f-42fd-a2ce-34c1c0a1cdf0",
        "cursor": {
          "ref": "686fb5a9-90de-45f0-b421-731593e360ae",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "30fbcee4-31df-4bb3-8032-9f5da20729f0"
        },
        "item": {
          "id": "aae230de-d03f-42fd-a2ce-34c1c0a1cdf0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "94e31591-bc9c-49ef-bf30-ce6953c22790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b2c70d-c49b-4c31-bf02-3bc40ed2ea6a",
        "cursor": {
          "ref": "39261dd5-0798-4b27-bc8f-4129c1e7d493",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bf118b45-4249-44fb-8d9a-28c932dea6f1"
        },
        "item": {
          "id": "28b2c70d-c49b-4c31-bf02-3bc40ed2ea6a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "23217a63-67df-488d-a5f5-a695869666b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7611ec97-5d14-49d4-826a-df62a98f19a0",
        "cursor": {
          "ref": "6fbc166a-a8e5-43d8-b2f5-79997a6cf053",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "de0448db-5722-4e94-8311-9c7108e99a65"
        },
        "item": {
          "id": "7611ec97-5d14-49d4-826a-df62a98f19a0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0c0d7662-18c8-49c1-91da-15c09f34ba6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bda45a-8822-46bb-8e79-af851ce0fcce",
        "cursor": {
          "ref": "993dd9bb-6b19-4bcb-956f-79bac0cad03e",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0a179072-2576-41ec-9a8d-4bb6f57dee89"
        },
        "item": {
          "id": "82bda45a-8822-46bb-8e79-af851ce0fcce",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8da0a486-8d43-4793-a512-7c70b8fd8638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7069b0fd-0a77-4528-87ba-039fcb24458d",
        "cursor": {
          "ref": "2f52ab70-0167-47b6-bdc4-07d2236b3657",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "02775d0e-163f-4ade-85f8-1efccd2616cf"
        },
        "item": {
          "id": "7069b0fd-0a77-4528-87ba-039fcb24458d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f5ffdb8e-a23b-41fd-a59d-bbdcbd57d2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f131317-927e-4c2f-9cdd-1360810c79c1",
        "cursor": {
          "ref": "47441d79-ef8a-4007-ae19-8325851250ff",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1c2361e2-e7a0-452d-b274-eeda41415b9c"
        },
        "item": {
          "id": "6f131317-927e-4c2f-9cdd-1360810c79c1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4f42d770-bbc7-438f-887d-b4dcdc805c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fc5e6e-9d79-480d-a4bc-bd78c3b856fd",
        "cursor": {
          "ref": "3059eb5a-059c-464e-aaa8-49b55773e654",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "56dff1f0-f62b-426f-a9e6-4341ab29147a"
        },
        "item": {
          "id": "56fc5e6e-9d79-480d-a4bc-bd78c3b856fd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "08f193c1-eec2-4d53-bf5b-25cf4ea59867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30689ee6-9cd2-47d4-bf27-6e49906b0172",
        "cursor": {
          "ref": "8bc86d8b-7fa4-4ca0-9df7-cb0e35d054fd",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "99c2b951-9487-451e-955d-9709c8e21ecb"
        },
        "item": {
          "id": "30689ee6-9cd2-47d4-bf27-6e49906b0172",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ba2fecbd-dae6-49da-a8e6-cd86e7721c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31382ffc-7516-478f-bf56-4278ddbf83dd",
        "cursor": {
          "ref": "30e4ebc2-b303-4f67-9e10-264c918e1a77",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "783cdcb4-3fe2-4b08-98bf-4cb04a0a7752"
        },
        "item": {
          "id": "31382ffc-7516-478f-bf56-4278ddbf83dd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7fff1687-90bc-42cb-a80b-2cd89c550714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fef21cf-0e37-487e-9beb-4c817f45b4a6",
        "cursor": {
          "ref": "6fd1d287-42af-4ae1-9f15-70b0e27f8658",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a04443be-5382-470b-b1d3-bd28121bac95"
        },
        "item": {
          "id": "6fef21cf-0e37-487e-9beb-4c817f45b4a6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c03ad00f-7a55-4a59-83d2-52ef48ad9313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae2ba9d-7b31-47fa-abc5-77e2551cfcaa",
        "cursor": {
          "ref": "db3c89a3-b493-439b-9620-07fcfb8e52b9",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "80165572-0eae-4ed8-b8a6-5c8625d172fd"
        },
        "item": {
          "id": "cae2ba9d-7b31-47fa-abc5-77e2551cfcaa",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f7bdd6c4-d8fc-4d11-9997-78d591a8a782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e566ed-5c7d-493a-ac1b-f1add8a21413",
        "cursor": {
          "ref": "fec417d7-6385-43dc-9e0f-0b4b5dc00344",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "121bc9eb-49aa-43d6-938d-f5749d8d7b4d"
        },
        "item": {
          "id": "d0e566ed-5c7d-493a-ac1b-f1add8a21413",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e4a0918d-2b46-4627-a42d-a982a5969fa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0788a368-3a67-40cc-8d0c-07daa0e78e89",
        "cursor": {
          "ref": "3b163adb-2cf6-4a77-9cff-02509f11325c",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "92e97179-cb91-489a-a7d0-2862542a3b70"
        },
        "item": {
          "id": "0788a368-3a67-40cc-8d0c-07daa0e78e89",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "3bdc8372-236c-4683-a85a-5e999bd07e85",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 68,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86597ed8-69fa-43e8-b941-dac4753b75d7",
        "cursor": {
          "ref": "07dfbc0a-6f8b-4c7f-bb63-4e7d3287b7c7",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f575dc11-1958-40ba-9714-ff122b7e5174"
        },
        "item": {
          "id": "86597ed8-69fa-43e8-b941-dac4753b75d7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "59a05390-0271-423c-8ec6-3d84c92f42f0",
          "status": "OK",
          "code": 200,
          "responseTime": 296,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "209ebc99-d06e-4bfa-81b3-602abcc68885",
        "cursor": {
          "ref": "bfeb1f30-f2e4-480c-a889-a8e81ea31997",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "66721a86-7380-4b04-a1ec-c2fd2c8ac10b"
        },
        "item": {
          "id": "209ebc99-d06e-4bfa-81b3-602abcc68885",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6a7fddbf-0023-4e96-8ed9-df5cb4433b58",
          "status": "OK",
          "code": 200,
          "responseTime": 652,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0ea327-fc6f-4915-9e66-8c92b0a8be29",
        "cursor": {
          "ref": "45312516-c7a5-478d-9559-8bc84e5a747c",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "cb9feaef-35b5-4fce-8392-9122c79a67c8"
        },
        "item": {
          "id": "da0ea327-fc6f-4915-9e66-8c92b0a8be29",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "140ec757-6885-4fea-97f1-0dc11d6b56dd",
          "status": "OK",
          "code": 200,
          "responseTime": 557,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "798b6654-ce5b-4008-85e0-0e4e3970917a",
        "cursor": {
          "ref": "e68cbfea-8788-4144-9cbd-fb44ab9c44af",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8701364e-619e-433e-934d-31905e4b529c"
        },
        "item": {
          "id": "798b6654-ce5b-4008-85e0-0e4e3970917a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "78e1c3a0-67d1-4350-b4dc-e123a9fd003f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798b6654-ce5b-4008-85e0-0e4e3970917a",
        "cursor": {
          "ref": "e68cbfea-8788-4144-9cbd-fb44ab9c44af",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8701364e-619e-433e-934d-31905e4b529c"
        },
        "item": {
          "id": "798b6654-ce5b-4008-85e0-0e4e3970917a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "78e1c3a0-67d1-4350-b4dc-e123a9fd003f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798b6654-ce5b-4008-85e0-0e4e3970917a",
        "cursor": {
          "ref": "e68cbfea-8788-4144-9cbd-fb44ab9c44af",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8701364e-619e-433e-934d-31905e4b529c"
        },
        "item": {
          "id": "798b6654-ce5b-4008-85e0-0e4e3970917a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "78e1c3a0-67d1-4350-b4dc-e123a9fd003f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea6246a-0d54-4799-a183-7baa30e826f2",
        "cursor": {
          "ref": "e4b39376-569a-40da-8a70-c624e46055a2",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8dfa3e27-dab5-46e7-9a7b-3deb33bf00f5"
        },
        "item": {
          "id": "fea6246a-0d54-4799-a183-7baa30e826f2",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ffdd2735-b07d-4602-a1f0-9e1974ef6a23",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b4a925-ad1b-4c03-abbb-fee08f22dd6c",
        "cursor": {
          "ref": "d1326021-850e-4dbe-b975-71cb88e4ecb1",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e9d10374-227f-4114-bac4-3b7d57266219"
        },
        "item": {
          "id": "88b4a925-ad1b-4c03-abbb-fee08f22dd6c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b086e321-27a7-4ef1-80b5-7843b52ce301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "88b4a925-ad1b-4c03-abbb-fee08f22dd6c",
        "cursor": {
          "ref": "d1326021-850e-4dbe-b975-71cb88e4ecb1",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e9d10374-227f-4114-bac4-3b7d57266219"
        },
        "item": {
          "id": "88b4a925-ad1b-4c03-abbb-fee08f22dd6c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b086e321-27a7-4ef1-80b5-7843b52ce301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "61e8ba2f-39b9-4a61-a897-79cbf3311e8f",
        "cursor": {
          "ref": "4b1bb8f9-220e-4414-99e4-a1c5fd43e565",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "598a4ebf-4477-4a7a-af15-baeabb0b3744"
        },
        "item": {
          "id": "61e8ba2f-39b9-4a61-a897-79cbf3311e8f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "51a94947-e2dd-4894-ba84-b38ab6769a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "f210483b-db50-4754-b2ab-db902e0e832f",
        "cursor": {
          "ref": "c879311f-2e3e-4a30-bdbf-d56ababd6ffd",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "75455b2c-e809-4ef6-bbe7-d567cb6af8f8"
        },
        "item": {
          "id": "f210483b-db50-4754-b2ab-db902e0e832f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "83f36a0d-cdcc-4c78-8e89-5949746e1870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f210483b-db50-4754-b2ab-db902e0e832f",
        "cursor": {
          "ref": "c879311f-2e3e-4a30-bdbf-d56ababd6ffd",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "75455b2c-e809-4ef6-bbe7-d567cb6af8f8"
        },
        "item": {
          "id": "f210483b-db50-4754-b2ab-db902e0e832f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "83f36a0d-cdcc-4c78-8e89-5949746e1870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "00c0949e-a1d9-4cc9-b066-55c11d960584",
        "cursor": {
          "ref": "7da69b55-6e8e-42b0-a150-42b40d58f5fe",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "09d405e6-72cf-48e3-99dc-31bc7ee444a8"
        },
        "item": {
          "id": "00c0949e-a1d9-4cc9-b066-55c11d960584",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6f05ba89-e186-4e48-b97c-4d74b7802dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}